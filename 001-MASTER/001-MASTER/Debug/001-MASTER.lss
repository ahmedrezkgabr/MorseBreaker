
001-MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000713a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  0000713a  000071ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d4  008001a4  008001a4  00007312  2**0
                  ALLOC
  3 .stab         000043d4  00000000  00000000  00007314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001664  00000000  00000000  0000b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ce  00000000  00000000  0000cecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002bc9  00000000  00000000  0000d09a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001293  00000000  00000000  0000fc63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012d1  00000000  00000000  00010ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000121c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031b  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021c0  00000000  00000000  00012683  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00014843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d6 2e 	jmp	0x5dac	; 0x5dac <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f1 e7       	ldi	r31, 0x71	; 113
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 34 	call	0x6982	; 0x6982 <main>
      8a:	0c 94 9b 38 	jmp	0x7136	; 0x7136 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 ae 13 	call	0x275c	; 0x275c <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 26 12 	call	0x244c	; 0x244c <__subsf3>
      be:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__divdi3>:
      ea:	a2 e7       	ldi	r26, 0x72	; 114
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__prologue_saves__>
      f6:	98 2e       	mov	r9, r24
      f8:	89 2e       	mov	r8, r25
      fa:	71 2e       	mov	r7, r17
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	fe 01       	movw	r30, r28
     100:	31 96       	adiw	r30, 0x01	; 1
     102:	df 01       	movw	r26, r30
     104:	68 2e       	mov	r6, r24
     106:	1d 92       	st	X+, r1
     108:	6a 94       	dec	r6
     10a:	e9 f7       	brne	.-6      	; 0x106 <__divdi3+0x1c>
     10c:	29 83       	std	Y+1, r18	; 0x01
     10e:	3a 83       	std	Y+2, r19	; 0x02
     110:	4b 83       	std	Y+3, r20	; 0x03
     112:	5c 83       	std	Y+4, r21	; 0x04
     114:	6d 83       	std	Y+5, r22	; 0x05
     116:	7e 83       	std	Y+6, r23	; 0x06
     118:	9f 82       	std	Y+7, r9	; 0x07
     11a:	98 87       	std	Y+8, r25	; 0x08
     11c:	fe 01       	movw	r30, r28
     11e:	39 96       	adiw	r30, 0x09	; 9
     120:	df 01       	movw	r26, r30
     122:	1d 92       	st	X+, r1
     124:	8a 95       	dec	r24
     126:	e9 f7       	brne	.-6      	; 0x122 <__divdi3+0x38>
     128:	a9 86       	std	Y+9, r10	; 0x09
     12a:	ba 86       	std	Y+10, r11	; 0x0a
     12c:	cb 86       	std	Y+11, r12	; 0x0b
     12e:	dc 86       	std	Y+12, r13	; 0x0c
     130:	ed 86       	std	Y+13, r14	; 0x0d
     132:	fe 86       	std	Y+14, r15	; 0x0e
     134:	0f 87       	std	Y+15, r16	; 0x0f
     136:	18 8b       	std	Y+16, r17	; 0x10
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	9e 81       	ldd	r25, Y+6	; 0x06
     13c:	af 81       	ldd	r26, Y+7	; 0x07
     13e:	b8 85       	ldd	r27, Y+8	; 0x08
     140:	b7 fd       	sbrc	r27, 7
     142:	07 c0       	rjmp	.+14     	; 0x152 <__divdi3+0x68>
     144:	e1 96       	adiw	r28, 0x31	; 49
     146:	1c ae       	std	Y+60, r1	; 0x3c
     148:	1d ae       	std	Y+61, r1	; 0x3d
     14a:	1e ae       	std	Y+62, r1	; 0x3e
     14c:	1f ae       	std	Y+63, r1	; 0x3f
     14e:	e1 97       	sbiw	r28, 0x31	; 49
     150:	64 c0       	rjmp	.+200    	; 0x21a <__divdi3+0x130>
     152:	21 95       	neg	r18
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	12 16       	cp	r1, r18
     158:	08 f0       	brcs	.+2      	; 0x15c <__divdi3+0x72>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	31 95       	neg	r19
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	13 16       	cp	r1, r19
     162:	08 f0       	brcs	.+2      	; 0x166 <__divdi3+0x7c>
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	b3 2f       	mov	r27, r19
     168:	b8 1b       	sub	r27, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	3b 17       	cp	r19, r27
     16e:	08 f0       	brcs	.+2      	; 0x172 <__divdi3+0x88>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	98 2b       	or	r25, r24
     174:	41 95       	neg	r20
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	14 16       	cp	r1, r20
     17a:	08 f0       	brcs	.+2      	; 0x17e <__divdi3+0x94>
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a4 2f       	mov	r26, r20
     180:	a9 1b       	sub	r26, r25
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	4a 17       	cp	r20, r26
     186:	08 f0       	brcs	.+2      	; 0x18a <__divdi3+0xa0>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	38 2b       	or	r19, r24
     18c:	51 95       	neg	r21
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	15 16       	cp	r1, r21
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0xac>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	f5 2f       	mov	r31, r21
     198:	f3 1b       	sub	r31, r19
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	5f 17       	cp	r21, r31
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__divdi3+0xb8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	98 2b       	or	r25, r24
     1a4:	61 95       	neg	r22
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	16 16       	cp	r1, r22
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <__divdi3+0xc4>
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	e6 2f       	mov	r30, r22
     1b0:	e9 1b       	sub	r30, r25
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	6e 17       	cp	r22, r30
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <__divdi3+0xd0>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	38 2b       	or	r19, r24
     1bc:	71 95       	neg	r23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	17 16       	cp	r1, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__divdi3+0xdc>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	57 2f       	mov	r21, r23
     1c8:	53 1b       	sub	r21, r19
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	75 17       	cp	r23, r21
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__divdi3+0xe8>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	48 2b       	or	r20, r24
     1d4:	89 2d       	mov	r24, r9
     1d6:	81 95       	neg	r24
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	18 16       	cp	r1, r24
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__divdi3+0xf6>
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 2e       	mov	r6, r24
     1e2:	64 1a       	sub	r6, r20
     1e4:	46 2d       	mov	r20, r6
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	86 15       	cp	r24, r6
     1ea:	08 f0       	brcs	.+2      	; 0x1ee <__divdi3+0x104>
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	93 2b       	or	r25, r19
     1f0:	88 2d       	mov	r24, r8
     1f2:	81 95       	neg	r24
     1f4:	89 1b       	sub	r24, r25
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	ba 83       	std	Y+2, r27	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	fc 83       	std	Y+4, r31	; 0x04
     1fe:	ed 83       	std	Y+5, r30	; 0x05
     200:	5e 83       	std	Y+6, r21	; 0x06
     202:	4f 83       	std	Y+7, r20	; 0x07
     204:	88 87       	std	Y+8, r24	; 0x08
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	2c af       	std	Y+60, r18	; 0x3c
     212:	3d af       	std	Y+61, r19	; 0x3d
     214:	4e af       	std	Y+62, r20	; 0x3e
     216:	5f af       	std	Y+63, r21	; 0x3f
     218:	e1 97       	sbiw	r28, 0x31	; 49
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	af 85       	ldd	r26, Y+15	; 0x0f
     220:	b8 89       	ldd	r27, Y+16	; 0x10
     222:	b7 ff       	sbrs	r27, 7
     224:	6a c0       	rjmp	.+212    	; 0x2fa <__divdi3+0x210>
     226:	e1 96       	adiw	r28, 0x31	; 49
     228:	4c ad       	ldd	r20, Y+60	; 0x3c
     22a:	5d ad       	ldd	r21, Y+61	; 0x3d
     22c:	6e ad       	ldd	r22, Y+62	; 0x3e
     22e:	7f ad       	ldd	r23, Y+63	; 0x3f
     230:	e1 97       	sbiw	r28, 0x31	; 49
     232:	40 95       	com	r20
     234:	50 95       	com	r21
     236:	60 95       	com	r22
     238:	70 95       	com	r23
     23a:	e1 96       	adiw	r28, 0x31	; 49
     23c:	4c af       	std	Y+60, r20	; 0x3c
     23e:	5d af       	std	Y+61, r21	; 0x3d
     240:	6e af       	std	Y+62, r22	; 0x3e
     242:	7f af       	std	Y+63, r23	; 0x3f
     244:	e1 97       	sbiw	r28, 0x31	; 49
     246:	a1 94       	neg	r10
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	1a 14       	cp	r1, r10
     24c:	08 f0       	brcs	.+2      	; 0x250 <__divdi3+0x166>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	b1 94       	neg	r11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	1b 14       	cp	r1, r11
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x170>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b 2d       	mov	r22, r11
     25c:	68 1b       	sub	r22, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	b6 16       	cp	r11, r22
     262:	08 f0       	brcs	.+2      	; 0x266 <__divdi3+0x17c>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	98 2b       	or	r25, r24
     268:	c1 94       	neg	r12
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	1c 14       	cp	r1, r12
     26e:	08 f0       	brcs	.+2      	; 0x272 <__divdi3+0x188>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	5c 2d       	mov	r21, r12
     274:	59 1b       	sub	r21, r25
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	c5 16       	cp	r12, r21
     27a:	08 f0       	brcs	.+2      	; 0x27e <__divdi3+0x194>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	28 2b       	or	r18, r24
     280:	d1 94       	neg	r13
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	1d 14       	cp	r1, r13
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1a0>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	4d 2d       	mov	r20, r13
     28c:	42 1b       	sub	r20, r18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	d4 16       	cp	r13, r20
     292:	08 f0       	brcs	.+2      	; 0x296 <__divdi3+0x1ac>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	98 2b       	or	r25, r24
     298:	e1 94       	neg	r14
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	1e 14       	cp	r1, r14
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <__divdi3+0x1b8>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	3e 2d       	mov	r19, r14
     2a4:	39 1b       	sub	r19, r25
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	e3 16       	cp	r14, r19
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__divdi3+0x1c4>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	28 2b       	or	r18, r24
     2b0:	f1 94       	neg	r15
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	1f 14       	cp	r1, r15
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__divdi3+0x1d0>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	7f 2d       	mov	r23, r15
     2bc:	72 1b       	sub	r23, r18
     2be:	27 2f       	mov	r18, r23
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	f7 16       	cp	r15, r23
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__divdi3+0x1de>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	98 2b       	or	r25, r24
     2ca:	01 95       	neg	r16
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	10 16       	cp	r1, r16
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__divdi3+0x1ea>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	80 2f       	mov	r24, r16
     2d6:	89 1b       	sub	r24, r25
     2d8:	98 2f       	mov	r25, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	09 17       	cp	r16, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__divdi3+0x1f8>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	18 2b       	or	r17, r24
     2e4:	87 2d       	mov	r24, r7
     2e6:	81 95       	neg	r24
     2e8:	81 1b       	sub	r24, r17
     2ea:	a9 86       	std	Y+9, r10	; 0x09
     2ec:	6a 87       	std	Y+10, r22	; 0x0a
     2ee:	5b 87       	std	Y+11, r21	; 0x0b
     2f0:	4c 87       	std	Y+12, r20	; 0x0c
     2f2:	3d 87       	std	Y+13, r19	; 0x0d
     2f4:	2e 87       	std	Y+14, r18	; 0x0e
     2f6:	9f 87       	std	Y+15, r25	; 0x0f
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	4c 81       	ldd	r20, Y+4	; 0x04
     302:	5d 81       	ldd	r21, Y+5	; 0x05
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	a8 85       	ldd	r26, Y+8	; 0x08
     30a:	b9 85       	ldd	r27, Y+9	; 0x09
     30c:	1a 85       	ldd	r17, Y+10	; 0x0a
     30e:	0b 85       	ldd	r16, Y+11	; 0x0b
     310:	fc 84       	ldd	r15, Y+12	; 0x0c
     312:	ed 84       	ldd	r14, Y+13	; 0x0d
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	cf 84       	ldd	r12, Y+15	; 0x0f
     318:	b8 88       	ldd	r11, Y+16	; 0x10
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	e1 e1       	ldi	r30, 0x11	; 17
     31e:	8e 2e       	mov	r8, r30
     320:	91 2c       	mov	r9, r1
     322:	8c 0e       	add	r8, r28
     324:	9d 1e       	adc	r9, r29
     326:	f4 01       	movw	r30, r8
     328:	68 2e       	mov	r6, r24
     32a:	11 92       	st	Z+, r1
     32c:	6a 94       	dec	r6
     32e:	e9 f7       	brne	.-6      	; 0x32a <__divdi3+0x240>
     330:	99 8b       	std	Y+17, r25	; 0x11
     332:	2a 8b       	std	Y+18, r18	; 0x12
     334:	3b 8b       	std	Y+19, r19	; 0x13
     336:	4c 8b       	std	Y+20, r20	; 0x14
     338:	5d 8b       	std	Y+21, r21	; 0x15
     33a:	6e 8b       	std	Y+22, r22	; 0x16
     33c:	7f 8b       	std	Y+23, r23	; 0x17
     33e:	a8 8f       	std	Y+24, r26	; 0x18
     340:	9e 01       	movw	r18, r28
     342:	27 5e       	subi	r18, 0xE7	; 231
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	11 92       	st	Z+, r1
     34a:	8a 95       	dec	r24
     34c:	e9 f7       	brne	.-6      	; 0x348 <__divdi3+0x25e>
     34e:	b9 8f       	std	Y+25, r27	; 0x19
     350:	1a 8f       	std	Y+26, r17	; 0x1a
     352:	0b 8f       	std	Y+27, r16	; 0x1b
     354:	fc 8e       	std	Y+28, r15	; 0x1c
     356:	ed 8e       	std	Y+29, r14	; 0x1d
     358:	de 8e       	std	Y+30, r13	; 0x1e
     35a:	cf 8e       	std	Y+31, r12	; 0x1f
     35c:	b8 a2       	std	Y+32, r11	; 0x20
     35e:	29 8c       	ldd	r2, Y+25	; 0x19
     360:	3a 8c       	ldd	r3, Y+26	; 0x1a
     362:	4b 8c       	ldd	r4, Y+27	; 0x1b
     364:	5c 8c       	ldd	r5, Y+28	; 0x1c
     366:	ed 8c       	ldd	r14, Y+29	; 0x1d
     368:	fe 8c       	ldd	r15, Y+30	; 0x1e
     36a:	0f 8d       	ldd	r16, Y+31	; 0x1f
     36c:	18 a1       	ldd	r17, Y+32	; 0x20
     36e:	69 88       	ldd	r6, Y+17	; 0x11
     370:	7a 88       	ldd	r7, Y+18	; 0x12
     372:	8b 88       	ldd	r8, Y+19	; 0x13
     374:	9c 88       	ldd	r9, Y+20	; 0x14
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	6c ae       	std	Y+60, r6	; 0x3c
     37a:	7d ae       	std	Y+61, r7	; 0x3d
     37c:	8e ae       	std	Y+62, r8	; 0x3e
     37e:	9f ae       	std	Y+63, r9	; 0x3f
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	6d 88       	ldd	r6, Y+21	; 0x15
     384:	7e 88       	ldd	r7, Y+22	; 0x16
     386:	8f 88       	ldd	r8, Y+23	; 0x17
     388:	98 8c       	ldd	r9, Y+24	; 0x18
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__divdi3+0x2ac>
     394:	d9 c3       	rjmp	.+1970   	; 0xb48 <__stack+0x2e9>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__divdi3+0x2b8>
     3a0:	57 c1       	rjmp	.+686    	; 0x650 <__divdi3+0x566>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__divdi3+0x2ec>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__divdi3+0x2e4>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__divdi3+0x2e4>
     3c2:	48 e0       	ldi	r20, 0x08	; 8
     3c4:	e4 2e       	mov	r14, r20
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__divdi3+0x314>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__divdi3+0x314>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	22 16       	cp	r2, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	32 06       	cpc	r3, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	42 06       	cpc	r4, r18
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	52 06       	cpc	r5, r18
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__divdi3+0x30a>
     3e8:	38 e1       	ldi	r19, 0x18	; 24
     3ea:	e3 2e       	mov	r14, r19
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__divdi3+0x314>
     3f4:	20 e1       	ldi	r18, 0x10	; 16
     3f6:	e2 2e       	mov	r14, r18
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__divdi3+0x324>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__divdi3+0x31c>
     412:	8f 58       	subi	r24, 0x8F	; 143
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	7c 01       	movw	r14, r24
     42c:	8d 01       	movw	r16, r26
     42e:	e2 1a       	sub	r14, r18
     430:	f1 08       	sbc	r15, r1
     432:	01 09       	sbc	r16, r1
     434:	11 09       	sbc	r17, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	01 05       	cpc	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <__divdi3+0x3ca>
     440:	0e 2c       	mov	r0, r14
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x362>
     444:	22 0c       	add	r2, r2
     446:	33 1c       	adc	r3, r3
     448:	44 1c       	adc	r4, r4
     44a:	55 1c       	adc	r5, r5
     44c:	0a 94       	dec	r0
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x35a>
     450:	a4 01       	movw	r20, r8
     452:	93 01       	movw	r18, r6
     454:	0e 2c       	mov	r0, r14
     456:	04 c0       	rjmp	.+8      	; 0x460 <__divdi3+0x376>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	44 1f       	adc	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <__divdi3+0x36e>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8e 19       	sub	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	6c ac       	ldd	r6, Y+60	; 0x3c
     470:	7d ac       	ldd	r7, Y+61	; 0x3d
     472:	8e ac       	ldd	r8, Y+62	; 0x3e
     474:	9f ac       	ldd	r9, Y+63	; 0x3f
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	04 c0       	rjmp	.+8      	; 0x482 <__divdi3+0x398>
     47a:	96 94       	lsr	r9
     47c:	87 94       	ror	r8
     47e:	77 94       	ror	r7
     480:	67 94       	ror	r6
     482:	8a 95       	dec	r24
     484:	d2 f7       	brpl	.-12     	; 0x47a <__divdi3+0x390>
     486:	62 2a       	or	r6, r18
     488:	73 2a       	or	r7, r19
     48a:	84 2a       	or	r8, r20
     48c:	95 2a       	or	r9, r21
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	ac ac       	ldd	r10, Y+60	; 0x3c
     492:	bd ac       	ldd	r11, Y+61	; 0x3d
     494:	ce ac       	ldd	r12, Y+62	; 0x3e
     496:	df ac       	ldd	r13, Y+63	; 0x3f
     498:	21 97       	sbiw	r28, 0x01	; 1
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__divdi3+0x3ba>
     49c:	aa 0c       	add	r10, r10
     49e:	bb 1c       	adc	r11, r11
     4a0:	cc 1c       	adc	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ea 94       	dec	r14
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <__divdi3+0x3b2>
     4a8:	21 96       	adiw	r28, 0x01	; 1
     4aa:	ac ae       	std	Y+60, r10	; 0x3c
     4ac:	bd ae       	std	Y+61, r11	; 0x3d
     4ae:	ce ae       	std	Y+62, r12	; 0x3e
     4b0:	df ae       	std	Y+63, r13	; 0x3f
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	62 01       	movw	r12, r4
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	29 96       	adiw	r28, 0x09	; 9
     4bc:	cc ae       	std	Y+60, r12	; 0x3c
     4be:	dd ae       	std	Y+61, r13	; 0x3d
     4c0:	ee ae       	std	Y+62, r14	; 0x3e
     4c2:	ff ae       	std	Y+63, r15	; 0x3f
     4c4:	29 97       	sbiw	r28, 0x09	; 9
     4c6:	92 01       	movw	r18, r4
     4c8:	81 01       	movw	r16, r2
     4ca:	20 70       	andi	r18, 0x00	; 0
     4cc:	30 70       	andi	r19, 0x00	; 0
     4ce:	2d 96       	adiw	r28, 0x0d	; 13
     4d0:	0c af       	std	Y+60, r16	; 0x3c
     4d2:	1d af       	std	Y+61, r17	; 0x3d
     4d4:	2e af       	std	Y+62, r18	; 0x3e
     4d6:	3f af       	std	Y+63, r19	; 0x3f
     4d8:	2d 97       	sbiw	r28, 0x0d	; 13
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     4e6:	7b 01       	movw	r14, r22
     4e8:	8c 01       	movw	r16, r24
     4ea:	c4 01       	movw	r24, r8
     4ec:	b3 01       	movw	r22, r6
     4ee:	29 96       	adiw	r28, 0x09	; 9
     4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
     4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
     4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     4f8:	29 97       	sbiw	r28, 0x09	; 9
     4fa:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     4fe:	c9 01       	movw	r24, r18
     500:	da 01       	movw	r26, r20
     502:	3c 01       	movw	r6, r24
     504:	4d 01       	movw	r8, r26
     506:	c4 01       	movw	r24, r8
     508:	b3 01       	movw	r22, r6
     50a:	2d 96       	adiw	r28, 0x0d	; 13
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	2d 97       	sbiw	r28, 0x0d	; 13
     516:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	ac ac       	ldd	r10, Y+60	; 0x3c
     528:	bd ac       	ldd	r11, Y+61	; 0x3d
     52a:	ce ac       	ldd	r12, Y+62	; 0x3e
     52c:	df ac       	ldd	r13, Y+63	; 0x3f
     52e:	21 97       	sbiw	r28, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	aa 27       	eor	r26, r26
     534:	bb 27       	eor	r27, r27
     536:	57 01       	movw	r10, r14
     538:	68 01       	movw	r12, r16
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	a2 16       	cp	r10, r18
     544:	b3 06       	cpc	r11, r19
     546:	c4 06       	cpc	r12, r20
     548:	d5 06       	cpc	r13, r21
     54a:	e0 f4       	brcc	.+56     	; 0x584 <__divdi3+0x49a>
     54c:	08 94       	sec
     54e:	61 08       	sbc	r6, r1
     550:	71 08       	sbc	r7, r1
     552:	81 08       	sbc	r8, r1
     554:	91 08       	sbc	r9, r1
     556:	a2 0c       	add	r10, r2
     558:	b3 1c       	adc	r11, r3
     55a:	c4 1c       	adc	r12, r4
     55c:	d5 1c       	adc	r13, r5
     55e:	a2 14       	cp	r10, r2
     560:	b3 04       	cpc	r11, r3
     562:	c4 04       	cpc	r12, r4
     564:	d5 04       	cpc	r13, r5
     566:	70 f0       	brcs	.+28     	; 0x584 <__divdi3+0x49a>
     568:	a2 16       	cp	r10, r18
     56a:	b3 06       	cpc	r11, r19
     56c:	c4 06       	cpc	r12, r20
     56e:	d5 06       	cpc	r13, r21
     570:	48 f4       	brcc	.+18     	; 0x584 <__divdi3+0x49a>
     572:	08 94       	sec
     574:	61 08       	sbc	r6, r1
     576:	71 08       	sbc	r7, r1
     578:	81 08       	sbc	r8, r1
     57a:	91 08       	sbc	r9, r1
     57c:	a2 0c       	add	r10, r2
     57e:	b3 1c       	adc	r11, r3
     580:	c4 1c       	adc	r12, r4
     582:	d5 1c       	adc	r13, r5
     584:	a2 1a       	sub	r10, r18
     586:	b3 0a       	sbc	r11, r19
     588:	c4 0a       	sbc	r12, r20
     58a:	d5 0a       	sbc	r13, r21
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	29 96       	adiw	r28, 0x09	; 9
     592:	2c ad       	ldd	r18, Y+60	; 0x3c
     594:	3d ad       	ldd	r19, Y+61	; 0x3d
     596:	4e ad       	ldd	r20, Y+62	; 0x3e
     598:	5f ad       	ldd	r21, Y+63	; 0x3f
     59a:	29 97       	sbiw	r28, 0x09	; 9
     59c:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
     5a4:	c6 01       	movw	r24, r12
     5a6:	b5 01       	movw	r22, r10
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	2c ad       	ldd	r18, Y+60	; 0x3c
     5ac:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ae:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5b2:	29 97       	sbiw	r28, 0x09	; 9
     5b4:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     5b8:	c9 01       	movw	r24, r18
     5ba:	da 01       	movw	r26, r20
     5bc:	5c 01       	movw	r10, r24
     5be:	6d 01       	movw	r12, r26
     5c0:	c6 01       	movw	r24, r12
     5c2:	b5 01       	movw	r22, r10
     5c4:	2d 96       	adiw	r28, 0x0d	; 13
     5c6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     5cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ce:	2d 97       	sbiw	r28, 0x0d	; 13
     5d0:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	87 01       	movw	r16, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	ee 24       	eor	r14, r14
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e2:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e4:	ae ad       	ldd	r26, Y+62	; 0x3e
     5e6:	bf ad       	ldd	r27, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	e8 2a       	or	r14, r24
     5f0:	f9 2a       	or	r15, r25
     5f2:	0a 2b       	or	r16, r26
     5f4:	1b 2b       	or	r17, r27
     5f6:	e2 16       	cp	r14, r18
     5f8:	f3 06       	cpc	r15, r19
     5fa:	04 07       	cpc	r16, r20
     5fc:	15 07       	cpc	r17, r21
     5fe:	c0 f4       	brcc	.+48     	; 0x630 <__divdi3+0x546>
     600:	08 94       	sec
     602:	a1 08       	sbc	r10, r1
     604:	b1 08       	sbc	r11, r1
     606:	c1 08       	sbc	r12, r1
     608:	d1 08       	sbc	r13, r1
     60a:	e2 0c       	add	r14, r2
     60c:	f3 1c       	adc	r15, r3
     60e:	04 1d       	adc	r16, r4
     610:	15 1d       	adc	r17, r5
     612:	e2 14       	cp	r14, r2
     614:	f3 04       	cpc	r15, r3
     616:	04 05       	cpc	r16, r4
     618:	15 05       	cpc	r17, r5
     61a:	50 f0       	brcs	.+20     	; 0x630 <__divdi3+0x546>
     61c:	e2 16       	cp	r14, r18
     61e:	f3 06       	cpc	r15, r19
     620:	04 07       	cpc	r16, r20
     622:	15 07       	cpc	r17, r21
     624:	28 f4       	brcc	.+10     	; 0x630 <__divdi3+0x546>
     626:	08 94       	sec
     628:	a1 08       	sbc	r10, r1
     62a:	b1 08       	sbc	r11, r1
     62c:	c1 08       	sbc	r12, r1
     62e:	d1 08       	sbc	r13, r1
     630:	d3 01       	movw	r26, r6
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	86 01       	movw	r16, r12
     638:	75 01       	movw	r14, r10
     63a:	e8 2a       	or	r14, r24
     63c:	f9 2a       	or	r15, r25
     63e:	0a 2b       	or	r16, r26
     640:	1b 2b       	or	r17, r27
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	ec ae       	std	Y+60, r14	; 0x3c
     646:	fd ae       	std	Y+61, r15	; 0x3d
     648:	0e af       	std	Y+62, r16	; 0x3e
     64a:	1f af       	std	Y+63, r17	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	eb c4       	rjmp	.+2518   	; 0x1026 <__stack+0x7c7>
     650:	21 14       	cp	r2, r1
     652:	31 04       	cpc	r3, r1
     654:	41 04       	cpc	r4, r1
     656:	51 04       	cpc	r5, r1
     658:	71 f4       	brne	.+28     	; 0x676 <__divdi3+0x58c>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	1c 01       	movw	r2, r24
     674:	2d 01       	movw	r4, r26
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	20 16       	cp	r2, r16
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	30 06       	cpc	r3, r16
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	40 06       	cpc	r4, r16
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	50 06       	cpc	r5, r16
     686:	88 f4       	brcc	.+34     	; 0x6aa <__divdi3+0x5c0>
     688:	1f ef       	ldi	r17, 0xFF	; 255
     68a:	21 16       	cp	r2, r17
     68c:	31 04       	cpc	r3, r1
     68e:	41 04       	cpc	r4, r1
     690:	51 04       	cpc	r5, r1
     692:	31 f0       	breq	.+12     	; 0x6a0 <__divdi3+0x5b6>
     694:	28 f0       	brcs	.+10     	; 0x6a0 <__divdi3+0x5b6>
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <__divdi3+0x5e4>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__divdi3+0x5e4>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	22 16       	cp	r2, r18
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	32 06       	cpc	r3, r18
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	42 06       	cpc	r4, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	52 06       	cpc	r5, r18
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <__divdi3+0x5dc>
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divdi3+0x5e4>
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	d2 01       	movw	r26, r4
     6d0:	c1 01       	movw	r24, r2
     6d2:	04 2e       	mov	r0, r20
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__divdi3+0x5f4>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__divdi3+0x5ec>
     6e2:	8f 58       	subi	r24, 0x8F	; 143
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	dc 01       	movw	r26, r24
     6e8:	2c 91       	ld	r18, X
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	ee 2e       	mov	r14, r30
     6ee:	f1 2c       	mov	r15, r1
     6f0:	01 2d       	mov	r16, r1
     6f2:	11 2d       	mov	r17, r1
     6f4:	d8 01       	movw	r26, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	84 1b       	sub	r24, r20
     6fa:	95 0b       	sbc	r25, r21
     6fc:	a6 0b       	sbc	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	82 1b       	sub	r24, r18
     702:	91 09       	sbc	r25, r1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	61 f4       	brne	.+24     	; 0x728 <__divdi3+0x63e>
     710:	64 01       	movw	r12, r8
     712:	53 01       	movw	r10, r6
     714:	a2 18       	sub	r10, r2
     716:	b3 08       	sbc	r11, r3
     718:	c4 08       	sbc	r12, r4
     71a:	d5 08       	sbc	r13, r5
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	63 2e       	mov	r6, r19
     720:	71 2c       	mov	r7, r1
     722:	81 2c       	mov	r8, r1
     724:	91 2c       	mov	r9, r1
     726:	24 c1       	rjmp	.+584    	; 0x970 <__stack+0x111>
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	08 2e       	mov	r0, r24
     730:	04 c0       	rjmp	.+8      	; 0x73a <__divdi3+0x650>
     732:	22 0c       	add	r2, r2
     734:	33 1c       	adc	r3, r3
     736:	44 1c       	adc	r4, r4
     738:	55 1c       	adc	r5, r5
     73a:	0a 94       	dec	r0
     73c:	d2 f7       	brpl	.-12     	; 0x732 <__divdi3+0x648>
     73e:	ee 2d       	mov	r30, r14
     740:	e8 1b       	sub	r30, r24
     742:	64 01       	movw	r12, r8
     744:	53 01       	movw	r10, r6
     746:	0e 2e       	mov	r0, r30
     748:	04 c0       	rjmp	.+8      	; 0x752 <__divdi3+0x668>
     74a:	d6 94       	lsr	r13
     74c:	c7 94       	ror	r12
     74e:	b7 94       	ror	r11
     750:	a7 94       	ror	r10
     752:	0a 94       	dec	r0
     754:	d2 f7       	brpl	.-12     	; 0x74a <__divdi3+0x660>
     756:	a4 01       	movw	r20, r8
     758:	93 01       	movw	r18, r6
     75a:	e3 96       	adiw	r28, 0x33	; 51
     75c:	0f ac       	ldd	r0, Y+63	; 0x3f
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	04 c0       	rjmp	.+8      	; 0x76a <__divdi3+0x680>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__divdi3+0x678>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	6c ac       	ldd	r6, Y+60	; 0x3c
     772:	7d ac       	ldd	r7, Y+61	; 0x3d
     774:	8e ac       	ldd	r8, Y+62	; 0x3e
     776:	9f ac       	ldd	r9, Y+63	; 0x3f
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	0e 2e       	mov	r0, r30
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__divdi3+0x69c>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <__divdi3+0x694>
     78a:	84 01       	movw	r16, r8
     78c:	73 01       	movw	r14, r6
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	04 2b       	or	r16, r20
     794:	15 2b       	or	r17, r21
     796:	e9 ae       	std	Y+57, r14	; 0x39
     798:	fa ae       	std	Y+58, r15	; 0x3a
     79a:	0b af       	std	Y+59, r16	; 0x3b
     79c:	1c af       	std	Y+60, r17	; 0x3c
     79e:	32 01       	movw	r6, r4
     7a0:	88 24       	eor	r8, r8
     7a2:	99 24       	eor	r9, r9
     7a4:	92 01       	movw	r18, r4
     7a6:	81 01       	movw	r16, r2
     7a8:	20 70       	andi	r18, 0x00	; 0
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	61 96       	adiw	r28, 0x11	; 17
     7ae:	0c af       	std	Y+60, r16	; 0x3c
     7b0:	1d af       	std	Y+61, r17	; 0x3d
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	3f af       	std	Y+63, r19	; 0x3f
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	a4 01       	movw	r20, r8
     7be:	93 01       	movw	r18, r6
     7c0:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	c6 01       	movw	r24, r12
     7ca:	b5 01       	movw	r22, r10
     7cc:	a4 01       	movw	r20, r8
     7ce:	93 01       	movw	r18, r6
     7d0:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	8c af       	std	Y+60, r24	; 0x3c
     7dc:	9d af       	std	Y+61, r25	; 0x3d
     7de:	ae af       	std	Y+62, r26	; 0x3e
     7e0:	bf af       	std	Y+63, r27	; 0x3f
     7e2:	65 97       	sbiw	r28, 0x15	; 21
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	61 96       	adiw	r28, 0x11	; 17
     7ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f2:	61 97       	sbiw	r28, 0x11	; 17
     7f4:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	87 01       	movw	r16, r14
     7fe:	ff 24       	eor	r15, r15
     800:	ee 24       	eor	r14, r14
     802:	a9 ac       	ldd	r10, Y+57	; 0x39
     804:	ba ac       	ldd	r11, Y+58	; 0x3a
     806:	cb ac       	ldd	r12, Y+59	; 0x3b
     808:	dc ac       	ldd	r13, Y+60	; 0x3c
     80a:	c6 01       	movw	r24, r12
     80c:	aa 27       	eor	r26, r26
     80e:	bb 27       	eor	r27, r27
     810:	5c 01       	movw	r10, r24
     812:	6d 01       	movw	r12, r26
     814:	ae 28       	or	r10, r14
     816:	bf 28       	or	r11, r15
     818:	c0 2a       	or	r12, r16
     81a:	d1 2a       	or	r13, r17
     81c:	a2 16       	cp	r10, r18
     81e:	b3 06       	cpc	r11, r19
     820:	c4 06       	cpc	r12, r20
     822:	d5 06       	cpc	r13, r21
     824:	60 f5       	brcc	.+88     	; 0x87e <__stack+0x1f>
     826:	65 96       	adiw	r28, 0x15	; 21
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	65 97       	sbiw	r28, 0x15	; 21
     832:	61 50       	subi	r22, 0x01	; 1
     834:	70 40       	sbci	r23, 0x00	; 0
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	65 96       	adiw	r28, 0x15	; 21
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	65 97       	sbiw	r28, 0x15	; 21
     846:	a2 0c       	add	r10, r2
     848:	b3 1c       	adc	r11, r3
     84a:	c4 1c       	adc	r12, r4
     84c:	d5 1c       	adc	r13, r5
     84e:	a2 14       	cp	r10, r2
     850:	b3 04       	cpc	r11, r3
     852:	c4 04       	cpc	r12, r4
     854:	d5 04       	cpc	r13, r5
     856:	98 f0       	brcs	.+38     	; 0x87e <__stack+0x1f>
     858:	a2 16       	cp	r10, r18
     85a:	b3 06       	cpc	r11, r19
     85c:	c4 06       	cpc	r12, r20
     85e:	d5 06       	cpc	r13, r21
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
     862:	61 50       	subi	r22, 0x01	; 1
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	65 96       	adiw	r28, 0x15	; 21
     86c:	6c af       	std	Y+60, r22	; 0x3c
     86e:	7d af       	std	Y+61, r23	; 0x3d
     870:	8e af       	std	Y+62, r24	; 0x3e
     872:	9f af       	std	Y+63, r25	; 0x3f
     874:	65 97       	sbiw	r28, 0x15	; 21
     876:	a2 0c       	add	r10, r2
     878:	b3 1c       	adc	r11, r3
     87a:	c4 1c       	adc	r12, r4
     87c:	d5 1c       	adc	r13, r5
     87e:	a2 1a       	sub	r10, r18
     880:	b3 0a       	sbc	r11, r19
     882:	c4 0a       	sbc	r12, r20
     884:	d5 0a       	sbc	r13, r21
     886:	c6 01       	movw	r24, r12
     888:	b5 01       	movw	r22, r10
     88a:	a4 01       	movw	r20, r8
     88c:	93 01       	movw	r18, r6
     88e:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     892:	7b 01       	movw	r14, r22
     894:	8c 01       	movw	r16, r24
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	a4 01       	movw	r20, r8
     89c:	93 01       	movw	r18, r6
     89e:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	da 01       	movw	r26, r20
     8a6:	3c 01       	movw	r6, r24
     8a8:	4d 01       	movw	r8, r26
     8aa:	c4 01       	movw	r24, r8
     8ac:	b3 01       	movw	r22, r6
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b2:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     8b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     8b8:	61 97       	sbiw	r28, 0x11	; 17
     8ba:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	87 01       	movw	r16, r14
     8c4:	ff 24       	eor	r15, r15
     8c6:	ee 24       	eor	r14, r14
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     8cc:	ab ad       	ldd	r26, Y+59	; 0x3b
     8ce:	bc ad       	ldd	r27, Y+60	; 0x3c
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	57 01       	movw	r10, r14
     8d6:	68 01       	movw	r12, r16
     8d8:	a8 2a       	or	r10, r24
     8da:	b9 2a       	or	r11, r25
     8dc:	ca 2a       	or	r12, r26
     8de:	db 2a       	or	r13, r27
     8e0:	a2 16       	cp	r10, r18
     8e2:	b3 06       	cpc	r11, r19
     8e4:	c4 06       	cpc	r12, r20
     8e6:	d5 06       	cpc	r13, r21
     8e8:	e0 f4       	brcc	.+56     	; 0x922 <__stack+0xc3>
     8ea:	08 94       	sec
     8ec:	61 08       	sbc	r6, r1
     8ee:	71 08       	sbc	r7, r1
     8f0:	81 08       	sbc	r8, r1
     8f2:	91 08       	sbc	r9, r1
     8f4:	a2 0c       	add	r10, r2
     8f6:	b3 1c       	adc	r11, r3
     8f8:	c4 1c       	adc	r12, r4
     8fa:	d5 1c       	adc	r13, r5
     8fc:	a2 14       	cp	r10, r2
     8fe:	b3 04       	cpc	r11, r3
     900:	c4 04       	cpc	r12, r4
     902:	d5 04       	cpc	r13, r5
     904:	70 f0       	brcs	.+28     	; 0x922 <__stack+0xc3>
     906:	a2 16       	cp	r10, r18
     908:	b3 06       	cpc	r11, r19
     90a:	c4 06       	cpc	r12, r20
     90c:	d5 06       	cpc	r13, r21
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0xc3>
     910:	08 94       	sec
     912:	61 08       	sbc	r6, r1
     914:	71 08       	sbc	r7, r1
     916:	81 08       	sbc	r8, r1
     918:	91 08       	sbc	r9, r1
     91a:	a2 0c       	add	r10, r2
     91c:	b3 1c       	adc	r11, r3
     91e:	c4 1c       	adc	r12, r4
     920:	d5 1c       	adc	r13, r5
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	8c ad       	ldd	r24, Y+60	; 0x3c
     926:	9d ad       	ldd	r25, Y+61	; 0x3d
     928:	ae ad       	ldd	r26, Y+62	; 0x3e
     92a:	bf ad       	ldd	r27, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	e3 96       	adiw	r28, 0x33	; 51
     930:	0f ac       	ldd	r0, Y+63	; 0x3f
     932:	e3 97       	sbiw	r28, 0x33	; 51
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0xdf>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	aa 1f       	adc	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <__stack+0xd7>
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	8c af       	std	Y+60, r24	; 0x3c
     946:	9d af       	std	Y+61, r25	; 0x3d
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	bf af       	std	Y+63, r27	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	a2 1a       	sub	r10, r18
     950:	b3 0a       	sbc	r11, r19
     952:	c4 0a       	sbc	r12, r20
     954:	d5 0a       	sbc	r13, r21
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	ec ac       	ldd	r14, Y+60	; 0x3c
     95a:	fd ac       	ldd	r15, Y+61	; 0x3d
     95c:	0e ad       	ldd	r16, Y+62	; 0x3e
     95e:	1f ad       	ldd	r17, Y+63	; 0x3f
     960:	65 97       	sbiw	r28, 0x15	; 21
     962:	d7 01       	movw	r26, r14
     964:	99 27       	eor	r25, r25
     966:	88 27       	eor	r24, r24
     968:	68 2a       	or	r6, r24
     96a:	79 2a       	or	r7, r25
     96c:	8a 2a       	or	r8, r26
     96e:	9b 2a       	or	r9, r27
     970:	82 01       	movw	r16, r4
     972:	22 27       	eor	r18, r18
     974:	33 27       	eor	r19, r19
     976:	69 96       	adiw	r28, 0x19	; 25
     978:	0c af       	std	Y+60, r16	; 0x3c
     97a:	1d af       	std	Y+61, r17	; 0x3d
     97c:	2e af       	std	Y+62, r18	; 0x3e
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	69 97       	sbiw	r28, 0x19	; 25
     982:	a2 01       	movw	r20, r4
     984:	91 01       	movw	r18, r2
     986:	40 70       	andi	r20, 0x00	; 0
     988:	50 70       	andi	r21, 0x00	; 0
     98a:	6d 96       	adiw	r28, 0x1d	; 29
     98c:	2c af       	std	Y+60, r18	; 0x3c
     98e:	3d af       	std	Y+61, r19	; 0x3d
     990:	4e af       	std	Y+62, r20	; 0x3e
     992:	5f af       	std	Y+63, r21	; 0x3f
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	c6 01       	movw	r24, r12
     998:	b5 01       	movw	r22, r10
     99a:	69 96       	adiw	r28, 0x19	; 25
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	69 97       	sbiw	r28, 0x19	; 25
     9a6:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	69 96       	adiw	r28, 0x19	; 25
     9b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     9bc:	69 97       	sbiw	r28, 0x19	; 25
     9be:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     9c2:	c9 01       	movw	r24, r18
     9c4:	da 01       	movw	r26, r20
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	8c af       	std	Y+60, r24	; 0x3c
     9ca:	9d af       	std	Y+61, r25	; 0x3d
     9cc:	ae af       	std	Y+62, r26	; 0x3e
     9ce:	bf af       	std	Y+63, r27	; 0x3f
     9d0:	a1 97       	sbiw	r28, 0x21	; 33
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	6d 96       	adiw	r28, 0x1d	; 29
     9d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     9da:	3d ad       	ldd	r19, Y+61	; 0x3d
     9dc:	4e ad       	ldd	r20, Y+62	; 0x3e
     9de:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e0:	6d 97       	sbiw	r28, 0x1d	; 29
     9e2:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	87 01       	movw	r16, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	ee 24       	eor	r14, r14
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ac ac       	ldd	r10, Y+60	; 0x3c
     9f4:	bd ac       	ldd	r11, Y+61	; 0x3d
     9f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     9f8:	df ac       	ldd	r13, Y+63	; 0x3f
     9fa:	21 97       	sbiw	r28, 0x01	; 1
     9fc:	c6 01       	movw	r24, r12
     9fe:	aa 27       	eor	r26, r26
     a00:	bb 27       	eor	r27, r27
     a02:	57 01       	movw	r10, r14
     a04:	68 01       	movw	r12, r16
     a06:	a8 2a       	or	r10, r24
     a08:	b9 2a       	or	r11, r25
     a0a:	ca 2a       	or	r12, r26
     a0c:	db 2a       	or	r13, r27
     a0e:	a2 16       	cp	r10, r18
     a10:	b3 06       	cpc	r11, r19
     a12:	c4 06       	cpc	r12, r20
     a14:	d5 06       	cpc	r13, r21
     a16:	60 f5       	brcc	.+88     	; 0xa70 <__stack+0x211>
     a18:	a1 96       	adiw	r28, 0x21	; 33
     a1a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a1c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a20:	9f ad       	ldd	r25, Y+63	; 0x3f
     a22:	a1 97       	sbiw	r28, 0x21	; 33
     a24:	61 50       	subi	r22, 0x01	; 1
     a26:	70 40       	sbci	r23, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a1 96       	adiw	r28, 0x21	; 33
     a2e:	6c af       	std	Y+60, r22	; 0x3c
     a30:	7d af       	std	Y+61, r23	; 0x3d
     a32:	8e af       	std	Y+62, r24	; 0x3e
     a34:	9f af       	std	Y+63, r25	; 0x3f
     a36:	a1 97       	sbiw	r28, 0x21	; 33
     a38:	a2 0c       	add	r10, r2
     a3a:	b3 1c       	adc	r11, r3
     a3c:	c4 1c       	adc	r12, r4
     a3e:	d5 1c       	adc	r13, r5
     a40:	a2 14       	cp	r10, r2
     a42:	b3 04       	cpc	r11, r3
     a44:	c4 04       	cpc	r12, r4
     a46:	d5 04       	cpc	r13, r5
     a48:	98 f0       	brcs	.+38     	; 0xa70 <__stack+0x211>
     a4a:	a2 16       	cp	r10, r18
     a4c:	b3 06       	cpc	r11, r19
     a4e:	c4 06       	cpc	r12, r20
     a50:	d5 06       	cpc	r13, r21
     a52:	70 f4       	brcc	.+28     	; 0xa70 <__stack+0x211>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	70 40       	sbci	r23, 0x00	; 0
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a1 96       	adiw	r28, 0x21	; 33
     a5e:	6c af       	std	Y+60, r22	; 0x3c
     a60:	7d af       	std	Y+61, r23	; 0x3d
     a62:	8e af       	std	Y+62, r24	; 0x3e
     a64:	9f af       	std	Y+63, r25	; 0x3f
     a66:	a1 97       	sbiw	r28, 0x21	; 33
     a68:	a2 0c       	add	r10, r2
     a6a:	b3 1c       	adc	r11, r3
     a6c:	c4 1c       	adc	r12, r4
     a6e:	d5 1c       	adc	r13, r5
     a70:	a2 1a       	sub	r10, r18
     a72:	b3 0a       	sbc	r11, r19
     a74:	c4 0a       	sbc	r12, r20
     a76:	d5 0a       	sbc	r13, r21
     a78:	c6 01       	movw	r24, r12
     a7a:	b5 01       	movw	r22, r10
     a7c:	69 96       	adiw	r28, 0x19	; 25
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	69 97       	sbiw	r28, 0x19	; 25
     a88:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     a8c:	7b 01       	movw	r14, r22
     a8e:	8c 01       	movw	r16, r24
     a90:	c6 01       	movw	r24, r12
     a92:	b5 01       	movw	r22, r10
     a94:	69 96       	adiw	r28, 0x19	; 25
     a96:	2c ad       	ldd	r18, Y+60	; 0x3c
     a98:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a9e:	69 97       	sbiw	r28, 0x19	; 25
     aa0:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     aa4:	c9 01       	movw	r24, r18
     aa6:	da 01       	movw	r26, r20
     aa8:	5c 01       	movw	r10, r24
     aaa:	6d 01       	movw	r12, r26
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	6d 96       	adiw	r28, 0x1d	; 29
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	6d 97       	sbiw	r28, 0x1d	; 29
     abc:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	87 01       	movw	r16, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	ee 24       	eor	r14, r14
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8c ad       	ldd	r24, Y+60	; 0x3c
     ace:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	21 97       	sbiw	r28, 0x01	; 1
     ad6:	a0 70       	andi	r26, 0x00	; 0
     ad8:	b0 70       	andi	r27, 0x00	; 0
     ada:	e8 2a       	or	r14, r24
     adc:	f9 2a       	or	r15, r25
     ade:	0a 2b       	or	r16, r26
     ae0:	1b 2b       	or	r17, r27
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	c0 f4       	brcc	.+48     	; 0xb1c <__stack+0x2bd>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	e2 0c       	add	r14, r2
     af8:	f3 1c       	adc	r15, r3
     afa:	04 1d       	adc	r16, r4
     afc:	15 1d       	adc	r17, r5
     afe:	e2 14       	cp	r14, r2
     b00:	f3 04       	cpc	r15, r3
     b02:	04 05       	cpc	r16, r4
     b04:	15 05       	cpc	r17, r5
     b06:	50 f0       	brcs	.+20     	; 0xb1c <__stack+0x2bd>
     b08:	e2 16       	cp	r14, r18
     b0a:	f3 06       	cpc	r15, r19
     b0c:	04 07       	cpc	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	28 f4       	brcc	.+10     	; 0xb1c <__stack+0x2bd>
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
     b18:	c1 08       	sbc	r12, r1
     b1a:	d1 08       	sbc	r13, r1
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b20:	fd ac       	ldd	r15, Y+61	; 0x3d
     b22:	0e ad       	ldd	r16, Y+62	; 0x3e
     b24:	1f ad       	ldd	r17, Y+63	; 0x3f
     b26:	a1 97       	sbiw	r28, 0x21	; 33
     b28:	d7 01       	movw	r26, r14
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	96 01       	movw	r18, r12
     b30:	85 01       	movw	r16, r10
     b32:	08 2b       	or	r16, r24
     b34:	19 2b       	or	r17, r25
     b36:	2a 2b       	or	r18, r26
     b38:	3b 2b       	or	r19, r27
     b3a:	25 96       	adiw	r28, 0x05	; 5
     b3c:	0c af       	std	Y+60, r16	; 0x3c
     b3e:	1d af       	std	Y+61, r17	; 0x3d
     b40:	2e af       	std	Y+62, r18	; 0x3e
     b42:	3f af       	std	Y+63, r19	; 0x3f
     b44:	25 97       	sbiw	r28, 0x05	; 5
     b46:	72 c2       	rjmp	.+1252   	; 0x102c <__stack+0x7cd>
     b48:	6e 14       	cp	r6, r14
     b4a:	7f 04       	cpc	r7, r15
     b4c:	80 06       	cpc	r8, r16
     b4e:	91 06       	cpc	r9, r17
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	5f c2       	rjmp	.+1214   	; 0x1012 <__stack+0x7b3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	e2 16       	cp	r14, r18
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	f2 06       	cpc	r15, r18
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	02 07       	cpc	r16, r18
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	12 07       	cpc	r17, r18
     b64:	88 f4       	brcc	.+34     	; 0xb88 <__stack+0x329>
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	e3 16       	cp	r14, r19
     b6a:	f1 04       	cpc	r15, r1
     b6c:	01 05       	cpc	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	31 f0       	breq	.+12     	; 0xb7e <__stack+0x31f>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <__stack+0x31f>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x34d>
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	12 c0       	rjmp	.+36     	; 0xbac <__stack+0x34d>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	e4 16       	cp	r14, r20
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	f4 06       	cpc	r15, r20
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	04 07       	cpc	r16, r20
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	14 07       	cpc	r17, r20
     b98:	28 f0       	brcs	.+10     	; 0xba4 <__stack+0x345>
     b9a:	48 e1       	ldi	r20, 0x18	; 24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__stack+0x34d>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	d8 01       	movw	r26, r16
     bae:	c7 01       	movw	r24, r14
     bb0:	04 2e       	mov	r0, r20
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	b6 95       	lsr	r27
     bb6:	a7 95       	ror	r26
     bb8:	97 95       	ror	r25
     bba:	87 95       	ror	r24
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__stack+0x355>
     bc0:	8f 58       	subi	r24, 0x8F	; 143
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	dc 01       	movw	r26, r24
     bc6:	2c 91       	ld	r18, X
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	a3 2e       	mov	r10, r19
     bcc:	b1 2c       	mov	r11, r1
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	d6 01       	movw	r26, r12
     bd4:	c5 01       	movw	r24, r10
     bd6:	84 1b       	sub	r24, r20
     bd8:	95 0b       	sbc	r25, r21
     bda:	a6 0b       	sbc	r26, r22
     bdc:	b7 0b       	sbc	r27, r23
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	99 f4       	brne	.+38     	; 0xc14 <__stack+0x3b5>
     bee:	e6 14       	cp	r14, r6
     bf0:	f7 04       	cpc	r15, r7
     bf2:	08 05       	cpc	r16, r8
     bf4:	19 05       	cpc	r17, r9
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	fe c1       	rjmp	.+1020   	; 0xff6 <__stack+0x797>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	6c ac       	ldd	r6, Y+60	; 0x3c
     bfe:	7d ac       	ldd	r7, Y+61	; 0x3d
     c00:	8e ac       	ldd	r8, Y+62	; 0x3e
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	21 97       	sbiw	r28, 0x01	; 1
     c06:	62 14       	cp	r6, r2
     c08:	73 04       	cpc	r7, r3
     c0a:	84 04       	cpc	r8, r4
     c0c:	95 04       	cpc	r9, r5
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x3b3>
     c10:	f2 c1       	rjmp	.+996    	; 0xff6 <__stack+0x797>
     c12:	ff c1       	rjmp	.+1022   	; 0x1012 <__stack+0x7b3>
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	8f af       	std	Y+63, r24	; 0x3f
     c18:	e2 97       	sbiw	r28, 0x32	; 50
     c1a:	08 2e       	mov	r0, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__stack+0x3c7>
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	00 1f       	adc	r16, r16
     c24:	11 1f       	adc	r17, r17
     c26:	0a 94       	dec	r0
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <__stack+0x3bf>
     c2a:	6a 2d       	mov	r22, r10
     c2c:	68 1b       	sub	r22, r24
     c2e:	d2 01       	movw	r26, r4
     c30:	c1 01       	movw	r24, r2
     c32:	06 2e       	mov	r0, r22
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__stack+0x3df>
     c36:	b6 95       	lsr	r27
     c38:	a7 95       	ror	r26
     c3a:	97 95       	ror	r25
     c3c:	87 95       	ror	r24
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__stack+0x3d7>
     c42:	5c 01       	movw	r10, r24
     c44:	6d 01       	movw	r12, r26
     c46:	ae 28       	or	r10, r14
     c48:	bf 28       	or	r11, r15
     c4a:	c0 2a       	or	r12, r16
     c4c:	d1 2a       	or	r13, r17
     c4e:	ad aa       	std	Y+53, r10	; 0x35
     c50:	be aa       	std	Y+54, r11	; 0x36
     c52:	cf aa       	std	Y+55, r12	; 0x37
     c54:	d8 ae       	std	Y+56, r13	; 0x38
     c56:	72 01       	movw	r14, r4
     c58:	61 01       	movw	r12, r2
     c5a:	e2 96       	adiw	r28, 0x32	; 50
     c5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c5e:	e2 97       	sbiw	r28, 0x32	; 50
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x40b>
     c62:	cc 0c       	add	r12, r12
     c64:	dd 1c       	adc	r13, r13
     c66:	ee 1c       	adc	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	0a 94       	dec	r0
     c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__stack+0x403>
     c6e:	c9 aa       	std	Y+49, r12	; 0x31
     c70:	da aa       	std	Y+50, r13	; 0x32
     c72:	eb aa       	std	Y+51, r14	; 0x33
     c74:	fc aa       	std	Y+52, r15	; 0x34
     c76:	64 01       	movw	r12, r8
     c78:	53 01       	movw	r10, r6
     c7a:	06 2e       	mov	r0, r22
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	d6 94       	lsr	r13
     c80:	c7 94       	ror	r12
     c82:	b7 94       	ror	r11
     c84:	a7 94       	ror	r10
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	d4 01       	movw	r26, r8
     c8c:	c3 01       	movw	r24, r6
     c8e:	e2 96       	adiw	r28, 0x32	; 50
     c90:	0f ac       	ldd	r0, Y+63	; 0x3f
     c92:	e2 97       	sbiw	r28, 0x32	; 50
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	ec ac       	ldd	r14, Y+60	; 0x3c
     ca6:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca8:	0e ad       	ldd	r16, Y+62	; 0x3e
     caa:	1f ad       	ldd	r17, Y+63	; 0x3f
     cac:	21 97       	sbiw	r28, 0x01	; 1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__stack+0x459>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	6a 95       	dec	r22
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__stack+0x451>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	68 2a       	or	r6, r24
     cc2:	79 2a       	or	r7, r25
     cc4:	8a 2a       	or	r8, r26
     cc6:	9b 2a       	or	r9, r27
     cc8:	6d a6       	std	Y+45, r6	; 0x2d
     cca:	7e a6       	std	Y+46, r7	; 0x2e
     ccc:	8f a6       	std	Y+47, r8	; 0x2f
     cce:	98 aa       	std	Y+48, r9	; 0x30
     cd0:	ed a8       	ldd	r14, Y+53	; 0x35
     cd2:	fe a8       	ldd	r15, Y+54	; 0x36
     cd4:	0f a9       	ldd	r16, Y+55	; 0x37
     cd6:	18 ad       	ldd	r17, Y+56	; 0x38
     cd8:	38 01       	movw	r6, r16
     cda:	88 24       	eor	r8, r8
     cdc:	99 24       	eor	r9, r9
     cde:	98 01       	movw	r18, r16
     ce0:	87 01       	movw	r16, r14
     ce2:	20 70       	andi	r18, 0x00	; 0
     ce4:	30 70       	andi	r19, 0x00	; 0
     ce6:	a5 96       	adiw	r28, 0x25	; 37
     ce8:	0c af       	std	Y+60, r16	; 0x3c
     cea:	1d af       	std	Y+61, r17	; 0x3d
     cec:	2e af       	std	Y+62, r18	; 0x3e
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	a5 97       	sbiw	r28, 0x25	; 37
     cf2:	c6 01       	movw	r24, r12
     cf4:	b5 01       	movw	r22, r10
     cf6:	a4 01       	movw	r20, r8
     cf8:	93 01       	movw	r18, r6
     cfa:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	c6 01       	movw	r24, r12
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	93 01       	movw	r18, r6
     d0a:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     d0e:	c9 01       	movw	r24, r18
     d10:	da 01       	movw	r26, r20
     d12:	1c 01       	movw	r2, r24
     d14:	2d 01       	movw	r4, r26
     d16:	c2 01       	movw	r24, r4
     d18:	b1 01       	movw	r22, r2
     d1a:	a5 96       	adiw	r28, 0x25	; 37
     d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d20:	4e ad       	ldd	r20, Y+62	; 0x3e
     d22:	5f ad       	ldd	r21, Y+63	; 0x3f
     d24:	a5 97       	sbiw	r28, 0x25	; 37
     d26:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	87 01       	movw	r16, r14
     d30:	ff 24       	eor	r15, r15
     d32:	ee 24       	eor	r14, r14
     d34:	ad a4       	ldd	r10, Y+45	; 0x2d
     d36:	be a4       	ldd	r11, Y+46	; 0x2e
     d38:	cf a4       	ldd	r12, Y+47	; 0x2f
     d3a:	d8 a8       	ldd	r13, Y+48	; 0x30
     d3c:	c6 01       	movw	r24, r12
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	57 01       	movw	r10, r14
     d44:	68 01       	movw	r12, r16
     d46:	a8 2a       	or	r10, r24
     d48:	b9 2a       	or	r11, r25
     d4a:	ca 2a       	or	r12, r26
     d4c:	db 2a       	or	r13, r27
     d4e:	a2 16       	cp	r10, r18
     d50:	b3 06       	cpc	r11, r19
     d52:	c4 06       	cpc	r12, r20
     d54:	d5 06       	cpc	r13, r21
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__stack+0x539>
     d58:	08 94       	sec
     d5a:	21 08       	sbc	r2, r1
     d5c:	31 08       	sbc	r3, r1
     d5e:	41 08       	sbc	r4, r1
     d60:	51 08       	sbc	r5, r1
     d62:	ed a8       	ldd	r14, Y+53	; 0x35
     d64:	fe a8       	ldd	r15, Y+54	; 0x36
     d66:	0f a9       	ldd	r16, Y+55	; 0x37
     d68:	18 ad       	ldd	r17, Y+56	; 0x38
     d6a:	ae 0c       	add	r10, r14
     d6c:	bf 1c       	adc	r11, r15
     d6e:	c0 1e       	adc	r12, r16
     d70:	d1 1e       	adc	r13, r17
     d72:	ae 14       	cp	r10, r14
     d74:	bf 04       	cpc	r11, r15
     d76:	c0 06       	cpc	r12, r16
     d78:	d1 06       	cpc	r13, r17
     d7a:	70 f0       	brcs	.+28     	; 0xd98 <__stack+0x539>
     d7c:	a2 16       	cp	r10, r18
     d7e:	b3 06       	cpc	r11, r19
     d80:	c4 06       	cpc	r12, r20
     d82:	d5 06       	cpc	r13, r21
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x539>
     d86:	08 94       	sec
     d88:	21 08       	sbc	r2, r1
     d8a:	31 08       	sbc	r3, r1
     d8c:	41 08       	sbc	r4, r1
     d8e:	51 08       	sbc	r5, r1
     d90:	ae 0c       	add	r10, r14
     d92:	bf 1c       	adc	r11, r15
     d94:	c0 1e       	adc	r12, r16
     d96:	d1 1e       	adc	r13, r17
     d98:	a2 1a       	sub	r10, r18
     d9a:	b3 0a       	sbc	r11, r19
     d9c:	c4 0a       	sbc	r12, r20
     d9e:	d5 0a       	sbc	r13, r21
     da0:	c6 01       	movw	r24, r12
     da2:	b5 01       	movw	r22, r10
     da4:	a4 01       	movw	r20, r8
     da6:	93 01       	movw	r18, r6
     da8:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     dac:	7b 01       	movw	r14, r22
     dae:	8c 01       	movw	r16, r24
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	a4 01       	movw	r20, r8
     db6:	93 01       	movw	r18, r6
     db8:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
     dbc:	c9 01       	movw	r24, r18
     dbe:	da 01       	movw	r26, r20
     dc0:	3c 01       	movw	r6, r24
     dc2:	4d 01       	movw	r8, r26
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	a5 96       	adiw	r28, 0x25	; 37
     dca:	2c ad       	ldd	r18, Y+60	; 0x3c
     dcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dce:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd2:	a5 97       	sbiw	r28, 0x25	; 37
     dd4:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	87 01       	movw	r16, r14
     dde:	ff 24       	eor	r15, r15
     de0:	ee 24       	eor	r14, r14
     de2:	8d a5       	ldd	r24, Y+45	; 0x2d
     de4:	9e a5       	ldd	r25, Y+46	; 0x2e
     de6:	af a5       	ldd	r26, Y+47	; 0x2f
     de8:	b8 a9       	ldd	r27, Y+48	; 0x30
     dea:	a0 70       	andi	r26, 0x00	; 0
     dec:	b0 70       	andi	r27, 0x00	; 0
     dee:	57 01       	movw	r10, r14
     df0:	68 01       	movw	r12, r16
     df2:	a8 2a       	or	r10, r24
     df4:	b9 2a       	or	r11, r25
     df6:	ca 2a       	or	r12, r26
     df8:	db 2a       	or	r13, r27
     dfa:	a2 16       	cp	r10, r18
     dfc:	b3 06       	cpc	r11, r19
     dfe:	c4 06       	cpc	r12, r20
     e00:	d5 06       	cpc	r13, r21
     e02:	00 f5       	brcc	.+64     	; 0xe44 <__stack+0x5e5>
     e04:	08 94       	sec
     e06:	61 08       	sbc	r6, r1
     e08:	71 08       	sbc	r7, r1
     e0a:	81 08       	sbc	r8, r1
     e0c:	91 08       	sbc	r9, r1
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	a6 0e       	add	r10, r22
     e18:	b7 1e       	adc	r11, r23
     e1a:	c8 1e       	adc	r12, r24
     e1c:	d9 1e       	adc	r13, r25
     e1e:	a6 16       	cp	r10, r22
     e20:	b7 06       	cpc	r11, r23
     e22:	c8 06       	cpc	r12, r24
     e24:	d9 06       	cpc	r13, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <__stack+0x5e5>
     e28:	a2 16       	cp	r10, r18
     e2a:	b3 06       	cpc	r11, r19
     e2c:	c4 06       	cpc	r12, r20
     e2e:	d5 06       	cpc	r13, r21
     e30:	48 f4       	brcc	.+18     	; 0xe44 <__stack+0x5e5>
     e32:	08 94       	sec
     e34:	61 08       	sbc	r6, r1
     e36:	71 08       	sbc	r7, r1
     e38:	81 08       	sbc	r8, r1
     e3a:	91 08       	sbc	r9, r1
     e3c:	a6 0e       	add	r10, r22
     e3e:	b7 1e       	adc	r11, r23
     e40:	c8 1e       	adc	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d6 01       	movw	r26, r12
     e46:	c5 01       	movw	r24, r10
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	a4 0b       	sbc	r26, r20
     e4e:	b5 0b       	sbc	r27, r21
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	9a a7       	std	Y+42, r25	; 0x2a
     e54:	ab a7       	std	Y+43, r26	; 0x2b
     e56:	bc a7       	std	Y+44, r27	; 0x2c
     e58:	d1 01       	movw	r26, r2
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	64 01       	movw	r12, r8
     e60:	53 01       	movw	r10, r6
     e62:	a8 2a       	or	r10, r24
     e64:	b9 2a       	or	r11, r25
     e66:	ca 2a       	or	r12, r26
     e68:	db 2a       	or	r13, r27
     e6a:	25 96       	adiw	r28, 0x05	; 5
     e6c:	ac ae       	std	Y+60, r10	; 0x3c
     e6e:	bd ae       	std	Y+61, r11	; 0x3d
     e70:	ce ae       	std	Y+62, r12	; 0x3e
     e72:	df ae       	std	Y+63, r13	; 0x3f
     e74:	25 97       	sbiw	r28, 0x05	; 5
     e76:	86 01       	movw	r16, r12
     e78:	75 01       	movw	r14, r10
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	e2 22       	and	r14, r18
     e84:	f3 22       	and	r15, r19
     e86:	04 23       	and	r16, r20
     e88:	15 23       	and	r17, r21
     e8a:	a6 01       	movw	r20, r12
     e8c:	66 27       	eor	r22, r22
     e8e:	77 27       	eor	r23, r23
     e90:	ad 96       	adiw	r28, 0x2d	; 45
     e92:	4c af       	std	Y+60, r20	; 0x3c
     e94:	5d af       	std	Y+61, r21	; 0x3d
     e96:	6e af       	std	Y+62, r22	; 0x3e
     e98:	7f af       	std	Y+63, r23	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	a9 a8       	ldd	r10, Y+49	; 0x31
     e9e:	ba a8       	ldd	r11, Y+50	; 0x32
     ea0:	cb a8       	ldd	r12, Y+51	; 0x33
     ea2:	dc a8       	ldd	r13, Y+52	; 0x34
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a6 22       	and	r10, r22
     eae:	b7 22       	and	r11, r23
     eb0:	c8 22       	and	r12, r24
     eb2:	d9 22       	and	r13, r25
     eb4:	89 a9       	ldd	r24, Y+49	; 0x31
     eb6:	9a a9       	ldd	r25, Y+50	; 0x32
     eb8:	ab a9       	ldd	r26, Y+51	; 0x33
     eba:	bc a9       	ldd	r27, Y+52	; 0x34
     ebc:	1d 01       	movw	r2, r26
     ebe:	44 24       	eor	r4, r4
     ec0:	55 24       	eor	r5, r5
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	a6 01       	movw	r20, r12
     ec8:	95 01       	movw	r18, r10
     eca:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c af       	std	Y+60, r22	; 0x3c
     ed2:	7d af       	std	Y+61, r23	; 0x3d
     ed4:	8e af       	std	Y+62, r24	; 0x3e
     ed6:	9f af       	std	Y+63, r25	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a2 01       	movw	r20, r4
     ee0:	91 01       	movw	r18, r2
     ee2:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     ee6:	3b 01       	movw	r6, r22
     ee8:	4c 01       	movw	r8, r24
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	6c ad       	ldd	r22, Y+60	; 0x3c
     eee:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef4:	ad 97       	sbiw	r28, 0x2d	; 45
     ef6:	a6 01       	movw	r20, r12
     ef8:	95 01       	movw	r18, r10
     efa:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     efe:	7b 01       	movw	r14, r22
     f00:	8c 01       	movw	r16, r24
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	ad 97       	sbiw	r28, 0x2d	; 45
     f0e:	a2 01       	movw	r20, r4
     f10:	91 01       	movw	r18, r2
     f12:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
     f16:	5b 01       	movw	r10, r22
     f18:	6c 01       	movw	r12, r24
     f1a:	a8 01       	movw	r20, r16
     f1c:	97 01       	movw	r18, r14
     f1e:	26 0d       	add	r18, r6
     f20:	37 1d       	adc	r19, r7
     f22:	48 1d       	adc	r20, r8
     f24:	59 1d       	adc	r21, r9
     f26:	a9 96       	adiw	r28, 0x29	; 41
     f28:	6c ac       	ldd	r6, Y+60	; 0x3c
     f2a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f2c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f2e:	9f ac       	ldd	r9, Y+63	; 0x3f
     f30:	a9 97       	sbiw	r28, 0x29	; 41
     f32:	c4 01       	movw	r24, r8
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	4a 1f       	adc	r20, r26
     f3e:	5b 1f       	adc	r21, r27
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	40 07       	cpc	r20, r16
     f46:	51 07       	cpc	r21, r17
     f48:	48 f4       	brcc	.+18     	; 0xf5c <__stack+0x6fd>
     f4a:	e1 2c       	mov	r14, r1
     f4c:	f1 2c       	mov	r15, r1
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	06 2f       	mov	r16, r22
     f52:	11 2d       	mov	r17, r1
     f54:	ae 0c       	add	r10, r14
     f56:	bf 1c       	adc	r11, r15
     f58:	c0 1e       	adc	r12, r16
     f5a:	d1 1e       	adc	r13, r17
     f5c:	ca 01       	movw	r24, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	bb 27       	eor	r27, r27
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	6a 0d       	add	r22, r10
     f68:	7b 1d       	adc	r23, r11
     f6a:	8c 1d       	adc	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	69 a4       	ldd	r6, Y+41	; 0x29
     f70:	7a a4       	ldd	r7, Y+42	; 0x2a
     f72:	8b a4       	ldd	r8, Y+43	; 0x2b
     f74:	9c a4       	ldd	r9, Y+44	; 0x2c
     f76:	66 16       	cp	r6, r22
     f78:	77 06       	cpc	r7, r23
     f7a:	88 06       	cpc	r8, r24
     f7c:	99 06       	cpc	r9, r25
     f7e:	50 f1       	brcs	.+84     	; 0xfd4 <__stack+0x775>
     f80:	66 15       	cp	r22, r6
     f82:	77 05       	cpc	r23, r7
     f84:	88 05       	cpc	r24, r8
     f86:	99 05       	cpc	r25, r9
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0x72d>
     f8a:	4d c0       	rjmp	.+154    	; 0x1026 <__stack+0x7c7>
     f8c:	d9 01       	movw	r26, r18
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2c ad       	ldd	r18, Y+60	; 0x3c
     f96:	3d ad       	ldd	r19, Y+61	; 0x3d
     f98:	4e ad       	ldd	r20, Y+62	; 0x3e
     f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f9c:	a9 97       	sbiw	r28, 0x29	; 41
     f9e:	40 70       	andi	r20, 0x00	; 0
     fa0:	50 70       	andi	r21, 0x00	; 0
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a4 1f       	adc	r26, r20
     fa8:	b5 1f       	adc	r27, r21
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	e2 96       	adiw	r28, 0x32	; 50
     fb8:	0f ac       	ldd	r0, Y+63	; 0x3f
     fba:	e2 97       	sbiw	r28, 0x32	; 50
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <__stack+0x767>
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <__stack+0x75f>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	4a 07       	cpc	r20, r26
     fd0:	5b 07       	cpc	r21, r27
     fd2:	48 f5       	brcc	.+82     	; 0x1026 <__stack+0x7c7>
     fd4:	25 96       	adiw	r28, 0x05	; 5
     fd6:	0c ad       	ldd	r16, Y+60	; 0x3c
     fd8:	1d ad       	ldd	r17, Y+61	; 0x3d
     fda:	2e ad       	ldd	r18, Y+62	; 0x3e
     fdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     fde:	25 97       	sbiw	r28, 0x05	; 5
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	10 40       	sbci	r17, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	0c af       	std	Y+60, r16	; 0x3c
     fec:	1d af       	std	Y+61, r17	; 0x3d
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	3f af       	std	Y+63, r19	; 0x3f
     ff2:	25 97       	sbiw	r28, 0x05	; 5
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__stack+0x7c7>
     ff6:	66 24       	eor	r6, r6
     ff8:	77 24       	eor	r7, r7
     ffa:	43 01       	movw	r8, r6
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	25 96       	adiw	r28, 0x05	; 5
    1006:	2c af       	std	Y+60, r18	; 0x3c
    1008:	3d af       	std	Y+61, r19	; 0x3d
    100a:	4e af       	std	Y+62, r20	; 0x3e
    100c:	5f af       	std	Y+63, r21	; 0x3f
    100e:	25 97       	sbiw	r28, 0x05	; 5
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__stack+0x7cd>
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
    1016:	43 01       	movw	r8, r6
    1018:	25 96       	adiw	r28, 0x05	; 5
    101a:	1c ae       	std	Y+60, r1	; 0x3c
    101c:	1d ae       	std	Y+61, r1	; 0x3d
    101e:	1e ae       	std	Y+62, r1	; 0x3e
    1020:	1f ae       	std	Y+63, r1	; 0x3f
    1022:	25 97       	sbiw	r28, 0x05	; 5
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__stack+0x7cd>
    1026:	66 24       	eor	r6, r6
    1028:	77 24       	eor	r7, r7
    102a:	43 01       	movw	r8, r6
    102c:	fe 01       	movw	r30, r28
    102e:	b1 96       	adiw	r30, 0x21	; 33
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <__stack+0x7d5>
    103a:	25 96       	adiw	r28, 0x05	; 5
    103c:	ac ac       	ldd	r10, Y+60	; 0x3c
    103e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1040:	ce ac       	ldd	r12, Y+62	; 0x3e
    1042:	df ac       	ldd	r13, Y+63	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	a9 a2       	std	Y+33, r10	; 0x21
    1048:	ba a2       	std	Y+34, r11	; 0x22
    104a:	cb a2       	std	Y+35, r12	; 0x23
    104c:	dc a2       	std	Y+36, r13	; 0x24
    104e:	6d a2       	std	Y+37, r6	; 0x25
    1050:	7e a2       	std	Y+38, r7	; 0x26
    1052:	8f a2       	std	Y+39, r8	; 0x27
    1054:	98 a6       	std	Y+40, r9	; 0x28
    1056:	22 96       	adiw	r28, 0x02	; 2
    1058:	2f ad       	ldd	r18, Y+63	; 0x3f
    105a:	22 97       	sbiw	r28, 0x02	; 2
    105c:	3a a1       	ldd	r19, Y+34	; 0x22
    105e:	4b a1       	ldd	r20, Y+35	; 0x23
    1060:	5c a1       	ldd	r21, Y+36	; 0x24
    1062:	66 2d       	mov	r22, r6
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	df a0       	ldd	r13, Y+39	; 0x27
    1068:	98 a5       	ldd	r25, Y+40	; 0x28
    106a:	e1 96       	adiw	r28, 0x31	; 49
    106c:	ec ac       	ldd	r14, Y+60	; 0x3c
    106e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1070:	0e ad       	ldd	r16, Y+62	; 0x3e
    1072:	1f ad       	ldd	r17, Y+63	; 0x3f
    1074:	e1 97       	sbiw	r28, 0x31	; 49
    1076:	e1 14       	cp	r14, r1
    1078:	f1 04       	cpc	r15, r1
    107a:	01 05       	cpc	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0x823>
    1080:	56 c0       	rjmp	.+172    	; 0x112e <__stack+0x8cf>
    1082:	21 95       	neg	r18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	12 16       	cp	r1, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <__stack+0x82d>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	31 95       	neg	r19
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	13 16       	cp	r1, r19
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__stack+0x837>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	93 2e       	mov	r9, r19
    1098:	98 1a       	sub	r9, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	39 15       	cp	r19, r9
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__stack+0x843>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e8 2b       	or	r30, r24
    10a4:	41 95       	neg	r20
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	14 16       	cp	r1, r20
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__stack+0x84f>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	a4 2e       	mov	r10, r20
    10b0:	ae 1a       	sub	r10, r30
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	4a 15       	cp	r20, r10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__stack+0x85b>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	f8 2b       	or	r31, r24
    10bc:	51 95       	neg	r21
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	15 16       	cp	r1, r21
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__stack+0x867>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	b5 2e       	mov	r11, r21
    10c8:	bf 1a       	sub	r11, r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	5b 15       	cp	r21, r11
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__stack+0x873>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	e8 2b       	or	r30, r24
    10d4:	61 95       	neg	r22
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	16 16       	cp	r1, r22
    10da:	08 f0       	brcs	.+2      	; 0x10de <__stack+0x87f>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	a6 2f       	mov	r26, r22
    10e0:	ae 1b       	sub	r26, r30
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	6a 17       	cp	r22, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__stack+0x88b>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f8 2b       	or	r31, r24
    10ec:	71 95       	neg	r23
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	17 16       	cp	r1, r23
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0x897>
    10f4:	e0 e0       	ldi	r30, 0x00	; 0
    10f6:	c7 2e       	mov	r12, r23
    10f8:	cf 1a       	sub	r12, r31
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	7c 15       	cp	r23, r12
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x8a3>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	e8 2b       	or	r30, r24
    1104:	8d 2d       	mov	r24, r13
    1106:	81 95       	neg	r24
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	18 16       	cp	r1, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0x8b1>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	d8 2e       	mov	r13, r24
    1112:	de 1a       	sub	r13, r30
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	8d 15       	cp	r24, r13
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0x8bd>
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	fe 2b       	or	r31, r30
    111e:	89 2f       	mov	r24, r25
    1120:	81 95       	neg	r24
    1122:	39 2d       	mov	r19, r9
    1124:	a5 01       	movw	r20, r10
    1126:	6a 2f       	mov	r22, r26
    1128:	7c 2d       	mov	r23, r12
    112a:	98 2f       	mov	r25, r24
    112c:	9f 1b       	sub	r25, r31
    112e:	8d 2d       	mov	r24, r13
    1130:	ce 58       	subi	r28, 0x8E	; 142
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	e2 e1       	ldi	r30, 0x12	; 18
    1136:	0c 94 80 38 	jmp	0x7100	; 0x7100 <__epilogue_restores__>

0000113a <__moddi3>:
    113a:	a7 e7       	ldi	r26, 0x77	; 119
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__prologue_saves__>
    1146:	98 2e       	mov	r9, r24
    1148:	89 2e       	mov	r8, r25
    114a:	71 2e       	mov	r7, r17
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	fe 01       	movw	r30, r28
    1150:	31 96       	adiw	r30, 0x01	; 1
    1152:	df 01       	movw	r26, r30
    1154:	68 2e       	mov	r6, r24
    1156:	1d 92       	st	X+, r1
    1158:	6a 94       	dec	r6
    115a:	e9 f7       	brne	.-6      	; 0x1156 <__moddi3+0x1c>
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	3a 83       	std	Y+2, r19	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	6d 83       	std	Y+5, r22	; 0x05
    1166:	7e 83       	std	Y+6, r23	; 0x06
    1168:	9f 82       	std	Y+7, r9	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	fe 01       	movw	r30, r28
    116e:	39 96       	adiw	r30, 0x09	; 9
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <__moddi3+0x38>
    1178:	a9 86       	std	Y+9, r10	; 0x09
    117a:	ba 86       	std	Y+10, r11	; 0x0a
    117c:	cb 86       	std	Y+11, r12	; 0x0b
    117e:	dc 86       	std	Y+12, r13	; 0x0c
    1180:	ed 86       	std	Y+13, r14	; 0x0d
    1182:	fe 86       	std	Y+14, r15	; 0x0e
    1184:	0f 87       	std	Y+15, r16	; 0x0f
    1186:	18 8b       	std	Y+16, r17	; 0x10
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	af 81       	ldd	r26, Y+7	; 0x07
    118e:	b8 85       	ldd	r27, Y+8	; 0x08
    1190:	b7 fd       	sbrc	r27, 7
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__moddi3+0x68>
    1194:	e1 96       	adiw	r28, 0x31	; 49
    1196:	1c ae       	std	Y+60, r1	; 0x3c
    1198:	1d ae       	std	Y+61, r1	; 0x3d
    119a:	1e ae       	std	Y+62, r1	; 0x3e
    119c:	1f ae       	std	Y+63, r1	; 0x3f
    119e:	e1 97       	sbiw	r28, 0x31	; 49
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <__moddi3+0x130>
    11a2:	21 95       	neg	r18
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	12 16       	cp	r1, r18
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__moddi3+0x72>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	31 95       	neg	r19
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	13 16       	cp	r1, r19
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__moddi3+0x7c>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b3 2f       	mov	r27, r19
    11b8:	b8 1b       	sub	r27, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	3b 17       	cp	r19, r27
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__moddi3+0x88>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	98 2b       	or	r25, r24
    11c4:	41 95       	neg	r20
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	14 16       	cp	r1, r20
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__moddi3+0x94>
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a4 2f       	mov	r26, r20
    11d0:	a9 1b       	sub	r26, r25
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	4a 17       	cp	r20, r26
    11d6:	08 f0       	brcs	.+2      	; 0x11da <__moddi3+0xa0>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	38 2b       	or	r19, r24
    11dc:	51 95       	neg	r21
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	15 16       	cp	r1, r21
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__moddi3+0xac>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	f5 2f       	mov	r31, r21
    11e8:	f3 1b       	sub	r31, r19
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	5f 17       	cp	r21, r31
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__moddi3+0xb8>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	98 2b       	or	r25, r24
    11f4:	61 95       	neg	r22
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	16 16       	cp	r1, r22
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__moddi3+0xc4>
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	e6 2f       	mov	r30, r22
    1200:	e9 1b       	sub	r30, r25
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	6e 17       	cp	r22, r30
    1206:	08 f0       	brcs	.+2      	; 0x120a <__moddi3+0xd0>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	38 2b       	or	r19, r24
    120c:	71 95       	neg	r23
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	17 16       	cp	r1, r23
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__moddi3+0xdc>
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	57 2f       	mov	r21, r23
    1218:	53 1b       	sub	r21, r19
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	75 17       	cp	r23, r21
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__moddi3+0xe8>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	48 2b       	or	r20, r24
    1224:	89 2d       	mov	r24, r9
    1226:	81 95       	neg	r24
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	18 16       	cp	r1, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__moddi3+0xf6>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	68 2e       	mov	r6, r24
    1232:	64 1a       	sub	r6, r20
    1234:	46 2d       	mov	r20, r6
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	86 15       	cp	r24, r6
    123a:	08 f0       	brcs	.+2      	; 0x123e <__moddi3+0x104>
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	93 2b       	or	r25, r19
    1240:	88 2d       	mov	r24, r8
    1242:	81 95       	neg	r24
    1244:	89 1b       	sub	r24, r25
    1246:	29 83       	std	Y+1, r18	; 0x01
    1248:	ba 83       	std	Y+2, r27	; 0x02
    124a:	ab 83       	std	Y+3, r26	; 0x03
    124c:	fc 83       	std	Y+4, r31	; 0x04
    124e:	ed 83       	std	Y+5, r30	; 0x05
    1250:	5e 83       	std	Y+6, r21	; 0x06
    1252:	4f 83       	std	Y+7, r20	; 0x07
    1254:	88 87       	std	Y+8, r24	; 0x08
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f ef       	ldi	r20, 0xFF	; 255
    125c:	5f ef       	ldi	r21, 0xFF	; 255
    125e:	e1 96       	adiw	r28, 0x31	; 49
    1260:	2c af       	std	Y+60, r18	; 0x3c
    1262:	3d af       	std	Y+61, r19	; 0x3d
    1264:	4e af       	std	Y+62, r20	; 0x3e
    1266:	5f af       	std	Y+63, r21	; 0x3f
    1268:	e1 97       	sbiw	r28, 0x31	; 49
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	af 85       	ldd	r26, Y+15	; 0x0f
    1270:	b8 89       	ldd	r27, Y+16	; 0x10
    1272:	b7 ff       	sbrs	r27, 7
    1274:	5a c0       	rjmp	.+180    	; 0x132a <__moddi3+0x1f0>
    1276:	a1 94       	neg	r10
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	1a 14       	cp	r1, r10
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0x146>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	b1 94       	neg	r11
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	1b 14       	cp	r1, r11
    1286:	08 f0       	brcs	.+2      	; 0x128a <__moddi3+0x150>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	6b 2d       	mov	r22, r11
    128c:	68 1b       	sub	r22, r24
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	b6 16       	cp	r11, r22
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__moddi3+0x15c>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	98 2b       	or	r25, r24
    1298:	c1 94       	neg	r12
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	1c 14       	cp	r1, r12
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__moddi3+0x168>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	5c 2d       	mov	r21, r12
    12a4:	59 1b       	sub	r21, r25
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	c5 16       	cp	r12, r21
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__moddi3+0x174>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	28 2b       	or	r18, r24
    12b0:	d1 94       	neg	r13
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	1d 14       	cp	r1, r13
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__moddi3+0x180>
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	4d 2d       	mov	r20, r13
    12bc:	42 1b       	sub	r20, r18
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	d4 16       	cp	r13, r20
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__moddi3+0x18c>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	98 2b       	or	r25, r24
    12c8:	e1 94       	neg	r14
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	1e 14       	cp	r1, r14
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__moddi3+0x198>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3e 2d       	mov	r19, r14
    12d4:	39 1b       	sub	r19, r25
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	e3 16       	cp	r14, r19
    12da:	08 f0       	brcs	.+2      	; 0x12de <__moddi3+0x1a4>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	28 2b       	or	r18, r24
    12e0:	f1 94       	neg	r15
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	1f 14       	cp	r1, r15
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__moddi3+0x1b0>
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	7f 2d       	mov	r23, r15
    12ec:	72 1b       	sub	r23, r18
    12ee:	27 2f       	mov	r18, r23
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	f7 16       	cp	r15, r23
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__moddi3+0x1be>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	98 2b       	or	r25, r24
    12fa:	01 95       	neg	r16
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	10 16       	cp	r1, r16
    1300:	08 f0       	brcs	.+2      	; 0x1304 <__moddi3+0x1ca>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	80 2f       	mov	r24, r16
    1306:	89 1b       	sub	r24, r25
    1308:	98 2f       	mov	r25, r24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	09 17       	cp	r16, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__moddi3+0x1d8>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	18 2b       	or	r17, r24
    1314:	87 2d       	mov	r24, r7
    1316:	81 95       	neg	r24
    1318:	81 1b       	sub	r24, r17
    131a:	a9 86       	std	Y+9, r10	; 0x09
    131c:	6a 87       	std	Y+10, r22	; 0x0a
    131e:	5b 87       	std	Y+11, r21	; 0x0b
    1320:	4c 87       	std	Y+12, r20	; 0x0c
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2e 87       	std	Y+14, r18	; 0x0e
    1326:	9f 87       	std	Y+15, r25	; 0x0f
    1328:	88 8b       	std	Y+16, r24	; 0x10
    132a:	99 81       	ldd	r25, Y+1	; 0x01
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	6e 81       	ldd	r22, Y+6	; 0x06
    1336:	7f 81       	ldd	r23, Y+7	; 0x07
    1338:	a8 85       	ldd	r26, Y+8	; 0x08
    133a:	b9 85       	ldd	r27, Y+9	; 0x09
    133c:	1a 85       	ldd	r17, Y+10	; 0x0a
    133e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1340:	fc 84       	ldd	r15, Y+12	; 0x0c
    1342:	ed 84       	ldd	r14, Y+13	; 0x0d
    1344:	de 84       	ldd	r13, Y+14	; 0x0e
    1346:	cf 84       	ldd	r12, Y+15	; 0x0f
    1348:	b8 88       	ldd	r11, Y+16	; 0x10
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	e9 e1       	ldi	r30, 0x19	; 25
    134e:	8e 2e       	mov	r8, r30
    1350:	91 2c       	mov	r9, r1
    1352:	8c 0e       	add	r8, r28
    1354:	9d 1e       	adc	r9, r29
    1356:	f4 01       	movw	r30, r8
    1358:	68 2e       	mov	r6, r24
    135a:	11 92       	st	Z+, r1
    135c:	6a 94       	dec	r6
    135e:	e9 f7       	brne	.-6      	; 0x135a <__moddi3+0x220>
    1360:	99 8f       	std	Y+25, r25	; 0x19
    1362:	2a 8f       	std	Y+26, r18	; 0x1a
    1364:	3b 8f       	std	Y+27, r19	; 0x1b
    1366:	4c 8f       	std	Y+28, r20	; 0x1c
    1368:	5d 8f       	std	Y+29, r21	; 0x1d
    136a:	6e 8f       	std	Y+30, r22	; 0x1e
    136c:	7f 8f       	std	Y+31, r23	; 0x1f
    136e:	a8 a3       	std	Y+32, r26	; 0x20
    1370:	9e 01       	movw	r18, r28
    1372:	2f 5d       	subi	r18, 0xDF	; 223
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	f9 01       	movw	r30, r18
    1378:	11 92       	st	Z+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <__moddi3+0x23e>
    137e:	b9 a3       	std	Y+33, r27	; 0x21
    1380:	1a a3       	std	Y+34, r17	; 0x22
    1382:	0b a3       	std	Y+35, r16	; 0x23
    1384:	fc a2       	std	Y+36, r15	; 0x24
    1386:	ed a2       	std	Y+37, r14	; 0x25
    1388:	de a2       	std	Y+38, r13	; 0x26
    138a:	cf a2       	std	Y+39, r12	; 0x27
    138c:	b8 a6       	std	Y+40, r11	; 0x28
    138e:	29 a0       	ldd	r2, Y+33	; 0x21
    1390:	3a a0       	ldd	r3, Y+34	; 0x22
    1392:	4b a0       	ldd	r4, Y+35	; 0x23
    1394:	5c a0       	ldd	r5, Y+36	; 0x24
    1396:	ad a0       	ldd	r10, Y+37	; 0x25
    1398:	be a0       	ldd	r11, Y+38	; 0x26
    139a:	cf a0       	ldd	r12, Y+39	; 0x27
    139c:	d8 a4       	ldd	r13, Y+40	; 0x28
    139e:	49 8d       	ldd	r20, Y+25	; 0x19
    13a0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    13a6:	e5 96       	adiw	r28, 0x35	; 53
    13a8:	4f af       	std	Y+63, r20	; 0x3f
    13aa:	e5 97       	sbiw	r28, 0x35	; 53
    13ac:	e6 96       	adiw	r28, 0x36	; 54
    13ae:	5f af       	std	Y+63, r21	; 0x3f
    13b0:	e6 97       	sbiw	r28, 0x36	; 54
    13b2:	e7 96       	adiw	r28, 0x37	; 55
    13b4:	6f af       	std	Y+63, r22	; 0x3f
    13b6:	e7 97       	sbiw	r28, 0x37	; 55
    13b8:	e8 96       	adiw	r28, 0x38	; 56
    13ba:	7f af       	std	Y+63, r23	; 0x3f
    13bc:	e8 97       	sbiw	r28, 0x38	; 56
    13be:	e8 96       	adiw	r28, 0x38	; 56
    13c0:	6c ac       	ldd	r6, Y+60	; 0x3c
    13c2:	7d ac       	ldd	r7, Y+61	; 0x3d
    13c4:	8e ac       	ldd	r8, Y+62	; 0x3e
    13c6:	9f ac       	ldd	r9, Y+63	; 0x3f
    13c8:	e8 97       	sbiw	r28, 0x38	; 56
    13ca:	2d 96       	adiw	r28, 0x0d	; 13
    13cc:	6c ae       	std	Y+60, r6	; 0x3c
    13ce:	7d ae       	std	Y+61, r7	; 0x3d
    13d0:	8e ae       	std	Y+62, r8	; 0x3e
    13d2:	9f ae       	std	Y+63, r9	; 0x3f
    13d4:	2d 97       	sbiw	r28, 0x0d	; 13
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13da:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13dc:	38 a1       	ldd	r19, Y+32	; 0x20
    13de:	3c 01       	movw	r6, r24
    13e0:	49 01       	movw	r8, r18
    13e2:	61 96       	adiw	r28, 0x11	; 17
    13e4:	6c ae       	std	Y+60, r6	; 0x3c
    13e6:	7d ae       	std	Y+61, r7	; 0x3d
    13e8:	8e ae       	std	Y+62, r8	; 0x3e
    13ea:	9f ae       	std	Y+63, r9	; 0x3f
    13ec:	61 97       	sbiw	r28, 0x11	; 17
    13ee:	a1 14       	cp	r10, r1
    13f0:	b1 04       	cpc	r11, r1
    13f2:	c1 04       	cpc	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__moddi3+0x2c0>
    13f8:	28 c3       	rjmp	.+1616   	; 0x1a4a <__moddi3+0x910>
    13fa:	62 14       	cp	r6, r2
    13fc:	73 04       	cpc	r7, r3
    13fe:	84 04       	cpc	r8, r4
    1400:	95 04       	cpc	r9, r5
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__moddi3+0x2cc>
    1404:	0e c1       	rjmp	.+540    	; 0x1622 <__moddi3+0x4e8>
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	20 16       	cp	r2, r16
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	30 06       	cpc	r3, r16
    140e:	01 e0       	ldi	r16, 0x01	; 1
    1410:	40 06       	cpc	r4, r16
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	50 06       	cpc	r5, r16
    1416:	88 f4       	brcc	.+34     	; 0x143a <__moddi3+0x300>
    1418:	1f ef       	ldi	r17, 0xFF	; 255
    141a:	21 16       	cp	r2, r17
    141c:	31 04       	cpc	r3, r1
    141e:	41 04       	cpc	r4, r1
    1420:	51 04       	cpc	r5, r1
    1422:	39 f0       	breq	.+14     	; 0x1432 <__moddi3+0x2f8>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__moddi3+0x2f8>
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	e8 2e       	mov	r14, r24
    142a:	f1 2c       	mov	r15, r1
    142c:	01 2d       	mov	r16, r1
    142e:	11 2d       	mov	r17, r1
    1430:	18 c0       	rjmp	.+48     	; 0x1462 <__moddi3+0x328>
    1432:	ee 24       	eor	r14, r14
    1434:	ff 24       	eor	r15, r15
    1436:	87 01       	movw	r16, r14
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__moddi3+0x328>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	22 16       	cp	r2, r18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	32 06       	cpc	r3, r18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	42 06       	cpc	r4, r18
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	52 06       	cpc	r5, r18
    144a:	30 f0       	brcs	.+12     	; 0x1458 <__moddi3+0x31e>
    144c:	b8 e1       	ldi	r27, 0x18	; 24
    144e:	eb 2e       	mov	r14, r27
    1450:	f1 2c       	mov	r15, r1
    1452:	01 2d       	mov	r16, r1
    1454:	11 2d       	mov	r17, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__moddi3+0x328>
    1458:	a0 e1       	ldi	r26, 0x10	; 16
    145a:	ea 2e       	mov	r14, r26
    145c:	f1 2c       	mov	r15, r1
    145e:	01 2d       	mov	r16, r1
    1460:	11 2d       	mov	r17, r1
    1462:	d2 01       	movw	r26, r4
    1464:	c1 01       	movw	r24, r2
    1466:	0e 2c       	mov	r0, r14
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__moddi3+0x338>
    146a:	b6 95       	lsr	r27
    146c:	a7 95       	ror	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	0a 94       	dec	r0
    1474:	d2 f7       	brpl	.-12     	; 0x146a <__moddi3+0x330>
    1476:	8f 58       	subi	r24, 0x8F	; 143
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	dc 01       	movw	r26, r24
    147c:	2c 91       	ld	r18, X
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8e 19       	sub	r24, r14
    1488:	9f 09       	sbc	r25, r15
    148a:	a0 0b       	sbc	r26, r16
    148c:	b1 0b       	sbc	r27, r17
    148e:	5c 01       	movw	r10, r24
    1490:	6d 01       	movw	r12, r26
    1492:	a2 1a       	sub	r10, r18
    1494:	b1 08       	sbc	r11, r1
    1496:	c1 08       	sbc	r12, r1
    1498:	d1 08       	sbc	r13, r1
    149a:	65 96       	adiw	r28, 0x15	; 21
    149c:	ac ae       	std	Y+60, r10	; 0x3c
    149e:	bd ae       	std	Y+61, r11	; 0x3d
    14a0:	ce ae       	std	Y+62, r12	; 0x3e
    14a2:	df ae       	std	Y+63, r13	; 0x3f
    14a4:	65 97       	sbiw	r28, 0x15	; 21
    14a6:	a1 14       	cp	r10, r1
    14a8:	b1 04       	cpc	r11, r1
    14aa:	c1 04       	cpc	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__moddi3+0x378>
    14b0:	45 c0       	rjmp	.+138    	; 0x153c <__moddi3+0x402>
    14b2:	62 96       	adiw	r28, 0x12	; 18
    14b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    14b6:	62 97       	sbiw	r28, 0x12	; 18
    14b8:	06 2e       	mov	r0, r22
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <__moddi3+0x38a>
    14bc:	22 0c       	add	r2, r2
    14be:	33 1c       	adc	r3, r3
    14c0:	44 1c       	adc	r4, r4
    14c2:	55 1c       	adc	r5, r5
    14c4:	0a 94       	dec	r0
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <__moddi3+0x382>
    14c8:	a4 01       	movw	r20, r8
    14ca:	93 01       	movw	r18, r6
    14cc:	06 2e       	mov	r0, r22
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__moddi3+0x39e>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <__moddi3+0x396>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	8a 19       	sub	r24, r10
    14e2:	9b 09       	sbc	r25, r11
    14e4:	e8 96       	adiw	r28, 0x38	; 56
    14e6:	cc ac       	ldd	r12, Y+60	; 0x3c
    14e8:	dd ac       	ldd	r13, Y+61	; 0x3d
    14ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    14ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    14ee:	e8 97       	sbiw	r28, 0x38	; 56
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__moddi3+0x3c0>
    14f2:	f6 94       	lsr	r15
    14f4:	e7 94       	ror	r14
    14f6:	d7 94       	ror	r13
    14f8:	c7 94       	ror	r12
    14fa:	8a 95       	dec	r24
    14fc:	d2 f7       	brpl	.-12     	; 0x14f2 <__moddi3+0x3b8>
    14fe:	87 01       	movw	r16, r14
    1500:	76 01       	movw	r14, r12
    1502:	e2 2a       	or	r14, r18
    1504:	f3 2a       	or	r15, r19
    1506:	04 2b       	or	r16, r20
    1508:	15 2b       	or	r17, r21
    150a:	61 96       	adiw	r28, 0x11	; 17
    150c:	ec ae       	std	Y+60, r14	; 0x3c
    150e:	fd ae       	std	Y+61, r15	; 0x3d
    1510:	0e af       	std	Y+62, r16	; 0x3e
    1512:	1f af       	std	Y+63, r17	; 0x3f
    1514:	61 97       	sbiw	r28, 0x11	; 17
    1516:	e8 96       	adiw	r28, 0x38	; 56
    1518:	0c ad       	ldd	r16, Y+60	; 0x3c
    151a:	1d ad       	ldd	r17, Y+61	; 0x3d
    151c:	2e ad       	ldd	r18, Y+62	; 0x3e
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	e8 97       	sbiw	r28, 0x38	; 56
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__moddi3+0x3f2>
    1524:	00 0f       	add	r16, r16
    1526:	11 1f       	adc	r17, r17
    1528:	22 1f       	adc	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	6a 95       	dec	r22
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__moddi3+0x3ea>
    1530:	2d 96       	adiw	r28, 0x0d	; 13
    1532:	0c af       	std	Y+60, r16	; 0x3c
    1534:	1d af       	std	Y+61, r17	; 0x3d
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	3f af       	std	Y+63, r19	; 0x3f
    153a:	2d 97       	sbiw	r28, 0x0d	; 13
    153c:	32 01       	movw	r6, r4
    153e:	88 24       	eor	r8, r8
    1540:	99 24       	eor	r9, r9
    1542:	a2 01       	movw	r20, r4
    1544:	91 01       	movw	r18, r2
    1546:	40 70       	andi	r20, 0x00	; 0
    1548:	50 70       	andi	r21, 0x00	; 0
    154a:	69 96       	adiw	r28, 0x19	; 25
    154c:	2c af       	std	Y+60, r18	; 0x3c
    154e:	3d af       	std	Y+61, r19	; 0x3d
    1550:	4e af       	std	Y+62, r20	; 0x3e
    1552:	5f af       	std	Y+63, r21	; 0x3f
    1554:	69 97       	sbiw	r28, 0x19	; 25
    1556:	61 96       	adiw	r28, 0x11	; 17
    1558:	6c ad       	ldd	r22, Y+60	; 0x3c
    155a:	7d ad       	ldd	r23, Y+61	; 0x3d
    155c:	8e ad       	ldd	r24, Y+62	; 0x3e
    155e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1560:	61 97       	sbiw	r28, 0x11	; 17
    1562:	a4 01       	movw	r20, r8
    1564:	93 01       	movw	r18, r6
    1566:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    156a:	7b 01       	movw	r14, r22
    156c:	8c 01       	movw	r16, r24
    156e:	61 96       	adiw	r28, 0x11	; 17
    1570:	6c ad       	ldd	r22, Y+60	; 0x3c
    1572:	7d ad       	ldd	r23, Y+61	; 0x3d
    1574:	8e ad       	ldd	r24, Y+62	; 0x3e
    1576:	9f ad       	ldd	r25, Y+63	; 0x3f
    1578:	61 97       	sbiw	r28, 0x11	; 17
    157a:	a4 01       	movw	r20, r8
    157c:	93 01       	movw	r18, r6
    157e:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1582:	ca 01       	movw	r24, r20
    1584:	b9 01       	movw	r22, r18
    1586:	69 96       	adiw	r28, 0x19	; 25
    1588:	2c ad       	ldd	r18, Y+60	; 0x3c
    158a:	3d ad       	ldd	r19, Y+61	; 0x3d
    158c:	4e ad       	ldd	r20, Y+62	; 0x3e
    158e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1590:	69 97       	sbiw	r28, 0x19	; 25
    1592:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	87 01       	movw	r16, r14
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	2d 96       	adiw	r28, 0x0d	; 13
    15a2:	ac ac       	ldd	r10, Y+60	; 0x3c
    15a4:	bd ac       	ldd	r11, Y+61	; 0x3d
    15a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    15a8:	df ac       	ldd	r13, Y+63	; 0x3f
    15aa:	2d 97       	sbiw	r28, 0x0d	; 13
    15ac:	c6 01       	movw	r24, r12
    15ae:	aa 27       	eor	r26, r26
    15b0:	bb 27       	eor	r27, r27
    15b2:	57 01       	movw	r10, r14
    15b4:	68 01       	movw	r12, r16
    15b6:	a8 2a       	or	r10, r24
    15b8:	b9 2a       	or	r11, r25
    15ba:	ca 2a       	or	r12, r26
    15bc:	db 2a       	or	r13, r27
    15be:	a2 16       	cp	r10, r18
    15c0:	b3 06       	cpc	r11, r19
    15c2:	c4 06       	cpc	r12, r20
    15c4:	d5 06       	cpc	r13, r21
    15c6:	90 f4       	brcc	.+36     	; 0x15ec <__moddi3+0x4b2>
    15c8:	a2 0c       	add	r10, r2
    15ca:	b3 1c       	adc	r11, r3
    15cc:	c4 1c       	adc	r12, r4
    15ce:	d5 1c       	adc	r13, r5
    15d0:	a2 14       	cp	r10, r2
    15d2:	b3 04       	cpc	r11, r3
    15d4:	c4 04       	cpc	r12, r4
    15d6:	d5 04       	cpc	r13, r5
    15d8:	48 f0       	brcs	.+18     	; 0x15ec <__moddi3+0x4b2>
    15da:	a2 16       	cp	r10, r18
    15dc:	b3 06       	cpc	r11, r19
    15de:	c4 06       	cpc	r12, r20
    15e0:	d5 06       	cpc	r13, r21
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <__moddi3+0x4b2>
    15e4:	a2 0c       	add	r10, r2
    15e6:	b3 1c       	adc	r11, r3
    15e8:	c4 1c       	adc	r12, r4
    15ea:	d5 1c       	adc	r13, r5
    15ec:	a2 1a       	sub	r10, r18
    15ee:	b3 0a       	sbc	r11, r19
    15f0:	c4 0a       	sbc	r12, r20
    15f2:	d5 0a       	sbc	r13, r21
    15f4:	c6 01       	movw	r24, r12
    15f6:	b5 01       	movw	r22, r10
    15f8:	a4 01       	movw	r20, r8
    15fa:	93 01       	movw	r18, r6
    15fc:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1600:	7b 01       	movw	r14, r22
    1602:	8c 01       	movw	r16, r24
    1604:	c6 01       	movw	r24, r12
    1606:	b5 01       	movw	r22, r10
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1610:	ca 01       	movw	r24, r20
    1612:	b9 01       	movw	r22, r18
    1614:	69 96       	adiw	r28, 0x19	; 25
    1616:	2c ad       	ldd	r18, Y+60	; 0x3c
    1618:	3d ad       	ldd	r19, Y+61	; 0x3d
    161a:	4e ad       	ldd	r20, Y+62	; 0x3e
    161c:	5f ad       	ldd	r21, Y+63	; 0x3f
    161e:	69 97       	sbiw	r28, 0x19	; 25
    1620:	c8 c1       	rjmp	.+912    	; 0x19b2 <__moddi3+0x878>
    1622:	21 14       	cp	r2, r1
    1624:	31 04       	cpc	r3, r1
    1626:	41 04       	cpc	r4, r1
    1628:	51 04       	cpc	r5, r1
    162a:	71 f4       	brne	.+28     	; 0x1648 <__moddi3+0x50e>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1640:	c9 01       	movw	r24, r18
    1642:	da 01       	movw	r26, r20
    1644:	1c 01       	movw	r2, r24
    1646:	2d 01       	movw	r4, r26
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	20 16       	cp	r2, r16
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	30 06       	cpc	r3, r16
    1650:	01 e0       	ldi	r16, 0x01	; 1
    1652:	40 06       	cpc	r4, r16
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	50 06       	cpc	r5, r16
    1658:	88 f4       	brcc	.+34     	; 0x167c <__moddi3+0x542>
    165a:	1f ef       	ldi	r17, 0xFF	; 255
    165c:	21 16       	cp	r2, r17
    165e:	31 04       	cpc	r3, r1
    1660:	41 04       	cpc	r4, r1
    1662:	51 04       	cpc	r5, r1
    1664:	39 f0       	breq	.+14     	; 0x1674 <__moddi3+0x53a>
    1666:	30 f0       	brcs	.+12     	; 0x1674 <__moddi3+0x53a>
    1668:	68 e0       	ldi	r22, 0x08	; 8
    166a:	e6 2e       	mov	r14, r22
    166c:	f1 2c       	mov	r15, r1
    166e:	01 2d       	mov	r16, r1
    1670:	11 2d       	mov	r17, r1
    1672:	18 c0       	rjmp	.+48     	; 0x16a4 <__moddi3+0x56a>
    1674:	ee 24       	eor	r14, r14
    1676:	ff 24       	eor	r15, r15
    1678:	87 01       	movw	r16, r14
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <__moddi3+0x56a>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	22 16       	cp	r2, r18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	32 06       	cpc	r3, r18
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	42 06       	cpc	r4, r18
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	52 06       	cpc	r5, r18
    168c:	30 f0       	brcs	.+12     	; 0x169a <__moddi3+0x560>
    168e:	58 e1       	ldi	r21, 0x18	; 24
    1690:	e5 2e       	mov	r14, r21
    1692:	f1 2c       	mov	r15, r1
    1694:	01 2d       	mov	r16, r1
    1696:	11 2d       	mov	r17, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__moddi3+0x56a>
    169a:	40 e1       	ldi	r20, 0x10	; 16
    169c:	e4 2e       	mov	r14, r20
    169e:	f1 2c       	mov	r15, r1
    16a0:	01 2d       	mov	r16, r1
    16a2:	11 2d       	mov	r17, r1
    16a4:	d2 01       	movw	r26, r4
    16a6:	c1 01       	movw	r24, r2
    16a8:	0e 2c       	mov	r0, r14
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <__moddi3+0x57a>
    16ac:	b6 95       	lsr	r27
    16ae:	a7 95       	ror	r26
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	0a 94       	dec	r0
    16b6:	d2 f7       	brpl	.-12     	; 0x16ac <__moddi3+0x572>
    16b8:	8f 58       	subi	r24, 0x8F	; 143
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	dc 01       	movw	r26, r24
    16be:	2c 91       	ld	r18, X
    16c0:	30 e2       	ldi	r19, 0x20	; 32
    16c2:	a3 2e       	mov	r10, r19
    16c4:	b1 2c       	mov	r11, r1
    16c6:	c1 2c       	mov	r12, r1
    16c8:	d1 2c       	mov	r13, r1
    16ca:	d6 01       	movw	r26, r12
    16cc:	c5 01       	movw	r24, r10
    16ce:	8e 19       	sub	r24, r14
    16d0:	9f 09       	sbc	r25, r15
    16d2:	a0 0b       	sbc	r26, r16
    16d4:	b1 0b       	sbc	r27, r17
    16d6:	7c 01       	movw	r14, r24
    16d8:	8d 01       	movw	r16, r26
    16da:	e2 1a       	sub	r14, r18
    16dc:	f1 08       	sbc	r15, r1
    16de:	01 09       	sbc	r16, r1
    16e0:	11 09       	sbc	r17, r1
    16e2:	65 96       	adiw	r28, 0x15	; 21
    16e4:	ec ae       	std	Y+60, r14	; 0x3c
    16e6:	fd ae       	std	Y+61, r15	; 0x3d
    16e8:	0e af       	std	Y+62, r16	; 0x3e
    16ea:	1f af       	std	Y+63, r17	; 0x3f
    16ec:	65 97       	sbiw	r28, 0x15	; 21
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__moddi3+0x5cc>
    16f8:	64 01       	movw	r12, r8
    16fa:	53 01       	movw	r10, r6
    16fc:	a2 18       	sub	r10, r2
    16fe:	b3 08       	sbc	r11, r3
    1700:	c4 08       	sbc	r12, r4
    1702:	d5 08       	sbc	r13, r5
    1704:	ec c0       	rjmp	.+472    	; 0x18de <__moddi3+0x7a4>
    1706:	62 96       	adiw	r28, 0x12	; 18
    1708:	ff ac       	ldd	r15, Y+63	; 0x3f
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	e4 96       	adiw	r28, 0x34	; 52
    170e:	ff ae       	std	Y+63, r15	; 0x3f
    1710:	e4 97       	sbiw	r28, 0x34	; 52
    1712:	0f 2c       	mov	r0, r15
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__moddi3+0x5e4>
    1716:	22 0c       	add	r2, r2
    1718:	33 1c       	adc	r3, r3
    171a:	44 1c       	adc	r4, r4
    171c:	55 1c       	adc	r5, r5
    171e:	0a 94       	dec	r0
    1720:	d2 f7       	brpl	.-12     	; 0x1716 <__moddi3+0x5dc>
    1722:	8a 2d       	mov	r24, r10
    1724:	8f 19       	sub	r24, r15
    1726:	64 01       	movw	r12, r8
    1728:	53 01       	movw	r10, r6
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__moddi3+0x5fc>
    172e:	d6 94       	lsr	r13
    1730:	c7 94       	ror	r12
    1732:	b7 94       	ror	r11
    1734:	a7 94       	ror	r10
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__moddi3+0x5f4>
    173a:	a4 01       	movw	r20, r8
    173c:	93 01       	movw	r18, r6
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__moddi3+0x60e>
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	44 1f       	adc	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	fa 94       	dec	r15
    174a:	d2 f7       	brpl	.-12     	; 0x1740 <__moddi3+0x606>
    174c:	e8 96       	adiw	r28, 0x38	; 56
    174e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1750:	7d ac       	ldd	r7, Y+61	; 0x3d
    1752:	8e ac       	ldd	r8, Y+62	; 0x3e
    1754:	9f ac       	ldd	r9, Y+63	; 0x3f
    1756:	e8 97       	sbiw	r28, 0x38	; 56
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__moddi3+0x628>
    175a:	96 94       	lsr	r9
    175c:	87 94       	ror	r8
    175e:	77 94       	ror	r7
    1760:	67 94       	ror	r6
    1762:	8a 95       	dec	r24
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__moddi3+0x620>
    1766:	84 01       	movw	r16, r8
    1768:	73 01       	movw	r14, r6
    176a:	e2 2a       	or	r14, r18
    176c:	f3 2a       	or	r15, r19
    176e:	04 2b       	or	r16, r20
    1770:	15 2b       	or	r17, r21
    1772:	29 96       	adiw	r28, 0x09	; 9
    1774:	ec ae       	std	Y+60, r14	; 0x3c
    1776:	fd ae       	std	Y+61, r15	; 0x3d
    1778:	0e af       	std	Y+62, r16	; 0x3e
    177a:	1f af       	std	Y+63, r17	; 0x3f
    177c:	29 97       	sbiw	r28, 0x09	; 9
    177e:	32 01       	movw	r6, r4
    1780:	88 24       	eor	r8, r8
    1782:	99 24       	eor	r9, r9
    1784:	92 01       	movw	r18, r4
    1786:	81 01       	movw	r16, r2
    1788:	20 70       	andi	r18, 0x00	; 0
    178a:	30 70       	andi	r19, 0x00	; 0
    178c:	6d 96       	adiw	r28, 0x1d	; 29
    178e:	0c af       	std	Y+60, r16	; 0x3c
    1790:	1d af       	std	Y+61, r17	; 0x3d
    1792:	2e af       	std	Y+62, r18	; 0x3e
    1794:	3f af       	std	Y+63, r19	; 0x3f
    1796:	6d 97       	sbiw	r28, 0x1d	; 29
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	a4 01       	movw	r20, r8
    179e:	93 01       	movw	r18, r6
    17a0:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    17a4:	7b 01       	movw	r14, r22
    17a6:	8c 01       	movw	r16, r24
    17a8:	c6 01       	movw	r24, r12
    17aa:	b5 01       	movw	r22, r10
    17ac:	a4 01       	movw	r20, r8
    17ae:	93 01       	movw	r18, r6
    17b0:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    17b4:	ca 01       	movw	r24, r20
    17b6:	b9 01       	movw	r22, r18
    17b8:	6d 96       	adiw	r28, 0x1d	; 29
    17ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    17bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17be:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c2:	6d 97       	sbiw	r28, 0x1d	; 29
    17c4:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	87 01       	movw	r16, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	ee 24       	eor	r14, r14
    17d2:	29 96       	adiw	r28, 0x09	; 9
    17d4:	ac ac       	ldd	r10, Y+60	; 0x3c
    17d6:	bd ac       	ldd	r11, Y+61	; 0x3d
    17d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    17da:	df ac       	ldd	r13, Y+63	; 0x3f
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	c6 01       	movw	r24, r12
    17e0:	aa 27       	eor	r26, r26
    17e2:	bb 27       	eor	r27, r27
    17e4:	5c 01       	movw	r10, r24
    17e6:	6d 01       	movw	r12, r26
    17e8:	ae 28       	or	r10, r14
    17ea:	bf 28       	or	r11, r15
    17ec:	c0 2a       	or	r12, r16
    17ee:	d1 2a       	or	r13, r17
    17f0:	a2 16       	cp	r10, r18
    17f2:	b3 06       	cpc	r11, r19
    17f4:	c4 06       	cpc	r12, r20
    17f6:	d5 06       	cpc	r13, r21
    17f8:	90 f4       	brcc	.+36     	; 0x181e <__moddi3+0x6e4>
    17fa:	a2 0c       	add	r10, r2
    17fc:	b3 1c       	adc	r11, r3
    17fe:	c4 1c       	adc	r12, r4
    1800:	d5 1c       	adc	r13, r5
    1802:	a2 14       	cp	r10, r2
    1804:	b3 04       	cpc	r11, r3
    1806:	c4 04       	cpc	r12, r4
    1808:	d5 04       	cpc	r13, r5
    180a:	48 f0       	brcs	.+18     	; 0x181e <__moddi3+0x6e4>
    180c:	a2 16       	cp	r10, r18
    180e:	b3 06       	cpc	r11, r19
    1810:	c4 06       	cpc	r12, r20
    1812:	d5 06       	cpc	r13, r21
    1814:	20 f4       	brcc	.+8      	; 0x181e <__moddi3+0x6e4>
    1816:	a2 0c       	add	r10, r2
    1818:	b3 1c       	adc	r11, r3
    181a:	c4 1c       	adc	r12, r4
    181c:	d5 1c       	adc	r13, r5
    181e:	a2 1a       	sub	r10, r18
    1820:	b3 0a       	sbc	r11, r19
    1822:	c4 0a       	sbc	r12, r20
    1824:	d5 0a       	sbc	r13, r21
    1826:	c6 01       	movw	r24, r12
    1828:	b5 01       	movw	r22, r10
    182a:	a4 01       	movw	r20, r8
    182c:	93 01       	movw	r18, r6
    182e:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1842:	ca 01       	movw	r24, r20
    1844:	b9 01       	movw	r22, r18
    1846:	6d 96       	adiw	r28, 0x1d	; 29
    1848:	2c ad       	ldd	r18, Y+60	; 0x3c
    184a:	3d ad       	ldd	r19, Y+61	; 0x3d
    184c:	4e ad       	ldd	r20, Y+62	; 0x3e
    184e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1850:	6d 97       	sbiw	r28, 0x1d	; 29
    1852:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	87 01       	movw	r16, r14
    185c:	ff 24       	eor	r15, r15
    185e:	ee 24       	eor	r14, r14
    1860:	29 96       	adiw	r28, 0x09	; 9
    1862:	8c ad       	ldd	r24, Y+60	; 0x3c
    1864:	9d ad       	ldd	r25, Y+61	; 0x3d
    1866:	ae ad       	ldd	r26, Y+62	; 0x3e
    1868:	bf ad       	ldd	r27, Y+63	; 0x3f
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	a0 70       	andi	r26, 0x00	; 0
    186e:	b0 70       	andi	r27, 0x00	; 0
    1870:	57 01       	movw	r10, r14
    1872:	68 01       	movw	r12, r16
    1874:	a8 2a       	or	r10, r24
    1876:	b9 2a       	or	r11, r25
    1878:	ca 2a       	or	r12, r26
    187a:	db 2a       	or	r13, r27
    187c:	a2 16       	cp	r10, r18
    187e:	b3 06       	cpc	r11, r19
    1880:	c4 06       	cpc	r12, r20
    1882:	d5 06       	cpc	r13, r21
    1884:	90 f4       	brcc	.+36     	; 0x18aa <__moddi3+0x770>
    1886:	a2 0c       	add	r10, r2
    1888:	b3 1c       	adc	r11, r3
    188a:	c4 1c       	adc	r12, r4
    188c:	d5 1c       	adc	r13, r5
    188e:	a2 14       	cp	r10, r2
    1890:	b3 04       	cpc	r11, r3
    1892:	c4 04       	cpc	r12, r4
    1894:	d5 04       	cpc	r13, r5
    1896:	48 f0       	brcs	.+18     	; 0x18aa <__moddi3+0x770>
    1898:	a2 16       	cp	r10, r18
    189a:	b3 06       	cpc	r11, r19
    189c:	c4 06       	cpc	r12, r20
    189e:	d5 06       	cpc	r13, r21
    18a0:	20 f4       	brcc	.+8      	; 0x18aa <__moddi3+0x770>
    18a2:	a2 0c       	add	r10, r2
    18a4:	b3 1c       	adc	r11, r3
    18a6:	c4 1c       	adc	r12, r4
    18a8:	d5 1c       	adc	r13, r5
    18aa:	e8 96       	adiw	r28, 0x38	; 56
    18ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    18ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    18b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    18b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    18b4:	e8 97       	sbiw	r28, 0x38	; 56
    18b6:	e4 96       	adiw	r28, 0x34	; 52
    18b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ba:	e4 97       	sbiw	r28, 0x34	; 52
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__moddi3+0x78c>
    18be:	ee 0c       	add	r14, r14
    18c0:	ff 1c       	adc	r15, r15
    18c2:	00 1f       	adc	r16, r16
    18c4:	11 1f       	adc	r17, r17
    18c6:	0a 94       	dec	r0
    18c8:	d2 f7       	brpl	.-12     	; 0x18be <__moddi3+0x784>
    18ca:	2d 96       	adiw	r28, 0x0d	; 13
    18cc:	ec ae       	std	Y+60, r14	; 0x3c
    18ce:	fd ae       	std	Y+61, r15	; 0x3d
    18d0:	0e af       	std	Y+62, r16	; 0x3e
    18d2:	1f af       	std	Y+63, r17	; 0x3f
    18d4:	2d 97       	sbiw	r28, 0x0d	; 13
    18d6:	a2 1a       	sub	r10, r18
    18d8:	b3 0a       	sbc	r11, r19
    18da:	c4 0a       	sbc	r12, r20
    18dc:	d5 0a       	sbc	r13, r21
    18de:	32 01       	movw	r6, r4
    18e0:	88 24       	eor	r8, r8
    18e2:	99 24       	eor	r9, r9
    18e4:	92 01       	movw	r18, r4
    18e6:	81 01       	movw	r16, r2
    18e8:	20 70       	andi	r18, 0x00	; 0
    18ea:	30 70       	andi	r19, 0x00	; 0
    18ec:	a1 96       	adiw	r28, 0x21	; 33
    18ee:	0c af       	std	Y+60, r16	; 0x3c
    18f0:	1d af       	std	Y+61, r17	; 0x3d
    18f2:	2e af       	std	Y+62, r18	; 0x3e
    18f4:	3f af       	std	Y+63, r19	; 0x3f
    18f6:	a1 97       	sbiw	r28, 0x21	; 33
    18f8:	c6 01       	movw	r24, r12
    18fa:	b5 01       	movw	r22, r10
    18fc:	a4 01       	movw	r20, r8
    18fe:	93 01       	movw	r18, r6
    1900:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1904:	7b 01       	movw	r14, r22
    1906:	8c 01       	movw	r16, r24
    1908:	c6 01       	movw	r24, r12
    190a:	b5 01       	movw	r22, r10
    190c:	a4 01       	movw	r20, r8
    190e:	93 01       	movw	r18, r6
    1910:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1914:	ca 01       	movw	r24, r20
    1916:	b9 01       	movw	r22, r18
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	2c ad       	ldd	r18, Y+60	; 0x3c
    191c:	3d ad       	ldd	r19, Y+61	; 0x3d
    191e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1920:	5f ad       	ldd	r21, Y+63	; 0x3f
    1922:	a1 97       	sbiw	r28, 0x21	; 33
    1924:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	87 01       	movw	r16, r14
    192e:	ff 24       	eor	r15, r15
    1930:	ee 24       	eor	r14, r14
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	ac ac       	ldd	r10, Y+60	; 0x3c
    1936:	bd ac       	ldd	r11, Y+61	; 0x3d
    1938:	ce ac       	ldd	r12, Y+62	; 0x3e
    193a:	df ac       	ldd	r13, Y+63	; 0x3f
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	c6 01       	movw	r24, r12
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	57 01       	movw	r10, r14
    1946:	68 01       	movw	r12, r16
    1948:	a8 2a       	or	r10, r24
    194a:	b9 2a       	or	r11, r25
    194c:	ca 2a       	or	r12, r26
    194e:	db 2a       	or	r13, r27
    1950:	a2 16       	cp	r10, r18
    1952:	b3 06       	cpc	r11, r19
    1954:	c4 06       	cpc	r12, r20
    1956:	d5 06       	cpc	r13, r21
    1958:	90 f4       	brcc	.+36     	; 0x197e <__moddi3+0x844>
    195a:	a2 0c       	add	r10, r2
    195c:	b3 1c       	adc	r11, r3
    195e:	c4 1c       	adc	r12, r4
    1960:	d5 1c       	adc	r13, r5
    1962:	a2 14       	cp	r10, r2
    1964:	b3 04       	cpc	r11, r3
    1966:	c4 04       	cpc	r12, r4
    1968:	d5 04       	cpc	r13, r5
    196a:	48 f0       	brcs	.+18     	; 0x197e <__moddi3+0x844>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	20 f4       	brcc	.+8      	; 0x197e <__moddi3+0x844>
    1976:	a2 0c       	add	r10, r2
    1978:	b3 1c       	adc	r11, r3
    197a:	c4 1c       	adc	r12, r4
    197c:	d5 1c       	adc	r13, r5
    197e:	a2 1a       	sub	r10, r18
    1980:	b3 0a       	sbc	r11, r19
    1982:	c4 0a       	sbc	r12, r20
    1984:	d5 0a       	sbc	r13, r21
    1986:	c6 01       	movw	r24, r12
    1988:	b5 01       	movw	r22, r10
    198a:	a4 01       	movw	r20, r8
    198c:	93 01       	movw	r18, r6
    198e:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1992:	7b 01       	movw	r14, r22
    1994:	8c 01       	movw	r16, r24
    1996:	c6 01       	movw	r24, r12
    1998:	b5 01       	movw	r22, r10
    199a:	a4 01       	movw	r20, r8
    199c:	93 01       	movw	r18, r6
    199e:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    19a2:	ca 01       	movw	r24, r20
    19a4:	b9 01       	movw	r22, r18
    19a6:	a1 96       	adiw	r28, 0x21	; 33
    19a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b0:	a1 97       	sbiw	r28, 0x21	; 33
    19b2:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	87 01       	movw	r16, r14
    19bc:	ff 24       	eor	r15, r15
    19be:	ee 24       	eor	r14, r14
    19c0:	2d 96       	adiw	r28, 0x0d	; 13
    19c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    19c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    19ca:	2d 97       	sbiw	r28, 0x0d	; 13
    19cc:	a0 70       	andi	r26, 0x00	; 0
    19ce:	b0 70       	andi	r27, 0x00	; 0
    19d0:	e8 2a       	or	r14, r24
    19d2:	f9 2a       	or	r15, r25
    19d4:	0a 2b       	or	r16, r26
    19d6:	1b 2b       	or	r17, r27
    19d8:	e2 16       	cp	r14, r18
    19da:	f3 06       	cpc	r15, r19
    19dc:	04 07       	cpc	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	90 f4       	brcc	.+36     	; 0x1a06 <__moddi3+0x8cc>
    19e2:	e2 0c       	add	r14, r2
    19e4:	f3 1c       	adc	r15, r3
    19e6:	04 1d       	adc	r16, r4
    19e8:	15 1d       	adc	r17, r5
    19ea:	e2 14       	cp	r14, r2
    19ec:	f3 04       	cpc	r15, r3
    19ee:	04 05       	cpc	r16, r4
    19f0:	15 05       	cpc	r17, r5
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <__moddi3+0x8cc>
    19f4:	e2 16       	cp	r14, r18
    19f6:	f3 06       	cpc	r15, r19
    19f8:	04 07       	cpc	r16, r20
    19fa:	15 07       	cpc	r17, r21
    19fc:	20 f4       	brcc	.+8      	; 0x1a06 <__moddi3+0x8cc>
    19fe:	e2 0c       	add	r14, r2
    1a00:	f3 1c       	adc	r15, r3
    1a02:	04 1d       	adc	r16, r4
    1a04:	15 1d       	adc	r17, r5
    1a06:	e2 1a       	sub	r14, r18
    1a08:	f3 0a       	sbc	r15, r19
    1a0a:	04 0b       	sbc	r16, r20
    1a0c:	15 0b       	sbc	r17, r21
    1a0e:	d8 01       	movw	r26, r16
    1a10:	c7 01       	movw	r24, r14
    1a12:	62 96       	adiw	r28, 0x12	; 18
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	62 97       	sbiw	r28, 0x12	; 18
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__moddi3+0x8e8>
    1a1a:	b6 95       	lsr	r27
    1a1c:	a7 95       	ror	r26
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__moddi3+0x8e0>
    1a26:	89 a7       	std	Y+41, r24	; 0x29
    1a28:	9a a7       	std	Y+42, r25	; 0x2a
    1a2a:	ab a7       	std	Y+43, r26	; 0x2b
    1a2c:	bc a7       	std	Y+44, r27	; 0x2c
    1a2e:	1d a6       	std	Y+45, r1	; 0x2d
    1a30:	1e a6       	std	Y+46, r1	; 0x2e
    1a32:	1f a6       	std	Y+47, r1	; 0x2f
    1a34:	18 aa       	std	Y+48, r1	; 0x30
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3a:	8a 8b       	std	Y+18, r24	; 0x12
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a42:	8c 8b       	std	Y+20, r24	; 0x14
    1a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	2f c3       	rjmp	.+1630   	; 0x20a8 <__moddi3+0xf6e>
    1a4a:	6a 14       	cp	r6, r10
    1a4c:	7b 04       	cpc	r7, r11
    1a4e:	8c 04       	cpc	r8, r12
    1a50:	9d 04       	cpc	r9, r13
    1a52:	48 f4       	brcc	.+18     	; 0x1a66 <__moddi3+0x92c>
    1a54:	49 8b       	std	Y+17, r20	; 0x11
    1a56:	5a 8b       	std	Y+18, r21	; 0x12
    1a58:	6b 8b       	std	Y+19, r22	; 0x13
    1a5a:	7c 8b       	std	Y+20, r23	; 0x14
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	2f 8b       	std	Y+23, r18	; 0x17
    1a62:	38 8f       	std	Y+24, r19	; 0x18
    1a64:	27 c3       	rjmp	.+1614   	; 0x20b4 <__moddi3+0xf7a>
    1a66:	00 e0       	ldi	r16, 0x00	; 0
    1a68:	a0 16       	cp	r10, r16
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	b0 06       	cpc	r11, r16
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	c0 06       	cpc	r12, r16
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	d0 06       	cpc	r13, r16
    1a76:	88 f4       	brcc	.+34     	; 0x1a9a <__moddi3+0x960>
    1a78:	1f ef       	ldi	r17, 0xFF	; 255
    1a7a:	a1 16       	cp	r10, r17
    1a7c:	b1 04       	cpc	r11, r1
    1a7e:	c1 04       	cpc	r12, r1
    1a80:	d1 04       	cpc	r13, r1
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__moddi3+0x958>
    1a84:	30 f0       	brcs	.+12     	; 0x1a92 <__moddi3+0x958>
    1a86:	28 e0       	ldi	r18, 0x08	; 8
    1a88:	e2 2e       	mov	r14, r18
    1a8a:	f1 2c       	mov	r15, r1
    1a8c:	01 2d       	mov	r16, r1
    1a8e:	11 2d       	mov	r17, r1
    1a90:	18 c0       	rjmp	.+48     	; 0x1ac2 <__moddi3+0x988>
    1a92:	ee 24       	eor	r14, r14
    1a94:	ff 24       	eor	r15, r15
    1a96:	87 01       	movw	r16, r14
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <__moddi3+0x988>
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	a2 16       	cp	r10, r18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	b2 06       	cpc	r11, r18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	c2 06       	cpc	r12, r18
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	d2 06       	cpc	r13, r18
    1aaa:	30 f0       	brcs	.+12     	; 0x1ab8 <__moddi3+0x97e>
    1aac:	98 e1       	ldi	r25, 0x18	; 24
    1aae:	e9 2e       	mov	r14, r25
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	01 2d       	mov	r16, r1
    1ab4:	11 2d       	mov	r17, r1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <__moddi3+0x988>
    1ab8:	80 e1       	ldi	r24, 0x10	; 16
    1aba:	e8 2e       	mov	r14, r24
    1abc:	f1 2c       	mov	r15, r1
    1abe:	01 2d       	mov	r16, r1
    1ac0:	11 2d       	mov	r17, r1
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 2c       	mov	r0, r14
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__moddi3+0x998>
    1aca:	b6 95       	lsr	r27
    1acc:	a7 95       	ror	r26
    1ace:	97 95       	ror	r25
    1ad0:	87 95       	ror	r24
    1ad2:	0a 94       	dec	r0
    1ad4:	d2 f7       	brpl	.-12     	; 0x1aca <__moddi3+0x990>
    1ad6:	8f 58       	subi	r24, 0x8F	; 143
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	dc 01       	movw	r26, r24
    1adc:	2c 91       	ld	r18, X
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	8e 19       	sub	r24, r14
    1ae8:	9f 09       	sbc	r25, r15
    1aea:	a0 0b       	sbc	r26, r16
    1aec:	b1 0b       	sbc	r27, r17
    1aee:	82 1b       	sub	r24, r18
    1af0:	91 09       	sbc	r25, r1
    1af2:	a1 09       	sbc	r26, r1
    1af4:	b1 09       	sbc	r27, r1
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__moddi3+0x9c6>
    1afe:	59 c0       	rjmp	.+178    	; 0x1bb2 <__moddi3+0xa78>
    1b00:	a6 14       	cp	r10, r6
    1b02:	b7 04       	cpc	r11, r7
    1b04:	c8 04       	cpc	r12, r8
    1b06:	d9 04       	cpc	r13, r9
    1b08:	70 f0       	brcs	.+28     	; 0x1b26 <__moddi3+0x9ec>
    1b0a:	e8 96       	adiw	r28, 0x38	; 56
    1b0c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b0e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b10:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b12:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b14:	e8 97       	sbiw	r28, 0x38	; 56
    1b16:	e2 14       	cp	r14, r2
    1b18:	f3 04       	cpc	r15, r3
    1b1a:	04 05       	cpc	r16, r4
    1b1c:	15 05       	cpc	r17, r5
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <__moddi3+0x9ec>
    1b20:	d8 01       	movw	r26, r16
    1b22:	c7 01       	movw	r24, r14
    1b24:	2f c0       	rjmp	.+94     	; 0x1b84 <__moddi3+0xa4a>
    1b26:	e8 96       	adiw	r28, 0x38	; 56
    1b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b30:	e8 97       	sbiw	r28, 0x38	; 56
    1b32:	82 19       	sub	r24, r2
    1b34:	93 09       	sbc	r25, r3
    1b36:	a4 09       	sbc	r26, r4
    1b38:	b5 09       	sbc	r27, r5
    1b3a:	a4 01       	movw	r20, r8
    1b3c:	93 01       	movw	r18, r6
    1b3e:	2a 19       	sub	r18, r10
    1b40:	3b 09       	sbc	r19, r11
    1b42:	4c 09       	sbc	r20, r12
    1b44:	5d 09       	sbc	r21, r13
    1b46:	aa 24       	eor	r10, r10
    1b48:	bb 24       	eor	r11, r11
    1b4a:	65 01       	movw	r12, r10
    1b4c:	e8 96       	adiw	r28, 0x38	; 56
    1b4e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b50:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b52:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b54:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b56:	e8 97       	sbiw	r28, 0x38	; 56
    1b58:	68 16       	cp	r6, r24
    1b5a:	79 06       	cpc	r7, r25
    1b5c:	8a 06       	cpc	r8, r26
    1b5e:	9b 06       	cpc	r9, r27
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <__moddi3+0xa32>
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	a1 2e       	mov	r10, r17
    1b66:	b1 2c       	mov	r11, r1
    1b68:	c1 2c       	mov	r12, r1
    1b6a:	d1 2c       	mov	r13, r1
    1b6c:	79 01       	movw	r14, r18
    1b6e:	8a 01       	movw	r16, r20
    1b70:	ea 18       	sub	r14, r10
    1b72:	fb 08       	sbc	r15, r11
    1b74:	0c 09       	sbc	r16, r12
    1b76:	1d 09       	sbc	r17, r13
    1b78:	61 96       	adiw	r28, 0x11	; 17
    1b7a:	ec ae       	std	Y+60, r14	; 0x3c
    1b7c:	fd ae       	std	Y+61, r15	; 0x3d
    1b7e:	0e af       	std	Y+62, r16	; 0x3e
    1b80:	1f af       	std	Y+63, r17	; 0x3f
    1b82:	61 97       	sbiw	r28, 0x11	; 17
    1b84:	89 a7       	std	Y+41, r24	; 0x29
    1b86:	9a a7       	std	Y+42, r25	; 0x2a
    1b88:	ab a7       	std	Y+43, r26	; 0x2b
    1b8a:	bc a7       	std	Y+44, r27	; 0x2c
    1b8c:	61 96       	adiw	r28, 0x11	; 17
    1b8e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1b90:	1d ad       	ldd	r17, Y+61	; 0x3d
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	61 97       	sbiw	r28, 0x11	; 17
    1b98:	0d a7       	std	Y+45, r16	; 0x2d
    1b9a:	1e a7       	std	Y+46, r17	; 0x2e
    1b9c:	2f a7       	std	Y+47, r18	; 0x2f
    1b9e:	38 ab       	std	Y+48, r19	; 0x30
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
    1ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba4:	8a 8b       	std	Y+18, r24	; 0x12
    1ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	0d 8b       	std	Y+21, r16	; 0x15
    1bb0:	7b c2       	rjmp	.+1270   	; 0x20a8 <__moddi3+0xf6e>
    1bb2:	e3 96       	adiw	r28, 0x33	; 51
    1bb4:	8f af       	std	Y+63, r24	; 0x3f
    1bb6:	e3 97       	sbiw	r28, 0x33	; 51
    1bb8:	a6 01       	movw	r20, r12
    1bba:	95 01       	movw	r18, r10
    1bbc:	08 2e       	mov	r0, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <__moddi3+0xa8e>
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	0a 94       	dec	r0
    1bca:	d2 f7       	brpl	.-12     	; 0x1bc0 <__moddi3+0xa86>
    1bcc:	10 e2       	ldi	r17, 0x20	; 32
    1bce:	18 1b       	sub	r17, r24
    1bd0:	e2 96       	adiw	r28, 0x32	; 50
    1bd2:	1f af       	std	Y+63, r17	; 0x3f
    1bd4:	e2 97       	sbiw	r28, 0x32	; 50
    1bd6:	d2 01       	movw	r26, r4
    1bd8:	c1 01       	movw	r24, r2
    1bda:	01 2e       	mov	r0, r17
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__moddi3+0xaac>
    1bde:	b6 95       	lsr	r27
    1be0:	a7 95       	ror	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <__moddi3+0xaa4>
    1bea:	5c 01       	movw	r10, r24
    1bec:	6d 01       	movw	r12, r26
    1bee:	a2 2a       	or	r10, r18
    1bf0:	b3 2a       	or	r11, r19
    1bf2:	c4 2a       	or	r12, r20
    1bf4:	d5 2a       	or	r13, r21
    1bf6:	25 96       	adiw	r28, 0x05	; 5
    1bf8:	ac ae       	std	Y+60, r10	; 0x3c
    1bfa:	bd ae       	std	Y+61, r11	; 0x3d
    1bfc:	ce ae       	std	Y+62, r12	; 0x3e
    1bfe:	df ae       	std	Y+63, r13	; 0x3f
    1c00:	25 97       	sbiw	r28, 0x05	; 5
    1c02:	72 01       	movw	r14, r4
    1c04:	61 01       	movw	r12, r2
    1c06:	e3 96       	adiw	r28, 0x33	; 51
    1c08:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c0a:	e3 97       	sbiw	r28, 0x33	; 51
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__moddi3+0xadc>
    1c0e:	cc 0c       	add	r12, r12
    1c10:	dd 1c       	adc	r13, r13
    1c12:	ee 1c       	adc	r14, r14
    1c14:	ff 1c       	adc	r15, r15
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <__moddi3+0xad4>
    1c1a:	21 96       	adiw	r28, 0x01	; 1
    1c1c:	cc ae       	std	Y+60, r12	; 0x3c
    1c1e:	dd ae       	std	Y+61, r13	; 0x3d
    1c20:	ee ae       	std	Y+62, r14	; 0x3e
    1c22:	ff ae       	std	Y+63, r15	; 0x3f
    1c24:	21 97       	sbiw	r28, 0x01	; 1
    1c26:	64 01       	movw	r12, r8
    1c28:	53 01       	movw	r10, r6
    1c2a:	01 2e       	mov	r0, r17
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0xafc>
    1c2e:	d6 94       	lsr	r13
    1c30:	c7 94       	ror	r12
    1c32:	b7 94       	ror	r11
    1c34:	a7 94       	ror	r10
    1c36:	0a 94       	dec	r0
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0xaf4>
    1c3a:	a4 01       	movw	r20, r8
    1c3c:	93 01       	movw	r18, r6
    1c3e:	e3 96       	adiw	r28, 0x33	; 51
    1c40:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c42:	e3 97       	sbiw	r28, 0x33	; 51
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__moddi3+0xb14>
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	44 1f       	adc	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	0a 94       	dec	r0
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <__moddi3+0xb0c>
    1c52:	e8 96       	adiw	r28, 0x38	; 56
    1c54:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c56:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c5c:	e8 97       	sbiw	r28, 0x38	; 56
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <__moddi3+0xb2e>
    1c60:	b6 95       	lsr	r27
    1c62:	a7 95       	ror	r26
    1c64:	97 95       	ror	r25
    1c66:	87 95       	ror	r24
    1c68:	1a 95       	dec	r17
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <__moddi3+0xb26>
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	8d 01       	movw	r16, r26
    1c70:	e2 2a       	or	r14, r18
    1c72:	f3 2a       	or	r15, r19
    1c74:	04 2b       	or	r16, r20
    1c76:	15 2b       	or	r17, r21
    1c78:	e9 ae       	std	Y+57, r14	; 0x39
    1c7a:	fa ae       	std	Y+58, r15	; 0x3a
    1c7c:	0b af       	std	Y+59, r16	; 0x3b
    1c7e:	1c af       	std	Y+60, r17	; 0x3c
    1c80:	e8 96       	adiw	r28, 0x38	; 56
    1c82:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c84:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c86:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c88:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c8a:	e8 97       	sbiw	r28, 0x38	; 56
    1c8c:	e3 96       	adiw	r28, 0x33	; 51
    1c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c90:	e3 97       	sbiw	r28, 0x33	; 51
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <__moddi3+0xb62>
    1c94:	00 0f       	add	r16, r16
    1c96:	11 1f       	adc	r17, r17
    1c98:	22 1f       	adc	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	0a 94       	dec	r0
    1c9e:	d2 f7       	brpl	.-12     	; 0x1c94 <__moddi3+0xb5a>
    1ca0:	0d ab       	std	Y+53, r16	; 0x35
    1ca2:	1e ab       	std	Y+54, r17	; 0x36
    1ca4:	2f ab       	std	Y+55, r18	; 0x37
    1ca6:	38 af       	std	Y+56, r19	; 0x38
    1ca8:	25 96       	adiw	r28, 0x05	; 5
    1caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb2:	25 97       	sbiw	r28, 0x05	; 5
    1cb4:	3a 01       	movw	r6, r20
    1cb6:	88 24       	eor	r8, r8
    1cb8:	99 24       	eor	r9, r9
    1cba:	40 70       	andi	r20, 0x00	; 0
    1cbc:	50 70       	andi	r21, 0x00	; 0
    1cbe:	a5 96       	adiw	r28, 0x25	; 37
    1cc0:	2c af       	std	Y+60, r18	; 0x3c
    1cc2:	3d af       	std	Y+61, r19	; 0x3d
    1cc4:	4e af       	std	Y+62, r20	; 0x3e
    1cc6:	5f af       	std	Y+63, r21	; 0x3f
    1cc8:	a5 97       	sbiw	r28, 0x25	; 37
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	a4 01       	movw	r20, r8
    1cd0:	93 01       	movw	r18, r6
    1cd2:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8c 01       	movw	r16, r24
    1cda:	c6 01       	movw	r24, r12
    1cdc:	b5 01       	movw	r22, r10
    1cde:	a4 01       	movw	r20, r8
    1ce0:	93 01       	movw	r18, r6
    1ce2:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	da 01       	movw	r26, r20
    1cea:	1c 01       	movw	r2, r24
    1cec:	2d 01       	movw	r4, r26
    1cee:	c2 01       	movw	r24, r4
    1cf0:	b1 01       	movw	r22, r2
    1cf2:	a5 96       	adiw	r28, 0x25	; 37
    1cf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cfc:	a5 97       	sbiw	r28, 0x25	; 37
    1cfe:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	87 01       	movw	r16, r14
    1d08:	ff 24       	eor	r15, r15
    1d0a:	ee 24       	eor	r14, r14
    1d0c:	a9 ac       	ldd	r10, Y+57	; 0x39
    1d0e:	ba ac       	ldd	r11, Y+58	; 0x3a
    1d10:	cb ac       	ldd	r12, Y+59	; 0x3b
    1d12:	dc ac       	ldd	r13, Y+60	; 0x3c
    1d14:	c6 01       	movw	r24, r12
    1d16:	aa 27       	eor	r26, r26
    1d18:	bb 27       	eor	r27, r27
    1d1a:	57 01       	movw	r10, r14
    1d1c:	68 01       	movw	r12, r16
    1d1e:	a8 2a       	or	r10, r24
    1d20:	b9 2a       	or	r11, r25
    1d22:	ca 2a       	or	r12, r26
    1d24:	db 2a       	or	r13, r27
    1d26:	a2 16       	cp	r10, r18
    1d28:	b3 06       	cpc	r11, r19
    1d2a:	c4 06       	cpc	r12, r20
    1d2c:	d5 06       	cpc	r13, r21
    1d2e:	10 f5       	brcc	.+68     	; 0x1d74 <__moddi3+0xc3a>
    1d30:	08 94       	sec
    1d32:	21 08       	sbc	r2, r1
    1d34:	31 08       	sbc	r3, r1
    1d36:	41 08       	sbc	r4, r1
    1d38:	51 08       	sbc	r5, r1
    1d3a:	25 96       	adiw	r28, 0x05	; 5
    1d3c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d3e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d40:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d42:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d44:	25 97       	sbiw	r28, 0x05	; 5
    1d46:	ae 0c       	add	r10, r14
    1d48:	bf 1c       	adc	r11, r15
    1d4a:	c0 1e       	adc	r12, r16
    1d4c:	d1 1e       	adc	r13, r17
    1d4e:	ae 14       	cp	r10, r14
    1d50:	bf 04       	cpc	r11, r15
    1d52:	c0 06       	cpc	r12, r16
    1d54:	d1 06       	cpc	r13, r17
    1d56:	70 f0       	brcs	.+28     	; 0x1d74 <__moddi3+0xc3a>
    1d58:	a2 16       	cp	r10, r18
    1d5a:	b3 06       	cpc	r11, r19
    1d5c:	c4 06       	cpc	r12, r20
    1d5e:	d5 06       	cpc	r13, r21
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__moddi3+0xc3a>
    1d62:	08 94       	sec
    1d64:	21 08       	sbc	r2, r1
    1d66:	31 08       	sbc	r3, r1
    1d68:	41 08       	sbc	r4, r1
    1d6a:	51 08       	sbc	r5, r1
    1d6c:	ae 0c       	add	r10, r14
    1d6e:	bf 1c       	adc	r11, r15
    1d70:	c0 1e       	adc	r12, r16
    1d72:	d1 1e       	adc	r13, r17
    1d74:	a2 1a       	sub	r10, r18
    1d76:	b3 0a       	sbc	r11, r19
    1d78:	c4 0a       	sbc	r12, r20
    1d7a:	d5 0a       	sbc	r13, r21
    1d7c:	c6 01       	movw	r24, r12
    1d7e:	b5 01       	movw	r22, r10
    1d80:	a4 01       	movw	r20, r8
    1d82:	93 01       	movw	r18, r6
    1d84:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	c6 01       	movw	r24, r12
    1d8e:	b5 01       	movw	r22, r10
    1d90:	a4 01       	movw	r20, r8
    1d92:	93 01       	movw	r18, r6
    1d94:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    1d98:	c9 01       	movw	r24, r18
    1d9a:	da 01       	movw	r26, r20
    1d9c:	3c 01       	movw	r6, r24
    1d9e:	4d 01       	movw	r8, r26
    1da0:	c4 01       	movw	r24, r8
    1da2:	b3 01       	movw	r22, r6
    1da4:	a5 96       	adiw	r28, 0x25	; 37
    1da6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1da8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1daa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dae:	a5 97       	sbiw	r28, 0x25	; 37
    1db0:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	87 01       	movw	r16, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	ee 24       	eor	r14, r14
    1dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dc2:	ab ad       	ldd	r26, Y+59	; 0x3b
    1dc4:	bc ad       	ldd	r27, Y+60	; 0x3c
    1dc6:	a0 70       	andi	r26, 0x00	; 0
    1dc8:	b0 70       	andi	r27, 0x00	; 0
    1dca:	57 01       	movw	r10, r14
    1dcc:	68 01       	movw	r12, r16
    1dce:	a8 2a       	or	r10, r24
    1dd0:	b9 2a       	or	r11, r25
    1dd2:	ca 2a       	or	r12, r26
    1dd4:	db 2a       	or	r13, r27
    1dd6:	a2 16       	cp	r10, r18
    1dd8:	b3 06       	cpc	r11, r19
    1dda:	c4 06       	cpc	r12, r20
    1ddc:	d5 06       	cpc	r13, r21
    1dde:	10 f5       	brcc	.+68     	; 0x1e24 <__moddi3+0xcea>
    1de0:	08 94       	sec
    1de2:	61 08       	sbc	r6, r1
    1de4:	71 08       	sbc	r7, r1
    1de6:	81 08       	sbc	r8, r1
    1de8:	91 08       	sbc	r9, r1
    1dea:	25 96       	adiw	r28, 0x05	; 5
    1dec:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dee:	7d ad       	ldd	r23, Y+61	; 0x3d
    1df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df4:	25 97       	sbiw	r28, 0x05	; 5
    1df6:	a6 0e       	add	r10, r22
    1df8:	b7 1e       	adc	r11, r23
    1dfa:	c8 1e       	adc	r12, r24
    1dfc:	d9 1e       	adc	r13, r25
    1dfe:	a6 16       	cp	r10, r22
    1e00:	b7 06       	cpc	r11, r23
    1e02:	c8 06       	cpc	r12, r24
    1e04:	d9 06       	cpc	r13, r25
    1e06:	70 f0       	brcs	.+28     	; 0x1e24 <__moddi3+0xcea>
    1e08:	a2 16       	cp	r10, r18
    1e0a:	b3 06       	cpc	r11, r19
    1e0c:	c4 06       	cpc	r12, r20
    1e0e:	d5 06       	cpc	r13, r21
    1e10:	48 f4       	brcc	.+18     	; 0x1e24 <__moddi3+0xcea>
    1e12:	08 94       	sec
    1e14:	61 08       	sbc	r6, r1
    1e16:	71 08       	sbc	r7, r1
    1e18:	81 08       	sbc	r8, r1
    1e1a:	91 08       	sbc	r9, r1
    1e1c:	a6 0e       	add	r10, r22
    1e1e:	b7 1e       	adc	r11, r23
    1e20:	c8 1e       	adc	r12, r24
    1e22:	d9 1e       	adc	r13, r25
    1e24:	d6 01       	movw	r26, r12
    1e26:	c5 01       	movw	r24, r10
    1e28:	82 1b       	sub	r24, r18
    1e2a:	93 0b       	sbc	r25, r19
    1e2c:	a4 0b       	sbc	r26, r20
    1e2e:	b5 0b       	sbc	r27, r21
    1e30:	89 ab       	std	Y+49, r24	; 0x31
    1e32:	9a ab       	std	Y+50, r25	; 0x32
    1e34:	ab ab       	std	Y+51, r26	; 0x33
    1e36:	bc ab       	std	Y+52, r27	; 0x34
    1e38:	d1 01       	movw	r26, r2
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	84 01       	movw	r16, r8
    1e40:	73 01       	movw	r14, r6
    1e42:	e8 2a       	or	r14, r24
    1e44:	f9 2a       	or	r15, r25
    1e46:	0a 2b       	or	r16, r26
    1e48:	1b 2b       	or	r17, r27
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	a8 2e       	mov	r10, r24
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	b8 2e       	mov	r11, r24
    1e52:	c1 2c       	mov	r12, r1
    1e54:	d1 2c       	mov	r13, r1
    1e56:	ae 20       	and	r10, r14
    1e58:	bf 20       	and	r11, r15
    1e5a:	c0 22       	and	r12, r16
    1e5c:	d1 22       	and	r13, r17
    1e5e:	78 01       	movw	r14, r16
    1e60:	00 27       	eor	r16, r16
    1e62:	11 27       	eor	r17, r17
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	6c ac       	ldd	r6, Y+60	; 0x3c
    1e68:	7d ac       	ldd	r7, Y+61	; 0x3d
    1e6a:	8e ac       	ldd	r8, Y+62	; 0x3e
    1e6c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1e6e:	21 97       	sbiw	r28, 0x01	; 1
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	62 22       	and	r6, r18
    1e7a:	73 22       	and	r7, r19
    1e7c:	84 22       	and	r8, r20
    1e7e:	95 22       	and	r9, r21
    1e80:	21 96       	adiw	r28, 0x01	; 1
    1e82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e8a:	21 97       	sbiw	r28, 0x01	; 1
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	66 27       	eor	r22, r22
    1e90:	77 27       	eor	r23, r23
    1e92:	ad 96       	adiw	r28, 0x2d	; 45
    1e94:	4c af       	std	Y+60, r20	; 0x3c
    1e96:	5d af       	std	Y+61, r21	; 0x3d
    1e98:	6e af       	std	Y+62, r22	; 0x3e
    1e9a:	7f af       	std	Y+63, r23	; 0x3f
    1e9c:	ad 97       	sbiw	r28, 0x2d	; 45
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	b5 01       	movw	r22, r10
    1ea2:	a4 01       	movw	r20, r8
    1ea4:	93 01       	movw	r18, r6
    1ea6:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1eaa:	a9 96       	adiw	r28, 0x29	; 41
    1eac:	6c af       	std	Y+60, r22	; 0x3c
    1eae:	7d af       	std	Y+61, r23	; 0x3d
    1eb0:	8e af       	std	Y+62, r24	; 0x3e
    1eb2:	9f af       	std	Y+63, r25	; 0x3f
    1eb4:	a9 97       	sbiw	r28, 0x29	; 41
    1eb6:	c6 01       	movw	r24, r12
    1eb8:	b5 01       	movw	r22, r10
    1eba:	ad 96       	adiw	r28, 0x2d	; 45
    1ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ec0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ec4:	ad 97       	sbiw	r28, 0x2d	; 45
    1ec6:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1eca:	1b 01       	movw	r2, r22
    1ecc:	2c 01       	movw	r4, r24
    1ece:	c8 01       	movw	r24, r16
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	a4 01       	movw	r20, r8
    1ed4:	93 01       	movw	r18, r6
    1ed6:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1eda:	5b 01       	movw	r10, r22
    1edc:	6c 01       	movw	r12, r24
    1ede:	c8 01       	movw	r24, r16
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	ad 96       	adiw	r28, 0x2d	; 45
    1ee4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ee8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eec:	ad 97       	sbiw	r28, 0x2d	; 45
    1eee:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    1ef2:	7b 01       	movw	r14, r22
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	a6 01       	movw	r20, r12
    1ef8:	95 01       	movw	r18, r10
    1efa:	22 0d       	add	r18, r2
    1efc:	33 1d       	adc	r19, r3
    1efe:	44 1d       	adc	r20, r4
    1f00:	55 1d       	adc	r21, r5
    1f02:	a9 96       	adiw	r28, 0x29	; 41
    1f04:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f06:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f08:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f0a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f0c:	a9 97       	sbiw	r28, 0x29	; 41
    1f0e:	c4 01       	movw	r24, r8
    1f10:	aa 27       	eor	r26, r26
    1f12:	bb 27       	eor	r27, r27
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	4a 1f       	adc	r20, r26
    1f1a:	5b 1f       	adc	r21, r27
    1f1c:	2a 15       	cp	r18, r10
    1f1e:	3b 05       	cpc	r19, r11
    1f20:	4c 05       	cpc	r20, r12
    1f22:	5d 05       	cpc	r21, r13
    1f24:	48 f4       	brcc	.+18     	; 0x1f38 <__moddi3+0xdfe>
    1f26:	81 2c       	mov	r8, r1
    1f28:	91 2c       	mov	r9, r1
    1f2a:	e1 e0       	ldi	r30, 0x01	; 1
    1f2c:	ae 2e       	mov	r10, r30
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	e8 0c       	add	r14, r8
    1f32:	f9 1c       	adc	r15, r9
    1f34:	0a 1d       	adc	r16, r10
    1f36:	1b 1d       	adc	r17, r11
    1f38:	ca 01       	movw	r24, r20
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	57 01       	movw	r10, r14
    1f40:	68 01       	movw	r12, r16
    1f42:	a8 0e       	add	r10, r24
    1f44:	b9 1e       	adc	r11, r25
    1f46:	ca 1e       	adc	r12, r26
    1f48:	db 1e       	adc	r13, r27
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	33 27       	eor	r19, r19
    1f4e:	22 27       	eor	r18, r18
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	a0 70       	andi	r26, 0x00	; 0
    1f5e:	b0 70       	andi	r27, 0x00	; 0
    1f60:	28 0f       	add	r18, r24
    1f62:	39 1f       	adc	r19, r25
    1f64:	4a 1f       	adc	r20, r26
    1f66:	5b 1f       	adc	r21, r27
    1f68:	e9 a8       	ldd	r14, Y+49	; 0x31
    1f6a:	fa a8       	ldd	r15, Y+50	; 0x32
    1f6c:	0b a9       	ldd	r16, Y+51	; 0x33
    1f6e:	1c a9       	ldd	r17, Y+52	; 0x34
    1f70:	ea 14       	cp	r14, r10
    1f72:	fb 04       	cpc	r15, r11
    1f74:	0c 05       	cpc	r16, r12
    1f76:	1d 05       	cpc	r17, r13
    1f78:	70 f0       	brcs	.+28     	; 0x1f96 <__moddi3+0xe5c>
    1f7a:	ae 14       	cp	r10, r14
    1f7c:	bf 04       	cpc	r11, r15
    1f7e:	c0 06       	cpc	r12, r16
    1f80:	d1 06       	cpc	r13, r17
    1f82:	89 f5       	brne	.+98     	; 0x1fe6 <__moddi3+0xeac>
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	84 07       	cpc	r24, r20
    1f92:	95 07       	cpc	r25, r21
    1f94:	40 f5       	brcc	.+80     	; 0x1fe6 <__moddi3+0xeac>
    1f96:	da 01       	movw	r26, r20
    1f98:	c9 01       	movw	r24, r18
    1f9a:	21 96       	adiw	r28, 0x01	; 1
    1f9c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f9e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fa0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fa2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fa4:	21 97       	sbiw	r28, 0x01	; 1
    1fa6:	86 19       	sub	r24, r6
    1fa8:	97 09       	sbc	r25, r7
    1faa:	a8 09       	sbc	r26, r8
    1fac:	b9 09       	sbc	r27, r9
    1fae:	25 96       	adiw	r28, 0x05	; 5
    1fb0:	ec ac       	ldd	r14, Y+60	; 0x3c
    1fb2:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb8:	25 97       	sbiw	r28, 0x05	; 5
    1fba:	ae 18       	sub	r10, r14
    1fbc:	bf 08       	sbc	r11, r15
    1fbe:	c0 0a       	sbc	r12, r16
    1fc0:	d1 0a       	sbc	r13, r17
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	4a 07       	cpc	r20, r26
    1fce:	5b 07       	cpc	r21, r27
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__moddi3+0xea2>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	e2 2e       	mov	r14, r18
    1fd6:	f1 2c       	mov	r15, r1
    1fd8:	01 2d       	mov	r16, r1
    1fda:	11 2d       	mov	r17, r1
    1fdc:	ae 18       	sub	r10, r14
    1fde:	bf 08       	sbc	r11, r15
    1fe0:	c0 0a       	sbc	r12, r16
    1fe2:	d1 0a       	sbc	r13, r17
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <__moddi3+0xeb0>
    1fe6:	da 01       	movw	r26, r20
    1fe8:	c9 01       	movw	r24, r18
    1fea:	6d a8       	ldd	r6, Y+53	; 0x35
    1fec:	7e a8       	ldd	r7, Y+54	; 0x36
    1fee:	8f a8       	ldd	r8, Y+55	; 0x37
    1ff0:	98 ac       	ldd	r9, Y+56	; 0x38
    1ff2:	68 1a       	sub	r6, r24
    1ff4:	79 0a       	sbc	r7, r25
    1ff6:	8a 0a       	sbc	r8, r26
    1ff8:	9b 0a       	sbc	r9, r27
    1ffa:	09 a9       	ldd	r16, Y+49	; 0x31
    1ffc:	1a a9       	ldd	r17, Y+50	; 0x32
    1ffe:	2b a9       	ldd	r18, Y+51	; 0x33
    2000:	3c a9       	ldd	r19, Y+52	; 0x34
    2002:	0a 19       	sub	r16, r10
    2004:	1b 09       	sbc	r17, r11
    2006:	2c 09       	sbc	r18, r12
    2008:	3d 09       	sbc	r19, r13
    200a:	58 01       	movw	r10, r16
    200c:	69 01       	movw	r12, r18
    200e:	22 24       	eor	r2, r2
    2010:	33 24       	eor	r3, r3
    2012:	21 01       	movw	r4, r2
    2014:	2d a9       	ldd	r18, Y+53	; 0x35
    2016:	3e a9       	ldd	r19, Y+54	; 0x36
    2018:	4f a9       	ldd	r20, Y+55	; 0x37
    201a:	58 ad       	ldd	r21, Y+56	; 0x38
    201c:	26 15       	cp	r18, r6
    201e:	37 05       	cpc	r19, r7
    2020:	48 05       	cpc	r20, r8
    2022:	59 05       	cpc	r21, r9
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__moddi3+0xef6>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	28 2e       	mov	r2, r24
    202a:	31 2c       	mov	r3, r1
    202c:	41 2c       	mov	r4, r1
    202e:	51 2c       	mov	r5, r1
    2030:	86 01       	movw	r16, r12
    2032:	75 01       	movw	r14, r10
    2034:	e2 18       	sub	r14, r2
    2036:	f3 08       	sbc	r15, r3
    2038:	04 09       	sbc	r16, r4
    203a:	15 09       	sbc	r17, r5
    203c:	a8 01       	movw	r20, r16
    203e:	97 01       	movw	r18, r14
    2040:	e2 96       	adiw	r28, 0x32	; 50
    2042:	0f ac       	ldd	r0, Y+63	; 0x3f
    2044:	e2 97       	sbiw	r28, 0x32	; 50
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__moddi3+0xf16>
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	44 1f       	adc	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	0a 94       	dec	r0
    2052:	d2 f7       	brpl	.-12     	; 0x2048 <__moddi3+0xf0e>
    2054:	d4 01       	movw	r26, r8
    2056:	c3 01       	movw	r24, r6
    2058:	e3 96       	adiw	r28, 0x33	; 51
    205a:	0f ac       	ldd	r0, Y+63	; 0x3f
    205c:	e3 97       	sbiw	r28, 0x33	; 51
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__moddi3+0xf2e>
    2060:	b6 95       	lsr	r27
    2062:	a7 95       	ror	r26
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	0a 94       	dec	r0
    206a:	d2 f7       	brpl	.-12     	; 0x2060 <__moddi3+0xf26>
    206c:	28 2b       	or	r18, r24
    206e:	39 2b       	or	r19, r25
    2070:	4a 2b       	or	r20, r26
    2072:	5b 2b       	or	r21, r27
    2074:	29 a7       	std	Y+41, r18	; 0x29
    2076:	3a a7       	std	Y+42, r19	; 0x2a
    2078:	4b a7       	std	Y+43, r20	; 0x2b
    207a:	5c a7       	std	Y+44, r21	; 0x2c
    207c:	e3 96       	adiw	r28, 0x33	; 51
    207e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2080:	e3 97       	sbiw	r28, 0x33	; 51
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__moddi3+0xf52>
    2084:	16 95       	lsr	r17
    2086:	07 95       	ror	r16
    2088:	f7 94       	ror	r15
    208a:	e7 94       	ror	r14
    208c:	0a 94       	dec	r0
    208e:	d2 f7       	brpl	.-12     	; 0x2084 <__moddi3+0xf4a>
    2090:	ed a6       	std	Y+45, r14	; 0x2d
    2092:	fe a6       	std	Y+46, r15	; 0x2e
    2094:	0f a7       	std	Y+47, r16	; 0x2f
    2096:	18 ab       	std	Y+48, r17	; 0x30
    2098:	29 8b       	std	Y+17, r18	; 0x11
    209a:	8a a5       	ldd	r24, Y+42	; 0x2a
    209c:	8a 8b       	std	Y+18, r24	; 0x12
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a4:	8c 8b       	std	Y+20, r24	; 0x14
    20a6:	ed 8a       	std	Y+21, r14	; 0x15
    20a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    20aa:	8e 8b       	std	Y+22, r24	; 0x16
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	8f 8b       	std	Y+23, r24	; 0x17
    20b0:	88 a9       	ldd	r24, Y+48	; 0x30
    20b2:	88 8f       	std	Y+24, r24	; 0x18
    20b4:	e1 96       	adiw	r28, 0x31	; 49
    20b6:	4c ad       	ldd	r20, Y+60	; 0x3c
    20b8:	5d ad       	ldd	r21, Y+61	; 0x3d
    20ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    20bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    20be:	e1 97       	sbiw	r28, 0x31	; 49
    20c0:	41 15       	cp	r20, r1
    20c2:	51 05       	cpc	r21, r1
    20c4:	61 05       	cpc	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__moddi3+0xf92>
    20ca:	67 c0       	rjmp	.+206    	; 0x219a <__moddi3+0x1060>
    20cc:	89 89       	ldd	r24, Y+17	; 0x11
    20ce:	2a 89       	ldd	r18, Y+18	; 0x12
    20d0:	3b 89       	ldd	r19, Y+19	; 0x13
    20d2:	4c 89       	ldd	r20, Y+20	; 0x14
    20d4:	5d 89       	ldd	r21, Y+21	; 0x15
    20d6:	ae 89       	ldd	r26, Y+22	; 0x16
    20d8:	bf 89       	ldd	r27, Y+23	; 0x17
    20da:	18 8d       	ldd	r17, Y+24	; 0x18
    20dc:	f8 2f       	mov	r31, r24
    20de:	f1 95       	neg	r31
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	1f 16       	cp	r1, r31
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <__moddi3+0xfae>
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 2f       	mov	r24, r18
    20ea:	81 95       	neg	r24
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	18 16       	cp	r1, r24
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__moddi3+0xfba>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	e8 2f       	mov	r30, r24
    20f6:	e9 1b       	sub	r30, r25
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	8e 17       	cp	r24, r30
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__moddi3+0xfc6>
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	29 2b       	or	r18, r25
    2102:	83 2f       	mov	r24, r19
    2104:	81 95       	neg	r24
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	18 16       	cp	r1, r24
    210a:	08 f0       	brcs	.+2      	; 0x210e <__moddi3+0xfd4>
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	78 2f       	mov	r23, r24
    2110:	72 1b       	sub	r23, r18
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	87 17       	cp	r24, r23
    2116:	08 f0       	brcs	.+2      	; 0x211a <__moddi3+0xfe0>
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	39 2b       	or	r19, r25
    211c:	84 2f       	mov	r24, r20
    211e:	81 95       	neg	r24
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	18 16       	cp	r1, r24
    2124:	08 f0       	brcs	.+2      	; 0x2128 <__moddi3+0xfee>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	68 2f       	mov	r22, r24
    212a:	63 1b       	sub	r22, r19
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	86 17       	cp	r24, r22
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__moddi3+0xffa>
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	29 2b       	or	r18, r25
    2136:	85 2f       	mov	r24, r21
    2138:	81 95       	neg	r24
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	18 16       	cp	r1, r24
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__moddi3+0x1008>
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	58 2f       	mov	r21, r24
    2144:	52 1b       	sub	r21, r18
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	85 17       	cp	r24, r21
    214a:	08 f0       	brcs	.+2      	; 0x214e <__moddi3+0x1014>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	39 2b       	or	r19, r25
    2150:	8a 2f       	mov	r24, r26
    2152:	81 95       	neg	r24
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	18 16       	cp	r1, r24
    2158:	08 f0       	brcs	.+2      	; 0x215c <__moddi3+0x1022>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	48 2f       	mov	r20, r24
    215e:	43 1b       	sub	r20, r19
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	84 17       	cp	r24, r20
    2164:	08 f0       	brcs	.+2      	; 0x2168 <__moddi3+0x102e>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	29 2b       	or	r18, r25
    216a:	8b 2f       	mov	r24, r27
    216c:	81 95       	neg	r24
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	18 16       	cp	r1, r24
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__moddi3+0x103c>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	38 2f       	mov	r19, r24
    2178:	32 1b       	sub	r19, r18
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	83 17       	cp	r24, r19
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__moddi3+0x1048>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	92 2b       	or	r25, r18
    2184:	81 2f       	mov	r24, r17
    2186:	81 95       	neg	r24
    2188:	89 1b       	sub	r24, r25
    218a:	f9 8b       	std	Y+17, r31	; 0x11
    218c:	ea 8b       	std	Y+18, r30	; 0x12
    218e:	7b 8b       	std	Y+19, r23	; 0x13
    2190:	6c 8b       	std	Y+20, r22	; 0x14
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4e 8b       	std	Y+22, r20	; 0x16
    2196:	3f 8b       	std	Y+23, r19	; 0x17
    2198:	88 8f       	std	Y+24, r24	; 0x18
    219a:	29 89       	ldd	r18, Y+17	; 0x11
    219c:	3a 89       	ldd	r19, Y+18	; 0x12
    219e:	4b 89       	ldd	r20, Y+19	; 0x13
    21a0:	5c 89       	ldd	r21, Y+20	; 0x14
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	c9 58       	subi	r28, 0x89	; 137
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	e2 e1       	ldi	r30, 0x12	; 18
    21b0:	0c 94 80 38 	jmp	0x7100	; 0x7100 <__epilogue_restores__>

000021b4 <_fpadd_parts>:
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__prologue_saves__>
    21c0:	dc 01       	movw	r26, r24
    21c2:	2b 01       	movw	r4, r22
    21c4:	fa 01       	movw	r30, r20
    21c6:	9c 91       	ld	r25, X
    21c8:	92 30       	cpi	r25, 0x02	; 2
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <_fpadd_parts+0x1a>
    21cc:	39 c1       	rjmp	.+626    	; 0x2440 <_fpadd_parts+0x28c>
    21ce:	eb 01       	movw	r28, r22
    21d0:	88 81       	ld	r24, Y
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <_fpadd_parts+0x24>
    21d6:	33 c1       	rjmp	.+614    	; 0x243e <_fpadd_parts+0x28a>
    21d8:	94 30       	cpi	r25, 0x04	; 4
    21da:	69 f4       	brne	.+26     	; 0x21f6 <_fpadd_parts+0x42>
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <_fpadd_parts+0x2e>
    21e0:	2f c1       	rjmp	.+606    	; 0x2440 <_fpadd_parts+0x28c>
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 91       	ld	r25, X
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	98 17       	cp	r25, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <_fpadd_parts+0x3c>
    21ee:	28 c1       	rjmp	.+592    	; 0x2440 <_fpadd_parts+0x28c>
    21f0:	a9 e6       	ldi	r26, 0x69	; 105
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	25 c1       	rjmp	.+586    	; 0x2440 <_fpadd_parts+0x28c>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	09 f4       	brne	.+2      	; 0x21fc <_fpadd_parts+0x48>
    21fa:	21 c1       	rjmp	.+578    	; 0x243e <_fpadd_parts+0x28a>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	a9 f4       	brne	.+42     	; 0x222a <_fpadd_parts+0x76>
    2200:	92 30       	cpi	r25, 0x02	; 2
    2202:	09 f0       	breq	.+2      	; 0x2206 <_fpadd_parts+0x52>
    2204:	1d c1       	rjmp	.+570    	; 0x2440 <_fpadd_parts+0x28c>
    2206:	9a 01       	movw	r18, r20
    2208:	ad 01       	movw	r20, r26
    220a:	88 e0       	ldi	r24, 0x08	; 8
    220c:	ea 01       	movw	r28, r20
    220e:	09 90       	ld	r0, Y+
    2210:	ae 01       	movw	r20, r28
    2212:	e9 01       	movw	r28, r18
    2214:	09 92       	st	Y+, r0
    2216:	9e 01       	movw	r18, r28
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	c1 f7       	brne	.-16     	; 0x220c <_fpadd_parts+0x58>
    221c:	e2 01       	movw	r28, r4
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 91       	ld	r25, X
    2224:	89 23       	and	r24, r25
    2226:	81 83       	std	Z+1, r24	; 0x01
    2228:	08 c1       	rjmp	.+528    	; 0x243a <_fpadd_parts+0x286>
    222a:	92 30       	cpi	r25, 0x02	; 2
    222c:	09 f4       	brne	.+2      	; 0x2230 <_fpadd_parts+0x7c>
    222e:	07 c1       	rjmp	.+526    	; 0x243e <_fpadd_parts+0x28a>
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	2d 90       	ld	r2, X+
    2234:	3c 90       	ld	r3, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	eb 01       	movw	r28, r22
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	ad 90       	ld	r10, X+
    2242:	bd 90       	ld	r11, X+
    2244:	cd 90       	ld	r12, X+
    2246:	dc 90       	ld	r13, X
    2248:	17 97       	sbiw	r26, 0x07	; 7
    224a:	ec 80       	ldd	r14, Y+4	; 0x04
    224c:	fd 80       	ldd	r15, Y+5	; 0x05
    224e:	0e 81       	ldd	r16, Y+6	; 0x06
    2250:	1f 81       	ldd	r17, Y+7	; 0x07
    2252:	91 01       	movw	r18, r2
    2254:	28 1b       	sub	r18, r24
    2256:	39 0b       	sbc	r19, r25
    2258:	b9 01       	movw	r22, r18
    225a:	37 ff       	sbrs	r19, 7
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <_fpadd_parts+0xb2>
    225e:	66 27       	eor	r22, r22
    2260:	77 27       	eor	r23, r23
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	60 32       	cpi	r22, 0x20	; 32
    2268:	71 05       	cpc	r23, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <_fpadd_parts+0xba>
    226c:	61 c0       	rjmp	.+194    	; 0x2330 <_fpadd_parts+0x17c>
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	6c f5       	brge	.+90     	; 0x22ce <_fpadd_parts+0x11a>
    2274:	37 01       	movw	r6, r14
    2276:	48 01       	movw	r8, r16
    2278:	06 2e       	mov	r0, r22
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <_fpadd_parts+0xd0>
    227c:	96 94       	lsr	r9
    227e:	87 94       	ror	r8
    2280:	77 94       	ror	r7
    2282:	67 94       	ror	r6
    2284:	0a 94       	dec	r0
    2286:	d2 f7       	brpl	.-12     	; 0x227c <_fpadd_parts+0xc8>
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <_fpadd_parts+0xe6>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	44 1f       	adc	r20, r20
    2298:	55 1f       	adc	r21, r21
    229a:	6a 95       	dec	r22
    229c:	d2 f7       	brpl	.-12     	; 0x2292 <_fpadd_parts+0xde>
    229e:	21 50       	subi	r18, 0x01	; 1
    22a0:	30 40       	sbci	r19, 0x00	; 0
    22a2:	40 40       	sbci	r20, 0x00	; 0
    22a4:	50 40       	sbci	r21, 0x00	; 0
    22a6:	2e 21       	and	r18, r14
    22a8:	3f 21       	and	r19, r15
    22aa:	40 23       	and	r20, r16
    22ac:	51 23       	and	r21, r17
    22ae:	21 15       	cp	r18, r1
    22b0:	31 05       	cpc	r19, r1
    22b2:	41 05       	cpc	r20, r1
    22b4:	51 05       	cpc	r21, r1
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <_fpadd_parts+0x10c>
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	79 01       	movw	r14, r18
    22c2:	8a 01       	movw	r16, r20
    22c4:	e6 28       	or	r14, r6
    22c6:	f7 28       	or	r15, r7
    22c8:	08 29       	or	r16, r8
    22ca:	19 29       	or	r17, r9
    22cc:	3c c0       	rjmp	.+120    	; 0x2346 <_fpadd_parts+0x192>
    22ce:	23 2b       	or	r18, r19
    22d0:	d1 f1       	breq	.+116    	; 0x2346 <_fpadd_parts+0x192>
    22d2:	26 0e       	add	r2, r22
    22d4:	37 1e       	adc	r3, r23
    22d6:	35 01       	movw	r6, r10
    22d8:	46 01       	movw	r8, r12
    22da:	06 2e       	mov	r0, r22
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <_fpadd_parts+0x132>
    22de:	96 94       	lsr	r9
    22e0:	87 94       	ror	r8
    22e2:	77 94       	ror	r7
    22e4:	67 94       	ror	r6
    22e6:	0a 94       	dec	r0
    22e8:	d2 f7       	brpl	.-12     	; 0x22de <_fpadd_parts+0x12a>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <_fpadd_parts+0x148>
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	44 1f       	adc	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	6a 95       	dec	r22
    22fe:	d2 f7       	brpl	.-12     	; 0x22f4 <_fpadd_parts+0x140>
    2300:	21 50       	subi	r18, 0x01	; 1
    2302:	30 40       	sbci	r19, 0x00	; 0
    2304:	40 40       	sbci	r20, 0x00	; 0
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	2a 21       	and	r18, r10
    230a:	3b 21       	and	r19, r11
    230c:	4c 21       	and	r20, r12
    230e:	5d 21       	and	r21, r13
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	41 05       	cpc	r20, r1
    2316:	51 05       	cpc	r21, r1
    2318:	21 f0       	breq	.+8      	; 0x2322 <_fpadd_parts+0x16e>
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	59 01       	movw	r10, r18
    2324:	6a 01       	movw	r12, r20
    2326:	a6 28       	or	r10, r6
    2328:	b7 28       	or	r11, r7
    232a:	c8 28       	or	r12, r8
    232c:	d9 28       	or	r13, r9
    232e:	0b c0       	rjmp	.+22     	; 0x2346 <_fpadd_parts+0x192>
    2330:	82 15       	cp	r24, r2
    2332:	93 05       	cpc	r25, r3
    2334:	2c f0       	brlt	.+10     	; 0x2340 <_fpadd_parts+0x18c>
    2336:	1c 01       	movw	r2, r24
    2338:	aa 24       	eor	r10, r10
    233a:	bb 24       	eor	r11, r11
    233c:	65 01       	movw	r12, r10
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <_fpadd_parts+0x192>
    2340:	ee 24       	eor	r14, r14
    2342:	ff 24       	eor	r15, r15
    2344:	87 01       	movw	r16, r14
    2346:	11 96       	adiw	r26, 0x01	; 1
    2348:	9c 91       	ld	r25, X
    234a:	d2 01       	movw	r26, r4
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	8c 91       	ld	r24, X
    2350:	98 17       	cp	r25, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <_fpadd_parts+0x1a2>
    2354:	45 c0       	rjmp	.+138    	; 0x23e0 <_fpadd_parts+0x22c>
    2356:	99 23       	and	r25, r25
    2358:	39 f0       	breq	.+14     	; 0x2368 <_fpadd_parts+0x1b4>
    235a:	a8 01       	movw	r20, r16
    235c:	97 01       	movw	r18, r14
    235e:	2a 19       	sub	r18, r10
    2360:	3b 09       	sbc	r19, r11
    2362:	4c 09       	sbc	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <_fpadd_parts+0x1c0>
    2368:	a6 01       	movw	r20, r12
    236a:	95 01       	movw	r18, r10
    236c:	2e 19       	sub	r18, r14
    236e:	3f 09       	sbc	r19, r15
    2370:	40 0b       	sbc	r20, r16
    2372:	51 0b       	sbc	r21, r17
    2374:	57 fd       	sbrc	r21, 7
    2376:	08 c0       	rjmp	.+16     	; 0x2388 <_fpadd_parts+0x1d4>
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	33 82       	std	Z+3, r3	; 0x03
    237c:	22 82       	std	Z+2, r2	; 0x02
    237e:	24 83       	std	Z+4, r18	; 0x04
    2380:	35 83       	std	Z+5, r19	; 0x05
    2382:	46 83       	std	Z+6, r20	; 0x06
    2384:	57 83       	std	Z+7, r21	; 0x07
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <_fpadd_parts+0x20e>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	81 83       	std	Z+1, r24	; 0x01
    238c:	33 82       	std	Z+3, r3	; 0x03
    238e:	22 82       	std	Z+2, r2	; 0x02
    2390:	88 27       	eor	r24, r24
    2392:	99 27       	eor	r25, r25
    2394:	dc 01       	movw	r26, r24
    2396:	82 1b       	sub	r24, r18
    2398:	93 0b       	sbc	r25, r19
    239a:	a4 0b       	sbc	r26, r20
    239c:	b5 0b       	sbc	r27, r21
    239e:	84 83       	std	Z+4, r24	; 0x04
    23a0:	95 83       	std	Z+5, r25	; 0x05
    23a2:	a6 83       	std	Z+6, r26	; 0x06
    23a4:	b7 83       	std	Z+7, r27	; 0x07
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <_fpadd_parts+0x20e>
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	44 1f       	adc	r20, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	24 83       	std	Z+4, r18	; 0x04
    23b2:	35 83       	std	Z+5, r19	; 0x05
    23b4:	46 83       	std	Z+6, r20	; 0x06
    23b6:	57 83       	std	Z+7, r21	; 0x07
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	24 81       	ldd	r18, Z+4	; 0x04
    23c4:	35 81       	ldd	r19, Z+5	; 0x05
    23c6:	46 81       	ldd	r20, Z+6	; 0x06
    23c8:	57 81       	ldd	r21, Z+7	; 0x07
    23ca:	da 01       	movw	r26, r20
    23cc:	c9 01       	movw	r24, r18
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	a1 09       	sbc	r26, r1
    23d2:	b1 09       	sbc	r27, r1
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	af 4f       	sbci	r26, 0xFF	; 255
    23da:	bf 43       	sbci	r27, 0x3F	; 63
    23dc:	28 f3       	brcs	.-54     	; 0x23a8 <_fpadd_parts+0x1f4>
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <_fpadd_parts+0x242>
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	33 82       	std	Z+3, r3	; 0x03
    23e4:	22 82       	std	Z+2, r2	; 0x02
    23e6:	ea 0c       	add	r14, r10
    23e8:	fb 1c       	adc	r15, r11
    23ea:	0c 1d       	adc	r16, r12
    23ec:	1d 1d       	adc	r17, r13
    23ee:	e4 82       	std	Z+4, r14	; 0x04
    23f0:	f5 82       	std	Z+5, r15	; 0x05
    23f2:	06 83       	std	Z+6, r16	; 0x06
    23f4:	17 83       	std	Z+7, r17	; 0x07
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	80 83       	st	Z, r24
    23fa:	24 81       	ldd	r18, Z+4	; 0x04
    23fc:	35 81       	ldd	r19, Z+5	; 0x05
    23fe:	46 81       	ldd	r20, Z+6	; 0x06
    2400:	57 81       	ldd	r21, Z+7	; 0x07
    2402:	57 ff       	sbrs	r21, 7
    2404:	1a c0       	rjmp	.+52     	; 0x243a <_fpadd_parts+0x286>
    2406:	c9 01       	movw	r24, r18
    2408:	aa 27       	eor	r26, r26
    240a:	97 fd       	sbrc	r25, 7
    240c:	a0 95       	com	r26
    240e:	ba 2f       	mov	r27, r26
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	a0 70       	andi	r26, 0x00	; 0
    2416:	b0 70       	andi	r27, 0x00	; 0
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	82 2b       	or	r24, r18
    2422:	93 2b       	or	r25, r19
    2424:	a4 2b       	or	r26, r20
    2426:	b5 2b       	or	r27, r21
    2428:	84 83       	std	Z+4, r24	; 0x04
    242a:	95 83       	std	Z+5, r25	; 0x05
    242c:	a6 83       	std	Z+6, r26	; 0x06
    242e:	b7 83       	std	Z+7, r27	; 0x07
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	df 01       	movw	r26, r30
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_fpadd_parts+0x28c>
    243e:	d2 01       	movw	r26, r4
    2440:	cd 01       	movw	r24, r26
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	e2 e1       	ldi	r30, 0x12	; 18
    2448:	0c 94 80 38 	jmp	0x7100	; 0x7100 <__epilogue_restores__>

0000244c <__subsf3>:
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ec e2       	ldi	r30, 0x2C	; 44
    2452:	f2 e1       	ldi	r31, 0x12	; 18
    2454:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__prologue_saves__+0x18>
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	7a 83       	std	Y+2, r23	; 0x02
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	2d 83       	std	Y+5, r18	; 0x05
    2462:	3e 83       	std	Y+6, r19	; 0x06
    2464:	4f 83       	std	Y+7, r20	; 0x07
    2466:	58 87       	std	Y+8, r21	; 0x08
    2468:	e9 e0       	ldi	r30, 0x09	; 9
    246a:	ee 2e       	mov	r14, r30
    246c:	f1 2c       	mov	r15, r1
    246e:	ec 0e       	add	r14, r28
    2470:	fd 1e       	adc	r15, r29
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    247c:	8e 01       	movw	r16, r28
    247e:	0f 5e       	subi	r16, 0xEF	; 239
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	ce 01       	movw	r24, r28
    2484:	05 96       	adiw	r24, 0x05	; 5
    2486:	b8 01       	movw	r22, r16
    2488:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    248c:	8a 89       	ldd	r24, Y+18	; 0x12
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	89 27       	eor	r24, r25
    2492:	8a 8b       	std	Y+18, r24	; 0x12
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	ae 01       	movw	r20, r28
    249a:	47 5e       	subi	r20, 0xE7	; 231
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24a2:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	e6 e0       	ldi	r30, 0x06	; 6
    24aa:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <__epilogue_restores__+0x18>

000024ae <__addsf3>:
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__prologue_saves__+0x18>
    24ba:	69 83       	std	Y+1, r22	; 0x01
    24bc:	7a 83       	std	Y+2, r23	; 0x02
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08
    24ca:	f9 e0       	ldi	r31, 0x09	; 9
    24cc:	ef 2e       	mov	r14, r31
    24ce:	f1 2c       	mov	r15, r1
    24d0:	ec 0e       	add	r14, r28
    24d2:	fd 1e       	adc	r15, r29
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24de:	8e 01       	movw	r16, r28
    24e0:	0f 5e       	subi	r16, 0xEF	; 239
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	ce 01       	movw	r24, r28
    24e6:	05 96       	adiw	r24, 0x05	; 5
    24e8:	b8 01       	movw	r22, r16
    24ea:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24ee:	c7 01       	movw	r24, r14
    24f0:	b8 01       	movw	r22, r16
    24f2:	ae 01       	movw	r20, r28
    24f4:	47 5e       	subi	r20, 0xE7	; 231
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24fc:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    2500:	a0 96       	adiw	r28, 0x20	; 32
    2502:	e6 e0       	ldi	r30, 0x06	; 6
    2504:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <__epilogue_restores__+0x18>

00002508 <__mulsf3>:
    2508:	a0 e2       	ldi	r26, 0x20	; 32
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 64 38 	jmp	0x70c8	; 0x70c8 <__prologue_saves__>
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	4f 83       	std	Y+7, r20	; 0x07
    2522:	58 87       	std	Y+8, r21	; 0x08
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	be 01       	movw	r22, r28
    252a:	67 5f       	subi	r22, 0xF7	; 247
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2532:	ce 01       	movw	r24, r28
    2534:	05 96       	adiw	r24, 0x05	; 5
    2536:	be 01       	movw	r22, r28
    2538:	6f 5e       	subi	r22, 0xEF	; 239
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2540:	99 85       	ldd	r25, Y+9	; 0x09
    2542:	92 30       	cpi	r25, 0x02	; 2
    2544:	88 f0       	brcs	.+34     	; 0x2568 <__mulsf3+0x60>
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	c8 f0       	brcs	.+50     	; 0x257e <__mulsf3+0x76>
    254c:	94 30       	cpi	r25, 0x04	; 4
    254e:	19 f4       	brne	.+6      	; 0x2556 <__mulsf3+0x4e>
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	51 f4       	brne	.+20     	; 0x2568 <__mulsf3+0x60>
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__mulsf3+0x56>
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	29 f4       	brne	.+10     	; 0x2564 <__mulsf3+0x5c>
    255a:	92 30       	cpi	r25, 0x02	; 2
    255c:	81 f4       	brne	.+32     	; 0x257e <__mulsf3+0x76>
    255e:	89 e6       	ldi	r24, 0x69	; 105
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	c6 c0       	rjmp	.+396    	; 0x26f0 <__mulsf3+0x1e8>
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	49 f4       	brne	.+18     	; 0x257a <__mulsf3+0x72>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	8a 89       	ldd	r24, Y+18	; 0x12
    256e:	98 13       	cpse	r25, r24
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	2a 87       	std	Y+10, r18	; 0x0a
    2574:	ce 01       	movw	r24, r28
    2576:	09 96       	adiw	r24, 0x09	; 9
    2578:	bb c0       	rjmp	.+374    	; 0x26f0 <__mulsf3+0x1e8>
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	49 f4       	brne	.+18     	; 0x2590 <__mulsf3+0x88>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	98 13       	cpse	r25, r24
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	2a 8b       	std	Y+18, r18	; 0x12
    258a:	ce 01       	movw	r24, r28
    258c:	41 96       	adiw	r24, 0x11	; 17
    258e:	b0 c0       	rjmp	.+352    	; 0x26f0 <__mulsf3+0x1e8>
    2590:	2d 84       	ldd	r2, Y+13	; 0x0d
    2592:	3e 84       	ldd	r3, Y+14	; 0x0e
    2594:	4f 84       	ldd	r4, Y+15	; 0x0f
    2596:	58 88       	ldd	r5, Y+16	; 0x10
    2598:	6d 88       	ldd	r6, Y+21	; 0x15
    259a:	7e 88       	ldd	r7, Y+22	; 0x16
    259c:	8f 88       	ldd	r8, Y+23	; 0x17
    259e:	98 8c       	ldd	r9, Y+24	; 0x18
    25a0:	ee 24       	eor	r14, r14
    25a2:	ff 24       	eor	r15, r15
    25a4:	87 01       	movw	r16, r14
    25a6:	aa 24       	eor	r10, r10
    25a8:	bb 24       	eor	r11, r11
    25aa:	65 01       	movw	r12, r10
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	e0 e0       	ldi	r30, 0x00	; 0
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	c1 01       	movw	r24, r2
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	90 70       	andi	r25, 0x00	; 0
    25be:	89 2b       	or	r24, r25
    25c0:	e9 f0       	breq	.+58     	; 0x25fc <__mulsf3+0xf4>
    25c2:	e6 0c       	add	r14, r6
    25c4:	f7 1c       	adc	r15, r7
    25c6:	08 1d       	adc	r16, r8
    25c8:	19 1d       	adc	r17, r9
    25ca:	9a 01       	movw	r18, r20
    25cc:	ab 01       	movw	r20, r22
    25ce:	2a 0d       	add	r18, r10
    25d0:	3b 1d       	adc	r19, r11
    25d2:	4c 1d       	adc	r20, r12
    25d4:	5d 1d       	adc	r21, r13
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e6 14       	cp	r14, r6
    25e0:	f7 04       	cpc	r15, r7
    25e2:	08 05       	cpc	r16, r8
    25e4:	19 05       	cpc	r17, r9
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <__mulsf3+0xe8>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ba 01       	movw	r22, r20
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 0f       	add	r20, r24
    25f6:	59 1f       	adc	r21, r25
    25f8:	6a 1f       	adc	r22, r26
    25fa:	7b 1f       	adc	r23, r27
    25fc:	aa 0c       	add	r10, r10
    25fe:	bb 1c       	adc	r11, r11
    2600:	cc 1c       	adc	r12, r12
    2602:	dd 1c       	adc	r13, r13
    2604:	97 fe       	sbrs	r9, 7
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <__mulsf3+0x110>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	a8 2a       	or	r10, r24
    2612:	b9 2a       	or	r11, r25
    2614:	ca 2a       	or	r12, r26
    2616:	db 2a       	or	r13, r27
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	e0 32       	cpi	r30, 0x20	; 32
    261c:	f1 05       	cpc	r31, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <__mulsf3+0x12a>
    2620:	66 0c       	add	r6, r6
    2622:	77 1c       	adc	r7, r7
    2624:	88 1c       	adc	r8, r8
    2626:	99 1c       	adc	r9, r9
    2628:	56 94       	lsr	r5
    262a:	47 94       	ror	r4
    262c:	37 94       	ror	r3
    262e:	27 94       	ror	r2
    2630:	c3 cf       	rjmp	.-122    	; 0x25b8 <__mulsf3+0xb0>
    2632:	fa 85       	ldd	r31, Y+10	; 0x0a
    2634:	ea 89       	ldd	r30, Y+18	; 0x12
    2636:	2b 89       	ldd	r18, Y+19	; 0x13
    2638:	3c 89       	ldd	r19, Y+20	; 0x14
    263a:	8b 85       	ldd	r24, Y+11	; 0x0b
    263c:	9c 85       	ldd	r25, Y+12	; 0x0c
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	2e 5f       	subi	r18, 0xFE	; 254
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	17 c0       	rjmp	.+46     	; 0x2676 <__mulsf3+0x16e>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	89 2b       	or	r24, r25
    2650:	61 f0       	breq	.+24     	; 0x266a <__mulsf3+0x162>
    2652:	16 95       	lsr	r17
    2654:	07 95       	ror	r16
    2656:	f7 94       	ror	r15
    2658:	e7 94       	ror	r14
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e0       	ldi	r26, 0x00	; 0
    2660:	b0 e8       	ldi	r27, 0x80	; 128
    2662:	e8 2a       	or	r14, r24
    2664:	f9 2a       	or	r15, r25
    2666:	0a 2b       	or	r16, r26
    2668:	1b 2b       	or	r17, r27
    266a:	76 95       	lsr	r23
    266c:	67 95       	ror	r22
    266e:	57 95       	ror	r21
    2670:	47 95       	ror	r20
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	77 fd       	sbrc	r23, 7
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <__mulsf3+0x140>
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <__mulsf3+0x18c>
    267c:	44 0f       	add	r20, r20
    267e:	55 1f       	adc	r21, r21
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	17 fd       	sbrc	r17, 7
    2686:	41 60       	ori	r20, 0x01	; 1
    2688:	ee 0c       	add	r14, r14
    268a:	ff 1c       	adc	r15, r15
    268c:	00 1f       	adc	r16, r16
    268e:	11 1f       	adc	r17, r17
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	30 40       	sbci	r19, 0x00	; 0
    2694:	40 30       	cpi	r20, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	59 07       	cpc	r21, r25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	69 07       	cpc	r22, r25
    269e:	90 e4       	ldi	r25, 0x40	; 64
    26a0:	79 07       	cpc	r23, r25
    26a2:	60 f3       	brcs	.-40     	; 0x267c <__mulsf3+0x174>
    26a4:	2b 8f       	std	Y+27, r18	; 0x1b
    26a6:	3c 8f       	std	Y+28, r19	; 0x1c
    26a8:	db 01       	movw	r26, r22
    26aa:	ca 01       	movw	r24, r20
    26ac:	8f 77       	andi	r24, 0x7F	; 127
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	a0 70       	andi	r26, 0x00	; 0
    26b2:	b0 70       	andi	r27, 0x00	; 0
    26b4:	80 34       	cpi	r24, 0x40	; 64
    26b6:	91 05       	cpc	r25, r1
    26b8:	a1 05       	cpc	r26, r1
    26ba:	b1 05       	cpc	r27, r1
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <__mulsf3+0x1ce>
    26be:	47 fd       	sbrc	r20, 7
    26c0:	0a c0       	rjmp	.+20     	; 0x26d6 <__mulsf3+0x1ce>
    26c2:	e1 14       	cp	r14, r1
    26c4:	f1 04       	cpc	r15, r1
    26c6:	01 05       	cpc	r16, r1
    26c8:	11 05       	cpc	r17, r1
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <__mulsf3+0x1ce>
    26cc:	40 5c       	subi	r20, 0xC0	; 192
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	6f 4f       	sbci	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	40 78       	andi	r20, 0x80	; 128
    26d6:	1a 8e       	std	Y+26, r1	; 0x1a
    26d8:	fe 17       	cp	r31, r30
    26da:	11 f0       	breq	.+4      	; 0x26e0 <__mulsf3+0x1d8>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	8a 8f       	std	Y+26, r24	; 0x1a
    26e0:	4d 8f       	std	Y+29, r20	; 0x1d
    26e2:	5e 8f       	std	Y+30, r21	; 0x1e
    26e4:	6f 8f       	std	Y+31, r22	; 0x1f
    26e6:	78 a3       	std	Y+32, r23	; 0x20
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	ce 01       	movw	r24, r28
    26ee:	49 96       	adiw	r24, 0x19	; 25
    26f0:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    26f4:	a0 96       	adiw	r28, 0x20	; 32
    26f6:	e2 e1       	ldi	r30, 0x12	; 18
    26f8:	0c 94 80 38 	jmp	0x7100	; 0x7100 <__epilogue_restores__>

000026fc <__gtsf2>:
    26fc:	a8 e1       	ldi	r26, 0x18	; 24
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__prologue_saves__+0x18>
    2708:	69 83       	std	Y+1, r22	; 0x01
    270a:	7a 83       	std	Y+2, r23	; 0x02
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	2d 83       	std	Y+5, r18	; 0x05
    2712:	3e 83       	std	Y+6, r19	; 0x06
    2714:	4f 83       	std	Y+7, r20	; 0x07
    2716:	58 87       	std	Y+8, r21	; 0x08
    2718:	89 e0       	ldi	r24, 0x09	; 9
    271a:	e8 2e       	mov	r14, r24
    271c:	f1 2c       	mov	r15, r1
    271e:	ec 0e       	add	r14, r28
    2720:	fd 1e       	adc	r15, r29
    2722:	ce 01       	movw	r24, r28
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    272c:	8e 01       	movw	r16, r28
    272e:	0f 5e       	subi	r16, 0xEF	; 239
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	ce 01       	movw	r24, r28
    2734:	05 96       	adiw	r24, 0x05	; 5
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	82 30       	cpi	r24, 0x02	; 2
    2740:	40 f0       	brcs	.+16     	; 0x2752 <__gtsf2+0x56>
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	82 30       	cpi	r24, 0x02	; 2
    2746:	28 f0       	brcs	.+10     	; 0x2752 <__gtsf2+0x56>
    2748:	c7 01       	movw	r24, r14
    274a:	b8 01       	movw	r22, r16
    274c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <__gtsf2+0x58>
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	68 96       	adiw	r28, 0x18	; 24
    2756:	e6 e0       	ldi	r30, 0x06	; 6
    2758:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <__epilogue_restores__+0x18>

0000275c <__gesf2>:
    275c:	a8 e1       	ldi	r26, 0x18	; 24
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e4 eb       	ldi	r30, 0xB4	; 180
    2762:	f3 e1       	ldi	r31, 0x13	; 19
    2764:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__prologue_saves__+0x18>
    2768:	69 83       	std	Y+1, r22	; 0x01
    276a:	7a 83       	std	Y+2, r23	; 0x02
    276c:	8b 83       	std	Y+3, r24	; 0x03
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	2d 83       	std	Y+5, r18	; 0x05
    2772:	3e 83       	std	Y+6, r19	; 0x06
    2774:	4f 83       	std	Y+7, r20	; 0x07
    2776:	58 87       	std	Y+8, r21	; 0x08
    2778:	89 e0       	ldi	r24, 0x09	; 9
    277a:	e8 2e       	mov	r14, r24
    277c:	f1 2c       	mov	r15, r1
    277e:	ec 0e       	add	r14, r28
    2780:	fd 1e       	adc	r15, r29
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	b7 01       	movw	r22, r14
    2788:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    278c:	8e 01       	movw	r16, r28
    278e:	0f 5e       	subi	r16, 0xEF	; 239
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	ce 01       	movw	r24, r28
    2794:	05 96       	adiw	r24, 0x05	; 5
    2796:	b8 01       	movw	r22, r16
    2798:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	40 f0       	brcs	.+16     	; 0x27b2 <__gesf2+0x56>
    27a2:	89 89       	ldd	r24, Y+17	; 0x11
    27a4:	82 30       	cpi	r24, 0x02	; 2
    27a6:	28 f0       	brcs	.+10     	; 0x27b2 <__gesf2+0x56>
    27a8:	c7 01       	movw	r24, r14
    27aa:	b8 01       	movw	r22, r16
    27ac:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <__gesf2+0x58>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	68 96       	adiw	r28, 0x18	; 24
    27b6:	e6 e0       	ldi	r30, 0x06	; 6
    27b8:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <__epilogue_restores__+0x18>

000027bc <__ltsf2>:
    27bc:	a8 e1       	ldi	r26, 0x18	; 24
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e4 ee       	ldi	r30, 0xE4	; 228
    27c2:	f3 e1       	ldi	r31, 0x13	; 19
    27c4:	0c 94 70 38 	jmp	0x70e0	; 0x70e0 <__prologue_saves__+0x18>
    27c8:	69 83       	std	Y+1, r22	; 0x01
    27ca:	7a 83       	std	Y+2, r23	; 0x02
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	2d 83       	std	Y+5, r18	; 0x05
    27d2:	3e 83       	std	Y+6, r19	; 0x06
    27d4:	4f 83       	std	Y+7, r20	; 0x07
    27d6:	58 87       	std	Y+8, r21	; 0x08
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	e8 2e       	mov	r14, r24
    27dc:	f1 2c       	mov	r15, r1
    27de:	ec 0e       	add	r14, r28
    27e0:	fd 1e       	adc	r15, r29
    27e2:	ce 01       	movw	r24, r28
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	b7 01       	movw	r22, r14
    27e8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 5e       	subi	r16, 0xEF	; 239
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	ce 01       	movw	r24, r28
    27f4:	05 96       	adiw	r24, 0x05	; 5
    27f6:	b8 01       	movw	r22, r16
    27f8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	40 f0       	brcs	.+16     	; 0x2812 <__ltsf2+0x56>
    2802:	89 89       	ldd	r24, Y+17	; 0x11
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	28 f0       	brcs	.+10     	; 0x2812 <__ltsf2+0x56>
    2808:	c7 01       	movw	r24, r14
    280a:	b8 01       	movw	r22, r16
    280c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <__ltsf2+0x58>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	68 96       	adiw	r28, 0x18	; 24
    2816:	e6 e0       	ldi	r30, 0x06	; 6
    2818:	0c 94 8c 38 	jmp	0x7118	; 0x7118 <__epilogue_restores__+0x18>

0000281c <__fixsfsi>:
    281c:	ac e0       	ldi	r26, 0x0C	; 12
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e4 e1       	ldi	r30, 0x14	; 20
    2822:	f4 e1       	ldi	r31, 0x14	; 20
    2824:	0c 94 74 38 	jmp	0x70e8	; 0x70e8 <__prologue_saves__+0x20>
    2828:	69 83       	std	Y+1, r22	; 0x01
    282a:	7a 83       	std	Y+2, r23	; 0x02
    282c:	8b 83       	std	Y+3, r24	; 0x03
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	be 01       	movw	r22, r28
    2836:	6b 5f       	subi	r22, 0xFB	; 251
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	61 f1       	breq	.+88     	; 0x289c <__fixsfsi+0x80>
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	50 f1       	brcs	.+84     	; 0x289c <__fixsfsi+0x80>
    2848:	84 30       	cpi	r24, 0x04	; 4
    284a:	21 f4       	brne	.+8      	; 0x2854 <__fixsfsi+0x38>
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	88 23       	and	r24, r24
    2850:	51 f1       	breq	.+84     	; 0x28a6 <__fixsfsi+0x8a>
    2852:	2e c0       	rjmp	.+92     	; 0x28b0 <__fixsfsi+0x94>
    2854:	2f 81       	ldd	r18, Y+7	; 0x07
    2856:	38 85       	ldd	r19, Y+8	; 0x08
    2858:	37 fd       	sbrc	r19, 7
    285a:	20 c0       	rjmp	.+64     	; 0x289c <__fixsfsi+0x80>
    285c:	6e 81       	ldd	r22, Y+6	; 0x06
    285e:	2f 31       	cpi	r18, 0x1F	; 31
    2860:	31 05       	cpc	r19, r1
    2862:	1c f0       	brlt	.+6      	; 0x286a <__fixsfsi+0x4e>
    2864:	66 23       	and	r22, r22
    2866:	f9 f0       	breq	.+62     	; 0x28a6 <__fixsfsi+0x8a>
    2868:	23 c0       	rjmp	.+70     	; 0x28b0 <__fixsfsi+0x94>
    286a:	8e e1       	ldi	r24, 0x1E	; 30
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	82 1b       	sub	r24, r18
    2870:	93 0b       	sbc	r25, r19
    2872:	29 85       	ldd	r18, Y+9	; 0x09
    2874:	3a 85       	ldd	r19, Y+10	; 0x0a
    2876:	4b 85       	ldd	r20, Y+11	; 0x0b
    2878:	5c 85       	ldd	r21, Y+12	; 0x0c
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <__fixsfsi+0x68>
    287c:	56 95       	lsr	r21
    287e:	47 95       	ror	r20
    2880:	37 95       	ror	r19
    2882:	27 95       	ror	r18
    2884:	8a 95       	dec	r24
    2886:	d2 f7       	brpl	.-12     	; 0x287c <__fixsfsi+0x60>
    2888:	66 23       	and	r22, r22
    288a:	b1 f0       	breq	.+44     	; 0x28b8 <__fixsfsi+0x9c>
    288c:	50 95       	com	r21
    288e:	40 95       	com	r20
    2890:	30 95       	com	r19
    2892:	21 95       	neg	r18
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	4f 4f       	sbci	r20, 0xFF	; 255
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	0e c0       	rjmp	.+28     	; 0x28b8 <__fixsfsi+0x9c>
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	09 c0       	rjmp	.+18     	; 0x28b8 <__fixsfsi+0x9c>
    28a6:	2f ef       	ldi	r18, 0xFF	; 255
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f ef       	ldi	r20, 0xFF	; 255
    28ac:	5f e7       	ldi	r21, 0x7F	; 127
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <__fixsfsi+0x9c>
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e8       	ldi	r21, 0x80	; 128
    28b8:	b9 01       	movw	r22, r18
    28ba:	ca 01       	movw	r24, r20
    28bc:	2c 96       	adiw	r28, 0x0c	; 12
    28be:	e2 e0       	ldi	r30, 0x02	; 2
    28c0:	0c 94 90 38 	jmp	0x7120	; 0x7120 <__epilogue_restores__+0x20>

000028c4 <__pack_f>:
    28c4:	df 92       	push	r13
    28c6:	ef 92       	push	r14
    28c8:	ff 92       	push	r15
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	fc 01       	movw	r30, r24
    28d0:	e4 80       	ldd	r14, Z+4	; 0x04
    28d2:	f5 80       	ldd	r15, Z+5	; 0x05
    28d4:	06 81       	ldd	r16, Z+6	; 0x06
    28d6:	17 81       	ldd	r17, Z+7	; 0x07
    28d8:	d1 80       	ldd	r13, Z+1	; 0x01
    28da:	80 81       	ld	r24, Z
    28dc:	82 30       	cpi	r24, 0x02	; 2
    28de:	48 f4       	brcc	.+18     	; 0x28f2 <__pack_f+0x2e>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e1       	ldi	r26, 0x10	; 16
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e8 2a       	or	r14, r24
    28ea:	f9 2a       	or	r15, r25
    28ec:	0a 2b       	or	r16, r26
    28ee:	1b 2b       	or	r17, r27
    28f0:	a5 c0       	rjmp	.+330    	; 0x2a3c <__pack_f+0x178>
    28f2:	84 30       	cpi	r24, 0x04	; 4
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__pack_f+0x34>
    28f6:	9f c0       	rjmp	.+318    	; 0x2a36 <__pack_f+0x172>
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	21 f4       	brne	.+8      	; 0x2904 <__pack_f+0x40>
    28fc:	ee 24       	eor	r14, r14
    28fe:	ff 24       	eor	r15, r15
    2900:	87 01       	movw	r16, r14
    2902:	05 c0       	rjmp	.+10     	; 0x290e <__pack_f+0x4a>
    2904:	e1 14       	cp	r14, r1
    2906:	f1 04       	cpc	r15, r1
    2908:	01 05       	cpc	r16, r1
    290a:	11 05       	cpc	r17, r1
    290c:	19 f4       	brne	.+6      	; 0x2914 <__pack_f+0x50>
    290e:	e0 e0       	ldi	r30, 0x00	; 0
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	96 c0       	rjmp	.+300    	; 0x2a40 <__pack_f+0x17c>
    2914:	62 81       	ldd	r22, Z+2	; 0x02
    2916:	73 81       	ldd	r23, Z+3	; 0x03
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	62 38       	cpi	r22, 0x82	; 130
    291c:	79 07       	cpc	r23, r25
    291e:	0c f0       	brlt	.+2      	; 0x2922 <__pack_f+0x5e>
    2920:	5b c0       	rjmp	.+182    	; 0x29d8 <__pack_f+0x114>
    2922:	22 e8       	ldi	r18, 0x82	; 130
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	26 1b       	sub	r18, r22
    2928:	37 0b       	sbc	r19, r23
    292a:	2a 31       	cpi	r18, 0x1A	; 26
    292c:	31 05       	cpc	r19, r1
    292e:	2c f0       	brlt	.+10     	; 0x293a <__pack_f+0x76>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	2a c0       	rjmp	.+84     	; 0x298e <__pack_f+0xca>
    293a:	b8 01       	movw	r22, r16
    293c:	a7 01       	movw	r20, r14
    293e:	02 2e       	mov	r0, r18
    2940:	04 c0       	rjmp	.+8      	; 0x294a <__pack_f+0x86>
    2942:	76 95       	lsr	r23
    2944:	67 95       	ror	r22
    2946:	57 95       	ror	r21
    2948:	47 95       	ror	r20
    294a:	0a 94       	dec	r0
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <__pack_f+0x7e>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <__pack_f+0x9c>
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	aa 1f       	adc	r26, r26
    295e:	bb 1f       	adc	r27, r27
    2960:	2a 95       	dec	r18
    2962:	d2 f7       	brpl	.-12     	; 0x2958 <__pack_f+0x94>
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	a1 09       	sbc	r26, r1
    2968:	b1 09       	sbc	r27, r1
    296a:	8e 21       	and	r24, r14
    296c:	9f 21       	and	r25, r15
    296e:	a0 23       	and	r26, r16
    2970:	b1 23       	and	r27, r17
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	a1 05       	cpc	r26, r1
    2976:	b1 05       	cpc	r27, r1
    2978:	21 f0       	breq	.+8      	; 0x2982 <__pack_f+0xbe>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	9a 01       	movw	r18, r20
    2984:	ab 01       	movw	r20, r22
    2986:	28 2b       	or	r18, r24
    2988:	39 2b       	or	r19, r25
    298a:	4a 2b       	or	r20, r26
    298c:	5b 2b       	or	r21, r27
    298e:	da 01       	movw	r26, r20
    2990:	c9 01       	movw	r24, r18
    2992:	8f 77       	andi	r24, 0x7F	; 127
    2994:	90 70       	andi	r25, 0x00	; 0
    2996:	a0 70       	andi	r26, 0x00	; 0
    2998:	b0 70       	andi	r27, 0x00	; 0
    299a:	80 34       	cpi	r24, 0x40	; 64
    299c:	91 05       	cpc	r25, r1
    299e:	a1 05       	cpc	r26, r1
    29a0:	b1 05       	cpc	r27, r1
    29a2:	39 f4       	brne	.+14     	; 0x29b2 <__pack_f+0xee>
    29a4:	27 ff       	sbrs	r18, 7
    29a6:	09 c0       	rjmp	.+18     	; 0x29ba <__pack_f+0xf6>
    29a8:	20 5c       	subi	r18, 0xC0	; 192
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	4f 4f       	sbci	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <__pack_f+0xf6>
    29b2:	21 5c       	subi	r18, 0xC1	; 193
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	4f 4f       	sbci	r20, 0xFF	; 255
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	e0 e0       	ldi	r30, 0x00	; 0
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	20 30       	cpi	r18, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	3a 07       	cpc	r19, r26
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	4a 07       	cpc	r20, r26
    29c8:	a0 e4       	ldi	r26, 0x40	; 64
    29ca:	5a 07       	cpc	r21, r26
    29cc:	10 f0       	brcs	.+4      	; 0x29d2 <__pack_f+0x10e>
    29ce:	e1 e0       	ldi	r30, 0x01	; 1
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	79 01       	movw	r14, r18
    29d4:	8a 01       	movw	r16, r20
    29d6:	27 c0       	rjmp	.+78     	; 0x2a26 <__pack_f+0x162>
    29d8:	60 38       	cpi	r22, 0x80	; 128
    29da:	71 05       	cpc	r23, r1
    29dc:	64 f5       	brge	.+88     	; 0x2a36 <__pack_f+0x172>
    29de:	fb 01       	movw	r30, r22
    29e0:	e1 58       	subi	r30, 0x81	; 129
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	d8 01       	movw	r26, r16
    29e6:	c7 01       	movw	r24, r14
    29e8:	8f 77       	andi	r24, 0x7F	; 127
    29ea:	90 70       	andi	r25, 0x00	; 0
    29ec:	a0 70       	andi	r26, 0x00	; 0
    29ee:	b0 70       	andi	r27, 0x00	; 0
    29f0:	80 34       	cpi	r24, 0x40	; 64
    29f2:	91 05       	cpc	r25, r1
    29f4:	a1 05       	cpc	r26, r1
    29f6:	b1 05       	cpc	r27, r1
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <__pack_f+0x144>
    29fa:	e7 fe       	sbrs	r14, 7
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <__pack_f+0x154>
    29fe:	80 e4       	ldi	r24, 0x40	; 64
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__pack_f+0x14c>
    2a08:	8f e3       	ldi	r24, 0x3F	; 63
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e8 0e       	add	r14, r24
    2a12:	f9 1e       	adc	r15, r25
    2a14:	0a 1f       	adc	r16, r26
    2a16:	1b 1f       	adc	r17, r27
    2a18:	17 ff       	sbrs	r17, 7
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__pack_f+0x162>
    2a1c:	16 95       	lsr	r17
    2a1e:	07 95       	ror	r16
    2a20:	f7 94       	ror	r15
    2a22:	e7 94       	ror	r14
    2a24:	31 96       	adiw	r30, 0x01	; 1
    2a26:	87 e0       	ldi	r24, 0x07	; 7
    2a28:	16 95       	lsr	r17
    2a2a:	07 95       	ror	r16
    2a2c:	f7 94       	ror	r15
    2a2e:	e7 94       	ror	r14
    2a30:	8a 95       	dec	r24
    2a32:	d1 f7       	brne	.-12     	; 0x2a28 <__pack_f+0x164>
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <__pack_f+0x17c>
    2a36:	ee 24       	eor	r14, r14
    2a38:	ff 24       	eor	r15, r15
    2a3a:	87 01       	movw	r16, r14
    2a3c:	ef ef       	ldi	r30, 0xFF	; 255
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	6e 2f       	mov	r22, r30
    2a42:	67 95       	ror	r22
    2a44:	66 27       	eor	r22, r22
    2a46:	67 95       	ror	r22
    2a48:	90 2f       	mov	r25, r16
    2a4a:	9f 77       	andi	r25, 0x7F	; 127
    2a4c:	d7 94       	ror	r13
    2a4e:	dd 24       	eor	r13, r13
    2a50:	d7 94       	ror	r13
    2a52:	8e 2f       	mov	r24, r30
    2a54:	86 95       	lsr	r24
    2a56:	49 2f       	mov	r20, r25
    2a58:	46 2b       	or	r20, r22
    2a5a:	58 2f       	mov	r21, r24
    2a5c:	5d 29       	or	r21, r13
    2a5e:	b7 01       	movw	r22, r14
    2a60:	ca 01       	movw	r24, r20
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	08 95       	ret

00002a6e <__unpack_f>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	db 01       	movw	r26, r22
    2a72:	40 81       	ld	r20, Z
    2a74:	51 81       	ldd	r21, Z+1	; 0x01
    2a76:	22 81       	ldd	r18, Z+2	; 0x02
    2a78:	62 2f       	mov	r22, r18
    2a7a:	6f 77       	andi	r22, 0x7F	; 127
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	22 1f       	adc	r18, r18
    2a80:	22 27       	eor	r18, r18
    2a82:	22 1f       	adc	r18, r18
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	89 2f       	mov	r24, r25
    2a88:	88 0f       	add	r24, r24
    2a8a:	82 2b       	or	r24, r18
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	99 1f       	adc	r25, r25
    2a92:	99 27       	eor	r25, r25
    2a94:	99 1f       	adc	r25, r25
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	9c 93       	st	X, r25
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
    2a9c:	21 15       	cp	r18, r1
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	a9 f5       	brne	.+106    	; 0x2b0c <__unpack_f+0x9e>
    2aa2:	41 15       	cp	r20, r1
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	61 05       	cpc	r22, r1
    2aa8:	71 05       	cpc	r23, r1
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <__unpack_f+0x42>
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	37 c0       	rjmp	.+110    	; 0x2b1e <__unpack_f+0xb0>
    2ab0:	82 e8       	ldi	r24, 0x82	; 130
    2ab2:	9f ef       	ldi	r25, 0xFF	; 255
    2ab4:	13 96       	adiw	r26, 0x03	; 3
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
    2aba:	12 97       	sbiw	r26, 0x02	; 2
    2abc:	9a 01       	movw	r18, r20
    2abe:	ab 01       	movw	r20, r22
    2ac0:	67 e0       	ldi	r22, 0x07	; 7
    2ac2:	22 0f       	add	r18, r18
    2ac4:	33 1f       	adc	r19, r19
    2ac6:	44 1f       	adc	r20, r20
    2ac8:	55 1f       	adc	r21, r21
    2aca:	6a 95       	dec	r22
    2acc:	d1 f7       	brne	.-12     	; 0x2ac2 <__unpack_f+0x54>
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	8c 93       	st	X, r24
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <__unpack_f+0x80>
    2ad4:	22 0f       	add	r18, r18
    2ad6:	33 1f       	adc	r19, r19
    2ad8:	44 1f       	adc	r20, r20
    2ada:	55 1f       	adc	r21, r21
    2adc:	12 96       	adiw	r26, 0x02	; 2
    2ade:	8d 91       	ld	r24, X+
    2ae0:	9c 91       	ld	r25, X
    2ae2:	13 97       	sbiw	r26, 0x03	; 3
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	13 96       	adiw	r26, 0x03	; 3
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
    2aec:	12 97       	sbiw	r26, 0x02	; 2
    2aee:	20 30       	cpi	r18, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	38 07       	cpc	r19, r24
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	48 07       	cpc	r20, r24
    2af8:	80 e4       	ldi	r24, 0x40	; 64
    2afa:	58 07       	cpc	r21, r24
    2afc:	58 f3       	brcs	.-42     	; 0x2ad4 <__unpack_f+0x66>
    2afe:	14 96       	adiw	r26, 0x04	; 4
    2b00:	2d 93       	st	X+, r18
    2b02:	3d 93       	st	X+, r19
    2b04:	4d 93       	st	X+, r20
    2b06:	5c 93       	st	X, r21
    2b08:	17 97       	sbiw	r26, 0x07	; 7
    2b0a:	08 95       	ret
    2b0c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b0e:	31 05       	cpc	r19, r1
    2b10:	79 f4       	brne	.+30     	; 0x2b30 <__unpack_f+0xc2>
    2b12:	41 15       	cp	r20, r1
    2b14:	51 05       	cpc	r21, r1
    2b16:	61 05       	cpc	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	19 f4       	brne	.+6      	; 0x2b22 <__unpack_f+0xb4>
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	8c 93       	st	X, r24
    2b20:	08 95       	ret
    2b22:	64 ff       	sbrs	r22, 4
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <__unpack_f+0xbe>
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	8c 93       	st	X, r24
    2b2a:	12 c0       	rjmp	.+36     	; 0x2b50 <__unpack_f+0xe2>
    2b2c:	1c 92       	st	X, r1
    2b2e:	10 c0       	rjmp	.+32     	; 0x2b50 <__unpack_f+0xe2>
    2b30:	2f 57       	subi	r18, 0x7F	; 127
    2b32:	30 40       	sbci	r19, 0x00	; 0
    2b34:	13 96       	adiw	r26, 0x03	; 3
    2b36:	3c 93       	st	X, r19
    2b38:	2e 93       	st	-X, r18
    2b3a:	12 97       	sbiw	r26, 0x02	; 2
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	8c 93       	st	X, r24
    2b40:	87 e0       	ldi	r24, 0x07	; 7
    2b42:	44 0f       	add	r20, r20
    2b44:	55 1f       	adc	r21, r21
    2b46:	66 1f       	adc	r22, r22
    2b48:	77 1f       	adc	r23, r23
    2b4a:	8a 95       	dec	r24
    2b4c:	d1 f7       	brne	.-12     	; 0x2b42 <__unpack_f+0xd4>
    2b4e:	70 64       	ori	r23, 0x40	; 64
    2b50:	14 96       	adiw	r26, 0x04	; 4
    2b52:	4d 93       	st	X+, r20
    2b54:	5d 93       	st	X+, r21
    2b56:	6d 93       	st	X+, r22
    2b58:	7c 93       	st	X, r23
    2b5a:	17 97       	sbiw	r26, 0x07	; 7
    2b5c:	08 95       	ret

00002b5e <__fpcmp_parts_f>:
    2b5e:	1f 93       	push	r17
    2b60:	dc 01       	movw	r26, r24
    2b62:	fb 01       	movw	r30, r22
    2b64:	9c 91       	ld	r25, X
    2b66:	92 30       	cpi	r25, 0x02	; 2
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <__fpcmp_parts_f+0xe>
    2b6a:	47 c0       	rjmp	.+142    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b6c:	80 81       	ld	r24, Z
    2b6e:	82 30       	cpi	r24, 0x02	; 2
    2b70:	08 f4       	brcc	.+2      	; 0x2b74 <__fpcmp_parts_f+0x16>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b74:	94 30       	cpi	r25, 0x04	; 4
    2b76:	51 f4       	brne	.+20     	; 0x2b8c <__fpcmp_parts_f+0x2e>
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	1c 91       	ld	r17, X
    2b7c:	84 30       	cpi	r24, 0x04	; 4
    2b7e:	99 f5       	brne	.+102    	; 0x2be6 <__fpcmp_parts_f+0x88>
    2b80:	81 81       	ldd	r24, Z+1	; 0x01
    2b82:	68 2f       	mov	r22, r24
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	61 1b       	sub	r22, r17
    2b88:	71 09       	sbc	r23, r1
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <__fpcmp_parts_f+0xac>
    2b8c:	84 30       	cpi	r24, 0x04	; 4
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <__fpcmp_parts_f+0x3a>
    2b90:	92 30       	cpi	r25, 0x02	; 2
    2b92:	31 f4       	brne	.+12     	; 0x2ba0 <__fpcmp_parts_f+0x42>
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	b9 f1       	breq	.+110    	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2b98:	81 81       	ldd	r24, Z+1	; 0x01
    2b9a:	88 23       	and	r24, r24
    2b9c:	89 f1       	breq	.+98     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2b9e:	2d c0       	rjmp	.+90     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2ba0:	11 96       	adiw	r26, 0x01	; 1
    2ba2:	1c 91       	ld	r17, X
    2ba4:	11 97       	sbiw	r26, 0x01	; 1
    2ba6:	82 30       	cpi	r24, 0x02	; 2
    2ba8:	f1 f0       	breq	.+60     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2baa:	81 81       	ldd	r24, Z+1	; 0x01
    2bac:	18 17       	cp	r17, r24
    2bae:	d9 f4       	brne	.+54     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bb0:	12 96       	adiw	r26, 0x02	; 2
    2bb2:	2d 91       	ld	r18, X+
    2bb4:	3c 91       	ld	r19, X
    2bb6:	13 97       	sbiw	r26, 0x03	; 3
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	82 17       	cp	r24, r18
    2bbe:	93 07       	cpc	r25, r19
    2bc0:	94 f0       	brlt	.+36     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bc2:	28 17       	cp	r18, r24
    2bc4:	39 07       	cpc	r19, r25
    2bc6:	bc f0       	brlt	.+46     	; 0x2bf6 <__fpcmp_parts_f+0x98>
    2bc8:	14 96       	adiw	r26, 0x04	; 4
    2bca:	8d 91       	ld	r24, X+
    2bcc:	9d 91       	ld	r25, X+
    2bce:	0d 90       	ld	r0, X+
    2bd0:	bc 91       	ld	r27, X
    2bd2:	a0 2d       	mov	r26, r0
    2bd4:	24 81       	ldd	r18, Z+4	; 0x04
    2bd6:	35 81       	ldd	r19, Z+5	; 0x05
    2bd8:	46 81       	ldd	r20, Z+6	; 0x06
    2bda:	57 81       	ldd	r21, Z+7	; 0x07
    2bdc:	28 17       	cp	r18, r24
    2bde:	39 07       	cpc	r19, r25
    2be0:	4a 07       	cpc	r20, r26
    2be2:	5b 07       	cpc	r21, r27
    2be4:	18 f4       	brcc	.+6      	; 0x2bec <__fpcmp_parts_f+0x8e>
    2be6:	11 23       	and	r17, r17
    2be8:	41 f0       	breq	.+16     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2bea:	0a c0       	rjmp	.+20     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bec:	82 17       	cp	r24, r18
    2bee:	93 07       	cpc	r25, r19
    2bf0:	a4 07       	cpc	r26, r20
    2bf2:	b5 07       	cpc	r27, r21
    2bf4:	40 f4       	brcc	.+16     	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2bf6:	11 23       	and	r17, r17
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	7f ef       	ldi	r23, 0xFF	; 255
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	1f 91       	pop	r17
    2c0e:	08 95       	ret

00002c10 <ADC_Init>:
#include "ADC.h"

static u8 Read_Flag = 1 ;

void ADC_Init(ADC_Vref_type vref ,ADC_Scaler_type scaler) 
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <ADC_Init+0x6>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <ADC_Init+0x8>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	6a 83       	std	Y+2, r22	; 0x02
	switch(vref)
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	3c 83       	std	Y+4, r19	; 0x04
    2c28:	2b 83       	std	Y+3, r18	; 0x03
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2e:	81 30       	cpi	r24, 0x01	; 1
    2c30:	91 05       	cpc	r25, r1
    2c32:	c1 f0       	breq	.+48     	; 0x2c64 <ADC_Init+0x54>
    2c34:	2b 81       	ldd	r18, Y+3	; 0x03
    2c36:	3c 81       	ldd	r19, Y+4	; 0x04
    2c38:	22 30       	cpi	r18, 0x02	; 2
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	11 f1       	breq	.+68     	; 0x2c82 <ADC_Init+0x72>
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	61 f5       	brne	.+88     	; 0x2c9e <ADC_Init+0x8e>
	{
		case VREF_AREF :
		CLEAR_BIT(ADMUX , REFS0) ;
    2c46:	a7 e2       	ldi	r26, 0x27	; 39
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e7 e2       	ldi	r30, 0x27	; 39
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8f 7b       	andi	r24, 0xBF	; 191
    2c52:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX , REFS1) ; 
    2c54:	a7 e2       	ldi	r26, 0x27	; 39
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e7 e2       	ldi	r30, 0x27	; 39
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	8f 77       	andi	r24, 0x7F	; 127
    2c60:	8c 93       	st	X, r24
    2c62:	1d c0       	rjmp	.+58     	; 0x2c9e <ADC_Init+0x8e>
		break ;
		case VREF_AVCC :
        SET_BIT(ADMUX , REFS0) ;
    2c64:	a7 e2       	ldi	r26, 0x27	; 39
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e7 e2       	ldi	r30, 0x27	; 39
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	80 64       	ori	r24, 0x40	; 64
    2c70:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX , REFS1) ;
    2c72:	a7 e2       	ldi	r26, 0x27	; 39
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e7 e2       	ldi	r30, 0x27	; 39
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
    2c7e:	8c 93       	st	X, r24
    2c80:	0e c0       	rjmp	.+28     	; 0x2c9e <ADC_Init+0x8e>
		break ;
		case VREF_256 :
		SET_BIT(ADMUX , REFS0) ;
    2c82:	a7 e2       	ldi	r26, 0x27	; 39
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e7 e2       	ldi	r30, 0x27	; 39
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 64       	ori	r24, 0x40	; 64
    2c8e:	8c 93       	st	X, r24
		SET_BIT(ADMUX , REFS1) ;
    2c90:	a7 e2       	ldi	r26, 0x27	; 39
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e7 e2       	ldi	r30, 0x27	; 39
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 68       	ori	r24, 0x80	; 128
    2c9c:	8c 93       	st	X, r24
		
	}
	// prescaler 
	/* if we use switch case we have 8 probablities  and every one take  3 instruction so make 24 instruction
	  we can replace it for  speed  */ 
	ADCSRA &= 0xf8 ; // here we clear first 3 bits that responsible for prescaler to avoid or with one 
    2c9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e6 e2       	ldi	r30, 0x26	; 38
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 7f       	andi	r24, 0xF8	; 248
    2caa:	8c 93       	st	X, r24
	ADCSRA |= scaler ;
    2cac:	a6 e2       	ldi	r26, 0x26	; 38
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e6 e2       	ldi	r30, 0x26	; 38
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	90 81       	ld	r25, Z
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	89 2b       	or	r24, r25
    2cba:	8c 93       	st	X, r24
	
	//READING ADJUST 
	CLEAR_BIT(ADMUX ,ADLAR) ;  // ordinary way
    2cbc:	a7 e2       	ldi	r26, 0x27	; 39
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e7 e2       	ldi	r30, 0x27	; 39
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 7d       	andi	r24, 0xDF	; 223
    2cc8:	8c 93       	st	X, r24
	//enable
	SET_BIT(ADCSRA , ADEN) ;
    2cca:	a6 e2       	ldi	r26, 0x26	; 38
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e6 e2       	ldi	r30, 0x26	; 38
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 68       	ori	r24, 0x80	; 128
    2cd6:	8c 93       	st	X, r24
	
	
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <ADC_Read>:

u16 ADC_Read(ADC_Channel_type channel ) 
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	//select channel 
	ADMUX &= 0xe0 ; //0b111
    2cf2:	a7 e2       	ldi	r26, 0x27	; 39
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e7 e2       	ldi	r30, 0x27	; 39
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 7e       	andi	r24, 0xE0	; 224
    2cfe:	8c 93       	st	X, r24
	ADMUX |= channel ;
    2d00:	a7 e2       	ldi	r26, 0x27	; 39
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e7 e2       	ldi	r30, 0x27	; 39
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	90 81       	ld	r25, Z
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	89 2b       	or	r24, r25
    2d0e:	8c 93       	st	X, r24
	// start conversion 
	SET_BIT(ADCSRA , ADSC) ;
    2d10:	a6 e2       	ldi	r26, 0x26	; 38
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e6 e2       	ldi	r30, 0x26	; 38
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	80 64       	ori	r24, 0x40	; 64
    2d1c:	8c 93       	st	X, r24
	while(READ_BIT(ADCSRA , ADSC)) ; //busy wait polling
    2d1e:	e6 e2       	ldi	r30, 0x26	; 38
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	82 95       	swap	r24
    2d26:	86 95       	lsr	r24
    2d28:	86 95       	lsr	r24
    2d2a:	83 70       	andi	r24, 0x03	; 3
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	81 70       	andi	r24, 0x01	; 1
    2d32:	90 70       	andi	r25, 0x00	; 0
    2d34:	88 23       	and	r24, r24
    2d36:	99 f7       	brne	.-26     	; 0x2d1e <ADC_Read+0x38>
	//reading 
	return ADC ;
    2d38:	e4 e2       	ldi	r30, 0x24	; 36
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <ADC_StartConversion>:

void ADC_StartConversion (ADC_Channel_type channel)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	0f 92       	push	r0
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	89 83       	std	Y+1, r24	; 0x01
	if(Read_Flag == 1)
    2d54:	80 91 71 01 	lds	r24, 0x0171
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	c1 f4       	brne	.+48     	; 0x2d8c <ADC_StartConversion+0x44>
	{
		//select channel
		ADMUX &= 0xe0 ; //0b111
    2d5c:	a7 e2       	ldi	r26, 0x27	; 39
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e7 e2       	ldi	r30, 0x27	; 39
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	80 7e       	andi	r24, 0xE0	; 224
    2d68:	8c 93       	st	X, r24
		ADMUX |= channel ;
    2d6a:	a7 e2       	ldi	r26, 0x27	; 39
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e7 e2       	ldi	r30, 0x27	; 39
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	90 81       	ld	r25, Z
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	89 2b       	or	r24, r25
    2d78:	8c 93       	st	X, r24
		// start conversion
		SET_BIT(ADCSRA , ADSC) ;
    2d7a:	a6 e2       	ldi	r26, 0x26	; 38
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e6 e2       	ldi	r30, 0x26	; 38
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	80 64       	ori	r24, 0x40	; 64
    2d86:	8c 93       	st	X, r24
		Read_Flag = 0 ;
    2d88:	10 92 71 01 	sts	0x0171, r1
	}
	
}  
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <ADC_GetRead>:
u16 ADC_GetRead (void)
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
	while(READ_BIT(ADCSRA ,ADSC)) ;
    2d9c:	e6 e2       	ldi	r30, 0x26	; 38
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	82 95       	swap	r24
    2da4:	86 95       	lsr	r24
    2da6:	86 95       	lsr	r24
    2da8:	83 70       	andi	r24, 0x03	; 3
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	81 70       	andi	r24, 0x01	; 1
    2db0:	90 70       	andi	r25, 0x00	; 0
    2db2:	88 23       	and	r24, r24
    2db4:	99 f7       	brne	.-26     	; 0x2d9c <ADC_GetRead+0x8>
	return ADC ;
    2db6:	e4 e2       	ldi	r30, 0x24	; 36
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
}
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <ADC_GetRead_NOBLOCK>:

u8 ADC_GetRead_NOBLOCK (u16 *pdata)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <ADC_GetRead_NOBLOCK+0x6>
    2dca:	0f 92       	push	r0
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	9b 83       	std	Y+3, r25	; 0x03
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
	u8 status = 0 ; 
    2dd4:	19 82       	std	Y+1, r1	; 0x01
	if(READ_BIT(ADCSRA ,ADSC)==0)
    2dd6:	e6 e2       	ldi	r30, 0x26	; 38
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	82 95       	swap	r24
    2dde:	86 95       	lsr	r24
    2de0:	86 95       	lsr	r24
    2de2:	83 70       	andi	r24, 0x03	; 3
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	81 70       	andi	r24, 0x01	; 1
    2dea:	90 70       	andi	r25, 0x00	; 0
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f4       	brne	.+26     	; 0x2e0a <ADC_GetRead_NOBLOCK+0x46>
	{
		*pdata = ADC ; 
    2df0:	e4 e2       	ldi	r30, 0x24	; 36
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	91 81       	ldd	r25, Z+1	; 0x01
    2df8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfc:	91 83       	std	Z+1, r25	; 0x01
    2dfe:	80 83       	st	Z, r24
		status = 1 ; 
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	89 83       	std	Y+1, r24	; 0x01
		Read_Flag = 1 ; //to repeat start conversion 
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	80 93 71 01 	sts	0x0171, r24
	}
	return status ;
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <DIO_InitPin>:
	
	
}*/

static void DIO_InitPin (DIO_Pin_type pin , DIO_Pin_Status_Type status)  
{
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	2c 97       	sbiw	r28, 0x0c	; 12
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
    2e2e:	6c 83       	std	Y+4, r22	; 0x04
	  void DIO_InitPin (DIO_Port_type port , u8 pnum , DIO_Pin_Status_Type status) to
	  void DIO_InitPin (DIO_Pin_type pin , DIO_Pin_Status_Type status)
	  without changing implementation   */


	u8 pnum = pin %8 ;
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	87 70       	andi	r24, 0x07	; 7
    2e34:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin /8 ;
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	86 95       	lsr	r24
    2e3a:	86 95       	lsr	r24
    2e3c:	86 95       	lsr	r24
    2e3e:	89 83       	std	Y+1, r24	; 0x01
	
	switch(status)
    2e40:	8c 81       	ldd	r24, Y+4	; 0x04
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	3c 87       	std	Y+12, r19	; 0x0c
    2e48:	2b 87       	std	Y+11, r18	; 0x0b
    2e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e4e:	81 30       	cpi	r24, 0x01	; 1
    2e50:	91 05       	cpc	r25, r1
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <DIO_InitPin+0x3e>
    2e54:	7a c0       	rjmp	.+244    	; 0x2f4a <DIO_InitPin+0x132>
    2e56:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e58:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e5a:	22 30       	cpi	r18, 0x02	; 2
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <DIO_InitPin+0x4a>
    2e60:	36 c1       	rjmp	.+620    	; 0x30ce <DIO_InitPin+0x2b6>
    2e62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <DIO_InitPin+0x54>
    2e6a:	ee c1       	rjmp	.+988    	; 0x3248 <DIO_InitPin+0x430>
	{
		case OUTPUT :
		switch(port)
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	3a 87       	std	Y+10, r19	; 0x0a
    2e74:	29 87       	std	Y+9, r18	; 0x09
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	49 f1       	breq	.+82     	; 0x2ed2 <DIO_InitPin+0xba>
    2e80:	29 85       	ldd	r18, Y+9	; 0x09
    2e82:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e84:	22 30       	cpi	r18, 0x02	; 2
    2e86:	31 05       	cpc	r19, r1
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <DIO_InitPin+0x7c>
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	61 f0       	breq	.+24     	; 0x2eaa <DIO_InitPin+0x92>
    2e92:	da c1       	rjmp	.+948    	; 0x3248 <DIO_InitPin+0x430>
    2e94:	29 85       	ldd	r18, Y+9	; 0x09
    2e96:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e98:	22 30       	cpi	r18, 0x02	; 2
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	71 f1       	breq	.+92     	; 0x2efa <DIO_InitPin+0xe2>
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	83 30       	cpi	r24, 0x03	; 3
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	e9 f1       	breq	.+122    	; 0x2f22 <DIO_InitPin+0x10a>
    2ea8:	cf c1       	rjmp	.+926    	; 0x3248 <DIO_InitPin+0x430>
		{
			case PA :
			SET_BIT(DDRA , pnum) ;
    2eaa:	aa e3       	ldi	r26, 0x3A	; 58
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	ea e3       	ldi	r30, 0x3A	; 58
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	48 2f       	mov	r20, r24
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	02 2e       	mov	r0, r18
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <DIO_InitPin+0xb0>
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	0a 94       	dec	r0
    2eca:	e2 f7       	brpl	.-8      	; 0x2ec4 <DIO_InitPin+0xac>
    2ecc:	84 2b       	or	r24, r20
    2ece:	8c 93       	st	X, r24
    2ed0:	bb c1       	rjmp	.+886    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PB :
			SET_BIT(DDRB , pnum) ;
    2ed2:	a7 e3       	ldi	r26, 0x37	; 55
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e7 e3       	ldi	r30, 0x37	; 55
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	48 2f       	mov	r20, r24
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	02 2e       	mov	r0, r18
    2eea:	02 c0       	rjmp	.+4      	; 0x2ef0 <DIO_InitPin+0xd8>
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	0a 94       	dec	r0
    2ef2:	e2 f7       	brpl	.-8      	; 0x2eec <DIO_InitPin+0xd4>
    2ef4:	84 2b       	or	r24, r20
    2ef6:	8c 93       	st	X, r24
    2ef8:	a7 c1       	rjmp	.+846    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PC :
			SET_BIT(DDRC , pnum) ;
    2efa:	a4 e3       	ldi	r26, 0x34	; 52
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e4 e3       	ldi	r30, 0x34	; 52
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	48 2f       	mov	r20, r24
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	02 2e       	mov	r0, r18
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <DIO_InitPin+0x100>
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	0a 94       	dec	r0
    2f1a:	e2 f7       	brpl	.-8      	; 0x2f14 <DIO_InitPin+0xfc>
    2f1c:	84 2b       	or	r24, r20
    2f1e:	8c 93       	st	X, r24
    2f20:	93 c1       	rjmp	.+806    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PD :
			SET_BIT(DDRD , pnum) ;
    2f22:	a1 e3       	ldi	r26, 0x31	; 49
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e1 e3       	ldi	r30, 0x31	; 49
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	48 2f       	mov	r20, r24
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	02 2e       	mov	r0, r18
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <DIO_InitPin+0x128>
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	0a 94       	dec	r0
    2f42:	e2 f7       	brpl	.-8      	; 0x2f3c <DIO_InitPin+0x124>
    2f44:	84 2b       	or	r24, r20
    2f46:	8c 93       	st	X, r24
    2f48:	7f c1       	rjmp	.+766    	; 0x3248 <DIO_InitPin+0x430>
			break ;
		}
		break ;
		
		case INFREE :
		switch(port)
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	38 87       	std	Y+8, r19	; 0x08
    2f52:	2f 83       	std	Y+7, r18	; 0x07
    2f54:	8f 81       	ldd	r24, Y+7	; 0x07
    2f56:	98 85       	ldd	r25, Y+8	; 0x08
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <DIO_InitPin+0x148>
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <DIO_InitPin+0x1c6>
    2f60:	2f 81       	ldd	r18, Y+7	; 0x07
    2f62:	38 85       	ldd	r19, Y+8	; 0x08
    2f64:	22 30       	cpi	r18, 0x02	; 2
    2f66:	31 05       	cpc	r19, r1
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <DIO_InitPin+0x15c>
    2f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6c:	98 85       	ldd	r25, Y+8	; 0x08
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	71 f0       	breq	.+28     	; 0x2f8e <DIO_InitPin+0x176>
    2f72:	6a c1       	rjmp	.+724    	; 0x3248 <DIO_InitPin+0x430>
    2f74:	2f 81       	ldd	r18, Y+7	; 0x07
    2f76:	38 85       	ldd	r19, Y+8	; 0x08
    2f78:	22 30       	cpi	r18, 0x02	; 2
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <DIO_InitPin+0x168>
    2f7e:	57 c0       	rjmp	.+174    	; 0x302e <DIO_InitPin+0x216>
    2f80:	8f 81       	ldd	r24, Y+7	; 0x07
    2f82:	98 85       	ldd	r25, Y+8	; 0x08
    2f84:	83 30       	cpi	r24, 0x03	; 3
    2f86:	91 05       	cpc	r25, r1
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <DIO_InitPin+0x174>
    2f8a:	79 c0       	rjmp	.+242    	; 0x307e <DIO_InitPin+0x266>
    2f8c:	5d c1       	rjmp	.+698    	; 0x3248 <DIO_InitPin+0x430>
		{
			case PA :
			CLEAR_BIT(DDRA , pnum) ;
    2f8e:	aa e3       	ldi	r26, 0x3A	; 58
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	ea e3       	ldi	r30, 0x3A	; 58
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	48 2f       	mov	r20, r24
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <DIO_InitPin+0x192>
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	2a 95       	dec	r18
    2fac:	e2 f7       	brpl	.-8      	; 0x2fa6 <DIO_InitPin+0x18e>
    2fae:	80 95       	com	r24
    2fb0:	84 23       	and	r24, r20
    2fb2:	8c 93       	st	X, r24
			//i do not depend on initial status because may be changed in other place
			CLEAR_BIT(PORTA , pnum) ;
    2fb4:	ab e3       	ldi	r26, 0x3B	; 59
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	eb e3       	ldi	r30, 0x3B	; 59
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	02 2e       	mov	r0, r18
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <DIO_InitPin+0x1ba>
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	0a 94       	dec	r0
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <DIO_InitPin+0x1b6>
    2fd6:	80 95       	com	r24
    2fd8:	84 23       	and	r24, r20
    2fda:	8c 93       	st	X, r24
    2fdc:	35 c1       	rjmp	.+618    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PB :
			CLEAR_BIT(DDRB , pnum) ;
    2fde:	a7 e3       	ldi	r26, 0x37	; 55
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e7 e3       	ldi	r30, 0x37	; 55
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	48 2f       	mov	r20, r24
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <DIO_InitPin+0x1e2>
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	2a 95       	dec	r18
    2ffc:	e2 f7       	brpl	.-8      	; 0x2ff6 <DIO_InitPin+0x1de>
    2ffe:	80 95       	com	r24
    3000:	84 23       	and	r24, r20
    3002:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB , pnum) ;
    3004:	a8 e3       	ldi	r26, 0x38	; 56
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e8 e3       	ldi	r30, 0x38	; 56
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	48 2f       	mov	r20, r24
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	02 2e       	mov	r0, r18
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <DIO_InitPin+0x20a>
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	0a 94       	dec	r0
    3024:	e2 f7       	brpl	.-8      	; 0x301e <DIO_InitPin+0x206>
    3026:	80 95       	com	r24
    3028:	84 23       	and	r24, r20
    302a:	8c 93       	st	X, r24
    302c:	0d c1       	rjmp	.+538    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PC :
			CLEAR_BIT(DDRC , pnum) ;
    302e:	a4 e3       	ldi	r26, 0x34	; 52
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e4 e3       	ldi	r30, 0x34	; 52
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	48 2f       	mov	r20, r24
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	02 c0       	rjmp	.+4      	; 0x304a <DIO_InitPin+0x232>
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	2a 95       	dec	r18
    304c:	e2 f7       	brpl	.-8      	; 0x3046 <DIO_InitPin+0x22e>
    304e:	80 95       	com	r24
    3050:	84 23       	and	r24, r20
    3052:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC , pnum) ;
    3054:	a5 e3       	ldi	r26, 0x35	; 53
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e5 e3       	ldi	r30, 0x35	; 53
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	48 2f       	mov	r20, r24
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	02 2e       	mov	r0, r18
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <DIO_InitPin+0x25a>
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	0a 94       	dec	r0
    3074:	e2 f7       	brpl	.-8      	; 0x306e <DIO_InitPin+0x256>
    3076:	80 95       	com	r24
    3078:	84 23       	and	r24, r20
    307a:	8c 93       	st	X, r24
    307c:	e5 c0       	rjmp	.+458    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PD :
	        CLEAR_BIT(DDRD , pnum) ;
    307e:	a1 e3       	ldi	r26, 0x31	; 49
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e1 e3       	ldi	r30, 0x31	; 49
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	48 2f       	mov	r20, r24
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	02 c0       	rjmp	.+4      	; 0x309a <DIO_InitPin+0x282>
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	2a 95       	dec	r18
    309c:	e2 f7       	brpl	.-8      	; 0x3096 <DIO_InitPin+0x27e>
    309e:	80 95       	com	r24
    30a0:	84 23       	and	r24, r20
    30a2:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD , pnum) ;
    30a4:	a2 e3       	ldi	r26, 0x32	; 50
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e2 e3       	ldi	r30, 0x32	; 50
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	48 2f       	mov	r20, r24
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	02 2e       	mov	r0, r18
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <DIO_InitPin+0x2aa>
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	0a 94       	dec	r0
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <DIO_InitPin+0x2a6>
    30c6:	80 95       	com	r24
    30c8:	84 23       	and	r24, r20
    30ca:	8c 93       	st	X, r24
    30cc:	bd c0       	rjmp	.+378    	; 0x3248 <DIO_InitPin+0x430>
			break ;
		}
		break ;
		case INPULL :
		switch(port)
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	3e 83       	std	Y+6, r19	; 0x06
    30d6:	2d 83       	std	Y+5, r18	; 0x05
    30d8:	8d 81       	ldd	r24, Y+5	; 0x05
    30da:	9e 81       	ldd	r25, Y+6	; 0x06
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	91 05       	cpc	r25, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <DIO_InitPin+0x2cc>
    30e2:	3e c0       	rjmp	.+124    	; 0x3160 <DIO_InitPin+0x348>
    30e4:	2d 81       	ldd	r18, Y+5	; 0x05
    30e6:	3e 81       	ldd	r19, Y+6	; 0x06
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	31 05       	cpc	r19, r1
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <DIO_InitPin+0x2e0>
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	71 f0       	breq	.+28     	; 0x3112 <DIO_InitPin+0x2fa>
    30f6:	a8 c0       	rjmp	.+336    	; 0x3248 <DIO_InitPin+0x430>
    30f8:	2d 81       	ldd	r18, Y+5	; 0x05
    30fa:	3e 81       	ldd	r19, Y+6	; 0x06
    30fc:	22 30       	cpi	r18, 0x02	; 2
    30fe:	31 05       	cpc	r19, r1
    3100:	09 f4       	brne	.+2      	; 0x3104 <DIO_InitPin+0x2ec>
    3102:	55 c0       	rjmp	.+170    	; 0x31ae <DIO_InitPin+0x396>
    3104:	8d 81       	ldd	r24, Y+5	; 0x05
    3106:	9e 81       	ldd	r25, Y+6	; 0x06
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	91 05       	cpc	r25, r1
    310c:	09 f4       	brne	.+2      	; 0x3110 <DIO_InitPin+0x2f8>
    310e:	76 c0       	rjmp	.+236    	; 0x31fc <DIO_InitPin+0x3e4>
    3110:	9b c0       	rjmp	.+310    	; 0x3248 <DIO_InitPin+0x430>
		{
			case PA :
			CLEAR_BIT(DDRA , pnum) ;
    3112:	aa e3       	ldi	r26, 0x3A	; 58
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	ea e3       	ldi	r30, 0x3A	; 58
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	48 2f       	mov	r20, r24
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	02 c0       	rjmp	.+4      	; 0x312e <DIO_InitPin+0x316>
    312a:	88 0f       	add	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	2a 95       	dec	r18
    3130:	e2 f7       	brpl	.-8      	; 0x312a <DIO_InitPin+0x312>
    3132:	80 95       	com	r24
    3134:	84 23       	and	r24, r20
    3136:	8c 93       	st	X, r24
			SET_BIT(PORTA , pnum) ;
    3138:	ab e3       	ldi	r26, 0x3B	; 59
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	eb e3       	ldi	r30, 0x3B	; 59
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	48 2f       	mov	r20, r24
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	28 2f       	mov	r18, r24
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	02 2e       	mov	r0, r18
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <DIO_InitPin+0x33e>
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	0a 94       	dec	r0
    3158:	e2 f7       	brpl	.-8      	; 0x3152 <DIO_InitPin+0x33a>
    315a:	84 2b       	or	r24, r20
    315c:	8c 93       	st	X, r24
    315e:	74 c0       	rjmp	.+232    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PB :
			CLEAR_BIT(DDRB , pnum) ;
    3160:	a7 e3       	ldi	r26, 0x37	; 55
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e7 e3       	ldi	r30, 0x37	; 55
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	48 2f       	mov	r20, r24
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <DIO_InitPin+0x364>
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	2a 95       	dec	r18
    317e:	e2 f7       	brpl	.-8      	; 0x3178 <DIO_InitPin+0x360>
    3180:	80 95       	com	r24
    3182:	84 23       	and	r24, r20
    3184:	8c 93       	st	X, r24
			SET_BIT(PORTB , pnum) ;
    3186:	a8 e3       	ldi	r26, 0x38	; 56
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e8 e3       	ldi	r30, 0x38	; 56
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	48 2f       	mov	r20, r24
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	02 2e       	mov	r0, r18
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <DIO_InitPin+0x38c>
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	0a 94       	dec	r0
    31a6:	e2 f7       	brpl	.-8      	; 0x31a0 <DIO_InitPin+0x388>
    31a8:	84 2b       	or	r24, r20
    31aa:	8c 93       	st	X, r24
    31ac:	4d c0       	rjmp	.+154    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PC :
			CLEAR_BIT(DDRC , pnum) ;
    31ae:	a4 e3       	ldi	r26, 0x34	; 52
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	e4 e3       	ldi	r30, 0x34	; 52
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	48 2f       	mov	r20, r24
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <DIO_InitPin+0x3b2>
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	2a 95       	dec	r18
    31cc:	e2 f7       	brpl	.-8      	; 0x31c6 <DIO_InitPin+0x3ae>
    31ce:	80 95       	com	r24
    31d0:	84 23       	and	r24, r20
    31d2:	8c 93       	st	X, r24
			SET_BIT(PORTC , pnum) ;
    31d4:	a5 e3       	ldi	r26, 0x35	; 53
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e5 e3       	ldi	r30, 0x35	; 53
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	48 2f       	mov	r20, r24
    31e0:	8a 81       	ldd	r24, Y+2	; 0x02
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	02 2e       	mov	r0, r18
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <DIO_InitPin+0x3da>
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	0a 94       	dec	r0
    31f4:	e2 f7       	brpl	.-8      	; 0x31ee <DIO_InitPin+0x3d6>
    31f6:	84 2b       	or	r24, r20
    31f8:	8c 93       	st	X, r24
    31fa:	26 c0       	rjmp	.+76     	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PD :
			CLEAR_BIT(DDRD , pnum) ;
    31fc:	a1 e3       	ldi	r26, 0x31	; 49
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	e1 e3       	ldi	r30, 0x31	; 49
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	48 2f       	mov	r20, r24
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	28 2f       	mov	r18, r24
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <DIO_InitPin+0x400>
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	2a 95       	dec	r18
    321a:	e2 f7       	brpl	.-8      	; 0x3214 <DIO_InitPin+0x3fc>
    321c:	80 95       	com	r24
    321e:	84 23       	and	r24, r20
    3220:	8c 93       	st	X, r24
			SET_BIT(PORTD , pnum) ;
    3222:	a2 e3       	ldi	r26, 0x32	; 50
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e2 e3       	ldi	r30, 0x32	; 50
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	48 2f       	mov	r20, r24
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	02 2e       	mov	r0, r18
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <DIO_InitPin+0x428>
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	0a 94       	dec	r0
    3242:	e2 f7       	brpl	.-8      	; 0x323c <DIO_InitPin+0x424>
    3244:	84 2b       	or	r24, r20
    3246:	8c 93       	st	X, r24
	DIO_InitPin(PC,1,INPULL) ;
	DIO_InitPin(PD ,0,INPULL) ;
	old design.....       */
	
	
}
    3248:	2c 96       	adiw	r28, 0x0c	; 12
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <DIO_WritePIN>:




void DIO_WritePIN (DIO_Pin_type pin ,DIO_PinVoltage_type volt) 
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	28 97       	sbiw	r28, 0x08	; 8
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	8b 83       	std	Y+3, r24	; 0x03
    3270:	6c 83       	std	Y+4, r22	; 0x04
	  i only add these two lines to change design from 
      void DIO_WritePIN (DIO_Port_type port ,u8 pnum ,DIO_PinVoltage_type volt) to
      void DIO_WritePIN (DIO_Pin_type pin ,DIO_PinVoltage_type volt)
	  without changing implementation   */

	u8 pnum = pin %8 ;
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	87 70       	andi	r24, 0x07	; 7
    3276:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin/8 ;
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	86 95       	lsr	r24
    327c:	86 95       	lsr	r24
    327e:	86 95       	lsr	r24
    3280:	89 83       	std	Y+1, r24	; 0x01
	
	//when you using a pin you need a volt 
	// here i use to make volt to be a main checker because it has a less probablities and use if without switch because it has only 2 porabablitity
	if(volt == HIGH)
    3282:	8c 81       	ldd	r24, Y+4	; 0x04
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	09 f0       	breq	.+2      	; 0x328a <DIO_WritePIN+0x30>
    3288:	6f c0       	rjmp	.+222    	; 0x3368 <DIO_WritePIN+0x10e>
	{
		switch(port)
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	38 87       	std	Y+8, r19	; 0x08
    3292:	2f 83       	std	Y+7, r18	; 0x07
    3294:	8f 81       	ldd	r24, Y+7	; 0x07
    3296:	98 85       	ldd	r25, Y+8	; 0x08
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	91 05       	cpc	r25, r1
    329c:	49 f1       	breq	.+82     	; 0x32f0 <DIO_WritePIN+0x96>
    329e:	2f 81       	ldd	r18, Y+7	; 0x07
    32a0:	38 85       	ldd	r19, Y+8	; 0x08
    32a2:	22 30       	cpi	r18, 0x02	; 2
    32a4:	31 05       	cpc	r19, r1
    32a6:	2c f4       	brge	.+10     	; 0x32b2 <DIO_WritePIN+0x58>
    32a8:	8f 81       	ldd	r24, Y+7	; 0x07
    32aa:	98 85       	ldd	r25, Y+8	; 0x08
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	61 f0       	breq	.+24     	; 0x32c8 <DIO_WritePIN+0x6e>
    32b0:	d2 c0       	rjmp	.+420    	; 0x3456 <DIO_WritePIN+0x1fc>
    32b2:	2f 81       	ldd	r18, Y+7	; 0x07
    32b4:	38 85       	ldd	r19, Y+8	; 0x08
    32b6:	22 30       	cpi	r18, 0x02	; 2
    32b8:	31 05       	cpc	r19, r1
    32ba:	71 f1       	breq	.+92     	; 0x3318 <DIO_WritePIN+0xbe>
    32bc:	8f 81       	ldd	r24, Y+7	; 0x07
    32be:	98 85       	ldd	r25, Y+8	; 0x08
    32c0:	83 30       	cpi	r24, 0x03	; 3
    32c2:	91 05       	cpc	r25, r1
    32c4:	e9 f1       	breq	.+122    	; 0x3340 <DIO_WritePIN+0xe6>
    32c6:	c7 c0       	rjmp	.+398    	; 0x3456 <DIO_WritePIN+0x1fc>
		{
			case PA :
			SET_BIT(PORTA , pnum) ;
    32c8:	ab e3       	ldi	r26, 0x3B	; 59
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	eb e3       	ldi	r30, 0x3B	; 59
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	48 2f       	mov	r20, r24
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	02 2e       	mov	r0, r18
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <DIO_WritePIN+0x8c>
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	0a 94       	dec	r0
    32e8:	e2 f7       	brpl	.-8      	; 0x32e2 <DIO_WritePIN+0x88>
    32ea:	84 2b       	or	r24, r20
    32ec:	8c 93       	st	X, r24
    32ee:	b3 c0       	rjmp	.+358    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PB :
			SET_BIT(PORTB , pnum) ;
    32f0:	a8 e3       	ldi	r26, 0x38	; 56
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e8 e3       	ldi	r30, 0x38	; 56
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	48 2f       	mov	r20, r24
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	28 2f       	mov	r18, r24
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	02 2e       	mov	r0, r18
    3308:	02 c0       	rjmp	.+4      	; 0x330e <DIO_WritePIN+0xb4>
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	0a 94       	dec	r0
    3310:	e2 f7       	brpl	.-8      	; 0x330a <DIO_WritePIN+0xb0>
    3312:	84 2b       	or	r24, r20
    3314:	8c 93       	st	X, r24
    3316:	9f c0       	rjmp	.+318    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PC :
			SET_BIT(PORTC , pnum) ;
    3318:	a5 e3       	ldi	r26, 0x35	; 53
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e5 e3       	ldi	r30, 0x35	; 53
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	48 2f       	mov	r20, r24
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	02 2e       	mov	r0, r18
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <DIO_WritePIN+0xdc>
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	0a 94       	dec	r0
    3338:	e2 f7       	brpl	.-8      	; 0x3332 <DIO_WritePIN+0xd8>
    333a:	84 2b       	or	r24, r20
    333c:	8c 93       	st	X, r24
    333e:	8b c0       	rjmp	.+278    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PD :
			SET_BIT(PORTD , pnum) ;
    3340:	a2 e3       	ldi	r26, 0x32	; 50
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e2 e3       	ldi	r30, 0x32	; 50
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	48 2f       	mov	r20, r24
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	02 2e       	mov	r0, r18
    3358:	02 c0       	rjmp	.+4      	; 0x335e <DIO_WritePIN+0x104>
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	0a 94       	dec	r0
    3360:	e2 f7       	brpl	.-8      	; 0x335a <DIO_WritePIN+0x100>
    3362:	84 2b       	or	r24, r20
    3364:	8c 93       	st	X, r24
    3366:	77 c0       	rjmp	.+238    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
		}
	}
	else if (volt == LOW)
    3368:	8c 81       	ldd	r24, Y+4	; 0x04
    336a:	88 23       	and	r24, r24
    336c:	09 f0       	breq	.+2      	; 0x3370 <DIO_WritePIN+0x116>
    336e:	73 c0       	rjmp	.+230    	; 0x3456 <DIO_WritePIN+0x1fc>
	{
		switch(port)
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	3e 83       	std	Y+6, r19	; 0x06
    3378:	2d 83       	std	Y+5, r18	; 0x05
    337a:	8d 81       	ldd	r24, Y+5	; 0x05
    337c:	9e 81       	ldd	r25, Y+6	; 0x06
    337e:	81 30       	cpi	r24, 0x01	; 1
    3380:	91 05       	cpc	r25, r1
    3382:	59 f1       	breq	.+86     	; 0x33da <DIO_WritePIN+0x180>
    3384:	2d 81       	ldd	r18, Y+5	; 0x05
    3386:	3e 81       	ldd	r19, Y+6	; 0x06
    3388:	22 30       	cpi	r18, 0x02	; 2
    338a:	31 05       	cpc	r19, r1
    338c:	2c f4       	brge	.+10     	; 0x3398 <DIO_WritePIN+0x13e>
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
    3390:	9e 81       	ldd	r25, Y+6	; 0x06
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	69 f0       	breq	.+26     	; 0x33b0 <DIO_WritePIN+0x156>
    3396:	5f c0       	rjmp	.+190    	; 0x3456 <DIO_WritePIN+0x1fc>
    3398:	2d 81       	ldd	r18, Y+5	; 0x05
    339a:	3e 81       	ldd	r19, Y+6	; 0x06
    339c:	22 30       	cpi	r18, 0x02	; 2
    339e:	31 05       	cpc	r19, r1
    33a0:	89 f1       	breq	.+98     	; 0x3404 <DIO_WritePIN+0x1aa>
    33a2:	8d 81       	ldd	r24, Y+5	; 0x05
    33a4:	9e 81       	ldd	r25, Y+6	; 0x06
    33a6:	83 30       	cpi	r24, 0x03	; 3
    33a8:	91 05       	cpc	r25, r1
    33aa:	09 f4       	brne	.+2      	; 0x33ae <DIO_WritePIN+0x154>
    33ac:	40 c0       	rjmp	.+128    	; 0x342e <DIO_WritePIN+0x1d4>
    33ae:	53 c0       	rjmp	.+166    	; 0x3456 <DIO_WritePIN+0x1fc>
		{
			case PA :
			CLEAR_BIT(PORTA , pnum) ;
    33b0:	ab e3       	ldi	r26, 0x3B	; 59
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	eb e3       	ldi	r30, 0x3B	; 59
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	48 2f       	mov	r20, r24
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	02 2e       	mov	r0, r18
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <DIO_WritePIN+0x174>
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	0a 94       	dec	r0
    33d0:	e2 f7       	brpl	.-8      	; 0x33ca <DIO_WritePIN+0x170>
    33d2:	80 95       	com	r24
    33d4:	84 23       	and	r24, r20
    33d6:	8c 93       	st	X, r24
    33d8:	3e c0       	rjmp	.+124    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PB :
			CLEAR_BIT(PORTB , pnum) ;
    33da:	a8 e3       	ldi	r26, 0x38	; 56
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e8 e3       	ldi	r30, 0x38	; 56
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	48 2f       	mov	r20, r24
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	02 2e       	mov	r0, r18
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <DIO_WritePIN+0x19e>
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	0a 94       	dec	r0
    33fa:	e2 f7       	brpl	.-8      	; 0x33f4 <DIO_WritePIN+0x19a>
    33fc:	80 95       	com	r24
    33fe:	84 23       	and	r24, r20
    3400:	8c 93       	st	X, r24
    3402:	29 c0       	rjmp	.+82     	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PC :
			CLEAR_BIT(PORTC , pnum) ;
    3404:	a5 e3       	ldi	r26, 0x35	; 53
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	e5 e3       	ldi	r30, 0x35	; 53
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	48 2f       	mov	r20, r24
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	28 2f       	mov	r18, r24
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	02 2e       	mov	r0, r18
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <DIO_WritePIN+0x1c8>
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	0a 94       	dec	r0
    3424:	e2 f7       	brpl	.-8      	; 0x341e <DIO_WritePIN+0x1c4>
    3426:	80 95       	com	r24
    3428:	84 23       	and	r24, r20
    342a:	8c 93       	st	X, r24
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PD :
			CLEAR_BIT(PORTD , pnum) ;
    342e:	a2 e3       	ldi	r26, 0x32	; 50
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	e2 e3       	ldi	r30, 0x32	; 50
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	48 2f       	mov	r20, r24
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	28 2f       	mov	r18, r24
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	02 2e       	mov	r0, r18
    3446:	02 c0       	rjmp	.+4      	; 0x344c <DIO_WritePIN+0x1f2>
    3448:	88 0f       	add	r24, r24
    344a:	99 1f       	adc	r25, r25
    344c:	0a 94       	dec	r0
    344e:	e2 f7       	brpl	.-8      	; 0x3448 <DIO_WritePIN+0x1ee>
    3450:	80 95       	com	r24
    3452:	84 23       	and	r24, r20
    3454:	8c 93       	st	X, r24
	/* in new design i need to define only one thing and api know port and pin 
	   #define  RED_LED PINA5 
	    DIO_WritePIN(RED_LED,HIGH) ; */

	
}
    3456:	28 96       	adiw	r28, 0x08	; 8
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <DIO_ReadPIN>:
DIO_PinVoltage_type DIO_ReadPIN (DIO_Pin_type pin) 
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <DIO_ReadPIN+0x6>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <DIO_ReadPIN+0x8>
    3470:	00 d0       	rcall	.+0      	; 0x3472 <DIO_ReadPIN+0xa>
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	8c 83       	std	Y+4, r24	; 0x04
	u8 pnum = pin %8 ;
    3478:	8c 81       	ldd	r24, Y+4	; 0x04
    347a:	87 70       	andi	r24, 0x07	; 7
    347c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin /8 ;
    347e:	8c 81       	ldd	r24, Y+4	; 0x04
    3480:	86 95       	lsr	r24
    3482:	86 95       	lsr	r24
    3484:	86 95       	lsr	r24
    3486:	8a 83       	std	Y+2, r24	; 0x02
	
	
	DIO_PinVoltage_type volt = LOW ; 
    3488:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	3e 83       	std	Y+6, r19	; 0x06
    3492:	2d 83       	std	Y+5, r18	; 0x05
    3494:	4d 81       	ldd	r20, Y+5	; 0x05
    3496:	5e 81       	ldd	r21, Y+6	; 0x06
    3498:	41 30       	cpi	r20, 0x01	; 1
    349a:	51 05       	cpc	r21, r1
    349c:	41 f1       	breq	.+80     	; 0x34ee <DIO_ReadPIN+0x86>
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	82 30       	cpi	r24, 0x02	; 2
    34a4:	91 05       	cpc	r25, r1
    34a6:	34 f4       	brge	.+12     	; 0x34b4 <DIO_ReadPIN+0x4c>
    34a8:	2d 81       	ldd	r18, Y+5	; 0x05
    34aa:	3e 81       	ldd	r19, Y+6	; 0x06
    34ac:	21 15       	cp	r18, r1
    34ae:	31 05       	cpc	r19, r1
    34b0:	61 f0       	breq	.+24     	; 0x34ca <DIO_ReadPIN+0x62>
    34b2:	52 c0       	rjmp	.+164    	; 0x3558 <DIO_ReadPIN+0xf0>
    34b4:	4d 81       	ldd	r20, Y+5	; 0x05
    34b6:	5e 81       	ldd	r21, Y+6	; 0x06
    34b8:	42 30       	cpi	r20, 0x02	; 2
    34ba:	51 05       	cpc	r21, r1
    34bc:	51 f1       	breq	.+84     	; 0x3512 <DIO_ReadPIN+0xaa>
    34be:	8d 81       	ldd	r24, Y+5	; 0x05
    34c0:	9e 81       	ldd	r25, Y+6	; 0x06
    34c2:	83 30       	cpi	r24, 0x03	; 3
    34c4:	91 05       	cpc	r25, r1
    34c6:	b9 f1       	breq	.+110    	; 0x3536 <DIO_ReadPIN+0xce>
    34c8:	47 c0       	rjmp	.+142    	; 0x3558 <DIO_ReadPIN+0xf0>
		/* we can return in each case 
		   return READ_BIT(PINA , pnum) ; 
		   but it is not suitable for misra rule that state to avoid logical error and provide portabality and readability 
		   here for readability and also if we do not write return below produce warning */
		    
		volt = READ_BIT(PINA , pnum) ;
    34ca:	e9 e3       	ldi	r30, 0x39	; 57
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	a9 01       	movw	r20, r18
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <DIO_ReadPIN+0x7a>
    34de:	55 95       	asr	r21
    34e0:	47 95       	ror	r20
    34e2:	8a 95       	dec	r24
    34e4:	e2 f7       	brpl	.-8      	; 0x34de <DIO_ReadPIN+0x76>
    34e6:	ca 01       	movw	r24, r20
    34e8:	81 70       	andi	r24, 0x01	; 1
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	35 c0       	rjmp	.+106    	; 0x3558 <DIO_ReadPIN+0xf0>
		break ;
		case PB :
		volt = READ_BIT(PINB , pnum) ;
    34ee:	e6 e3       	ldi	r30, 0x36	; 54
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	28 2f       	mov	r18, r24
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	88 2f       	mov	r24, r24
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	a9 01       	movw	r20, r18
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <DIO_ReadPIN+0x9e>
    3502:	55 95       	asr	r21
    3504:	47 95       	ror	r20
    3506:	8a 95       	dec	r24
    3508:	e2 f7       	brpl	.-8      	; 0x3502 <DIO_ReadPIN+0x9a>
    350a:	ca 01       	movw	r24, r20
    350c:	81 70       	andi	r24, 0x01	; 1
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	23 c0       	rjmp	.+70     	; 0x3558 <DIO_ReadPIN+0xf0>
		break ;
		case PC :
		volt = READ_BIT(PINC , pnum) ;
    3512:	e3 e3       	ldi	r30, 0x33	; 51
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	28 2f       	mov	r18, r24
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	88 2f       	mov	r24, r24
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	a9 01       	movw	r20, r18
    3524:	02 c0       	rjmp	.+4      	; 0x352a <DIO_ReadPIN+0xc2>
    3526:	55 95       	asr	r21
    3528:	47 95       	ror	r20
    352a:	8a 95       	dec	r24
    352c:	e2 f7       	brpl	.-8      	; 0x3526 <DIO_ReadPIN+0xbe>
    352e:	ca 01       	movw	r24, r20
    3530:	81 70       	andi	r24, 0x01	; 1
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	11 c0       	rjmp	.+34     	; 0x3558 <DIO_ReadPIN+0xf0>
		break ;
		case PD :
		volt = READ_BIT(PIND , pnum) ;
    3536:	e0 e3       	ldi	r30, 0x30	; 48
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	80 81       	ld	r24, Z
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	88 2f       	mov	r24, r24
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	a9 01       	movw	r20, r18
    3548:	02 c0       	rjmp	.+4      	; 0x354e <DIO_ReadPIN+0xe6>
    354a:	55 95       	asr	r21
    354c:	47 95       	ror	r20
    354e:	8a 95       	dec	r24
    3550:	e2 f7       	brpl	.-8      	; 0x354a <DIO_ReadPIN+0xe2>
    3552:	ca 01       	movw	r24, r20
    3554:	81 70       	andi	r24, 0x01	; 1
    3556:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}
	return volt ;
    3558:	89 81       	ldd	r24, Y+1	; 0x01
	   {}
	 */
	   
	
	
}
    355a:	26 96       	adiw	r28, 0x06	; 6
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <DIO_Init>:

void DIO_Init (void)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	0f 92       	push	r0
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
	/*
	  here i init all pin with only one function without calling 32 function
	  and if i want to change status of pin i only change in configuration file*/
	
	DIO_Pin_type i ;
	for(i = PINA0 ; i < TOTAL_PINS ; ++i)
    3576:	19 82       	std	Y+1, r1	; 0x01
    3578:	0e c0       	rjmp	.+28     	; 0x3596 <DIO_Init+0x2a>
	{
		DIO_InitPin(i,PinsStatusArray[i]) ;
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	88 2f       	mov	r24, r24
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	fc 01       	movw	r30, r24
    3582:	ec 58       	subi	r30, 0x8C	; 140
    3584:	fe 4f       	sbci	r31, 0xFE	; 254
    3586:	90 81       	ld	r25, Z
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	69 2f       	mov	r22, r25
    358c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <DIO_InitPin>
	/*
	  here i init all pin with only one function without calling 32 function
	  and if i want to change status of pin i only change in configuration file*/
	
	DIO_Pin_type i ;
	for(i = PINA0 ; i < TOTAL_PINS ; ++i)
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	8f 5f       	subi	r24, 0xFF	; 255
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	80 32       	cpi	r24, 0x20	; 32
    359a:	78 f3       	brcs	.-34     	; 0x357a <DIO_Init+0xe>
	{
		DIO_InitPin(i,PinsStatusArray[i]) ;
	}
	
}
    359c:	0f 90       	pop	r0
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <DIO_WritePort>:

void DIO_WritePort (DIO_Port_type port , u8 value) 
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <DIO_WritePort+0x6>
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <DIO_WritePort+0x8>
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	3c 83       	std	Y+4, r19	; 0x04
    35bc:	2b 83       	std	Y+3, r18	; 0x03
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	81 30       	cpi	r24, 0x01	; 1
    35c4:	91 05       	cpc	r25, r1
    35c6:	d1 f0       	breq	.+52     	; 0x35fc <DIO_WritePort+0x58>
    35c8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ca:	3c 81       	ldd	r19, Y+4	; 0x04
    35cc:	22 30       	cpi	r18, 0x02	; 2
    35ce:	31 05       	cpc	r19, r1
    35d0:	2c f4       	brge	.+10     	; 0x35dc <DIO_WritePort+0x38>
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	61 f0       	breq	.+24     	; 0x35f2 <DIO_WritePort+0x4e>
    35da:	1e c0       	rjmp	.+60     	; 0x3618 <DIO_WritePort+0x74>
    35dc:	2b 81       	ldd	r18, Y+3	; 0x03
    35de:	3c 81       	ldd	r19, Y+4	; 0x04
    35e0:	22 30       	cpi	r18, 0x02	; 2
    35e2:	31 05       	cpc	r19, r1
    35e4:	81 f0       	breq	.+32     	; 0x3606 <DIO_WritePort+0x62>
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	83 30       	cpi	r24, 0x03	; 3
    35ec:	91 05       	cpc	r25, r1
    35ee:	81 f0       	breq	.+32     	; 0x3610 <DIO_WritePort+0x6c>
    35f0:	13 c0       	rjmp	.+38     	; 0x3618 <DIO_WritePort+0x74>
	{
		case PA :
		PORTA = value ;
    35f2:	eb e3       	ldi	r30, 0x3B	; 59
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	80 83       	st	Z, r24
    35fa:	0e c0       	rjmp	.+28     	; 0x3618 <DIO_WritePort+0x74>
		break ;
		case PB :
		PORTB = value ;
    35fc:	e8 e3       	ldi	r30, 0x38	; 56
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	80 83       	st	Z, r24
    3604:	09 c0       	rjmp	.+18     	; 0x3618 <DIO_WritePort+0x74>
		break ;
		case PC :
		PORTC = value ;
    3606:	e5 e3       	ldi	r30, 0x35	; 53
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	80 83       	st	Z, r24
    360e:	04 c0       	rjmp	.+8      	; 0x3618 <DIO_WritePort+0x74>
		break ;
		case PD :
		PORTD = value ;
    3610:	e2 e3       	ldi	r30, 0x32	; 50
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	80 83       	st	Z, r24
		break ;
	}
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <DIO_TogglePIN>:


void DIO_TogglePIN (DIO_Pin_type pin) 
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	00 d0       	rcall	.+0      	; 0x362c <DIO_TogglePIN+0x6>
    362c:	00 d0       	rcall	.+0      	; 0x362e <DIO_TogglePIN+0x8>
    362e:	0f 92       	push	r0
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	8b 83       	std	Y+3, r24	; 0x03
	u8 pnum = pin %8 ;
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	87 70       	andi	r24, 0x07	; 7
    363a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin /8 ;
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	86 95       	lsr	r24
    3640:	86 95       	lsr	r24
    3642:	86 95       	lsr	r24
    3644:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	3d 83       	std	Y+5, r19	; 0x05
    364e:	2c 83       	std	Y+4, r18	; 0x04
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	81 30       	cpi	r24, 0x01	; 1
    3656:	91 05       	cpc	r25, r1
    3658:	49 f1       	breq	.+82     	; 0x36ac <DIO_TogglePIN+0x86>
    365a:	2c 81       	ldd	r18, Y+4	; 0x04
    365c:	3d 81       	ldd	r19, Y+5	; 0x05
    365e:	22 30       	cpi	r18, 0x02	; 2
    3660:	31 05       	cpc	r19, r1
    3662:	2c f4       	brge	.+10     	; 0x366e <DIO_TogglePIN+0x48>
    3664:	8c 81       	ldd	r24, Y+4	; 0x04
    3666:	9d 81       	ldd	r25, Y+5	; 0x05
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	61 f0       	breq	.+24     	; 0x3684 <DIO_TogglePIN+0x5e>
    366c:	5a c0       	rjmp	.+180    	; 0x3722 <DIO_TogglePIN+0xfc>
    366e:	2c 81       	ldd	r18, Y+4	; 0x04
    3670:	3d 81       	ldd	r19, Y+5	; 0x05
    3672:	22 30       	cpi	r18, 0x02	; 2
    3674:	31 05       	cpc	r19, r1
    3676:	71 f1       	breq	.+92     	; 0x36d4 <DIO_TogglePIN+0xae>
    3678:	8c 81       	ldd	r24, Y+4	; 0x04
    367a:	9d 81       	ldd	r25, Y+5	; 0x05
    367c:	83 30       	cpi	r24, 0x03	; 3
    367e:	91 05       	cpc	r25, r1
    3680:	e9 f1       	breq	.+122    	; 0x36fc <DIO_TogglePIN+0xd6>
    3682:	4f c0       	rjmp	.+158    	; 0x3722 <DIO_TogglePIN+0xfc>
	{
		case PA :
		TOGGLE_BIT(PORTA , pnum) ;
    3684:	ab e3       	ldi	r26, 0x3B	; 59
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	eb e3       	ldi	r30, 0x3B	; 59
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	48 2f       	mov	r20, r24
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	02 2e       	mov	r0, r18
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <DIO_TogglePIN+0x7c>
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	0a 94       	dec	r0
    36a4:	e2 f7       	brpl	.-8      	; 0x369e <DIO_TogglePIN+0x78>
    36a6:	84 27       	eor	r24, r20
    36a8:	8c 93       	st	X, r24
    36aa:	3b c0       	rjmp	.+118    	; 0x3722 <DIO_TogglePIN+0xfc>
		break ;
		case PB :
		TOGGLE_BIT(PORTB , pnum) ;
    36ac:	a8 e3       	ldi	r26, 0x38	; 56
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e8 e3       	ldi	r30, 0x38	; 56
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	48 2f       	mov	r20, r24
    36b8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	02 2e       	mov	r0, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <DIO_TogglePIN+0xa4>
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	0a 94       	dec	r0
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <DIO_TogglePIN+0xa0>
    36ce:	84 27       	eor	r24, r20
    36d0:	8c 93       	st	X, r24
    36d2:	27 c0       	rjmp	.+78     	; 0x3722 <DIO_TogglePIN+0xfc>
		break ;
		case PC :
	   TOGGLE_BIT(PORTC , pnum) ;
    36d4:	a5 e3       	ldi	r26, 0x35	; 53
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e5 e3       	ldi	r30, 0x35	; 53
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	48 2f       	mov	r20, r24
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	02 2e       	mov	r0, r18
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <DIO_TogglePIN+0xcc>
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	0a 94       	dec	r0
    36f4:	e2 f7       	brpl	.-8      	; 0x36ee <DIO_TogglePIN+0xc8>
    36f6:	84 27       	eor	r24, r20
    36f8:	8c 93       	st	X, r24
    36fa:	13 c0       	rjmp	.+38     	; 0x3722 <DIO_TogglePIN+0xfc>
		break ;
		case PD :
		TOGGLE_BIT(PORTD , pnum) ;
    36fc:	a2 e3       	ldi	r26, 0x32	; 50
    36fe:	b0 e0       	ldi	r27, 0x00	; 0
    3700:	e2 e3       	ldi	r30, 0x32	; 50
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	80 81       	ld	r24, Z
    3706:	48 2f       	mov	r20, r24
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	28 2f       	mov	r18, r24
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	02 2e       	mov	r0, r18
    3714:	02 c0       	rjmp	.+4      	; 0x371a <DIO_TogglePIN+0xf4>
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	0a 94       	dec	r0
    371c:	e2 f7       	brpl	.-8      	; 0x3716 <DIO_TogglePIN+0xf0>
    371e:	84 27       	eor	r24, r20
    3720:	8c 93       	st	X, r24
		break ;
	}
	
	
}
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <LCD_WriteCommand>:
	_delay_ms(2) ;
	LCD_WriteCommand(0x06) ; // Address increase no shift
}
#elif (LCD_MODE==_4_BIT)
static void LCD_WriteCommand(u8 command)
{
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62
    373a:	e9 97       	sbiw	r28, 0x39	; 57
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePIN (RS,LOW) ;
    3748:	82 e1       	ldi	r24, 0x12	; 18
    374a:	60 e0       	ldi	r22, 0x00	; 0
    374c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D7 , READ_BIT(command , 7)) ;
    3750:	89 ad       	ldd	r24, Y+57	; 0x39
    3752:	98 2f       	mov	r25, r24
    3754:	99 1f       	adc	r25, r25
    3756:	99 27       	eor	r25, r25
    3758:	99 1f       	adc	r25, r25
    375a:	87 e1       	ldi	r24, 0x17	; 23
    375c:	69 2f       	mov	r22, r25
    375e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(command , 6)) ;
    3762:	89 ad       	ldd	r24, Y+57	; 0x39
    3764:	82 95       	swap	r24
    3766:	86 95       	lsr	r24
    3768:	86 95       	lsr	r24
    376a:	83 70       	andi	r24, 0x03	; 3
    376c:	98 2f       	mov	r25, r24
    376e:	91 70       	andi	r25, 0x01	; 1
    3770:	86 e1       	ldi	r24, 0x16	; 22
    3772:	69 2f       	mov	r22, r25
    3774:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(command , 5)) ;
    3778:	89 ad       	ldd	r24, Y+57	; 0x39
    377a:	82 95       	swap	r24
    377c:	86 95       	lsr	r24
    377e:	87 70       	andi	r24, 0x07	; 7
    3780:	98 2f       	mov	r25, r24
    3782:	91 70       	andi	r25, 0x01	; 1
    3784:	85 e1       	ldi	r24, 0x15	; 21
    3786:	69 2f       	mov	r22, r25
    3788:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(command , 4)) ;
    378c:	89 ad       	ldd	r24, Y+57	; 0x39
    378e:	82 95       	swap	r24
    3790:	8f 70       	andi	r24, 0x0F	; 15
    3792:	98 2f       	mov	r25, r24
    3794:	91 70       	andi	r25, 0x01	; 1
    3796:	84 e1       	ldi	r24, 0x14	; 20
    3798:	69 2f       	mov	r22, r25
    379a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    379e:	83 e1       	ldi	r24, 0x13	; 19
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	a0 e8       	ldi	r26, 0x80	; 128
    37ac:	bf e3       	ldi	r27, 0x3F	; 63
    37ae:	8d ab       	std	Y+53, r24	; 0x35
    37b0:	9e ab       	std	Y+54, r25	; 0x36
    37b2:	af ab       	std	Y+55, r26	; 0x37
    37b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b6:	6d a9       	ldd	r22, Y+53	; 0x35
    37b8:	7e a9       	ldd	r23, Y+54	; 0x36
    37ba:	8f a9       	ldd	r24, Y+55	; 0x37
    37bc:	98 ad       	ldd	r25, Y+56	; 0x38
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4a ef       	ldi	r20, 0xFA	; 250
    37c4:	54 e4       	ldi	r21, 0x44	; 68
    37c6:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	89 ab       	std	Y+49, r24	; 0x31
    37d0:	9a ab       	std	Y+50, r25	; 0x32
    37d2:	ab ab       	std	Y+51, r26	; 0x33
    37d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37d6:	69 a9       	ldd	r22, Y+49	; 0x31
    37d8:	7a a9       	ldd	r23, Y+50	; 0x32
    37da:	8b a9       	ldd	r24, Y+51	; 0x33
    37dc:	9c a9       	ldd	r25, Y+52	; 0x34
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e8       	ldi	r20, 0x80	; 128
    37e4:	5f e3       	ldi	r21, 0x3F	; 63
    37e6:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    37ea:	88 23       	and	r24, r24
    37ec:	2c f4       	brge	.+10     	; 0x37f8 <LCD_WriteCommand+0xc6>
		__ticks = 1;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	98 ab       	std	Y+48, r25	; 0x30
    37f4:	8f a7       	std	Y+47, r24	; 0x2f
    37f6:	3f c0       	rjmp	.+126    	; 0x3876 <LCD_WriteCommand+0x144>
	else if (__tmp > 65535)
    37f8:	69 a9       	ldd	r22, Y+49	; 0x31
    37fa:	7a a9       	ldd	r23, Y+50	; 0x32
    37fc:	8b a9       	ldd	r24, Y+51	; 0x33
    37fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	3f ef       	ldi	r19, 0xFF	; 255
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	57 e4       	ldi	r21, 0x47	; 71
    3808:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	4c f5       	brge	.+82     	; 0x3862 <LCD_WriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3810:	6d a9       	ldd	r22, Y+53	; 0x35
    3812:	7e a9       	ldd	r23, Y+54	; 0x36
    3814:	8f a9       	ldd	r24, Y+55	; 0x37
    3816:	98 ad       	ldd	r25, Y+56	; 0x38
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e2       	ldi	r20, 0x20	; 32
    381e:	51 e4       	ldi	r21, 0x41	; 65
    3820:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	bc 01       	movw	r22, r24
    382a:	cd 01       	movw	r24, r26
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	98 ab       	std	Y+48, r25	; 0x30
    3836:	8f a7       	std	Y+47, r24	; 0x2f
    3838:	0f c0       	rjmp	.+30     	; 0x3858 <LCD_WriteCommand+0x126>
    383a:	88 ec       	ldi	r24, 0xC8	; 200
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	9e a7       	std	Y+46, r25	; 0x2e
    3840:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3842:	8d a5       	ldd	r24, Y+45	; 0x2d
    3844:	9e a5       	ldd	r25, Y+46	; 0x2e
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <LCD_WriteCommand+0x114>
    384a:	9e a7       	std	Y+46, r25	; 0x2e
    384c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3850:	98 a9       	ldd	r25, Y+48	; 0x30
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	98 ab       	std	Y+48, r25	; 0x30
    3856:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	8f a5       	ldd	r24, Y+47	; 0x2f
    385a:	98 a9       	ldd	r25, Y+48	; 0x30
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	69 f7       	brne	.-38     	; 0x383a <LCD_WriteCommand+0x108>
    3860:	14 c0       	rjmp	.+40     	; 0x388a <LCD_WriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3862:	69 a9       	ldd	r22, Y+49	; 0x31
    3864:	7a a9       	ldd	r23, Y+50	; 0x32
    3866:	8b a9       	ldd	r24, Y+51	; 0x33
    3868:	9c a9       	ldd	r25, Y+52	; 0x34
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	98 ab       	std	Y+48, r25	; 0x30
    3874:	8f a7       	std	Y+47, r24	; 0x2f
    3876:	8f a5       	ldd	r24, Y+47	; 0x2f
    3878:	98 a9       	ldd	r25, Y+48	; 0x30
    387a:	9c a7       	std	Y+44, r25	; 0x2c
    387c:	8b a7       	std	Y+43, r24	; 0x2b
    387e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3880:	9c a5       	ldd	r25, Y+44	; 0x2c
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <LCD_WriteCommand+0x150>
    3886:	9c a7       	std	Y+44, r25	; 0x2c
    3888:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    388a:	83 e1       	ldi	r24, 0x13	; 19
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	a0 e8       	ldi	r26, 0x80	; 128
    3898:	bf e3       	ldi	r27, 0x3F	; 63
    389a:	8f a3       	std	Y+39, r24	; 0x27
    389c:	98 a7       	std	Y+40, r25	; 0x28
    389e:	a9 a7       	std	Y+41, r26	; 0x29
    38a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a2:	6f a1       	ldd	r22, Y+39	; 0x27
    38a4:	78 a5       	ldd	r23, Y+40	; 0x28
    38a6:	89 a5       	ldd	r24, Y+41	; 0x29
    38a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	4a ef       	ldi	r20, 0xFA	; 250
    38b0:	54 e4       	ldi	r21, 0x44	; 68
    38b2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    38b6:	dc 01       	movw	r26, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	8b a3       	std	Y+35, r24	; 0x23
    38bc:	9c a3       	std	Y+36, r25	; 0x24
    38be:	ad a3       	std	Y+37, r26	; 0x25
    38c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38c2:	6b a1       	ldd	r22, Y+35	; 0x23
    38c4:	7c a1       	ldd	r23, Y+36	; 0x24
    38c6:	8d a1       	ldd	r24, Y+37	; 0x25
    38c8:	9e a1       	ldd	r25, Y+38	; 0x26
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e8       	ldi	r20, 0x80	; 128
    38d0:	5f e3       	ldi	r21, 0x3F	; 63
    38d2:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    38d6:	88 23       	and	r24, r24
    38d8:	2c f4       	brge	.+10     	; 0x38e4 <LCD_WriteCommand+0x1b2>
		__ticks = 1;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9a a3       	std	Y+34, r25	; 0x22
    38e0:	89 a3       	std	Y+33, r24	; 0x21
    38e2:	3f c0       	rjmp	.+126    	; 0x3962 <LCD_WriteCommand+0x230>
	else if (__tmp > 65535)
    38e4:	6b a1       	ldd	r22, Y+35	; 0x23
    38e6:	7c a1       	ldd	r23, Y+36	; 0x24
    38e8:	8d a1       	ldd	r24, Y+37	; 0x25
    38ea:	9e a1       	ldd	r25, Y+38	; 0x26
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	3f ef       	ldi	r19, 0xFF	; 255
    38f0:	4f e7       	ldi	r20, 0x7F	; 127
    38f2:	57 e4       	ldi	r21, 0x47	; 71
    38f4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    38f8:	18 16       	cp	r1, r24
    38fa:	4c f5       	brge	.+82     	; 0x394e <LCD_WriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fc:	6f a1       	ldd	r22, Y+39	; 0x27
    38fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3900:	89 a5       	ldd	r24, Y+41	; 0x29
    3902:	9a a5       	ldd	r25, Y+42	; 0x2a
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	40 e2       	ldi	r20, 0x20	; 32
    390a:	51 e4       	ldi	r21, 0x41	; 65
    390c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	9a a3       	std	Y+34, r25	; 0x22
    3922:	89 a3       	std	Y+33, r24	; 0x21
    3924:	0f c0       	rjmp	.+30     	; 0x3944 <LCD_WriteCommand+0x212>
    3926:	88 ec       	ldi	r24, 0xC8	; 200
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	98 a3       	std	Y+32, r25	; 0x20
    392c:	8f 8f       	std	Y+31, r24	; 0x1f
    392e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3930:	98 a1       	ldd	r25, Y+32	; 0x20
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	f1 f7       	brne	.-4      	; 0x3932 <LCD_WriteCommand+0x200>
    3936:	98 a3       	std	Y+32, r25	; 0x20
    3938:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393a:	89 a1       	ldd	r24, Y+33	; 0x21
    393c:	9a a1       	ldd	r25, Y+34	; 0x22
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	9a a3       	std	Y+34, r25	; 0x22
    3942:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3944:	89 a1       	ldd	r24, Y+33	; 0x21
    3946:	9a a1       	ldd	r25, Y+34	; 0x22
    3948:	00 97       	sbiw	r24, 0x00	; 0
    394a:	69 f7       	brne	.-38     	; 0x3926 <LCD_WriteCommand+0x1f4>
    394c:	14 c0       	rjmp	.+40     	; 0x3976 <LCD_WriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    394e:	6b a1       	ldd	r22, Y+35	; 0x23
    3950:	7c a1       	ldd	r23, Y+36	; 0x24
    3952:	8d a1       	ldd	r24, Y+37	; 0x25
    3954:	9e a1       	ldd	r25, Y+38	; 0x26
    3956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	9a a3       	std	Y+34, r25	; 0x22
    3960:	89 a3       	std	Y+33, r24	; 0x21
    3962:	89 a1       	ldd	r24, Y+33	; 0x21
    3964:	9a a1       	ldd	r25, Y+34	; 0x22
    3966:	9e 8f       	std	Y+30, r25	; 0x1e
    3968:	8d 8f       	std	Y+29, r24	; 0x1d
    396a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    396c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <LCD_WriteCommand+0x23c>
    3972:	9e 8f       	std	Y+30, r25	; 0x1e
    3974:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	DIO_WritePIN(D7 , READ_BIT(command , 3)) ;
    3976:	89 ad       	ldd	r24, Y+57	; 0x39
    3978:	86 95       	lsr	r24
    397a:	86 95       	lsr	r24
    397c:	86 95       	lsr	r24
    397e:	98 2f       	mov	r25, r24
    3980:	91 70       	andi	r25, 0x01	; 1
    3982:	87 e1       	ldi	r24, 0x17	; 23
    3984:	69 2f       	mov	r22, r25
    3986:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(command , 2)) ;
    398a:	89 ad       	ldd	r24, Y+57	; 0x39
    398c:	86 95       	lsr	r24
    398e:	86 95       	lsr	r24
    3990:	98 2f       	mov	r25, r24
    3992:	91 70       	andi	r25, 0x01	; 1
    3994:	86 e1       	ldi	r24, 0x16	; 22
    3996:	69 2f       	mov	r22, r25
    3998:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(command , 1)) ;
    399c:	89 ad       	ldd	r24, Y+57	; 0x39
    399e:	86 95       	lsr	r24
    39a0:	98 2f       	mov	r25, r24
    39a2:	91 70       	andi	r25, 0x01	; 1
    39a4:	85 e1       	ldi	r24, 0x15	; 21
    39a6:	69 2f       	mov	r22, r25
    39a8:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(command , 0)) ;
    39ac:	89 ad       	ldd	r24, Y+57	; 0x39
    39ae:	98 2f       	mov	r25, r24
    39b0:	91 70       	andi	r25, 0x01	; 1
    39b2:	84 e1       	ldi	r24, 0x14	; 20
    39b4:	69 2f       	mov	r22, r25
    39b6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    39ba:	83 e1       	ldi	r24, 0x13	; 19
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    39c2:	80 e0       	ldi	r24, 0x00	; 0
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	a0 e8       	ldi	r26, 0x80	; 128
    39c8:	bf e3       	ldi	r27, 0x3F	; 63
    39ca:	89 8f       	std	Y+25, r24	; 0x19
    39cc:	9a 8f       	std	Y+26, r25	; 0x1a
    39ce:	ab 8f       	std	Y+27, r26	; 0x1b
    39d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d2:	69 8d       	ldd	r22, Y+25	; 0x19
    39d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	4a ef       	ldi	r20, 0xFA	; 250
    39e0:	54 e4       	ldi	r21, 0x44	; 68
    39e2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	8d 8b       	std	Y+21, r24	; 0x15
    39ec:	9e 8b       	std	Y+22, r25	; 0x16
    39ee:	af 8b       	std	Y+23, r26	; 0x17
    39f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39f2:	6d 89       	ldd	r22, Y+21	; 0x15
    39f4:	7e 89       	ldd	r23, Y+22	; 0x16
    39f6:	8f 89       	ldd	r24, Y+23	; 0x17
    39f8:	98 8d       	ldd	r25, Y+24	; 0x18
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e8       	ldi	r20, 0x80	; 128
    3a00:	5f e3       	ldi	r21, 0x3F	; 63
    3a02:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3a06:	88 23       	and	r24, r24
    3a08:	2c f4       	brge	.+10     	; 0x3a14 <LCD_WriteCommand+0x2e2>
		__ticks = 1;
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	9c 8b       	std	Y+20, r25	; 0x14
    3a10:	8b 8b       	std	Y+19, r24	; 0x13
    3a12:	3f c0       	rjmp	.+126    	; 0x3a92 <LCD_WriteCommand+0x360>
	else if (__tmp > 65535)
    3a14:	6d 89       	ldd	r22, Y+21	; 0x15
    3a16:	7e 89       	ldd	r23, Y+22	; 0x16
    3a18:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	3f ef       	ldi	r19, 0xFF	; 255
    3a20:	4f e7       	ldi	r20, 0x7F	; 127
    3a22:	57 e4       	ldi	r21, 0x47	; 71
    3a24:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3a28:	18 16       	cp	r1, r24
    3a2a:	4c f5       	brge	.+82     	; 0x3a7e <LCD_WriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	40 e2       	ldi	r20, 0x20	; 32
    3a3a:	51 e4       	ldi	r21, 0x41	; 65
    3a3c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	9c 8b       	std	Y+20, r25	; 0x14
    3a52:	8b 8b       	std	Y+19, r24	; 0x13
    3a54:	0f c0       	rjmp	.+30     	; 0x3a74 <LCD_WriteCommand+0x342>
    3a56:	88 ec       	ldi	r24, 0xC8	; 200
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	9a 8b       	std	Y+18, r25	; 0x12
    3a5c:	89 8b       	std	Y+17, r24	; 0x11
    3a5e:	89 89       	ldd	r24, Y+17	; 0x11
    3a60:	9a 89       	ldd	r25, Y+18	; 0x12
    3a62:	01 97       	sbiw	r24, 0x01	; 1
    3a64:	f1 f7       	brne	.-4      	; 0x3a62 <LCD_WriteCommand+0x330>
    3a66:	9a 8b       	std	Y+18, r25	; 0x12
    3a68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	9c 8b       	std	Y+20, r25	; 0x14
    3a72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a74:	8b 89       	ldd	r24, Y+19	; 0x13
    3a76:	9c 89       	ldd	r25, Y+20	; 0x14
    3a78:	00 97       	sbiw	r24, 0x00	; 0
    3a7a:	69 f7       	brne	.-38     	; 0x3a56 <LCD_WriteCommand+0x324>
    3a7c:	14 c0       	rjmp	.+40     	; 0x3aa6 <LCD_WriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a80:	7e 89       	ldd	r23, Y+22	; 0x16
    3a82:	8f 89       	ldd	r24, Y+23	; 0x17
    3a84:	98 8d       	ldd	r25, Y+24	; 0x18
    3a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	9c 8b       	std	Y+20, r25	; 0x14
    3a90:	8b 8b       	std	Y+19, r24	; 0x13
    3a92:	8b 89       	ldd	r24, Y+19	; 0x13
    3a94:	9c 89       	ldd	r25, Y+20	; 0x14
    3a96:	98 8b       	std	Y+16, r25	; 0x10
    3a98:	8f 87       	std	Y+15, r24	; 0x0f
    3a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9c:	98 89       	ldd	r25, Y+16	; 0x10
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	f1 f7       	brne	.-4      	; 0x3a9e <LCD_WriteCommand+0x36c>
    3aa2:	98 8b       	std	Y+16, r25	; 0x10
    3aa4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    3aa6:	83 e1       	ldi	r24, 0x13	; 19
    3aa8:	60 e0       	ldi	r22, 0x00	; 0
    3aaa:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	a0 e8       	ldi	r26, 0x80	; 128
    3ab4:	bf e3       	ldi	r27, 0x3F	; 63
    3ab6:	8b 87       	std	Y+11, r24	; 0x0b
    3ab8:	9c 87       	std	Y+12, r25	; 0x0c
    3aba:	ad 87       	std	Y+13, r26	; 0x0d
    3abc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	4a ef       	ldi	r20, 0xFA	; 250
    3acc:	54 e4       	ldi	r21, 0x44	; 68
    3ace:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	8f 83       	std	Y+7, r24	; 0x07
    3ad8:	98 87       	std	Y+8, r25	; 0x08
    3ada:	a9 87       	std	Y+9, r26	; 0x09
    3adc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ade:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae0:	78 85       	ldd	r23, Y+8	; 0x08
    3ae2:	89 85       	ldd	r24, Y+9	; 0x09
    3ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e8       	ldi	r20, 0x80	; 128
    3aec:	5f e3       	ldi	r21, 0x3F	; 63
    3aee:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3af2:	88 23       	and	r24, r24
    3af4:	2c f4       	brge	.+10     	; 0x3b00 <LCD_WriteCommand+0x3ce>
		__ticks = 1;
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	9e 83       	std	Y+6, r25	; 0x06
    3afc:	8d 83       	std	Y+5, r24	; 0x05
    3afe:	3f c0       	rjmp	.+126    	; 0x3b7e <LCD_WriteCommand+0x44c>
	else if (__tmp > 65535)
    3b00:	6f 81       	ldd	r22, Y+7	; 0x07
    3b02:	78 85       	ldd	r23, Y+8	; 0x08
    3b04:	89 85       	ldd	r24, Y+9	; 0x09
    3b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	3f ef       	ldi	r19, 0xFF	; 255
    3b0c:	4f e7       	ldi	r20, 0x7F	; 127
    3b0e:	57 e4       	ldi	r21, 0x47	; 71
    3b10:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3b14:	18 16       	cp	r1, r24
    3b16:	4c f5       	brge	.+82     	; 0x3b6a <LCD_WriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e2       	ldi	r20, 0x20	; 32
    3b26:	51 e4       	ldi	r21, 0x41	; 65
    3b28:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	bc 01       	movw	r22, r24
    3b32:	cd 01       	movw	r24, r26
    3b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
    3b40:	0f c0       	rjmp	.+30     	; 0x3b60 <LCD_WriteCommand+0x42e>
    3b42:	88 ec       	ldi	r24, 0xC8	; 200
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	9c 83       	std	Y+4, r25	; 0x04
    3b48:	8b 83       	std	Y+3, r24	; 0x03
    3b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <LCD_WriteCommand+0x41c>
    3b52:	9c 83       	std	Y+4, r25	; 0x04
    3b54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b56:	8d 81       	ldd	r24, Y+5	; 0x05
    3b58:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5a:	01 97       	sbiw	r24, 0x01	; 1
    3b5c:	9e 83       	std	Y+6, r25	; 0x06
    3b5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b60:	8d 81       	ldd	r24, Y+5	; 0x05
    3b62:	9e 81       	ldd	r25, Y+6	; 0x06
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	69 f7       	brne	.-38     	; 0x3b42 <LCD_WriteCommand+0x410>
    3b68:	14 c0       	rjmp	.+40     	; 0x3b92 <LCD_WriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6c:	78 85       	ldd	r23, Y+8	; 0x08
    3b6e:	89 85       	ldd	r24, Y+9	; 0x09
    3b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	9e 81       	ldd	r25, Y+6	; 0x06
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	89 83       	std	Y+1, r24	; 0x01
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <LCD_WriteCommand+0x458>
    3b8e:	9a 83       	std	Y+2, r25	; 0x02
    3b90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	

}
    3b92:	e9 96       	adiw	r28, 0x39	; 57
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	08 95       	ret

00003ba4 <LCD_WriteData>:

static void LCD_WriteData (u8 data)
{
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	e9 97       	sbiw	r28, 0x39	; 57
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePIN(RS , HIGH) ;
    3bba:	82 e1       	ldi	r24, 0x12	; 18
    3bbc:	61 e0       	ldi	r22, 0x01	; 1
    3bbe:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D7 , READ_BIT(data , 7)) ;
    3bc2:	89 ad       	ldd	r24, Y+57	; 0x39
    3bc4:	98 2f       	mov	r25, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	99 27       	eor	r25, r25
    3bca:	99 1f       	adc	r25, r25
    3bcc:	87 e1       	ldi	r24, 0x17	; 23
    3bce:	69 2f       	mov	r22, r25
    3bd0:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(data , 6)) ;
    3bd4:	89 ad       	ldd	r24, Y+57	; 0x39
    3bd6:	82 95       	swap	r24
    3bd8:	86 95       	lsr	r24
    3bda:	86 95       	lsr	r24
    3bdc:	83 70       	andi	r24, 0x03	; 3
    3bde:	98 2f       	mov	r25, r24
    3be0:	91 70       	andi	r25, 0x01	; 1
    3be2:	86 e1       	ldi	r24, 0x16	; 22
    3be4:	69 2f       	mov	r22, r25
    3be6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(data , 5)) ;
    3bea:	89 ad       	ldd	r24, Y+57	; 0x39
    3bec:	82 95       	swap	r24
    3bee:	86 95       	lsr	r24
    3bf0:	87 70       	andi	r24, 0x07	; 7
    3bf2:	98 2f       	mov	r25, r24
    3bf4:	91 70       	andi	r25, 0x01	; 1
    3bf6:	85 e1       	ldi	r24, 0x15	; 21
    3bf8:	69 2f       	mov	r22, r25
    3bfa:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(data , 4)) ;
    3bfe:	89 ad       	ldd	r24, Y+57	; 0x39
    3c00:	82 95       	swap	r24
    3c02:	8f 70       	andi	r24, 0x0F	; 15
    3c04:	98 2f       	mov	r25, r24
    3c06:	91 70       	andi	r25, 0x01	; 1
    3c08:	84 e1       	ldi	r24, 0x14	; 20
    3c0a:	69 2f       	mov	r22, r25
    3c0c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    3c10:	83 e1       	ldi	r24, 0x13	; 19
    3c12:	61 e0       	ldi	r22, 0x01	; 1
    3c14:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3c18:	80 e0       	ldi	r24, 0x00	; 0
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	a0 e8       	ldi	r26, 0x80	; 128
    3c1e:	bf e3       	ldi	r27, 0x3F	; 63
    3c20:	8d ab       	std	Y+53, r24	; 0x35
    3c22:	9e ab       	std	Y+54, r25	; 0x36
    3c24:	af ab       	std	Y+55, r26	; 0x37
    3c26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c28:	6d a9       	ldd	r22, Y+53	; 0x35
    3c2a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c2c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c2e:	98 ad       	ldd	r25, Y+56	; 0x38
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	4a ef       	ldi	r20, 0xFA	; 250
    3c36:	54 e4       	ldi	r21, 0x44	; 68
    3c38:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3c3c:	dc 01       	movw	r26, r24
    3c3e:	cb 01       	movw	r24, r22
    3c40:	89 ab       	std	Y+49, r24	; 0x31
    3c42:	9a ab       	std	Y+50, r25	; 0x32
    3c44:	ab ab       	std	Y+51, r26	; 0x33
    3c46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c48:	69 a9       	ldd	r22, Y+49	; 0x31
    3c4a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c4c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c4e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c50:	20 e0       	ldi	r18, 0x00	; 0
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	40 e8       	ldi	r20, 0x80	; 128
    3c56:	5f e3       	ldi	r21, 0x3F	; 63
    3c58:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3c5c:	88 23       	and	r24, r24
    3c5e:	2c f4       	brge	.+10     	; 0x3c6a <LCD_WriteData+0xc6>
		__ticks = 1;
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	98 ab       	std	Y+48, r25	; 0x30
    3c66:	8f a7       	std	Y+47, r24	; 0x2f
    3c68:	3f c0       	rjmp	.+126    	; 0x3ce8 <LCD_WriteData+0x144>
	else if (__tmp > 65535)
    3c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    3c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    3c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    3c70:	9c a9       	ldd	r25, Y+52	; 0x34
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	3f ef       	ldi	r19, 0xFF	; 255
    3c76:	4f e7       	ldi	r20, 0x7F	; 127
    3c78:	57 e4       	ldi	r21, 0x47	; 71
    3c7a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3c7e:	18 16       	cp	r1, r24
    3c80:	4c f5       	brge	.+82     	; 0x3cd4 <LCD_WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c82:	6d a9       	ldd	r22, Y+53	; 0x35
    3c84:	7e a9       	ldd	r23, Y+54	; 0x36
    3c86:	8f a9       	ldd	r24, Y+55	; 0x37
    3c88:	98 ad       	ldd	r25, Y+56	; 0x38
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	40 e2       	ldi	r20, 0x20	; 32
    3c90:	51 e4       	ldi	r21, 0x41	; 65
    3c92:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	bc 01       	movw	r22, r24
    3c9c:	cd 01       	movw	r24, r26
    3c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	98 ab       	std	Y+48, r25	; 0x30
    3ca8:	8f a7       	std	Y+47, r24	; 0x2f
    3caa:	0f c0       	rjmp	.+30     	; 0x3cca <LCD_WriteData+0x126>
    3cac:	88 ec       	ldi	r24, 0xC8	; 200
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	9e a7       	std	Y+46, r25	; 0x2e
    3cb2:	8d a7       	std	Y+45, r24	; 0x2d
    3cb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	f1 f7       	brne	.-4      	; 0x3cb8 <LCD_WriteData+0x114>
    3cbc:	9e a7       	std	Y+46, r25	; 0x2e
    3cbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cc2:	98 a9       	ldd	r25, Y+48	; 0x30
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	98 ab       	std	Y+48, r25	; 0x30
    3cc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    3cce:	00 97       	sbiw	r24, 0x00	; 0
    3cd0:	69 f7       	brne	.-38     	; 0x3cac <LCD_WriteData+0x108>
    3cd2:	14 c0       	rjmp	.+40     	; 0x3cfc <LCD_WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd4:	69 a9       	ldd	r22, Y+49	; 0x31
    3cd6:	7a a9       	ldd	r23, Y+50	; 0x32
    3cd8:	8b a9       	ldd	r24, Y+51	; 0x33
    3cda:	9c a9       	ldd	r25, Y+52	; 0x34
    3cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	98 ab       	std	Y+48, r25	; 0x30
    3ce6:	8f a7       	std	Y+47, r24	; 0x2f
    3ce8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cea:	98 a9       	ldd	r25, Y+48	; 0x30
    3cec:	9c a7       	std	Y+44, r25	; 0x2c
    3cee:	8b a7       	std	Y+43, r24	; 0x2b
    3cf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	f1 f7       	brne	.-4      	; 0x3cf4 <LCD_WriteData+0x150>
    3cf8:	9c a7       	std	Y+44, r25	; 0x2c
    3cfa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    3cfc:	83 e1       	ldi	r24, 0x13	; 19
    3cfe:	60 e0       	ldi	r22, 0x00	; 0
    3d00:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	a0 e8       	ldi	r26, 0x80	; 128
    3d0a:	bf e3       	ldi	r27, 0x3F	; 63
    3d0c:	8f a3       	std	Y+39, r24	; 0x27
    3d0e:	98 a7       	std	Y+40, r25	; 0x28
    3d10:	a9 a7       	std	Y+41, r26	; 0x29
    3d12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d14:	6f a1       	ldd	r22, Y+39	; 0x27
    3d16:	78 a5       	ldd	r23, Y+40	; 0x28
    3d18:	89 a5       	ldd	r24, Y+41	; 0x29
    3d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	4a ef       	ldi	r20, 0xFA	; 250
    3d22:	54 e4       	ldi	r21, 0x44	; 68
    3d24:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3d28:	dc 01       	movw	r26, r24
    3d2a:	cb 01       	movw	r24, r22
    3d2c:	8b a3       	std	Y+35, r24	; 0x23
    3d2e:	9c a3       	std	Y+36, r25	; 0x24
    3d30:	ad a3       	std	Y+37, r26	; 0x25
    3d32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d34:	6b a1       	ldd	r22, Y+35	; 0x23
    3d36:	7c a1       	ldd	r23, Y+36	; 0x24
    3d38:	8d a1       	ldd	r24, Y+37	; 0x25
    3d3a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	40 e8       	ldi	r20, 0x80	; 128
    3d42:	5f e3       	ldi	r21, 0x3F	; 63
    3d44:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3d48:	88 23       	and	r24, r24
    3d4a:	2c f4       	brge	.+10     	; 0x3d56 <LCD_WriteData+0x1b2>
		__ticks = 1;
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	9a a3       	std	Y+34, r25	; 0x22
    3d52:	89 a3       	std	Y+33, r24	; 0x21
    3d54:	3f c0       	rjmp	.+126    	; 0x3dd4 <LCD_WriteData+0x230>
	else if (__tmp > 65535)
    3d56:	6b a1       	ldd	r22, Y+35	; 0x23
    3d58:	7c a1       	ldd	r23, Y+36	; 0x24
    3d5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	3f ef       	ldi	r19, 0xFF	; 255
    3d62:	4f e7       	ldi	r20, 0x7F	; 127
    3d64:	57 e4       	ldi	r21, 0x47	; 71
    3d66:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3d6a:	18 16       	cp	r1, r24
    3d6c:	4c f5       	brge	.+82     	; 0x3dc0 <LCD_WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d6e:	6f a1       	ldd	r22, Y+39	; 0x27
    3d70:	78 a5       	ldd	r23, Y+40	; 0x28
    3d72:	89 a5       	ldd	r24, Y+41	; 0x29
    3d74:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d76:	20 e0       	ldi	r18, 0x00	; 0
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	40 e2       	ldi	r20, 0x20	; 32
    3d7c:	51 e4       	ldi	r21, 0x41	; 65
    3d7e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	bc 01       	movw	r22, r24
    3d88:	cd 01       	movw	r24, r26
    3d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	9a a3       	std	Y+34, r25	; 0x22
    3d94:	89 a3       	std	Y+33, r24	; 0x21
    3d96:	0f c0       	rjmp	.+30     	; 0x3db6 <LCD_WriteData+0x212>
    3d98:	88 ec       	ldi	r24, 0xC8	; 200
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	98 a3       	std	Y+32, r25	; 0x20
    3d9e:	8f 8f       	std	Y+31, r24	; 0x1f
    3da0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3da2:	98 a1       	ldd	r25, Y+32	; 0x20
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	f1 f7       	brne	.-4      	; 0x3da4 <LCD_WriteData+0x200>
    3da8:	98 a3       	std	Y+32, r25	; 0x20
    3daa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dac:	89 a1       	ldd	r24, Y+33	; 0x21
    3dae:	9a a1       	ldd	r25, Y+34	; 0x22
    3db0:	01 97       	sbiw	r24, 0x01	; 1
    3db2:	9a a3       	std	Y+34, r25	; 0x22
    3db4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db6:	89 a1       	ldd	r24, Y+33	; 0x21
    3db8:	9a a1       	ldd	r25, Y+34	; 0x22
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	69 f7       	brne	.-38     	; 0x3d98 <LCD_WriteData+0x1f4>
    3dbe:	14 c0       	rjmp	.+40     	; 0x3de8 <LCD_WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc0:	6b a1       	ldd	r22, Y+35	; 0x23
    3dc2:	7c a1       	ldd	r23, Y+36	; 0x24
    3dc4:	8d a1       	ldd	r24, Y+37	; 0x25
    3dc6:	9e a1       	ldd	r25, Y+38	; 0x26
    3dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	9a a3       	std	Y+34, r25	; 0x22
    3dd2:	89 a3       	std	Y+33, r24	; 0x21
    3dd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd6:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd8:	9e 8f       	std	Y+30, r25	; 0x1e
    3dda:	8d 8f       	std	Y+29, r24	; 0x1d
    3ddc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	f1 f7       	brne	.-4      	; 0x3de0 <LCD_WriteData+0x23c>
    3de4:	9e 8f       	std	Y+30, r25	; 0x1e
    3de6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	DIO_WritePIN(D7 , READ_BIT(data , 3)) ;
    3de8:	89 ad       	ldd	r24, Y+57	; 0x39
    3dea:	86 95       	lsr	r24
    3dec:	86 95       	lsr	r24
    3dee:	86 95       	lsr	r24
    3df0:	98 2f       	mov	r25, r24
    3df2:	91 70       	andi	r25, 0x01	; 1
    3df4:	87 e1       	ldi	r24, 0x17	; 23
    3df6:	69 2f       	mov	r22, r25
    3df8:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(data , 2)) ;
    3dfc:	89 ad       	ldd	r24, Y+57	; 0x39
    3dfe:	86 95       	lsr	r24
    3e00:	86 95       	lsr	r24
    3e02:	98 2f       	mov	r25, r24
    3e04:	91 70       	andi	r25, 0x01	; 1
    3e06:	86 e1       	ldi	r24, 0x16	; 22
    3e08:	69 2f       	mov	r22, r25
    3e0a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(data , 1)) ;
    3e0e:	89 ad       	ldd	r24, Y+57	; 0x39
    3e10:	86 95       	lsr	r24
    3e12:	98 2f       	mov	r25, r24
    3e14:	91 70       	andi	r25, 0x01	; 1
    3e16:	85 e1       	ldi	r24, 0x15	; 21
    3e18:	69 2f       	mov	r22, r25
    3e1a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(data , 0)) ;
    3e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    3e20:	98 2f       	mov	r25, r24
    3e22:	91 70       	andi	r25, 0x01	; 1
    3e24:	84 e1       	ldi	r24, 0x14	; 20
    3e26:	69 2f       	mov	r22, r25
    3e28:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    3e2c:	83 e1       	ldi	r24, 0x13	; 19
    3e2e:	61 e0       	ldi	r22, 0x01	; 1
    3e30:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	a0 e8       	ldi	r26, 0x80	; 128
    3e3a:	bf e3       	ldi	r27, 0x3F	; 63
    3e3c:	89 8f       	std	Y+25, r24	; 0x19
    3e3e:	9a 8f       	std	Y+26, r25	; 0x1a
    3e40:	ab 8f       	std	Y+27, r26	; 0x1b
    3e42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e44:	69 8d       	ldd	r22, Y+25	; 0x19
    3e46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e4c:	20 e0       	ldi	r18, 0x00	; 0
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	4a ef       	ldi	r20, 0xFA	; 250
    3e52:	54 e4       	ldi	r21, 0x44	; 68
    3e54:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	8d 8b       	std	Y+21, r24	; 0x15
    3e5e:	9e 8b       	std	Y+22, r25	; 0x16
    3e60:	af 8b       	std	Y+23, r26	; 0x17
    3e62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e64:	6d 89       	ldd	r22, Y+21	; 0x15
    3e66:	7e 89       	ldd	r23, Y+22	; 0x16
    3e68:	8f 89       	ldd	r24, Y+23	; 0x17
    3e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	40 e8       	ldi	r20, 0x80	; 128
    3e72:	5f e3       	ldi	r21, 0x3F	; 63
    3e74:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3e78:	88 23       	and	r24, r24
    3e7a:	2c f4       	brge	.+10     	; 0x3e86 <LCD_WriteData+0x2e2>
		__ticks = 1;
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	9c 8b       	std	Y+20, r25	; 0x14
    3e82:	8b 8b       	std	Y+19, r24	; 0x13
    3e84:	3f c0       	rjmp	.+126    	; 0x3f04 <LCD_WriteData+0x360>
	else if (__tmp > 65535)
    3e86:	6d 89       	ldd	r22, Y+21	; 0x15
    3e88:	7e 89       	ldd	r23, Y+22	; 0x16
    3e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	3f ef       	ldi	r19, 0xFF	; 255
    3e92:	4f e7       	ldi	r20, 0x7F	; 127
    3e94:	57 e4       	ldi	r21, 0x47	; 71
    3e96:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3e9a:	18 16       	cp	r1, r24
    3e9c:	4c f5       	brge	.+82     	; 0x3ef0 <LCD_WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9e:	69 8d       	ldd	r22, Y+25	; 0x19
    3ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e2       	ldi	r20, 0x20	; 32
    3eac:	51 e4       	ldi	r21, 0x41	; 65
    3eae:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	bc 01       	movw	r22, r24
    3eb8:	cd 01       	movw	r24, r26
    3eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	9c 8b       	std	Y+20, r25	; 0x14
    3ec4:	8b 8b       	std	Y+19, r24	; 0x13
    3ec6:	0f c0       	rjmp	.+30     	; 0x3ee6 <LCD_WriteData+0x342>
    3ec8:	88 ec       	ldi	r24, 0xC8	; 200
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	9a 8b       	std	Y+18, r25	; 0x12
    3ece:	89 8b       	std	Y+17, r24	; 0x11
    3ed0:	89 89       	ldd	r24, Y+17	; 0x11
    3ed2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <LCD_WriteData+0x330>
    3ed8:	9a 8b       	std	Y+18, r25	; 0x12
    3eda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3edc:	8b 89       	ldd	r24, Y+19	; 0x13
    3ede:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee0:	01 97       	sbiw	r24, 0x01	; 1
    3ee2:	9c 8b       	std	Y+20, r25	; 0x14
    3ee4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee8:	9c 89       	ldd	r25, Y+20	; 0x14
    3eea:	00 97       	sbiw	r24, 0x00	; 0
    3eec:	69 f7       	brne	.-38     	; 0x3ec8 <LCD_WriteData+0x324>
    3eee:	14 c0       	rjmp	.+40     	; 0x3f18 <LCD_WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ef2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ef4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ef6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	9c 8b       	std	Y+20, r25	; 0x14
    3f02:	8b 8b       	std	Y+19, r24	; 0x13
    3f04:	8b 89       	ldd	r24, Y+19	; 0x13
    3f06:	9c 89       	ldd	r25, Y+20	; 0x14
    3f08:	98 8b       	std	Y+16, r25	; 0x10
    3f0a:	8f 87       	std	Y+15, r24	; 0x0f
    3f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f0e:	98 89       	ldd	r25, Y+16	; 0x10
    3f10:	01 97       	sbiw	r24, 0x01	; 1
    3f12:	f1 f7       	brne	.-4      	; 0x3f10 <LCD_WriteData+0x36c>
    3f14:	98 8b       	std	Y+16, r25	; 0x10
    3f16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    3f18:	83 e1       	ldi	r24, 0x13	; 19
    3f1a:	60 e0       	ldi	r22, 0x00	; 0
    3f1c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	a0 e8       	ldi	r26, 0x80	; 128
    3f26:	bf e3       	ldi	r27, 0x3F	; 63
    3f28:	8b 87       	std	Y+11, r24	; 0x0b
    3f2a:	9c 87       	std	Y+12, r25	; 0x0c
    3f2c:	ad 87       	std	Y+13, r26	; 0x0d
    3f2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	4a ef       	ldi	r20, 0xFA	; 250
    3f3e:	54 e4       	ldi	r21, 0x44	; 68
    3f40:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	8f 83       	std	Y+7, r24	; 0x07
    3f4a:	98 87       	std	Y+8, r25	; 0x08
    3f4c:	a9 87       	std	Y+9, r26	; 0x09
    3f4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f50:	6f 81       	ldd	r22, Y+7	; 0x07
    3f52:	78 85       	ldd	r23, Y+8	; 0x08
    3f54:	89 85       	ldd	r24, Y+9	; 0x09
    3f56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e8       	ldi	r20, 0x80	; 128
    3f5e:	5f e3       	ldi	r21, 0x3F	; 63
    3f60:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3f64:	88 23       	and	r24, r24
    3f66:	2c f4       	brge	.+10     	; 0x3f72 <LCD_WriteData+0x3ce>
		__ticks = 1;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	9e 83       	std	Y+6, r25	; 0x06
    3f6e:	8d 83       	std	Y+5, r24	; 0x05
    3f70:	3f c0       	rjmp	.+126    	; 0x3ff0 <LCD_WriteData+0x44c>
	else if (__tmp > 65535)
    3f72:	6f 81       	ldd	r22, Y+7	; 0x07
    3f74:	78 85       	ldd	r23, Y+8	; 0x08
    3f76:	89 85       	ldd	r24, Y+9	; 0x09
    3f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	3f ef       	ldi	r19, 0xFF	; 255
    3f7e:	4f e7       	ldi	r20, 0x7F	; 127
    3f80:	57 e4       	ldi	r21, 0x47	; 71
    3f82:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3f86:	18 16       	cp	r1, r24
    3f88:	4c f5       	brge	.+82     	; 0x3fdc <LCD_WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e2       	ldi	r20, 0x20	; 32
    3f98:	51 e4       	ldi	r21, 0x41	; 65
    3f9a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	bc 01       	movw	r22, r24
    3fa4:	cd 01       	movw	r24, r26
    3fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3faa:	dc 01       	movw	r26, r24
    3fac:	cb 01       	movw	r24, r22
    3fae:	9e 83       	std	Y+6, r25	; 0x06
    3fb0:	8d 83       	std	Y+5, r24	; 0x05
    3fb2:	0f c0       	rjmp	.+30     	; 0x3fd2 <LCD_WriteData+0x42e>
    3fb4:	88 ec       	ldi	r24, 0xC8	; 200
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	9c 83       	std	Y+4, r25	; 0x04
    3fba:	8b 83       	std	Y+3, r24	; 0x03
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	f1 f7       	brne	.-4      	; 0x3fc0 <LCD_WriteData+0x41c>
    3fc4:	9c 83       	std	Y+4, r25	; 0x04
    3fc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fca:	9e 81       	ldd	r25, Y+6	; 0x06
    3fcc:	01 97       	sbiw	r24, 0x01	; 1
    3fce:	9e 83       	std	Y+6, r25	; 0x06
    3fd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	69 f7       	brne	.-38     	; 0x3fb4 <LCD_WriteData+0x410>
    3fda:	14 c0       	rjmp	.+40     	; 0x4004 <LCD_WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fde:	78 85       	ldd	r23, Y+8	; 0x08
    3fe0:	89 85       	ldd	r24, Y+9	; 0x09
    3fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	9e 83       	std	Y+6, r25	; 0x06
    3fee:	8d 83       	std	Y+5, r24	; 0x05
    3ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff4:	9a 83       	std	Y+2, r25	; 0x02
    3ff6:	89 83       	std	Y+1, r24	; 0x01
    3ff8:	89 81       	ldd	r24, Y+1	; 0x01
    3ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffc:	01 97       	sbiw	r24, 0x01	; 1
    3ffe:	f1 f7       	brne	.-4      	; 0x3ffc <LCD_WriteData+0x458>
    4000:	9a 83       	std	Y+2, r25	; 0x02
    4002:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;

}
    4004:	e9 96       	adiw	r28, 0x39	; 57
    4006:	0f b6       	in	r0, 0x3f	; 63
    4008:	f8 94       	cli
    400a:	de bf       	out	0x3e, r29	; 62
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	cd bf       	out	0x3d, r28	; 61
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	08 95       	ret

00004016 <LCD_Init>:
void  LCD_Init ()
{
    4016:	df 93       	push	r29
    4018:	cf 93       	push	r28
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
    401e:	e8 97       	sbiw	r28, 0x38	; 56
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	f8 94       	cli
    4024:	de bf       	out	0x3e, r29	; 62
    4026:	0f be       	out	0x3f, r0	; 63
    4028:	cd bf       	out	0x3d, r28	; 61
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	a8 e4       	ldi	r26, 0x48	; 72
    4030:	b2 e4       	ldi	r27, 0x42	; 66
    4032:	8d ab       	std	Y+53, r24	; 0x35
    4034:	9e ab       	std	Y+54, r25	; 0x36
    4036:	af ab       	std	Y+55, r26	; 0x37
    4038:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403a:	6d a9       	ldd	r22, Y+53	; 0x35
    403c:	7e a9       	ldd	r23, Y+54	; 0x36
    403e:	8f a9       	ldd	r24, Y+55	; 0x37
    4040:	98 ad       	ldd	r25, Y+56	; 0x38
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	4a ef       	ldi	r20, 0xFA	; 250
    4048:	54 e4       	ldi	r21, 0x44	; 68
    404a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	89 ab       	std	Y+49, r24	; 0x31
    4054:	9a ab       	std	Y+50, r25	; 0x32
    4056:	ab ab       	std	Y+51, r26	; 0x33
    4058:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    405a:	69 a9       	ldd	r22, Y+49	; 0x31
    405c:	7a a9       	ldd	r23, Y+50	; 0x32
    405e:	8b a9       	ldd	r24, Y+51	; 0x33
    4060:	9c a9       	ldd	r25, Y+52	; 0x34
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e8       	ldi	r20, 0x80	; 128
    4068:	5f e3       	ldi	r21, 0x3F	; 63
    406a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    406e:	88 23       	and	r24, r24
    4070:	2c f4       	brge	.+10     	; 0x407c <LCD_Init+0x66>
		__ticks = 1;
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	98 ab       	std	Y+48, r25	; 0x30
    4078:	8f a7       	std	Y+47, r24	; 0x2f
    407a:	3f c0       	rjmp	.+126    	; 0x40fa <LCD_Init+0xe4>
	else if (__tmp > 65535)
    407c:	69 a9       	ldd	r22, Y+49	; 0x31
    407e:	7a a9       	ldd	r23, Y+50	; 0x32
    4080:	8b a9       	ldd	r24, Y+51	; 0x33
    4082:	9c a9       	ldd	r25, Y+52	; 0x34
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	3f ef       	ldi	r19, 0xFF	; 255
    4088:	4f e7       	ldi	r20, 0x7F	; 127
    408a:	57 e4       	ldi	r21, 0x47	; 71
    408c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4090:	18 16       	cp	r1, r24
    4092:	4c f5       	brge	.+82     	; 0x40e6 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4094:	6d a9       	ldd	r22, Y+53	; 0x35
    4096:	7e a9       	ldd	r23, Y+54	; 0x36
    4098:	8f a9       	ldd	r24, Y+55	; 0x37
    409a:	98 ad       	ldd	r25, Y+56	; 0x38
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e2       	ldi	r20, 0x20	; 32
    40a2:	51 e4       	ldi	r21, 0x41	; 65
    40a4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	bc 01       	movw	r22, r24
    40ae:	cd 01       	movw	r24, r26
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	98 ab       	std	Y+48, r25	; 0x30
    40ba:	8f a7       	std	Y+47, r24	; 0x2f
    40bc:	0f c0       	rjmp	.+30     	; 0x40dc <LCD_Init+0xc6>
    40be:	88 ec       	ldi	r24, 0xC8	; 200
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	9e a7       	std	Y+46, r25	; 0x2e
    40c4:	8d a7       	std	Y+45, r24	; 0x2d
    40c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    40c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	f1 f7       	brne	.-4      	; 0x40ca <LCD_Init+0xb4>
    40ce:	9e a7       	std	Y+46, r25	; 0x2e
    40d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    40d4:	98 a9       	ldd	r25, Y+48	; 0x30
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	98 ab       	std	Y+48, r25	; 0x30
    40da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    40de:	98 a9       	ldd	r25, Y+48	; 0x30
    40e0:	00 97       	sbiw	r24, 0x00	; 0
    40e2:	69 f7       	brne	.-38     	; 0x40be <LCD_Init+0xa8>
    40e4:	14 c0       	rjmp	.+40     	; 0x410e <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e6:	69 a9       	ldd	r22, Y+49	; 0x31
    40e8:	7a a9       	ldd	r23, Y+50	; 0x32
    40ea:	8b a9       	ldd	r24, Y+51	; 0x33
    40ec:	9c a9       	ldd	r25, Y+52	; 0x34
    40ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	98 ab       	std	Y+48, r25	; 0x30
    40f8:	8f a7       	std	Y+47, r24	; 0x2f
    40fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    40fc:	98 a9       	ldd	r25, Y+48	; 0x30
    40fe:	9c a7       	std	Y+44, r25	; 0x2c
    4100:	8b a7       	std	Y+43, r24	; 0x2b
    4102:	8b a5       	ldd	r24, Y+43	; 0x2b
    4104:	9c a5       	ldd	r25, Y+44	; 0x2c
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	f1 f7       	brne	.-4      	; 0x4106 <LCD_Init+0xf0>
    410a:	9c a7       	std	Y+44, r25	; 0x2c
    410c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50) ; // becuase of if lcd_init () call first
	LCD_WriteCommand(0x02) ;
    410e:	82 e0       	ldi	r24, 0x02	; 2
    4110:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
	LCD_WriteCommand(0x28) ;  // 4 bit ,, 2 line ,, 5*7 font
    4114:	88 e2       	ldi	r24, 0x28	; 40
    4116:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	a0 e8       	ldi	r26, 0x80	; 128
    4120:	bf e3       	ldi	r27, 0x3F	; 63
    4122:	8f a3       	std	Y+39, r24	; 0x27
    4124:	98 a7       	std	Y+40, r25	; 0x28
    4126:	a9 a7       	std	Y+41, r26	; 0x29
    4128:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    412a:	6f a1       	ldd	r22, Y+39	; 0x27
    412c:	78 a5       	ldd	r23, Y+40	; 0x28
    412e:	89 a5       	ldd	r24, Y+41	; 0x29
    4130:	9a a5       	ldd	r25, Y+42	; 0x2a
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	4a ef       	ldi	r20, 0xFA	; 250
    4138:	54 e4       	ldi	r21, 0x44	; 68
    413a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	8b a3       	std	Y+35, r24	; 0x23
    4144:	9c a3       	std	Y+36, r25	; 0x24
    4146:	ad a3       	std	Y+37, r26	; 0x25
    4148:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    414a:	6b a1       	ldd	r22, Y+35	; 0x23
    414c:	7c a1       	ldd	r23, Y+36	; 0x24
    414e:	8d a1       	ldd	r24, Y+37	; 0x25
    4150:	9e a1       	ldd	r25, Y+38	; 0x26
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	40 e8       	ldi	r20, 0x80	; 128
    4158:	5f e3       	ldi	r21, 0x3F	; 63
    415a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    415e:	88 23       	and	r24, r24
    4160:	2c f4       	brge	.+10     	; 0x416c <LCD_Init+0x156>
		__ticks = 1;
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	9a a3       	std	Y+34, r25	; 0x22
    4168:	89 a3       	std	Y+33, r24	; 0x21
    416a:	3f c0       	rjmp	.+126    	; 0x41ea <LCD_Init+0x1d4>
	else if (__tmp > 65535)
    416c:	6b a1       	ldd	r22, Y+35	; 0x23
    416e:	7c a1       	ldd	r23, Y+36	; 0x24
    4170:	8d a1       	ldd	r24, Y+37	; 0x25
    4172:	9e a1       	ldd	r25, Y+38	; 0x26
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	3f ef       	ldi	r19, 0xFF	; 255
    4178:	4f e7       	ldi	r20, 0x7F	; 127
    417a:	57 e4       	ldi	r21, 0x47	; 71
    417c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4180:	18 16       	cp	r1, r24
    4182:	4c f5       	brge	.+82     	; 0x41d6 <LCD_Init+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4184:	6f a1       	ldd	r22, Y+39	; 0x27
    4186:	78 a5       	ldd	r23, Y+40	; 0x28
    4188:	89 a5       	ldd	r24, Y+41	; 0x29
    418a:	9a a5       	ldd	r25, Y+42	; 0x2a
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	40 e2       	ldi	r20, 0x20	; 32
    4192:	51 e4       	ldi	r21, 0x41	; 65
    4194:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	bc 01       	movw	r22, r24
    419e:	cd 01       	movw	r24, r26
    41a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	9a a3       	std	Y+34, r25	; 0x22
    41aa:	89 a3       	std	Y+33, r24	; 0x21
    41ac:	0f c0       	rjmp	.+30     	; 0x41cc <LCD_Init+0x1b6>
    41ae:	88 ec       	ldi	r24, 0xC8	; 200
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	98 a3       	std	Y+32, r25	; 0x20
    41b4:	8f 8f       	std	Y+31, r24	; 0x1f
    41b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41b8:	98 a1       	ldd	r25, Y+32	; 0x20
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <LCD_Init+0x1a4>
    41be:	98 a3       	std	Y+32, r25	; 0x20
    41c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c2:	89 a1       	ldd	r24, Y+33	; 0x21
    41c4:	9a a1       	ldd	r25, Y+34	; 0x22
    41c6:	01 97       	sbiw	r24, 0x01	; 1
    41c8:	9a a3       	std	Y+34, r25	; 0x22
    41ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41cc:	89 a1       	ldd	r24, Y+33	; 0x21
    41ce:	9a a1       	ldd	r25, Y+34	; 0x22
    41d0:	00 97       	sbiw	r24, 0x00	; 0
    41d2:	69 f7       	brne	.-38     	; 0x41ae <LCD_Init+0x198>
    41d4:	14 c0       	rjmp	.+40     	; 0x41fe <LCD_Init+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d6:	6b a1       	ldd	r22, Y+35	; 0x23
    41d8:	7c a1       	ldd	r23, Y+36	; 0x24
    41da:	8d a1       	ldd	r24, Y+37	; 0x25
    41dc:	9e a1       	ldd	r25, Y+38	; 0x26
    41de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	9a a3       	std	Y+34, r25	; 0x22
    41e8:	89 a3       	std	Y+33, r24	; 0x21
    41ea:	89 a1       	ldd	r24, Y+33	; 0x21
    41ec:	9a a1       	ldd	r25, Y+34	; 0x22
    41ee:	9e 8f       	std	Y+30, r25	; 0x1e
    41f0:	8d 8f       	std	Y+29, r24	; 0x1d
    41f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	f1 f7       	brne	.-4      	; 0x41f6 <LCD_Init+0x1e0>
    41fa:	9e 8f       	std	Y+30, r25	; 0x1e
    41fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	LCD_WriteCommand(0x0c) ;  // 0x0e ,, 0x0f cursor
    41fe:	8c e0       	ldi	r24, 0x0C	; 12
    4200:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	a0 e8       	ldi	r26, 0x80	; 128
    420a:	bf e3       	ldi	r27, 0x3F	; 63
    420c:	89 8f       	std	Y+25, r24	; 0x19
    420e:	9a 8f       	std	Y+26, r25	; 0x1a
    4210:	ab 8f       	std	Y+27, r26	; 0x1b
    4212:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4214:	69 8d       	ldd	r22, Y+25	; 0x19
    4216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    421a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	4a ef       	ldi	r20, 0xFA	; 250
    4222:	54 e4       	ldi	r21, 0x44	; 68
    4224:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	8d 8b       	std	Y+21, r24	; 0x15
    422e:	9e 8b       	std	Y+22, r25	; 0x16
    4230:	af 8b       	std	Y+23, r26	; 0x17
    4232:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4234:	6d 89       	ldd	r22, Y+21	; 0x15
    4236:	7e 89       	ldd	r23, Y+22	; 0x16
    4238:	8f 89       	ldd	r24, Y+23	; 0x17
    423a:	98 8d       	ldd	r25, Y+24	; 0x18
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	40 e8       	ldi	r20, 0x80	; 128
    4242:	5f e3       	ldi	r21, 0x3F	; 63
    4244:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4248:	88 23       	and	r24, r24
    424a:	2c f4       	brge	.+10     	; 0x4256 <LCD_Init+0x240>
		__ticks = 1;
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	9c 8b       	std	Y+20, r25	; 0x14
    4252:	8b 8b       	std	Y+19, r24	; 0x13
    4254:	3f c0       	rjmp	.+126    	; 0x42d4 <LCD_Init+0x2be>
	else if (__tmp > 65535)
    4256:	6d 89       	ldd	r22, Y+21	; 0x15
    4258:	7e 89       	ldd	r23, Y+22	; 0x16
    425a:	8f 89       	ldd	r24, Y+23	; 0x17
    425c:	98 8d       	ldd	r25, Y+24	; 0x18
    425e:	20 e0       	ldi	r18, 0x00	; 0
    4260:	3f ef       	ldi	r19, 0xFF	; 255
    4262:	4f e7       	ldi	r20, 0x7F	; 127
    4264:	57 e4       	ldi	r21, 0x47	; 71
    4266:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    426a:	18 16       	cp	r1, r24
    426c:	4c f5       	brge	.+82     	; 0x42c0 <LCD_Init+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    426e:	69 8d       	ldd	r22, Y+25	; 0x19
    4270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	40 e2       	ldi	r20, 0x20	; 32
    427c:	51 e4       	ldi	r21, 0x41	; 65
    427e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4282:	dc 01       	movw	r26, r24
    4284:	cb 01       	movw	r24, r22
    4286:	bc 01       	movw	r22, r24
    4288:	cd 01       	movw	r24, r26
    428a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	9c 8b       	std	Y+20, r25	; 0x14
    4294:	8b 8b       	std	Y+19, r24	; 0x13
    4296:	0f c0       	rjmp	.+30     	; 0x42b6 <LCD_Init+0x2a0>
    4298:	88 ec       	ldi	r24, 0xC8	; 200
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	9a 8b       	std	Y+18, r25	; 0x12
    429e:	89 8b       	std	Y+17, r24	; 0x11
    42a0:	89 89       	ldd	r24, Y+17	; 0x11
    42a2:	9a 89       	ldd	r25, Y+18	; 0x12
    42a4:	01 97       	sbiw	r24, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <LCD_Init+0x28e>
    42a8:	9a 8b       	std	Y+18, r25	; 0x12
    42aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ac:	8b 89       	ldd	r24, Y+19	; 0x13
    42ae:	9c 89       	ldd	r25, Y+20	; 0x14
    42b0:	01 97       	sbiw	r24, 0x01	; 1
    42b2:	9c 8b       	std	Y+20, r25	; 0x14
    42b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b6:	8b 89       	ldd	r24, Y+19	; 0x13
    42b8:	9c 89       	ldd	r25, Y+20	; 0x14
    42ba:	00 97       	sbiw	r24, 0x00	; 0
    42bc:	69 f7       	brne	.-38     	; 0x4298 <LCD_Init+0x282>
    42be:	14 c0       	rjmp	.+40     	; 0x42e8 <LCD_Init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42c0:	6d 89       	ldd	r22, Y+21	; 0x15
    42c2:	7e 89       	ldd	r23, Y+22	; 0x16
    42c4:	8f 89       	ldd	r24, Y+23	; 0x17
    42c6:	98 8d       	ldd	r25, Y+24	; 0x18
    42c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42cc:	dc 01       	movw	r26, r24
    42ce:	cb 01       	movw	r24, r22
    42d0:	9c 8b       	std	Y+20, r25	; 0x14
    42d2:	8b 8b       	std	Y+19, r24	; 0x13
    42d4:	8b 89       	ldd	r24, Y+19	; 0x13
    42d6:	9c 89       	ldd	r25, Y+20	; 0x14
    42d8:	98 8b       	std	Y+16, r25	; 0x10
    42da:	8f 87       	std	Y+15, r24	; 0x0f
    42dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42de:	98 89       	ldd	r25, Y+16	; 0x10
    42e0:	01 97       	sbiw	r24, 0x01	; 1
    42e2:	f1 f7       	brne	.-4      	; 0x42e0 <LCD_Init+0x2ca>
    42e4:	98 8b       	std	Y+16, r25	; 0x10
    42e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	LCD_WriteCommand(0x01) ; // clear screen
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	a0 e0       	ldi	r26, 0x00	; 0
    42f4:	b0 e4       	ldi	r27, 0x40	; 64
    42f6:	8b 87       	std	Y+11, r24	; 0x0b
    42f8:	9c 87       	std	Y+12, r25	; 0x0c
    42fa:	ad 87       	std	Y+13, r26	; 0x0d
    42fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4300:	7c 85       	ldd	r23, Y+12	; 0x0c
    4302:	8d 85       	ldd	r24, Y+13	; 0x0d
    4304:	9e 85       	ldd	r25, Y+14	; 0x0e
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	4a ef       	ldi	r20, 0xFA	; 250
    430c:	54 e4       	ldi	r21, 0x44	; 68
    430e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	8f 83       	std	Y+7, r24	; 0x07
    4318:	98 87       	std	Y+8, r25	; 0x08
    431a:	a9 87       	std	Y+9, r26	; 0x09
    431c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    431e:	6f 81       	ldd	r22, Y+7	; 0x07
    4320:	78 85       	ldd	r23, Y+8	; 0x08
    4322:	89 85       	ldd	r24, Y+9	; 0x09
    4324:	9a 85       	ldd	r25, Y+10	; 0x0a
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	40 e8       	ldi	r20, 0x80	; 128
    432c:	5f e3       	ldi	r21, 0x3F	; 63
    432e:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4332:	88 23       	and	r24, r24
    4334:	2c f4       	brge	.+10     	; 0x4340 <LCD_Init+0x32a>
		__ticks = 1;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	9e 83       	std	Y+6, r25	; 0x06
    433c:	8d 83       	std	Y+5, r24	; 0x05
    433e:	3f c0       	rjmp	.+126    	; 0x43be <LCD_Init+0x3a8>
	else if (__tmp > 65535)
    4340:	6f 81       	ldd	r22, Y+7	; 0x07
    4342:	78 85       	ldd	r23, Y+8	; 0x08
    4344:	89 85       	ldd	r24, Y+9	; 0x09
    4346:	9a 85       	ldd	r25, Y+10	; 0x0a
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	3f ef       	ldi	r19, 0xFF	; 255
    434c:	4f e7       	ldi	r20, 0x7F	; 127
    434e:	57 e4       	ldi	r21, 0x47	; 71
    4350:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4354:	18 16       	cp	r1, r24
    4356:	4c f5       	brge	.+82     	; 0x43aa <LCD_Init+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4358:	6b 85       	ldd	r22, Y+11	; 0x0b
    435a:	7c 85       	ldd	r23, Y+12	; 0x0c
    435c:	8d 85       	ldd	r24, Y+13	; 0x0d
    435e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	40 e2       	ldi	r20, 0x20	; 32
    4366:	51 e4       	ldi	r21, 0x41	; 65
    4368:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	9e 83       	std	Y+6, r25	; 0x06
    437e:	8d 83       	std	Y+5, r24	; 0x05
    4380:	0f c0       	rjmp	.+30     	; 0x43a0 <LCD_Init+0x38a>
    4382:	88 ec       	ldi	r24, 0xC8	; 200
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	9c 83       	std	Y+4, r25	; 0x04
    4388:	8b 83       	std	Y+3, r24	; 0x03
    438a:	8b 81       	ldd	r24, Y+3	; 0x03
    438c:	9c 81       	ldd	r25, Y+4	; 0x04
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <LCD_Init+0x378>
    4392:	9c 83       	std	Y+4, r25	; 0x04
    4394:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4396:	8d 81       	ldd	r24, Y+5	; 0x05
    4398:	9e 81       	ldd	r25, Y+6	; 0x06
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	9e 83       	std	Y+6, r25	; 0x06
    439e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a0:	8d 81       	ldd	r24, Y+5	; 0x05
    43a2:	9e 81       	ldd	r25, Y+6	; 0x06
    43a4:	00 97       	sbiw	r24, 0x00	; 0
    43a6:	69 f7       	brne	.-38     	; 0x4382 <LCD_Init+0x36c>
    43a8:	14 c0       	rjmp	.+40     	; 0x43d2 <LCD_Init+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43aa:	6f 81       	ldd	r22, Y+7	; 0x07
    43ac:	78 85       	ldd	r23, Y+8	; 0x08
    43ae:	89 85       	ldd	r24, Y+9	; 0x09
    43b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	9e 83       	std	Y+6, r25	; 0x06
    43bc:	8d 83       	std	Y+5, r24	; 0x05
    43be:	8d 81       	ldd	r24, Y+5	; 0x05
    43c0:	9e 81       	ldd	r25, Y+6	; 0x06
    43c2:	9a 83       	std	Y+2, r25	; 0x02
    43c4:	89 83       	std	Y+1, r24	; 0x01
    43c6:	89 81       	ldd	r24, Y+1	; 0x01
    43c8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <LCD_Init+0x3b4>
    43ce:	9a 83       	std	Y+2, r25	; 0x02
    43d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
	LCD_WriteCommand(0x06) ; // Address increase no shift
    43d2:	86 e0       	ldi	r24, 0x06	; 6
    43d4:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
	
}
    43d8:	e8 96       	adiw	r28, 0x38	; 56
    43da:	0f b6       	in	r0, 0x3f	; 63
    43dc:	f8 94       	cli
    43de:	de bf       	out	0x3e, r29	; 62
    43e0:	0f be       	out	0x3f, r0	; 63
    43e2:	cd bf       	out	0x3d, r28	; 61
    43e4:	cf 91       	pop	r28
    43e6:	df 91       	pop	r29
    43e8:	08 95       	ret

000043ea <IntToString>:

#endif


static void IntToString (u8* str, s64 num)
{
    43ea:	8f 92       	push	r8
    43ec:	9f 92       	push	r9
    43ee:	af 92       	push	r10
    43f0:	bf 92       	push	r11
    43f2:	cf 92       	push	r12
    43f4:	df 92       	push	r13
    43f6:	ef 92       	push	r14
    43f8:	ff 92       	push	r15
    43fa:	0f 93       	push	r16
    43fc:	1f 93       	push	r17
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	c2 54       	subi	r28, 0x42	; 66
    4408:	d0 40       	sbci	r29, 0x00	; 0
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	f8 94       	cli
    440e:	de bf       	out	0x3e, r29	; 62
    4410:	0f be       	out	0x3f, r0	; 63
    4412:	cd bf       	out	0x3d, r28	; 61
    4414:	9a 87       	std	Y+10, r25	; 0x0a
    4416:	89 87       	std	Y+9, r24	; 0x09
    4418:	0b 87       	std	Y+11, r16	; 0x0b
    441a:	1c 87       	std	Y+12, r17	; 0x0c
    441c:	2d 87       	std	Y+13, r18	; 0x0d
    441e:	3e 87       	std	Y+14, r19	; 0x0e
    4420:	4f 87       	std	Y+15, r20	; 0x0f
    4422:	58 8b       	std	Y+16, r21	; 0x10
    4424:	69 8b       	std	Y+17, r22	; 0x11
    4426:	7a 8b       	std	Y+18, r23	; 0x12
	int i =0, j, temp, flag = 1 ;
    4428:	18 86       	std	Y+8, r1	; 0x08
    442a:	1f 82       	std	Y+7, r1	; 0x07
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	9a 83       	std	Y+2, r25	; 0x02
    4432:	89 83       	std	Y+1, r24	; 0x01
	if(num==0)
    4434:	8b 85       	ldd	r24, Y+11	; 0x0b
    4436:	9c 85       	ldd	r25, Y+12	; 0x0c
    4438:	89 2b       	or	r24, r25
    443a:	9d 85       	ldd	r25, Y+13	; 0x0d
    443c:	89 2b       	or	r24, r25
    443e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4440:	89 2b       	or	r24, r25
    4442:	9f 85       	ldd	r25, Y+15	; 0x0f
    4444:	89 2b       	or	r24, r25
    4446:	98 89       	ldd	r25, Y+16	; 0x10
    4448:	89 2b       	or	r24, r25
    444a:	99 89       	ldd	r25, Y+17	; 0x11
    444c:	89 2b       	or	r24, r25
    444e:	9a 89       	ldd	r25, Y+18	; 0x12
    4450:	89 2b       	or	r24, r25
    4452:	88 23       	and	r24, r24
    4454:	b9 f4       	brne	.+46     	; 0x4484 <IntToString+0x9a>
	{
		str[i] = '0' ;
    4456:	2f 81       	ldd	r18, Y+7	; 0x07
    4458:	38 85       	ldd	r19, Y+8	; 0x08
    445a:	89 85       	ldd	r24, Y+9	; 0x09
    445c:	9a 85       	ldd	r25, Y+10	; 0x0a
    445e:	fc 01       	movw	r30, r24
    4460:	e2 0f       	add	r30, r18
    4462:	f3 1f       	adc	r31, r19
    4464:	80 e3       	ldi	r24, 0x30	; 48
    4466:	80 83       	st	Z, r24
		str[++i] = '\0' ;
    4468:	8f 81       	ldd	r24, Y+7	; 0x07
    446a:	98 85       	ldd	r25, Y+8	; 0x08
    446c:	01 96       	adiw	r24, 0x01	; 1
    446e:	98 87       	std	Y+8, r25	; 0x08
    4470:	8f 83       	std	Y+7, r24	; 0x07
    4472:	2f 81       	ldd	r18, Y+7	; 0x07
    4474:	38 85       	ldd	r19, Y+8	; 0x08
    4476:	89 85       	ldd	r24, Y+9	; 0x09
    4478:	9a 85       	ldd	r25, Y+10	; 0x0a
    447a:	fc 01       	movw	r30, r24
    447c:	e2 0f       	add	r30, r18
    447e:	f3 1f       	adc	r31, r19
    4480:	10 82       	st	Z, r1
    4482:	7e c2       	rjmp	.+1276   	; 0x4980 <IntToString+0x596>
	}
	else
	{
		if (num < 0 )
    4484:	8a 89       	ldd	r24, Y+18	; 0x12
    4486:	88 23       	and	r24, r24
    4488:	d4 f0       	brlt	.+52     	; 0x44be <IntToString+0xd4>
    448a:	8a 89       	ldd	r24, Y+18	; 0x12
    448c:	88 23       	and	r24, r24
    448e:	09 f0       	breq	.+2      	; 0x4492 <IntToString+0xa8>
    4490:	74 c1       	rjmp	.+744    	; 0x477a <IntToString+0x390>
    4492:	89 89       	ldd	r24, Y+17	; 0x11
    4494:	88 23       	and	r24, r24
    4496:	09 f0       	breq	.+2      	; 0x449a <IntToString+0xb0>
    4498:	70 c1       	rjmp	.+736    	; 0x477a <IntToString+0x390>
    449a:	88 89       	ldd	r24, Y+16	; 0x10
    449c:	88 23       	and	r24, r24
    449e:	09 f0       	breq	.+2      	; 0x44a2 <IntToString+0xb8>
    44a0:	6c c1       	rjmp	.+728    	; 0x477a <IntToString+0x390>
    44a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    44a4:	88 23       	and	r24, r24
    44a6:	09 f0       	breq	.+2      	; 0x44aa <IntToString+0xc0>
    44a8:	68 c1       	rjmp	.+720    	; 0x477a <IntToString+0x390>
    44aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    44ac:	88 23       	and	r24, r24
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <IntToString+0xc8>
    44b0:	64 c1       	rjmp	.+712    	; 0x477a <IntToString+0x390>
    44b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44b4:	88 23       	and	r24, r24
    44b6:	09 f0       	breq	.+2      	; 0x44ba <IntToString+0xd0>
    44b8:	60 c1       	rjmp	.+704    	; 0x477a <IntToString+0x390>
    44ba:	4c 85       	ldd	r20, Y+12	; 0x0c
    44bc:	5e c1       	rjmp	.+700    	; 0x477a <IntToString+0x390>
		{
			str[i++] = '-' ;
    44be:	2f 81       	ldd	r18, Y+7	; 0x07
    44c0:	38 85       	ldd	r19, Y+8	; 0x08
    44c2:	89 85       	ldd	r24, Y+9	; 0x09
    44c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c6:	fc 01       	movw	r30, r24
    44c8:	e2 0f       	add	r30, r18
    44ca:	f3 1f       	adc	r31, r19
    44cc:	8d e2       	ldi	r24, 0x2D	; 45
    44ce:	80 83       	st	Z, r24
    44d0:	8f 81       	ldd	r24, Y+7	; 0x07
    44d2:	98 85       	ldd	r25, Y+8	; 0x08
    44d4:	01 96       	adiw	r24, 0x01	; 1
    44d6:	98 87       	std	Y+8, r25	; 0x08
    44d8:	8f 83       	std	Y+7, r24	; 0x07
			num *= -1 ;
    44da:	1c 8a       	std	Y+20, r1	; 0x14
    44dc:	1d 8a       	std	Y+21, r1	; 0x15
    44de:	1e 8a       	std	Y+22, r1	; 0x16
    44e0:	1f 8a       	std	Y+23, r1	; 0x17
    44e2:	18 8e       	std	Y+24, r1	; 0x18
    44e4:	19 8e       	std	Y+25, r1	; 0x19
    44e6:	1a 8e       	std	Y+26, r1	; 0x1a
    44e8:	1b 8e       	std	Y+27, r1	; 0x1b
    44ea:	5b 85       	ldd	r21, Y+11	; 0x0b
    44ec:	5c 8f       	std	Y+28, r21	; 0x1c
    44ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    44f0:	8d 8f       	std	Y+29, r24	; 0x1d
    44f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    44f4:	9e 8f       	std	Y+30, r25	; 0x1e
    44f6:	ee 85       	ldd	r30, Y+14	; 0x0e
    44f8:	ef 8f       	std	Y+31, r30	; 0x1f
    44fa:	ff 85       	ldd	r31, Y+15	; 0x0f
    44fc:	f8 a3       	std	Y+32, r31	; 0x20
    44fe:	48 89       	ldd	r20, Y+16	; 0x10
    4500:	49 a3       	std	Y+33, r20	; 0x21
    4502:	59 89       	ldd	r21, Y+17	; 0x11
    4504:	5a a3       	std	Y+34, r21	; 0x22
    4506:	8a 89       	ldd	r24, Y+18	; 0x12
    4508:	8b a3       	std	Y+35, r24	; 0x23
    450a:	9c 89       	ldd	r25, Y+20	; 0x14
    450c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    450e:	9e 1b       	sub	r25, r30
    4510:	9c a3       	std	Y+36, r25	; 0x24
    4512:	f1 e0       	ldi	r31, 0x01	; 1
    4514:	fc a7       	std	Y+44, r31	; 0x2c
    4516:	4c a1       	ldd	r20, Y+36	; 0x24
    4518:	5c 89       	ldd	r21, Y+20	; 0x14
    451a:	54 17       	cp	r21, r20
    451c:	08 f0       	brcs	.+2      	; 0x4520 <IntToString+0x136>
    451e:	1c a6       	std	Y+44, r1	; 0x2c
    4520:	8d 89       	ldd	r24, Y+21	; 0x15
    4522:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4524:	89 1b       	sub	r24, r25
    4526:	8d a3       	std	Y+37, r24	; 0x25
    4528:	e1 e0       	ldi	r30, 0x01	; 1
    452a:	ed a7       	std	Y+45, r30	; 0x2d
    452c:	fd a1       	ldd	r31, Y+37	; 0x25
    452e:	4d 89       	ldd	r20, Y+21	; 0x15
    4530:	4f 17       	cp	r20, r31
    4532:	08 f0       	brcs	.+2      	; 0x4536 <IntToString+0x14c>
    4534:	1d a6       	std	Y+45, r1	; 0x2d
    4536:	5d a1       	ldd	r21, Y+37	; 0x25
    4538:	8c a5       	ldd	r24, Y+44	; 0x2c
    453a:	58 1b       	sub	r21, r24
    453c:	5e a7       	std	Y+46, r21	; 0x2e
    453e:	91 e0       	ldi	r25, 0x01	; 1
    4540:	9f a7       	std	Y+47, r25	; 0x2f
    4542:	ee a5       	ldd	r30, Y+46	; 0x2e
    4544:	fd a1       	ldd	r31, Y+37	; 0x25
    4546:	fe 17       	cp	r31, r30
    4548:	08 f0       	brcs	.+2      	; 0x454c <IntToString+0x162>
    454a:	1f a6       	std	Y+47, r1	; 0x2f
    454c:	4d a5       	ldd	r20, Y+45	; 0x2d
    454e:	5f a5       	ldd	r21, Y+47	; 0x2f
    4550:	45 2b       	or	r20, r21
    4552:	4d a7       	std	Y+45, r20	; 0x2d
    4554:	8e a5       	ldd	r24, Y+46	; 0x2e
    4556:	8d a3       	std	Y+37, r24	; 0x25
    4558:	9e 89       	ldd	r25, Y+22	; 0x16
    455a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    455c:	9e 1b       	sub	r25, r30
    455e:	9e a3       	std	Y+38, r25	; 0x26
    4560:	f1 e0       	ldi	r31, 0x01	; 1
    4562:	f8 ab       	std	Y+48, r31	; 0x30
    4564:	4e a1       	ldd	r20, Y+38	; 0x26
    4566:	5e 89       	ldd	r21, Y+22	; 0x16
    4568:	54 17       	cp	r21, r20
    456a:	08 f0       	brcs	.+2      	; 0x456e <IntToString+0x184>
    456c:	18 aa       	std	Y+48, r1	; 0x30
    456e:	8e a1       	ldd	r24, Y+38	; 0x26
    4570:	9d a5       	ldd	r25, Y+45	; 0x2d
    4572:	89 1b       	sub	r24, r25
    4574:	89 ab       	std	Y+49, r24	; 0x31
    4576:	e1 e0       	ldi	r30, 0x01	; 1
    4578:	ea ab       	std	Y+50, r30	; 0x32
    457a:	f9 a9       	ldd	r31, Y+49	; 0x31
    457c:	4e a1       	ldd	r20, Y+38	; 0x26
    457e:	4f 17       	cp	r20, r31
    4580:	08 f0       	brcs	.+2      	; 0x4584 <IntToString+0x19a>
    4582:	1a aa       	std	Y+50, r1	; 0x32
    4584:	58 a9       	ldd	r21, Y+48	; 0x30
    4586:	8a a9       	ldd	r24, Y+50	; 0x32
    4588:	58 2b       	or	r21, r24
    458a:	58 ab       	std	Y+48, r21	; 0x30
    458c:	99 a9       	ldd	r25, Y+49	; 0x31
    458e:	9e a3       	std	Y+38, r25	; 0x26
    4590:	ef 89       	ldd	r30, Y+23	; 0x17
    4592:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4594:	ef 1b       	sub	r30, r31
    4596:	ef a3       	std	Y+39, r30	; 0x27
    4598:	41 e0       	ldi	r20, 0x01	; 1
    459a:	4b ab       	std	Y+51, r20	; 0x33
    459c:	5f a1       	ldd	r21, Y+39	; 0x27
    459e:	8f 89       	ldd	r24, Y+23	; 0x17
    45a0:	85 17       	cp	r24, r21
    45a2:	08 f0       	brcs	.+2      	; 0x45a6 <IntToString+0x1bc>
    45a4:	1b aa       	std	Y+51, r1	; 0x33
    45a6:	9f a1       	ldd	r25, Y+39	; 0x27
    45a8:	e8 a9       	ldd	r30, Y+48	; 0x30
    45aa:	9e 1b       	sub	r25, r30
    45ac:	9c ab       	std	Y+52, r25	; 0x34
    45ae:	f1 e0       	ldi	r31, 0x01	; 1
    45b0:	fd ab       	std	Y+53, r31	; 0x35
    45b2:	4c a9       	ldd	r20, Y+52	; 0x34
    45b4:	5f a1       	ldd	r21, Y+39	; 0x27
    45b6:	54 17       	cp	r21, r20
    45b8:	08 f0       	brcs	.+2      	; 0x45bc <IntToString+0x1d2>
    45ba:	1d aa       	std	Y+53, r1	; 0x35
    45bc:	8b a9       	ldd	r24, Y+51	; 0x33
    45be:	9d a9       	ldd	r25, Y+53	; 0x35
    45c0:	89 2b       	or	r24, r25
    45c2:	8b ab       	std	Y+51, r24	; 0x33
    45c4:	ec a9       	ldd	r30, Y+52	; 0x34
    45c6:	ef a3       	std	Y+39, r30	; 0x27
    45c8:	f8 8d       	ldd	r31, Y+24	; 0x18
    45ca:	48 a1       	ldd	r20, Y+32	; 0x20
    45cc:	f4 1b       	sub	r31, r20
    45ce:	f8 a7       	std	Y+40, r31	; 0x28
    45d0:	51 e0       	ldi	r21, 0x01	; 1
    45d2:	5e ab       	std	Y+54, r21	; 0x36
    45d4:	88 a5       	ldd	r24, Y+40	; 0x28
    45d6:	98 8d       	ldd	r25, Y+24	; 0x18
    45d8:	98 17       	cp	r25, r24
    45da:	08 f0       	brcs	.+2      	; 0x45de <IntToString+0x1f4>
    45dc:	1e aa       	std	Y+54, r1	; 0x36
    45de:	e8 a5       	ldd	r30, Y+40	; 0x28
    45e0:	fb a9       	ldd	r31, Y+51	; 0x33
    45e2:	ef 1b       	sub	r30, r31
    45e4:	ef ab       	std	Y+55, r30	; 0x37
    45e6:	41 e0       	ldi	r20, 0x01	; 1
    45e8:	48 af       	std	Y+56, r20	; 0x38
    45ea:	5f a9       	ldd	r21, Y+55	; 0x37
    45ec:	88 a5       	ldd	r24, Y+40	; 0x28
    45ee:	85 17       	cp	r24, r21
    45f0:	08 f0       	brcs	.+2      	; 0x45f4 <IntToString+0x20a>
    45f2:	18 ae       	std	Y+56, r1	; 0x38
    45f4:	9e a9       	ldd	r25, Y+54	; 0x36
    45f6:	e8 ad       	ldd	r30, Y+56	; 0x38
    45f8:	9e 2b       	or	r25, r30
    45fa:	9e ab       	std	Y+54, r25	; 0x36
    45fc:	ff a9       	ldd	r31, Y+55	; 0x37
    45fe:	f8 a7       	std	Y+40, r31	; 0x28
    4600:	49 8d       	ldd	r20, Y+25	; 0x19
    4602:	59 a1       	ldd	r21, Y+33	; 0x21
    4604:	45 1b       	sub	r20, r21
    4606:	49 a7       	std	Y+41, r20	; 0x29
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	89 af       	std	Y+57, r24	; 0x39
    460c:	99 a5       	ldd	r25, Y+41	; 0x29
    460e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4610:	e9 17       	cp	r30, r25
    4612:	08 f0       	brcs	.+2      	; 0x4616 <IntToString+0x22c>
    4614:	19 ae       	std	Y+57, r1	; 0x39
    4616:	f9 a5       	ldd	r31, Y+41	; 0x29
    4618:	4e a9       	ldd	r20, Y+54	; 0x36
    461a:	f4 1b       	sub	r31, r20
    461c:	fa af       	std	Y+58, r31	; 0x3a
    461e:	51 e0       	ldi	r21, 0x01	; 1
    4620:	5b af       	std	Y+59, r21	; 0x3b
    4622:	8a ad       	ldd	r24, Y+58	; 0x3a
    4624:	99 a5       	ldd	r25, Y+41	; 0x29
    4626:	98 17       	cp	r25, r24
    4628:	08 f0       	brcs	.+2      	; 0x462c <IntToString+0x242>
    462a:	1b ae       	std	Y+59, r1	; 0x3b
    462c:	e9 ad       	ldd	r30, Y+57	; 0x39
    462e:	fb ad       	ldd	r31, Y+59	; 0x3b
    4630:	ef 2b       	or	r30, r31
    4632:	e9 af       	std	Y+57, r30	; 0x39
    4634:	4a ad       	ldd	r20, Y+58	; 0x3a
    4636:	49 a7       	std	Y+41, r20	; 0x29
    4638:	5a 8d       	ldd	r21, Y+26	; 0x1a
    463a:	8a a1       	ldd	r24, Y+34	; 0x22
    463c:	58 1b       	sub	r21, r24
    463e:	5a a7       	std	Y+42, r21	; 0x2a
    4640:	91 e0       	ldi	r25, 0x01	; 1
    4642:	9c af       	std	Y+60, r25	; 0x3c
    4644:	ea a5       	ldd	r30, Y+42	; 0x2a
    4646:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4648:	fe 17       	cp	r31, r30
    464a:	08 f0       	brcs	.+2      	; 0x464e <IntToString+0x264>
    464c:	1c ae       	std	Y+60, r1	; 0x3c
    464e:	4a a5       	ldd	r20, Y+42	; 0x2a
    4650:	59 ad       	ldd	r21, Y+57	; 0x39
    4652:	45 1b       	sub	r20, r21
    4654:	4d af       	std	Y+61, r20	; 0x3d
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	8e af       	std	Y+62, r24	; 0x3e
    465a:	9d ad       	ldd	r25, Y+61	; 0x3d
    465c:	ea a5       	ldd	r30, Y+42	; 0x2a
    465e:	e9 17       	cp	r30, r25
    4660:	08 f0       	brcs	.+2      	; 0x4664 <IntToString+0x27a>
    4662:	1e ae       	std	Y+62, r1	; 0x3e
    4664:	fc ad       	ldd	r31, Y+60	; 0x3c
    4666:	4e ad       	ldd	r20, Y+62	; 0x3e
    4668:	f4 2b       	or	r31, r20
    466a:	fc af       	std	Y+60, r31	; 0x3c
    466c:	5d ad       	ldd	r21, Y+61	; 0x3d
    466e:	5a a7       	std	Y+42, r21	; 0x2a
    4670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4672:	9b a1       	ldd	r25, Y+35	; 0x23
    4674:	89 1b       	sub	r24, r25
    4676:	8b a7       	std	Y+43, r24	; 0x2b
    4678:	8b a5       	ldd	r24, Y+43	; 0x2b
    467a:	ec ad       	ldd	r30, Y+60	; 0x3c
    467c:	8e 1b       	sub	r24, r30
    467e:	8b a7       	std	Y+43, r24	; 0x2b
    4680:	fc a1       	ldd	r31, Y+36	; 0x24
    4682:	fb 87       	std	Y+11, r31	; 0x0b
    4684:	4d a1       	ldd	r20, Y+37	; 0x25
    4686:	4c 87       	std	Y+12, r20	; 0x0c
    4688:	5e a1       	ldd	r21, Y+38	; 0x26
    468a:	5d 87       	std	Y+13, r21	; 0x0d
    468c:	8f a1       	ldd	r24, Y+39	; 0x27
    468e:	8e 87       	std	Y+14, r24	; 0x0e
    4690:	98 a5       	ldd	r25, Y+40	; 0x28
    4692:	9f 87       	std	Y+15, r25	; 0x0f
    4694:	e9 a5       	ldd	r30, Y+41	; 0x29
    4696:	e8 8b       	std	Y+16, r30	; 0x10
    4698:	fa a5       	ldd	r31, Y+42	; 0x2a
    469a:	f9 8b       	std	Y+17, r31	; 0x11
    469c:	4b a5       	ldd	r20, Y+43	; 0x2b
    469e:	4a 8b       	std	Y+18, r20	; 0x12
			flag = 0 ;
    46a0:	1a 82       	std	Y+2, r1	; 0x02
    46a2:	19 82       	std	Y+1, r1	; 0x01
    46a4:	6a c0       	rjmp	.+212    	; 0x477a <IntToString+0x390>
		}
		for(  ; num > 0 ; ++i)
		{
			str[i] = (num%10) + '0' ;
    46a6:	2f 81       	ldd	r18, Y+7	; 0x07
    46a8:	38 85       	ldd	r19, Y+8	; 0x08
    46aa:	89 85       	ldd	r24, Y+9	; 0x09
    46ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ae:	4c 01       	movw	r8, r24
    46b0:	82 0e       	add	r8, r18
    46b2:	93 1e       	adc	r9, r19
    46b4:	ab 84       	ldd	r10, Y+11	; 0x0b
    46b6:	bc 84       	ldd	r11, Y+12	; 0x0c
    46b8:	cd 84       	ldd	r12, Y+13	; 0x0d
    46ba:	de 84       	ldd	r13, Y+14	; 0x0e
    46bc:	ef 84       	ldd	r14, Y+15	; 0x0f
    46be:	f8 88       	ldd	r15, Y+16	; 0x10
    46c0:	09 89       	ldd	r16, Y+17	; 0x11
    46c2:	1a 89       	ldd	r17, Y+18	; 0x12
    46c4:	2a 2d       	mov	r18, r10
    46c6:	3b 2d       	mov	r19, r11
    46c8:	4c 2d       	mov	r20, r12
    46ca:	5d 2d       	mov	r21, r13
    46cc:	6e 2d       	mov	r22, r14
    46ce:	7f 2d       	mov	r23, r15
    46d0:	80 2f       	mov	r24, r16
    46d2:	91 2f       	mov	r25, r17
    46d4:	0f 2e       	mov	r0, r31
    46d6:	fa e0       	ldi	r31, 0x0A	; 10
    46d8:	af 2e       	mov	r10, r31
    46da:	f0 2d       	mov	r31, r0
    46dc:	bb 24       	eor	r11, r11
    46de:	cc 24       	eor	r12, r12
    46e0:	dd 24       	eor	r13, r13
    46e2:	ee 24       	eor	r14, r14
    46e4:	ff 24       	eor	r15, r15
    46e6:	00 e0       	ldi	r16, 0x00	; 0
    46e8:	10 e0       	ldi	r17, 0x00	; 0
    46ea:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    46ee:	a2 2e       	mov	r10, r18
    46f0:	b3 2e       	mov	r11, r19
    46f2:	c4 2e       	mov	r12, r20
    46f4:	d5 2e       	mov	r13, r21
    46f6:	e6 2e       	mov	r14, r22
    46f8:	f7 2e       	mov	r15, r23
    46fa:	08 2f       	mov	r16, r24
    46fc:	19 2f       	mov	r17, r25
    46fe:	2a 2d       	mov	r18, r10
    4700:	3b 2d       	mov	r19, r11
    4702:	4c 2d       	mov	r20, r12
    4704:	5d 2d       	mov	r21, r13
    4706:	6e 2d       	mov	r22, r14
    4708:	7f 2d       	mov	r23, r15
    470a:	80 2f       	mov	r24, r16
    470c:	91 2f       	mov	r25, r17
    470e:	82 2f       	mov	r24, r18
    4710:	80 5d       	subi	r24, 0xD0	; 208
    4712:	f4 01       	movw	r30, r8
    4714:	80 83       	st	Z, r24
			num /= 10 ;
    4716:	ab 84       	ldd	r10, Y+11	; 0x0b
    4718:	bc 84       	ldd	r11, Y+12	; 0x0c
    471a:	cd 84       	ldd	r12, Y+13	; 0x0d
    471c:	de 84       	ldd	r13, Y+14	; 0x0e
    471e:	ef 84       	ldd	r14, Y+15	; 0x0f
    4720:	f8 88       	ldd	r15, Y+16	; 0x10
    4722:	09 89       	ldd	r16, Y+17	; 0x11
    4724:	1a 89       	ldd	r17, Y+18	; 0x12
    4726:	2a 2d       	mov	r18, r10
    4728:	3b 2d       	mov	r19, r11
    472a:	4c 2d       	mov	r20, r12
    472c:	5d 2d       	mov	r21, r13
    472e:	6e 2d       	mov	r22, r14
    4730:	7f 2d       	mov	r23, r15
    4732:	80 2f       	mov	r24, r16
    4734:	91 2f       	mov	r25, r17
    4736:	0f 2e       	mov	r0, r31
    4738:	fa e0       	ldi	r31, 0x0A	; 10
    473a:	af 2e       	mov	r10, r31
    473c:	f0 2d       	mov	r31, r0
    473e:	bb 24       	eor	r11, r11
    4740:	cc 24       	eor	r12, r12
    4742:	dd 24       	eor	r13, r13
    4744:	ee 24       	eor	r14, r14
    4746:	ff 24       	eor	r15, r15
    4748:	00 e0       	ldi	r16, 0x00	; 0
    474a:	10 e0       	ldi	r17, 0x00	; 0
    474c:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    4750:	a2 2e       	mov	r10, r18
    4752:	b3 2e       	mov	r11, r19
    4754:	c4 2e       	mov	r12, r20
    4756:	d5 2e       	mov	r13, r21
    4758:	e6 2e       	mov	r14, r22
    475a:	f7 2e       	mov	r15, r23
    475c:	08 2f       	mov	r16, r24
    475e:	19 2f       	mov	r17, r25
    4760:	ab 86       	std	Y+11, r10	; 0x0b
    4762:	bc 86       	std	Y+12, r11	; 0x0c
    4764:	cd 86       	std	Y+13, r12	; 0x0d
    4766:	de 86       	std	Y+14, r13	; 0x0e
    4768:	ef 86       	std	Y+15, r14	; 0x0f
    476a:	f8 8a       	std	Y+16, r15	; 0x10
    476c:	09 8b       	std	Y+17, r16	; 0x11
    476e:	1a 8b       	std	Y+18, r17	; 0x12
		{
			str[i++] = '-' ;
			num *= -1 ;
			flag = 0 ;
		}
		for(  ; num > 0 ; ++i)
    4770:	8f 81       	ldd	r24, Y+7	; 0x07
    4772:	98 85       	ldd	r25, Y+8	; 0x08
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	98 87       	std	Y+8, r25	; 0x08
    4778:	8f 83       	std	Y+7, r24	; 0x07
    477a:	8a 89       	ldd	r24, Y+18	; 0x12
    477c:	18 16       	cp	r1, r24
    477e:	0c f4       	brge	.+2      	; 0x4782 <IntToString+0x398>
    4780:	92 cf       	rjmp	.-220    	; 0x46a6 <IntToString+0x2bc>
    4782:	8a 89       	ldd	r24, Y+18	; 0x12
    4784:	88 23       	and	r24, r24
    4786:	71 f5       	brne	.+92     	; 0x47e4 <IntToString+0x3fa>
    4788:	89 89       	ldd	r24, Y+17	; 0x11
    478a:	88 23       	and	r24, r24
    478c:	09 f0       	breq	.+2      	; 0x4790 <IntToString+0x3a6>
    478e:	8b cf       	rjmp	.-234    	; 0x46a6 <IntToString+0x2bc>
    4790:	89 89       	ldd	r24, Y+17	; 0x11
    4792:	88 23       	and	r24, r24
    4794:	39 f5       	brne	.+78     	; 0x47e4 <IntToString+0x3fa>
    4796:	88 89       	ldd	r24, Y+16	; 0x10
    4798:	88 23       	and	r24, r24
    479a:	09 f0       	breq	.+2      	; 0x479e <IntToString+0x3b4>
    479c:	84 cf       	rjmp	.-248    	; 0x46a6 <IntToString+0x2bc>
    479e:	88 89       	ldd	r24, Y+16	; 0x10
    47a0:	88 23       	and	r24, r24
    47a2:	01 f5       	brne	.+64     	; 0x47e4 <IntToString+0x3fa>
    47a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47a6:	88 23       	and	r24, r24
    47a8:	09 f0       	breq	.+2      	; 0x47ac <IntToString+0x3c2>
    47aa:	7d cf       	rjmp	.-262    	; 0x46a6 <IntToString+0x2bc>
    47ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    47ae:	88 23       	and	r24, r24
    47b0:	c9 f4       	brne	.+50     	; 0x47e4 <IntToString+0x3fa>
    47b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    47b4:	88 23       	and	r24, r24
    47b6:	09 f0       	breq	.+2      	; 0x47ba <IntToString+0x3d0>
    47b8:	76 cf       	rjmp	.-276    	; 0x46a6 <IntToString+0x2bc>
    47ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    47bc:	88 23       	and	r24, r24
    47be:	91 f4       	brne	.+36     	; 0x47e4 <IntToString+0x3fa>
    47c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    47c2:	88 23       	and	r24, r24
    47c4:	09 f0       	breq	.+2      	; 0x47c8 <IntToString+0x3de>
    47c6:	6f cf       	rjmp	.-290    	; 0x46a6 <IntToString+0x2bc>
    47c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ca:	88 23       	and	r24, r24
    47cc:	59 f4       	brne	.+22     	; 0x47e4 <IntToString+0x3fa>
    47ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    47d0:	88 23       	and	r24, r24
    47d2:	09 f0       	breq	.+2      	; 0x47d6 <IntToString+0x3ec>
    47d4:	68 cf       	rjmp	.-304    	; 0x46a6 <IntToString+0x2bc>
    47d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    47d8:	88 23       	and	r24, r24
    47da:	21 f4       	brne	.+8      	; 0x47e4 <IntToString+0x3fa>
    47dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    47de:	88 23       	and	r24, r24
    47e0:	09 f0       	breq	.+2      	; 0x47e4 <IntToString+0x3fa>
    47e2:	61 cf       	rjmp	.-318    	; 0x46a6 <IntToString+0x2bc>
		{
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	9a 81       	ldd	r25, Y+2	; 0x02
    47e8:	00 97       	sbiw	r24, 0x00	; 0
    47ea:	09 f4       	brne	.+2      	; 0x47ee <IntToString+0x404>
    47ec:	62 c0       	rjmp	.+196    	; 0x48b2 <IntToString+0x4c8>
		{
			for( j= 0; j < (i/2) ; ++j)
    47ee:	1e 82       	std	Y+6, r1	; 0x06
    47f0:	1d 82       	std	Y+5, r1	; 0x05
    47f2:	3c c0       	rjmp	.+120    	; 0x486c <IntToString+0x482>
			{
				temp = str[i-j-1] ;
    47f4:	2f 81       	ldd	r18, Y+7	; 0x07
    47f6:	38 85       	ldd	r19, Y+8	; 0x08
    47f8:	8d 81       	ldd	r24, Y+5	; 0x05
    47fa:	9e 81       	ldd	r25, Y+6	; 0x06
    47fc:	a9 01       	movw	r20, r18
    47fe:	48 1b       	sub	r20, r24
    4800:	59 0b       	sbc	r21, r25
    4802:	ca 01       	movw	r24, r20
    4804:	9c 01       	movw	r18, r24
    4806:	21 50       	subi	r18, 0x01	; 1
    4808:	30 40       	sbci	r19, 0x00	; 0
    480a:	89 85       	ldd	r24, Y+9	; 0x09
    480c:	9a 85       	ldd	r25, Y+10	; 0x0a
    480e:	fc 01       	movw	r30, r24
    4810:	e2 0f       	add	r30, r18
    4812:	f3 1f       	adc	r31, r19
    4814:	80 81       	ld	r24, Z
    4816:	88 2f       	mov	r24, r24
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	9c 83       	std	Y+4, r25	; 0x04
    481c:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j-1] = str[j] ;
    481e:	2f 81       	ldd	r18, Y+7	; 0x07
    4820:	38 85       	ldd	r19, Y+8	; 0x08
    4822:	8d 81       	ldd	r24, Y+5	; 0x05
    4824:	9e 81       	ldd	r25, Y+6	; 0x06
    4826:	f9 01       	movw	r30, r18
    4828:	e8 1b       	sub	r30, r24
    482a:	f9 0b       	sbc	r31, r25
    482c:	cf 01       	movw	r24, r30
    482e:	9c 01       	movw	r18, r24
    4830:	21 50       	subi	r18, 0x01	; 1
    4832:	30 40       	sbci	r19, 0x00	; 0
    4834:	89 85       	ldd	r24, Y+9	; 0x09
    4836:	9a 85       	ldd	r25, Y+10	; 0x0a
    4838:	dc 01       	movw	r26, r24
    483a:	a2 0f       	add	r26, r18
    483c:	b3 1f       	adc	r27, r19
    483e:	2d 81       	ldd	r18, Y+5	; 0x05
    4840:	3e 81       	ldd	r19, Y+6	; 0x06
    4842:	89 85       	ldd	r24, Y+9	; 0x09
    4844:	9a 85       	ldd	r25, Y+10	; 0x0a
    4846:	fc 01       	movw	r30, r24
    4848:	e2 0f       	add	r30, r18
    484a:	f3 1f       	adc	r31, r19
    484c:	80 81       	ld	r24, Z
    484e:	8c 93       	st	X, r24
				str[j] = temp ;
    4850:	2d 81       	ldd	r18, Y+5	; 0x05
    4852:	3e 81       	ldd	r19, Y+6	; 0x06
    4854:	89 85       	ldd	r24, Y+9	; 0x09
    4856:	9a 85       	ldd	r25, Y+10	; 0x0a
    4858:	fc 01       	movw	r30, r24
    485a:	e2 0f       	add	r30, r18
    485c:	f3 1f       	adc	r31, r19
    485e:	8b 81       	ldd	r24, Y+3	; 0x03
    4860:	80 83       	st	Z, r24
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
		{
			for( j= 0; j < (i/2) ; ++j)
    4862:	8d 81       	ldd	r24, Y+5	; 0x05
    4864:	9e 81       	ldd	r25, Y+6	; 0x06
    4866:	01 96       	adiw	r24, 0x01	; 1
    4868:	9e 83       	std	Y+6, r25	; 0x06
    486a:	8d 83       	std	Y+5, r24	; 0x05
    486c:	8f 81       	ldd	r24, Y+7	; 0x07
    486e:	98 85       	ldd	r25, Y+8	; 0x08
    4870:	21 96       	adiw	r28, 0x01	; 1
    4872:	9f af       	std	Y+63, r25	; 0x3f
    4874:	8e af       	std	Y+62, r24	; 0x3e
    4876:	21 97       	sbiw	r28, 0x01	; 1
    4878:	21 96       	adiw	r28, 0x01	; 1
    487a:	4e ad       	ldd	r20, Y+62	; 0x3e
    487c:	5f ad       	ldd	r21, Y+63	; 0x3f
    487e:	21 97       	sbiw	r28, 0x01	; 1
    4880:	55 23       	and	r21, r21
    4882:	4c f4       	brge	.+18     	; 0x4896 <IntToString+0x4ac>
    4884:	21 96       	adiw	r28, 0x01	; 1
    4886:	8e ad       	ldd	r24, Y+62	; 0x3e
    4888:	9f ad       	ldd	r25, Y+63	; 0x3f
    488a:	21 97       	sbiw	r28, 0x01	; 1
    488c:	01 96       	adiw	r24, 0x01	; 1
    488e:	21 96       	adiw	r28, 0x01	; 1
    4890:	9f af       	std	Y+63, r25	; 0x3f
    4892:	8e af       	std	Y+62, r24	; 0x3e
    4894:	21 97       	sbiw	r28, 0x01	; 1
    4896:	21 96       	adiw	r28, 0x01	; 1
    4898:	8e ad       	ldd	r24, Y+62	; 0x3e
    489a:	9f ad       	ldd	r25, Y+63	; 0x3f
    489c:	21 97       	sbiw	r28, 0x01	; 1
    489e:	95 95       	asr	r25
    48a0:	87 95       	ror	r24
    48a2:	9c 01       	movw	r18, r24
    48a4:	8d 81       	ldd	r24, Y+5	; 0x05
    48a6:	9e 81       	ldd	r25, Y+6	; 0x06
    48a8:	82 17       	cp	r24, r18
    48aa:	93 07       	cpc	r25, r19
    48ac:	0c f4       	brge	.+2      	; 0x48b0 <IntToString+0x4c6>
    48ae:	a2 cf       	rjmp	.-188    	; 0x47f4 <IntToString+0x40a>
    48b0:	5f c0       	rjmp	.+190    	; 0x4970 <IntToString+0x586>
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	9e 83       	std	Y+6, r25	; 0x06
    48b8:	8d 83       	std	Y+5, r24	; 0x05
    48ba:	38 c0       	rjmp	.+112    	; 0x492c <IntToString+0x542>
			{
				temp = str[i-j] ;
    48bc:	2f 81       	ldd	r18, Y+7	; 0x07
    48be:	38 85       	ldd	r19, Y+8	; 0x08
    48c0:	8d 81       	ldd	r24, Y+5	; 0x05
    48c2:	9e 81       	ldd	r25, Y+6	; 0x06
    48c4:	f9 01       	movw	r30, r18
    48c6:	e8 1b       	sub	r30, r24
    48c8:	f9 0b       	sbc	r31, r25
    48ca:	cf 01       	movw	r24, r30
    48cc:	9c 01       	movw	r18, r24
    48ce:	89 85       	ldd	r24, Y+9	; 0x09
    48d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d2:	fc 01       	movw	r30, r24
    48d4:	e2 0f       	add	r30, r18
    48d6:	f3 1f       	adc	r31, r19
    48d8:	80 81       	ld	r24, Z
    48da:	88 2f       	mov	r24, r24
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	9c 83       	std	Y+4, r25	; 0x04
    48e0:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j] = str[j] ;
    48e2:	2f 81       	ldd	r18, Y+7	; 0x07
    48e4:	38 85       	ldd	r19, Y+8	; 0x08
    48e6:	8d 81       	ldd	r24, Y+5	; 0x05
    48e8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ea:	a9 01       	movw	r20, r18
    48ec:	48 1b       	sub	r20, r24
    48ee:	59 0b       	sbc	r21, r25
    48f0:	ca 01       	movw	r24, r20
    48f2:	9c 01       	movw	r18, r24
    48f4:	89 85       	ldd	r24, Y+9	; 0x09
    48f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48f8:	dc 01       	movw	r26, r24
    48fa:	a2 0f       	add	r26, r18
    48fc:	b3 1f       	adc	r27, r19
    48fe:	2d 81       	ldd	r18, Y+5	; 0x05
    4900:	3e 81       	ldd	r19, Y+6	; 0x06
    4902:	89 85       	ldd	r24, Y+9	; 0x09
    4904:	9a 85       	ldd	r25, Y+10	; 0x0a
    4906:	fc 01       	movw	r30, r24
    4908:	e2 0f       	add	r30, r18
    490a:	f3 1f       	adc	r31, r19
    490c:	80 81       	ld	r24, Z
    490e:	8c 93       	st	X, r24
				str[j] = temp ;
    4910:	2d 81       	ldd	r18, Y+5	; 0x05
    4912:	3e 81       	ldd	r19, Y+6	; 0x06
    4914:	89 85       	ldd	r24, Y+9	; 0x09
    4916:	9a 85       	ldd	r25, Y+10	; 0x0a
    4918:	fc 01       	movw	r30, r24
    491a:	e2 0f       	add	r30, r18
    491c:	f3 1f       	adc	r31, r19
    491e:	8b 81       	ldd	r24, Y+3	; 0x03
    4920:	80 83       	st	Z, r24
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    4922:	8d 81       	ldd	r24, Y+5	; 0x05
    4924:	9e 81       	ldd	r25, Y+6	; 0x06
    4926:	01 96       	adiw	r24, 0x01	; 1
    4928:	9e 83       	std	Y+6, r25	; 0x06
    492a:	8d 83       	std	Y+5, r24	; 0x05
    492c:	8f 81       	ldd	r24, Y+7	; 0x07
    492e:	98 85       	ldd	r25, Y+8	; 0x08
    4930:	23 96       	adiw	r28, 0x03	; 3
    4932:	9f af       	std	Y+63, r25	; 0x3f
    4934:	8e af       	std	Y+62, r24	; 0x3e
    4936:	23 97       	sbiw	r28, 0x03	; 3
    4938:	23 96       	adiw	r28, 0x03	; 3
    493a:	8e ad       	ldd	r24, Y+62	; 0x3e
    493c:	9f ad       	ldd	r25, Y+63	; 0x3f
    493e:	23 97       	sbiw	r28, 0x03	; 3
    4940:	99 23       	and	r25, r25
    4942:	4c f4       	brge	.+18     	; 0x4956 <IntToString+0x56c>
    4944:	23 96       	adiw	r28, 0x03	; 3
    4946:	ee ad       	ldd	r30, Y+62	; 0x3e
    4948:	ff ad       	ldd	r31, Y+63	; 0x3f
    494a:	23 97       	sbiw	r28, 0x03	; 3
    494c:	31 96       	adiw	r30, 0x01	; 1
    494e:	23 96       	adiw	r28, 0x03	; 3
    4950:	ff af       	std	Y+63, r31	; 0x3f
    4952:	ee af       	std	Y+62, r30	; 0x3e
    4954:	23 97       	sbiw	r28, 0x03	; 3
    4956:	23 96       	adiw	r28, 0x03	; 3
    4958:	8e ad       	ldd	r24, Y+62	; 0x3e
    495a:	9f ad       	ldd	r25, Y+63	; 0x3f
    495c:	23 97       	sbiw	r28, 0x03	; 3
    495e:	95 95       	asr	r25
    4960:	87 95       	ror	r24
    4962:	9c 01       	movw	r18, r24
    4964:	8d 81       	ldd	r24, Y+5	; 0x05
    4966:	9e 81       	ldd	r25, Y+6	; 0x06
    4968:	28 17       	cp	r18, r24
    496a:	39 07       	cpc	r19, r25
    496c:	0c f0       	brlt	.+2      	; 0x4970 <IntToString+0x586>
    496e:	a6 cf       	rjmp	.-180    	; 0x48bc <IntToString+0x4d2>
				str[j] = temp ;
			}
		}


		str[i] = 0 ;
    4970:	8f 81       	ldd	r24, Y+7	; 0x07
    4972:	98 85       	ldd	r25, Y+8	; 0x08
    4974:	29 85       	ldd	r18, Y+9	; 0x09
    4976:	3a 85       	ldd	r19, Y+10	; 0x0a
    4978:	f9 01       	movw	r30, r18
    497a:	e8 0f       	add	r30, r24
    497c:	f9 1f       	adc	r31, r25
    497e:	10 82       	st	Z, r1

	}
}
    4980:	ce 5b       	subi	r28, 0xBE	; 190
    4982:	df 4f       	sbci	r29, 0xFF	; 255
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	de bf       	out	0x3e, r29	; 62
    498a:	0f be       	out	0x3f, r0	; 63
    498c:	cd bf       	out	0x3d, r28	; 61
    498e:	cf 91       	pop	r28
    4990:	df 91       	pop	r29
    4992:	1f 91       	pop	r17
    4994:	0f 91       	pop	r16
    4996:	ff 90       	pop	r15
    4998:	ef 90       	pop	r14
    499a:	df 90       	pop	r13
    499c:	cf 90       	pop	r12
    499e:	bf 90       	pop	r11
    49a0:	af 90       	pop	r10
    49a2:	9f 90       	pop	r9
    49a4:	8f 90       	pop	r8
    49a6:	08 95       	ret

000049a8 <LCD_WriteChar>:



void LCD_WriteChar (u8 ch)   
{
    49a8:	df 93       	push	r29
    49aa:	cf 93       	push	r28
    49ac:	0f 92       	push	r0
    49ae:	cd b7       	in	r28, 0x3d	; 61
    49b0:	de b7       	in	r29, 0x3e	; 62
    49b2:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(ch) ;
    49b4:	89 81       	ldd	r24, Y+1	; 0x01
    49b6:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
}
    49ba:	0f 90       	pop	r0
    49bc:	cf 91       	pop	r28
    49be:	df 91       	pop	r29
    49c0:	08 95       	ret

000049c2 <LCD_WriteString>:
void LCD_WriteString(u8* str)
{
    49c2:	df 93       	push	r29
    49c4:	cf 93       	push	r28
    49c6:	00 d0       	rcall	.+0      	; 0x49c8 <LCD_WriteString+0x6>
    49c8:	00 d0       	rcall	.+0      	; 0x49ca <LCD_WriteString+0x8>
    49ca:	cd b7       	in	r28, 0x3d	; 61
    49cc:	de b7       	in	r29, 0x3e	; 62
    49ce:	9c 83       	std	Y+4, r25	; 0x04
    49d0:	8b 83       	std	Y+3, r24	; 0x03
	int i ; 
	for(i=0 ; str[i] ; ++i)
    49d2:	1a 82       	std	Y+2, r1	; 0x02
    49d4:	19 82       	std	Y+1, r1	; 0x01
    49d6:	0f c0       	rjmp	.+30     	; 0x49f6 <LCD_WriteString+0x34>
	{
		LCD_WriteData(str[i]) ;
    49d8:	29 81       	ldd	r18, Y+1	; 0x01
    49da:	3a 81       	ldd	r19, Y+2	; 0x02
    49dc:	8b 81       	ldd	r24, Y+3	; 0x03
    49de:	9c 81       	ldd	r25, Y+4	; 0x04
    49e0:	fc 01       	movw	r30, r24
    49e2:	e2 0f       	add	r30, r18
    49e4:	f3 1f       	adc	r31, r19
    49e6:	80 81       	ld	r24, Z
    49e8:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
	LCD_WriteData(ch) ;
}
void LCD_WriteString(u8* str)
{
	int i ; 
	for(i=0 ; str[i] ; ++i)
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
    49ee:	9a 81       	ldd	r25, Y+2	; 0x02
    49f0:	01 96       	adiw	r24, 0x01	; 1
    49f2:	9a 83       	std	Y+2, r25	; 0x02
    49f4:	89 83       	std	Y+1, r24	; 0x01
    49f6:	29 81       	ldd	r18, Y+1	; 0x01
    49f8:	3a 81       	ldd	r19, Y+2	; 0x02
    49fa:	8b 81       	ldd	r24, Y+3	; 0x03
    49fc:	9c 81       	ldd	r25, Y+4	; 0x04
    49fe:	fc 01       	movw	r30, r24
    4a00:	e2 0f       	add	r30, r18
    4a02:	f3 1f       	adc	r31, r19
    4a04:	80 81       	ld	r24, Z
    4a06:	88 23       	and	r24, r24
    4a08:	39 f7       	brne	.-50     	; 0x49d8 <LCD_WriteString+0x16>
	{
		LCD_WriteData(str[i]) ;
	}
}
    4a0a:	0f 90       	pop	r0
    4a0c:	0f 90       	pop	r0
    4a0e:	0f 90       	pop	r0
    4a10:	0f 90       	pop	r0
    4a12:	cf 91       	pop	r28
    4a14:	df 91       	pop	r29
    4a16:	08 95       	ret

00004a18 <LCD_WriteNumber>:

void LCD_WriteNumber (s64 num) 
{
    4a18:	8f 92       	push	r8
    4a1a:	9f 92       	push	r9
    4a1c:	af 92       	push	r10
    4a1e:	bf 92       	push	r11
    4a20:	cf 92       	push	r12
    4a22:	df 92       	push	r13
    4a24:	ef 92       	push	r14
    4a26:	ff 92       	push	r15
    4a28:	0f 93       	push	r16
    4a2a:	1f 93       	push	r17
    4a2c:	df 93       	push	r29
    4a2e:	cf 93       	push	r28
    4a30:	cd b7       	in	r28, 0x3d	; 61
    4a32:	de b7       	in	r29, 0x3e	; 62
    4a34:	a8 97       	sbiw	r28, 0x28	; 40
    4a36:	0f b6       	in	r0, 0x3f	; 63
    4a38:	f8 94       	cli
    4a3a:	de bf       	out	0x3e, r29	; 62
    4a3c:	0f be       	out	0x3f, r0	; 63
    4a3e:	cd bf       	out	0x3d, r28	; 61
    4a40:	29 a3       	std	Y+33, r18	; 0x21
    4a42:	3a a3       	std	Y+34, r19	; 0x22
    4a44:	4b a3       	std	Y+35, r20	; 0x23
    4a46:	5c a3       	std	Y+36, r21	; 0x24
    4a48:	6d a3       	std	Y+37, r22	; 0x25
    4a4a:	7e a3       	std	Y+38, r23	; 0x26
    4a4c:	8f a3       	std	Y+39, r24	; 0x27
    4a4e:	98 a7       	std	Y+40, r25	; 0x28
	u8 inttostring_arr [32] = {0} ;
    4a50:	80 e2       	ldi	r24, 0x20	; 32
    4a52:	fe 01       	movw	r30, r28
    4a54:	31 96       	adiw	r30, 0x01	; 1
    4a56:	df 01       	movw	r26, r30
    4a58:	98 2f       	mov	r25, r24
    4a5a:	1d 92       	st	X+, r1
    4a5c:	9a 95       	dec	r25
    4a5e:	e9 f7       	brne	.-6      	; 0x4a5a <LCD_WriteNumber+0x42>
	IntToString(inttostring_arr , num) ;
    4a60:	89 a0       	ldd	r8, Y+33	; 0x21
    4a62:	9a a0       	ldd	r9, Y+34	; 0x22
    4a64:	ab a0       	ldd	r10, Y+35	; 0x23
    4a66:	bc a0       	ldd	r11, Y+36	; 0x24
    4a68:	cd a0       	ldd	r12, Y+37	; 0x25
    4a6a:	de a0       	ldd	r13, Y+38	; 0x26
    4a6c:	ef a0       	ldd	r14, Y+39	; 0x27
    4a6e:	f8 a4       	ldd	r15, Y+40	; 0x28
    4a70:	ce 01       	movw	r24, r28
    4a72:	01 96       	adiw	r24, 0x01	; 1
    4a74:	08 2d       	mov	r16, r8
    4a76:	19 2d       	mov	r17, r9
    4a78:	2a 2d       	mov	r18, r10
    4a7a:	3b 2d       	mov	r19, r11
    4a7c:	4c 2d       	mov	r20, r12
    4a7e:	5d 2d       	mov	r21, r13
    4a80:	6e 2d       	mov	r22, r14
    4a82:	7f 2d       	mov	r23, r15
    4a84:	0e 94 f5 21 	call	0x43ea	; 0x43ea <IntToString>
	LCD_WriteString(inttostring_arr) ;
    4a88:	ce 01       	movw	r24, r28
    4a8a:	01 96       	adiw	r24, 0x01	; 1
    4a8c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <LCD_WriteString>
}
    4a90:	a8 96       	adiw	r28, 0x28	; 40
    4a92:	0f b6       	in	r0, 0x3f	; 63
    4a94:	f8 94       	cli
    4a96:	de bf       	out	0x3e, r29	; 62
    4a98:	0f be       	out	0x3f, r0	; 63
    4a9a:	cd bf       	out	0x3d, r28	; 61
    4a9c:	cf 91       	pop	r28
    4a9e:	df 91       	pop	r29
    4aa0:	1f 91       	pop	r17
    4aa2:	0f 91       	pop	r16
    4aa4:	ff 90       	pop	r15
    4aa6:	ef 90       	pop	r14
    4aa8:	df 90       	pop	r13
    4aaa:	cf 90       	pop	r12
    4aac:	bf 90       	pop	r11
    4aae:	af 90       	pop	r10
    4ab0:	9f 90       	pop	r9
    4ab2:	8f 90       	pop	r8
    4ab4:	08 95       	ret

00004ab6 <LCD_ClearDisplay>:
void LCD_ClearDisplay (void) 
{
    4ab6:	df 93       	push	r29
    4ab8:	cf 93       	push	r28
    4aba:	cd b7       	in	r28, 0x3d	; 61
    4abc:	de b7       	in	r29, 0x3e	; 62
    4abe:	2e 97       	sbiw	r28, 0x0e	; 14
    4ac0:	0f b6       	in	r0, 0x3f	; 63
    4ac2:	f8 94       	cli
    4ac4:	de bf       	out	0x3e, r29	; 62
    4ac6:	0f be       	out	0x3f, r0	; 63
    4ac8:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01) ; // clear screen
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	a0 e0       	ldi	r26, 0x00	; 0
    4ad6:	b0 e4       	ldi	r27, 0x40	; 64
    4ad8:	8b 87       	std	Y+11, r24	; 0x0b
    4ada:	9c 87       	std	Y+12, r25	; 0x0c
    4adc:	ad 87       	std	Y+13, r26	; 0x0d
    4ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ae8:	20 e0       	ldi	r18, 0x00	; 0
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	4a ef       	ldi	r20, 0xFA	; 250
    4aee:	54 e4       	ldi	r21, 0x44	; 68
    4af0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	8f 83       	std	Y+7, r24	; 0x07
    4afa:	98 87       	std	Y+8, r25	; 0x08
    4afc:	a9 87       	std	Y+9, r26	; 0x09
    4afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b00:	6f 81       	ldd	r22, Y+7	; 0x07
    4b02:	78 85       	ldd	r23, Y+8	; 0x08
    4b04:	89 85       	ldd	r24, Y+9	; 0x09
    4b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b08:	20 e0       	ldi	r18, 0x00	; 0
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	40 e8       	ldi	r20, 0x80	; 128
    4b0e:	5f e3       	ldi	r21, 0x3F	; 63
    4b10:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4b14:	88 23       	and	r24, r24
    4b16:	2c f4       	brge	.+10     	; 0x4b22 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    4b18:	81 e0       	ldi	r24, 0x01	; 1
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	9e 83       	std	Y+6, r25	; 0x06
    4b1e:	8d 83       	std	Y+5, r24	; 0x05
    4b20:	3f c0       	rjmp	.+126    	; 0x4ba0 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    4b22:	6f 81       	ldd	r22, Y+7	; 0x07
    4b24:	78 85       	ldd	r23, Y+8	; 0x08
    4b26:	89 85       	ldd	r24, Y+9	; 0x09
    4b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	3f ef       	ldi	r19, 0xFF	; 255
    4b2e:	4f e7       	ldi	r20, 0x7F	; 127
    4b30:	57 e4       	ldi	r21, 0x47	; 71
    4b32:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4b36:	18 16       	cp	r1, r24
    4b38:	4c f5       	brge	.+82     	; 0x4b8c <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	40 e2       	ldi	r20, 0x20	; 32
    4b48:	51 e4       	ldi	r21, 0x41	; 65
    4b4a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	bc 01       	movw	r22, r24
    4b54:	cd 01       	movw	r24, r26
    4b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5a:	dc 01       	movw	r26, r24
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	9e 83       	std	Y+6, r25	; 0x06
    4b60:	8d 83       	std	Y+5, r24	; 0x05
    4b62:	0f c0       	rjmp	.+30     	; 0x4b82 <LCD_ClearDisplay+0xcc>
    4b64:	88 ec       	ldi	r24, 0xC8	; 200
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	9c 83       	std	Y+4, r25	; 0x04
    4b6a:	8b 83       	std	Y+3, r24	; 0x03
    4b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b70:	01 97       	sbiw	r24, 0x01	; 1
    4b72:	f1 f7       	brne	.-4      	; 0x4b70 <LCD_ClearDisplay+0xba>
    4b74:	9c 83       	std	Y+4, r25	; 0x04
    4b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b78:	8d 81       	ldd	r24, Y+5	; 0x05
    4b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b7c:	01 97       	sbiw	r24, 0x01	; 1
    4b7e:	9e 83       	std	Y+6, r25	; 0x06
    4b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b82:	8d 81       	ldd	r24, Y+5	; 0x05
    4b84:	9e 81       	ldd	r25, Y+6	; 0x06
    4b86:	00 97       	sbiw	r24, 0x00	; 0
    4b88:	69 f7       	brne	.-38     	; 0x4b64 <LCD_ClearDisplay+0xae>
    4b8a:	14 c0       	rjmp	.+40     	; 0x4bb4 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    4b8e:	78 85       	ldd	r23, Y+8	; 0x08
    4b90:	89 85       	ldd	r24, Y+9	; 0x09
    4b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b98:	dc 01       	movw	r26, r24
    4b9a:	cb 01       	movw	r24, r22
    4b9c:	9e 83       	std	Y+6, r25	; 0x06
    4b9e:	8d 83       	std	Y+5, r24	; 0x05
    4ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ba4:	9a 83       	std	Y+2, r25	; 0x02
    4ba6:	89 83       	std	Y+1, r24	; 0x01
    4ba8:	89 81       	ldd	r24, Y+1	; 0x01
    4baa:	9a 81       	ldd	r25, Y+2	; 0x02
    4bac:	01 97       	sbiw	r24, 0x01	; 1
    4bae:	f1 f7       	brne	.-4      	; 0x4bac <LCD_ClearDisplay+0xf6>
    4bb0:	9a 83       	std	Y+2, r25	; 0x02
    4bb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
}
    4bb4:	2e 96       	adiw	r28, 0x0e	; 14
    4bb6:	0f b6       	in	r0, 0x3f	; 63
    4bb8:	f8 94       	cli
    4bba:	de bf       	out	0x3e, r29	; 62
    4bbc:	0f be       	out	0x3f, r0	; 63
    4bbe:	cd bf       	out	0x3d, r28	; 61
    4bc0:	cf 91       	pop	r28
    4bc2:	df 91       	pop	r29
    4bc4:	08 95       	ret

00004bc6 <LCD_WriteBin>:
void LCD_WriteBin (s8 num) 
{
    4bc6:	df 93       	push	r29
    4bc8:	cf 93       	push	r28
    4bca:	cd b7       	in	r28, 0x3d	; 61
    4bcc:	de b7       	in	r29, 0x3e	; 62
    4bce:	2d 97       	sbiw	r28, 0x0d	; 13
    4bd0:	0f b6       	in	r0, 0x3f	; 63
    4bd2:	f8 94       	cli
    4bd4:	de bf       	out	0x3e, r29	; 62
    4bd6:	0f be       	out	0x3f, r0	; 63
    4bd8:	cd bf       	out	0x3d, r28	; 61
    4bda:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr [8] = {0}  , j = 0 , flag = 0 ;
    4bdc:	88 e0       	ldi	r24, 0x08	; 8
    4bde:	fe 01       	movw	r30, r28
    4be0:	35 96       	adiw	r30, 0x05	; 5
    4be2:	df 01       	movw	r26, r30
    4be4:	98 2f       	mov	r25, r24
    4be6:	1d 92       	st	X+, r1
    4be8:	9a 95       	dec	r25
    4bea:	e9 f7       	brne	.-6      	; 0x4be6 <LCD_WriteBin+0x20>
    4bec:	1c 82       	std	Y+4, r1	; 0x04
    4bee:	1b 82       	std	Y+3, r1	; 0x03
	int i ; 
	for(i= 7 ; i >= 0 ; --i)
    4bf0:	87 e0       	ldi	r24, 0x07	; 7
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	9a 83       	std	Y+2, r25	; 0x02
    4bf6:	89 83       	std	Y+1, r24	; 0x01
    4bf8:	41 c0       	rjmp	.+130    	; 0x4c7c <LCD_WriteBin+0xb6>
	{
		if(num & (1<<i))
    4bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bfc:	99 27       	eor	r25, r25
    4bfe:	87 fd       	sbrc	r24, 7
    4c00:	90 95       	com	r25
    4c02:	09 80       	ldd	r0, Y+1	; 0x01
    4c04:	02 c0       	rjmp	.+4      	; 0x4c0a <LCD_WriteBin+0x44>
    4c06:	95 95       	asr	r25
    4c08:	87 95       	ror	r24
    4c0a:	0a 94       	dec	r0
    4c0c:	e2 f7       	brpl	.-8      	; 0x4c06 <LCD_WriteBin+0x40>
    4c0e:	81 70       	andi	r24, 0x01	; 1
    4c10:	90 70       	andi	r25, 0x00	; 0
    4c12:	88 23       	and	r24, r24
    4c14:	11 f0       	breq	.+4      	; 0x4c1a <LCD_WriteBin+0x54>
		{
			flag = 1 ;
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(flag == 1)
    4c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1c:	81 30       	cpi	r24, 0x01	; 1
    4c1e:	49 f5       	brne	.+82     	; 0x4c72 <LCD_WriteBin+0xac>
		{
			if(num & (1<<i))
    4c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c22:	99 27       	eor	r25, r25
    4c24:	87 fd       	sbrc	r24, 7
    4c26:	90 95       	com	r25
    4c28:	09 80       	ldd	r0, Y+1	; 0x01
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <LCD_WriteBin+0x6a>
    4c2c:	95 95       	asr	r25
    4c2e:	87 95       	ror	r24
    4c30:	0a 94       	dec	r0
    4c32:	e2 f7       	brpl	.-8      	; 0x4c2c <LCD_WriteBin+0x66>
    4c34:	81 70       	andi	r24, 0x01	; 1
    4c36:	90 70       	andi	r25, 0x00	; 0
    4c38:	88 23       	and	r24, r24
    4c3a:	71 f0       	breq	.+28     	; 0x4c58 <LCD_WriteBin+0x92>
			{
				arr[j++] = '1' ;
    4c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c3e:	28 2f       	mov	r18, r24
    4c40:	30 e0       	ldi	r19, 0x00	; 0
    4c42:	ce 01       	movw	r24, r28
    4c44:	05 96       	adiw	r24, 0x05	; 5
    4c46:	fc 01       	movw	r30, r24
    4c48:	e2 0f       	add	r30, r18
    4c4a:	f3 1f       	adc	r31, r19
    4c4c:	81 e3       	ldi	r24, 0x31	; 49
    4c4e:	80 83       	st	Z, r24
    4c50:	8c 81       	ldd	r24, Y+4	; 0x04
    4c52:	8f 5f       	subi	r24, 0xFF	; 255
    4c54:	8c 83       	std	Y+4, r24	; 0x04
    4c56:	0d c0       	rjmp	.+26     	; 0x4c72 <LCD_WriteBin+0xac>
			}
			else
			    arr[j++] = '0' ;
    4c58:	8c 81       	ldd	r24, Y+4	; 0x04
    4c5a:	28 2f       	mov	r18, r24
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	ce 01       	movw	r24, r28
    4c60:	05 96       	adiw	r24, 0x05	; 5
    4c62:	fc 01       	movw	r30, r24
    4c64:	e2 0f       	add	r30, r18
    4c66:	f3 1f       	adc	r31, r19
    4c68:	80 e3       	ldi	r24, 0x30	; 48
    4c6a:	80 83       	st	Z, r24
    4c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c6e:	8f 5f       	subi	r24, 0xFF	; 255
    4c70:	8c 83       	std	Y+4, r24	; 0x04
}
void LCD_WriteBin (s8 num) 
{
	u8 arr [8] = {0}  , j = 0 , flag = 0 ;
	int i ; 
	for(i= 7 ; i >= 0 ; --i)
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
    4c74:	9a 81       	ldd	r25, Y+2	; 0x02
    4c76:	01 97       	sbiw	r24, 0x01	; 1
    4c78:	9a 83       	std	Y+2, r25	; 0x02
    4c7a:	89 83       	std	Y+1, r24	; 0x01
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c80:	99 23       	and	r25, r25
    4c82:	0c f0       	brlt	.+2      	; 0x4c86 <LCD_WriteBin+0xc0>
    4c84:	ba cf       	rjmp	.-140    	; 0x4bfa <LCD_WriteBin+0x34>
			    arr[j++] = '0' ;
			
			
		}
	}
	LCD_WriteString(arr) ;
    4c86:	ce 01       	movw	r24, r28
    4c88:	05 96       	adiw	r24, 0x05	; 5
    4c8a:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <LCD_WriteString>
	
}
    4c8e:	2d 96       	adiw	r28, 0x0d	; 13
    4c90:	0f b6       	in	r0, 0x3f	; 63
    4c92:	f8 94       	cli
    4c94:	de bf       	out	0x3e, r29	; 62
    4c96:	0f be       	out	0x3f, r0	; 63
    4c98:	cd bf       	out	0x3d, r28	; 61
    4c9a:	cf 91       	pop	r28
    4c9c:	df 91       	pop	r29
    4c9e:	08 95       	ret

00004ca0 <LCD_WriteHex>:
/*void LCD_WriteStringcon (u8* str) ;
{
	
}*/
void LCD_WriteHex(u8 num)//0x54  0b0101 0100
{
    4ca0:	df 93       	push	r29
    4ca2:	cf 93       	push	r28
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
    4ca8:	68 97       	sbiw	r28, 0x18	; 24
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	f8 94       	cli
    4cae:	de bf       	out	0x3e, r29	; 62
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	cd bf       	out	0x3d, r28	; 61
    4cb4:	8b 8b       	std	Y+19, r24	; 0x13
	u8 high=num>>4;//00000101
    4cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    4cb8:	82 95       	swap	r24
    4cba:	8f 70       	andi	r24, 0x0F	; 15
    4cbc:	8a 83       	std	Y+2, r24	; 0x02
	u8 low =num&0x0f;//00000100
    4cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc0:	8f 70       	andi	r24, 0x0F	; 15
    4cc2:	89 83       	std	Y+1, r24	; 0x01
	u8 HEX[16]={'0','1','2','3' , '4' , '5' , '6' ,'7','8' , '9' , 'A','B' ,'C' , 'D' ,'E' ,'F'}; // using looK up table
    4cc4:	ce 01       	movw	r24, r28
    4cc6:	03 96       	adiw	r24, 0x03	; 3
    4cc8:	9d 8b       	std	Y+21, r25	; 0x15
    4cca:	8c 8b       	std	Y+20, r24	; 0x14
    4ccc:	e4 e9       	ldi	r30, 0x94	; 148
    4cce:	f1 e0       	ldi	r31, 0x01	; 1
    4cd0:	ff 8b       	std	Y+23, r31	; 0x17
    4cd2:	ee 8b       	std	Y+22, r30	; 0x16
    4cd4:	f0 e1       	ldi	r31, 0x10	; 16
    4cd6:	f8 8f       	std	Y+24, r31	; 0x18
    4cd8:	ee 89       	ldd	r30, Y+22	; 0x16
    4cda:	ff 89       	ldd	r31, Y+23	; 0x17
    4cdc:	00 80       	ld	r0, Z
    4cde:	8e 89       	ldd	r24, Y+22	; 0x16
    4ce0:	9f 89       	ldd	r25, Y+23	; 0x17
    4ce2:	01 96       	adiw	r24, 0x01	; 1
    4ce4:	9f 8b       	std	Y+23, r25	; 0x17
    4ce6:	8e 8b       	std	Y+22, r24	; 0x16
    4ce8:	ec 89       	ldd	r30, Y+20	; 0x14
    4cea:	fd 89       	ldd	r31, Y+21	; 0x15
    4cec:	00 82       	st	Z, r0
    4cee:	8c 89       	ldd	r24, Y+20	; 0x14
    4cf0:	9d 89       	ldd	r25, Y+21	; 0x15
    4cf2:	01 96       	adiw	r24, 0x01	; 1
    4cf4:	9d 8b       	std	Y+21, r25	; 0x15
    4cf6:	8c 8b       	std	Y+20, r24	; 0x14
    4cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    4cfa:	91 50       	subi	r25, 0x01	; 1
    4cfc:	98 8f       	std	Y+24, r25	; 0x18
    4cfe:	e8 8d       	ldd	r30, Y+24	; 0x18
    4d00:	ee 23       	and	r30, r30
    4d02:	51 f7       	brne	.-44     	; 0x4cd8 <LCD_WriteHex+0x38>
	if(high<=9)
    4d04:	8a 81       	ldd	r24, Y+2	; 0x02
    4d06:	8a 30       	cpi	r24, 0x0A	; 10
    4d08:	28 f4       	brcc	.+10     	; 0x4d14 <LCD_WriteHex+0x74>
	LCD_WriteData(high+'0');
    4d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0c:	80 5d       	subi	r24, 0xD0	; 208
    4d0e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
    4d12:	04 c0       	rjmp	.+8      	; 0x4d1c <LCD_WriteHex+0x7c>
	else
	LCD_WriteData(high-10+'A');
    4d14:	8a 81       	ldd	r24, Y+2	; 0x02
    4d16:	89 5c       	subi	r24, 0xC9	; 201
    4d18:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
	
	LCD_WriteData(HEX[low]);
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	28 2f       	mov	r18, r24
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	ce 01       	movw	r24, r28
    4d24:	03 96       	adiw	r24, 0x03	; 3
    4d26:	fc 01       	movw	r30, r24
    4d28:	e2 0f       	add	r30, r18
    4d2a:	f3 1f       	adc	r31, r19
    4d2c:	80 81       	ld	r24, Z
    4d2e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
}
    4d32:	68 96       	adiw	r28, 0x18	; 24
    4d34:	0f b6       	in	r0, 0x3f	; 63
    4d36:	f8 94       	cli
    4d38:	de bf       	out	0x3e, r29	; 62
    4d3a:	0f be       	out	0x3f, r0	; 63
    4d3c:	cd bf       	out	0x3d, r28	; 61
    4d3e:	cf 91       	pop	r28
    4d40:	df 91       	pop	r29
    4d42:	08 95       	ret

00004d44 <LCD_WriteNumber_4Digit>:
void LCD_WriteNumber_4Digit (u16 num) 
{
    4d44:	df 93       	push	r29
    4d46:	cf 93       	push	r28
    4d48:	00 d0       	rcall	.+0      	; 0x4d4a <LCD_WriteNumber_4Digit+0x6>
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
    4d4e:	9a 83       	std	Y+2, r25	; 0x02
    4d50:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(((num %10000)/1000) + '0') ;
    4d52:	89 81       	ldd	r24, Y+1	; 0x01
    4d54:	9a 81       	ldd	r25, Y+2	; 0x02
    4d56:	20 e1       	ldi	r18, 0x10	; 16
    4d58:	37 e2       	ldi	r19, 0x27	; 39
    4d5a:	b9 01       	movw	r22, r18
    4d5c:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    4d60:	28 ee       	ldi	r18, 0xE8	; 232
    4d62:	33 e0       	ldi	r19, 0x03	; 3
    4d64:	b9 01       	movw	r22, r18
    4d66:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    4d6a:	cb 01       	movw	r24, r22
    4d6c:	80 5d       	subi	r24, 0xD0	; 208
    4d6e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
	LCD_WriteData(((num %1000)/100) + '0') ;
    4d72:	89 81       	ldd	r24, Y+1	; 0x01
    4d74:	9a 81       	ldd	r25, Y+2	; 0x02
    4d76:	28 ee       	ldi	r18, 0xE8	; 232
    4d78:	33 e0       	ldi	r19, 0x03	; 3
    4d7a:	b9 01       	movw	r22, r18
    4d7c:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    4d80:	24 e6       	ldi	r18, 0x64	; 100
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	b9 01       	movw	r22, r18
    4d86:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    4d8a:	cb 01       	movw	r24, r22
    4d8c:	80 5d       	subi	r24, 0xD0	; 208
    4d8e:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
	LCD_WriteData(((num %100)/10) + '0') ;
    4d92:	89 81       	ldd	r24, Y+1	; 0x01
    4d94:	9a 81       	ldd	r25, Y+2	; 0x02
    4d96:	24 e6       	ldi	r18, 0x64	; 100
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	b9 01       	movw	r22, r18
    4d9c:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    4da0:	2a e0       	ldi	r18, 0x0A	; 10
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	b9 01       	movw	r22, r18
    4da6:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    4daa:	cb 01       	movw	r24, r22
    4dac:	80 5d       	subi	r24, 0xD0	; 208
    4dae:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
	LCD_WriteData(((num %10)/1) + '0') ;
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	9a 81       	ldd	r25, Y+2	; 0x02
    4db6:	2a e0       	ldi	r18, 0x0A	; 10
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	b9 01       	movw	r22, r18
    4dbc:	0e 94 2e 38 	call	0x705c	; 0x705c <__udivmodhi4>
    4dc0:	80 5d       	subi	r24, 0xD0	; 208
    4dc2:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <LCD_WriteData>
}
    4dc6:	0f 90       	pop	r0
    4dc8:	0f 90       	pop	r0
    4dca:	cf 91       	pop	r28
    4dcc:	df 91       	pop	r29
    4dce:	08 95       	ret

00004dd0 <LCD_GoTo>:
void LCD_GoTo(u8 line ,u8 x)//1
{
    4dd0:	df 93       	push	r29
    4dd2:	cf 93       	push	r28
    4dd4:	00 d0       	rcall	.+0      	; 0x4dd6 <LCD_GoTo+0x6>
    4dd6:	cd b7       	in	r28, 0x3d	; 61
    4dd8:	de b7       	in	r29, 0x3e	; 62
    4dda:	89 83       	std	Y+1, r24	; 0x01
    4ddc:	6a 83       	std	Y+2, r22	; 0x02
	if (line==0)
    4dde:	89 81       	ldd	r24, Y+1	; 0x01
    4de0:	88 23       	and	r24, r24
    4de2:	29 f4       	brne	.+10     	; 0x4dee <LCD_GoTo+0x1e>
	{
		LCD_WriteCommand(0x80+x);
    4de4:	8a 81       	ldd	r24, Y+2	; 0x02
    4de6:	80 58       	subi	r24, 0x80	; 128
    4de8:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
    4dec:	07 c0       	rjmp	.+14     	; 0x4dfc <LCD_GoTo+0x2c>

	}
	else if (line==1)
    4dee:	89 81       	ldd	r24, Y+1	; 0x01
    4df0:	81 30       	cpi	r24, 0x01	; 1
    4df2:	21 f4       	brne	.+8      	; 0x4dfc <LCD_GoTo+0x2c>
	{
		LCD_WriteCommand(0x80+0x40+x);
    4df4:	8a 81       	ldd	r24, Y+2	; 0x02
    4df6:	80 54       	subi	r24, 0x40	; 64
    4df8:	0e 94 99 1b 	call	0x3732	; 0x3732 <LCD_WriteCommand>
	}

    4dfc:	0f 90       	pop	r0
    4dfe:	0f 90       	pop	r0
    4e00:	cf 91       	pop	r28
    4e02:	df 91       	pop	r29
    4e04:	08 95       	ret

00004e06 <MOTOR_CW>:
 *  Author: EL-talkhawy
 */ 
#include "Motors.h"

void MOTOR_CW (MOTOR_type motor) 
{
    4e06:	df 93       	push	r29
    4e08:	cf 93       	push	r28
    4e0a:	00 d0       	rcall	.+0      	; 0x4e0c <MOTOR_CW+0x6>
    4e0c:	0f 92       	push	r0
    4e0e:	cd b7       	in	r28, 0x3d	; 61
    4e10:	de b7       	in	r29, 0x3e	; 62
    4e12:	89 83       	std	Y+1, r24	; 0x01
	switch(motor)
    4e14:	89 81       	ldd	r24, Y+1	; 0x01
    4e16:	28 2f       	mov	r18, r24
    4e18:	30 e0       	ldi	r19, 0x00	; 0
    4e1a:	3b 83       	std	Y+3, r19	; 0x03
    4e1c:	2a 83       	std	Y+2, r18	; 0x02
    4e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e20:	9b 81       	ldd	r25, Y+3	; 0x03
    4e22:	00 97       	sbiw	r24, 0x00	; 0
    4e24:	31 f0       	breq	.+12     	; 0x4e32 <MOTOR_CW+0x2c>
    4e26:	2a 81       	ldd	r18, Y+2	; 0x02
    4e28:	3b 81       	ldd	r19, Y+3	; 0x03
    4e2a:	21 30       	cpi	r18, 0x01	; 1
    4e2c:	31 05       	cpc	r19, r1
    4e2e:	71 f0       	breq	.+28     	; 0x4e4c <MOTOR_CW+0x46>
    4e30:	19 c0       	rjmp	.+50     	; 0x4e64 <MOTOR_CW+0x5e>
	{
		case MOTOR1 : 
		DIO_WritePIN(EN1 , HIGH) ;
    4e32:	82 e1       	ldi	r24, 0x12	; 18
    4e34:	61 e0       	ldi	r22, 0x01	; 1
    4e36:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N1 , HIGH) ;
    4e3a:	80 e1       	ldi	r24, 0x10	; 16
    4e3c:	61 e0       	ldi	r22, 0x01	; 1
    4e3e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N2 , LOW) ;
    4e42:	81 e1       	ldi	r24, 0x11	; 17
    4e44:	60 e0       	ldi	r22, 0x00	; 0
    4e46:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    4e4a:	0c c0       	rjmp	.+24     	; 0x4e64 <MOTOR_CW+0x5e>
		break ; 
		case MOTOR2 :
		DIO_WritePIN(EN2 , HIGH) ;
    4e4c:	83 e1       	ldi	r24, 0x13	; 19
    4e4e:	61 e0       	ldi	r22, 0x01	; 1
    4e50:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N3 , HIGH) ;
    4e54:	84 e1       	ldi	r24, 0x14	; 20
    4e56:	61 e0       	ldi	r22, 0x01	; 1
    4e58:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N4 , LOW) ;
    4e5c:	85 e1       	ldi	r24, 0x15	; 21
    4e5e:	60 e0       	ldi	r22, 0x00	; 0
    4e60:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		break ;
	}
}
    4e64:	0f 90       	pop	r0
    4e66:	0f 90       	pop	r0
    4e68:	0f 90       	pop	r0
    4e6a:	cf 91       	pop	r28
    4e6c:	df 91       	pop	r29
    4e6e:	08 95       	ret

00004e70 <MOTOR_CCW>:

void MOTOR_CCW (MOTOR_type motor) 
{
    4e70:	df 93       	push	r29
    4e72:	cf 93       	push	r28
    4e74:	00 d0       	rcall	.+0      	; 0x4e76 <MOTOR_CCW+0x6>
    4e76:	0f 92       	push	r0
    4e78:	cd b7       	in	r28, 0x3d	; 61
    4e7a:	de b7       	in	r29, 0x3e	; 62
    4e7c:	89 83       	std	Y+1, r24	; 0x01
	switch(motor)
    4e7e:	89 81       	ldd	r24, Y+1	; 0x01
    4e80:	28 2f       	mov	r18, r24
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	3b 83       	std	Y+3, r19	; 0x03
    4e86:	2a 83       	std	Y+2, r18	; 0x02
    4e88:	8a 81       	ldd	r24, Y+2	; 0x02
    4e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8c:	00 97       	sbiw	r24, 0x00	; 0
    4e8e:	31 f0       	breq	.+12     	; 0x4e9c <MOTOR_CCW+0x2c>
    4e90:	2a 81       	ldd	r18, Y+2	; 0x02
    4e92:	3b 81       	ldd	r19, Y+3	; 0x03
    4e94:	21 30       	cpi	r18, 0x01	; 1
    4e96:	31 05       	cpc	r19, r1
    4e98:	71 f0       	breq	.+28     	; 0x4eb6 <MOTOR_CCW+0x46>
    4e9a:	19 c0       	rjmp	.+50     	; 0x4ece <MOTOR_CCW+0x5e>
	{
		case MOTOR1 :
		DIO_WritePIN(EN1 , HIGH) ;
    4e9c:	82 e1       	ldi	r24, 0x12	; 18
    4e9e:	61 e0       	ldi	r22, 0x01	; 1
    4ea0:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N1 , LOW) ;
    4ea4:	80 e1       	ldi	r24, 0x10	; 16
    4ea6:	60 e0       	ldi	r22, 0x00	; 0
    4ea8:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N2 , HIGH) ;
    4eac:	81 e1       	ldi	r24, 0x11	; 17
    4eae:	61 e0       	ldi	r22, 0x01	; 1
    4eb0:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    4eb4:	0c c0       	rjmp	.+24     	; 0x4ece <MOTOR_CCW+0x5e>
		break ;
		case MOTOR2 :
		DIO_WritePIN(EN2 , HIGH) ;
    4eb6:	83 e1       	ldi	r24, 0x13	; 19
    4eb8:	61 e0       	ldi	r22, 0x01	; 1
    4eba:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N3 , LOW) ;
    4ebe:	84 e1       	ldi	r24, 0x14	; 20
    4ec0:	60 e0       	ldi	r22, 0x00	; 0
    4ec2:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N4 , HIGH) ;
    4ec6:	85 e1       	ldi	r24, 0x15	; 21
    4ec8:	61 e0       	ldi	r22, 0x01	; 1
    4eca:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		break ;
	}
	
}
    4ece:	0f 90       	pop	r0
    4ed0:	0f 90       	pop	r0
    4ed2:	0f 90       	pop	r0
    4ed4:	cf 91       	pop	r28
    4ed6:	df 91       	pop	r29
    4ed8:	08 95       	ret

00004eda <MOTOR_STOP>:

void MOTOR_STOP (MOTOR_type motor) 
{
    4eda:	df 93       	push	r29
    4edc:	cf 93       	push	r28
    4ede:	00 d0       	rcall	.+0      	; 0x4ee0 <MOTOR_STOP+0x6>
    4ee0:	0f 92       	push	r0
    4ee2:	cd b7       	in	r28, 0x3d	; 61
    4ee4:	de b7       	in	r29, 0x3e	; 62
    4ee6:	89 83       	std	Y+1, r24	; 0x01
	switch(motor)
    4ee8:	89 81       	ldd	r24, Y+1	; 0x01
    4eea:	28 2f       	mov	r18, r24
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	3b 83       	std	Y+3, r19	; 0x03
    4ef0:	2a 83       	std	Y+2, r18	; 0x02
    4ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	31 f0       	breq	.+12     	; 0x4f06 <MOTOR_STOP+0x2c>
    4efa:	2a 81       	ldd	r18, Y+2	; 0x02
    4efc:	3b 81       	ldd	r19, Y+3	; 0x03
    4efe:	21 30       	cpi	r18, 0x01	; 1
    4f00:	31 05       	cpc	r19, r1
    4f02:	71 f0       	breq	.+28     	; 0x4f20 <MOTOR_STOP+0x46>
    4f04:	19 c0       	rjmp	.+50     	; 0x4f38 <MOTOR_STOP+0x5e>
	{
		case MOTOR1 :
		DIO_WritePIN(EN1 , LOW) ;
    4f06:	82 e1       	ldi	r24, 0x12	; 18
    4f08:	60 e0       	ldi	r22, 0x00	; 0
    4f0a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N1 , LOW) ;
    4f0e:	80 e1       	ldi	r24, 0x10	; 16
    4f10:	60 e0       	ldi	r22, 0x00	; 0
    4f12:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N2 , LOW) ;
    4f16:	81 e1       	ldi	r24, 0x11	; 17
    4f18:	60 e0       	ldi	r22, 0x00	; 0
    4f1a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    4f1e:	0c c0       	rjmp	.+24     	; 0x4f38 <MOTOR_STOP+0x5e>
		break ;
		case MOTOR2 :
		DIO_WritePIN(EN2 ,LOW) ;
    4f20:	83 e1       	ldi	r24, 0x13	; 19
    4f22:	60 e0       	ldi	r22, 0x00	; 0
    4f24:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N3 , LOW) ;
    4f28:	84 e1       	ldi	r24, 0x14	; 20
    4f2a:	60 e0       	ldi	r22, 0x00	; 0
    4f2c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N4 , LOW) ;
    4f30:	85 e1       	ldi	r24, 0x15	; 21
    4f32:	60 e0       	ldi	r22, 0x00	; 0
    4f34:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		break ;
	}
	
}
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	0f 90       	pop	r0
    4f3e:	cf 91       	pop	r28
    4f40:	df 91       	pop	r29
    4f42:	08 95       	ret

00004f44 <STEEPER_CW>:
you can write function forward () in app using 4 motor with clock wise or use reverse 
function with counter clock wise */ 

/********************************STEPPER*****************************************/
void STEEPER_CW (void) 
{
    4f44:	df 93       	push	r29
    4f46:	cf 93       	push	r28
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	e8 97       	sbiw	r28, 0x38	; 56
    4f4e:	0f b6       	in	r0, 0x3f	; 63
    4f50:	f8 94       	cli
    4f52:	de bf       	out	0x3e, r29	; 62
    4f54:	0f be       	out	0x3f, r0	; 63
    4f56:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePIN(B1 , HIGH) ;
    4f58:	88 e1       	ldi	r24, 0x18	; 24
    4f5a:	61 e0       	ldi	r22, 0x01	; 1
    4f5c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    4f60:	89 e1       	ldi	r24, 0x19	; 25
    4f62:	60 e0       	ldi	r22, 0x00	; 0
    4f64:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    4f68:	8a e1       	ldi	r24, 0x1A	; 26
    4f6a:	60 e0       	ldi	r22, 0x00	; 0
    4f6c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    4f70:	8b e1       	ldi	r24, 0x1B	; 27
    4f72:	60 e0       	ldi	r22, 0x00	; 0
    4f74:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	a8 e4       	ldi	r26, 0x48	; 72
    4f7e:	b3 e4       	ldi	r27, 0x43	; 67
    4f80:	8d ab       	std	Y+53, r24	; 0x35
    4f82:	9e ab       	std	Y+54, r25	; 0x36
    4f84:	af ab       	std	Y+55, r26	; 0x37
    4f86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f88:	6d a9       	ldd	r22, Y+53	; 0x35
    4f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    4f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    4f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	4a ef       	ldi	r20, 0xFA	; 250
    4f96:	54 e4       	ldi	r21, 0x44	; 68
    4f98:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	cb 01       	movw	r24, r22
    4fa0:	89 ab       	std	Y+49, r24	; 0x31
    4fa2:	9a ab       	std	Y+50, r25	; 0x32
    4fa4:	ab ab       	std	Y+51, r26	; 0x33
    4fa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    4faa:	7a a9       	ldd	r23, Y+50	; 0x32
    4fac:	8b a9       	ldd	r24, Y+51	; 0x33
    4fae:	9c a9       	ldd	r25, Y+52	; 0x34
    4fb0:	20 e0       	ldi	r18, 0x00	; 0
    4fb2:	30 e0       	ldi	r19, 0x00	; 0
    4fb4:	40 e8       	ldi	r20, 0x80	; 128
    4fb6:	5f e3       	ldi	r21, 0x3F	; 63
    4fb8:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4fbc:	88 23       	and	r24, r24
    4fbe:	2c f4       	brge	.+10     	; 0x4fca <STEEPER_CW+0x86>
		__ticks = 1;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	98 ab       	std	Y+48, r25	; 0x30
    4fc6:	8f a7       	std	Y+47, r24	; 0x2f
    4fc8:	3f c0       	rjmp	.+126    	; 0x5048 <STEEPER_CW+0x104>
	else if (__tmp > 65535)
    4fca:	69 a9       	ldd	r22, Y+49	; 0x31
    4fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    4fce:	8b a9       	ldd	r24, Y+51	; 0x33
    4fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	3f ef       	ldi	r19, 0xFF	; 255
    4fd6:	4f e7       	ldi	r20, 0x7F	; 127
    4fd8:	57 e4       	ldi	r21, 0x47	; 71
    4fda:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4fde:	18 16       	cp	r1, r24
    4fe0:	4c f5       	brge	.+82     	; 0x5034 <STEEPER_CW+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fe2:	6d a9       	ldd	r22, Y+53	; 0x35
    4fe4:	7e a9       	ldd	r23, Y+54	; 0x36
    4fe6:	8f a9       	ldd	r24, Y+55	; 0x37
    4fe8:	98 ad       	ldd	r25, Y+56	; 0x38
    4fea:	20 e0       	ldi	r18, 0x00	; 0
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	40 e2       	ldi	r20, 0x20	; 32
    4ff0:	51 e4       	ldi	r21, 0x41	; 65
    4ff2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	cb 01       	movw	r24, r22
    4ffa:	bc 01       	movw	r22, r24
    4ffc:	cd 01       	movw	r24, r26
    4ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5002:	dc 01       	movw	r26, r24
    5004:	cb 01       	movw	r24, r22
    5006:	98 ab       	std	Y+48, r25	; 0x30
    5008:	8f a7       	std	Y+47, r24	; 0x2f
    500a:	0f c0       	rjmp	.+30     	; 0x502a <STEEPER_CW+0xe6>
    500c:	88 ec       	ldi	r24, 0xC8	; 200
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	9e a7       	std	Y+46, r25	; 0x2e
    5012:	8d a7       	std	Y+45, r24	; 0x2d
    5014:	8d a5       	ldd	r24, Y+45	; 0x2d
    5016:	9e a5       	ldd	r25, Y+46	; 0x2e
    5018:	01 97       	sbiw	r24, 0x01	; 1
    501a:	f1 f7       	brne	.-4      	; 0x5018 <STEEPER_CW+0xd4>
    501c:	9e a7       	std	Y+46, r25	; 0x2e
    501e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5020:	8f a5       	ldd	r24, Y+47	; 0x2f
    5022:	98 a9       	ldd	r25, Y+48	; 0x30
    5024:	01 97       	sbiw	r24, 0x01	; 1
    5026:	98 ab       	std	Y+48, r25	; 0x30
    5028:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502a:	8f a5       	ldd	r24, Y+47	; 0x2f
    502c:	98 a9       	ldd	r25, Y+48	; 0x30
    502e:	00 97       	sbiw	r24, 0x00	; 0
    5030:	69 f7       	brne	.-38     	; 0x500c <STEEPER_CW+0xc8>
    5032:	14 c0       	rjmp	.+40     	; 0x505c <STEEPER_CW+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5034:	69 a9       	ldd	r22, Y+49	; 0x31
    5036:	7a a9       	ldd	r23, Y+50	; 0x32
    5038:	8b a9       	ldd	r24, Y+51	; 0x33
    503a:	9c a9       	ldd	r25, Y+52	; 0x34
    503c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5040:	dc 01       	movw	r26, r24
    5042:	cb 01       	movw	r24, r22
    5044:	98 ab       	std	Y+48, r25	; 0x30
    5046:	8f a7       	std	Y+47, r24	; 0x2f
    5048:	8f a5       	ldd	r24, Y+47	; 0x2f
    504a:	98 a9       	ldd	r25, Y+48	; 0x30
    504c:	9c a7       	std	Y+44, r25	; 0x2c
    504e:	8b a7       	std	Y+43, r24	; 0x2b
    5050:	8b a5       	ldd	r24, Y+43	; 0x2b
    5052:	9c a5       	ldd	r25, Y+44	; 0x2c
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	f1 f7       	brne	.-4      	; 0x5054 <STEEPER_CW+0x110>
    5058:	9c a7       	std	Y+44, r25	; 0x2c
    505a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    505c:	88 e1       	ldi	r24, 0x18	; 24
    505e:	60 e0       	ldi	r22, 0x00	; 0
    5060:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 , HIGH) ;
    5064:	89 e1       	ldi	r24, 0x19	; 25
    5066:	61 e0       	ldi	r22, 0x01	; 1
    5068:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    506c:	8a e1       	ldi	r24, 0x1A	; 26
    506e:	60 e0       	ldi	r22, 0x00	; 0
    5070:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    5074:	8b e1       	ldi	r24, 0x1B	; 27
    5076:	60 e0       	ldi	r22, 0x00	; 0
    5078:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    507c:	80 e0       	ldi	r24, 0x00	; 0
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	a8 e4       	ldi	r26, 0x48	; 72
    5082:	b3 e4       	ldi	r27, 0x43	; 67
    5084:	8f a3       	std	Y+39, r24	; 0x27
    5086:	98 a7       	std	Y+40, r25	; 0x28
    5088:	a9 a7       	std	Y+41, r26	; 0x29
    508a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    508c:	6f a1       	ldd	r22, Y+39	; 0x27
    508e:	78 a5       	ldd	r23, Y+40	; 0x28
    5090:	89 a5       	ldd	r24, Y+41	; 0x29
    5092:	9a a5       	ldd	r25, Y+42	; 0x2a
    5094:	20 e0       	ldi	r18, 0x00	; 0
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	4a ef       	ldi	r20, 0xFA	; 250
    509a:	54 e4       	ldi	r21, 0x44	; 68
    509c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	8b a3       	std	Y+35, r24	; 0x23
    50a6:	9c a3       	std	Y+36, r25	; 0x24
    50a8:	ad a3       	std	Y+37, r26	; 0x25
    50aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    50ac:	6b a1       	ldd	r22, Y+35	; 0x23
    50ae:	7c a1       	ldd	r23, Y+36	; 0x24
    50b0:	8d a1       	ldd	r24, Y+37	; 0x25
    50b2:	9e a1       	ldd	r25, Y+38	; 0x26
    50b4:	20 e0       	ldi	r18, 0x00	; 0
    50b6:	30 e0       	ldi	r19, 0x00	; 0
    50b8:	40 e8       	ldi	r20, 0x80	; 128
    50ba:	5f e3       	ldi	r21, 0x3F	; 63
    50bc:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    50c0:	88 23       	and	r24, r24
    50c2:	2c f4       	brge	.+10     	; 0x50ce <STEEPER_CW+0x18a>
		__ticks = 1;
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	9a a3       	std	Y+34, r25	; 0x22
    50ca:	89 a3       	std	Y+33, r24	; 0x21
    50cc:	3f c0       	rjmp	.+126    	; 0x514c <STEEPER_CW+0x208>
	else if (__tmp > 65535)
    50ce:	6b a1       	ldd	r22, Y+35	; 0x23
    50d0:	7c a1       	ldd	r23, Y+36	; 0x24
    50d2:	8d a1       	ldd	r24, Y+37	; 0x25
    50d4:	9e a1       	ldd	r25, Y+38	; 0x26
    50d6:	20 e0       	ldi	r18, 0x00	; 0
    50d8:	3f ef       	ldi	r19, 0xFF	; 255
    50da:	4f e7       	ldi	r20, 0x7F	; 127
    50dc:	57 e4       	ldi	r21, 0x47	; 71
    50de:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    50e2:	18 16       	cp	r1, r24
    50e4:	4c f5       	brge	.+82     	; 0x5138 <STEEPER_CW+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50e6:	6f a1       	ldd	r22, Y+39	; 0x27
    50e8:	78 a5       	ldd	r23, Y+40	; 0x28
    50ea:	89 a5       	ldd	r24, Y+41	; 0x29
    50ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	40 e2       	ldi	r20, 0x20	; 32
    50f4:	51 e4       	ldi	r21, 0x41	; 65
    50f6:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    50fa:	dc 01       	movw	r26, r24
    50fc:	cb 01       	movw	r24, r22
    50fe:	bc 01       	movw	r22, r24
    5100:	cd 01       	movw	r24, r26
    5102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5106:	dc 01       	movw	r26, r24
    5108:	cb 01       	movw	r24, r22
    510a:	9a a3       	std	Y+34, r25	; 0x22
    510c:	89 a3       	std	Y+33, r24	; 0x21
    510e:	0f c0       	rjmp	.+30     	; 0x512e <STEEPER_CW+0x1ea>
    5110:	88 ec       	ldi	r24, 0xC8	; 200
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	98 a3       	std	Y+32, r25	; 0x20
    5116:	8f 8f       	std	Y+31, r24	; 0x1f
    5118:	8f 8d       	ldd	r24, Y+31	; 0x1f
    511a:	98 a1       	ldd	r25, Y+32	; 0x20
    511c:	01 97       	sbiw	r24, 0x01	; 1
    511e:	f1 f7       	brne	.-4      	; 0x511c <STEEPER_CW+0x1d8>
    5120:	98 a3       	std	Y+32, r25	; 0x20
    5122:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5124:	89 a1       	ldd	r24, Y+33	; 0x21
    5126:	9a a1       	ldd	r25, Y+34	; 0x22
    5128:	01 97       	sbiw	r24, 0x01	; 1
    512a:	9a a3       	std	Y+34, r25	; 0x22
    512c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    512e:	89 a1       	ldd	r24, Y+33	; 0x21
    5130:	9a a1       	ldd	r25, Y+34	; 0x22
    5132:	00 97       	sbiw	r24, 0x00	; 0
    5134:	69 f7       	brne	.-38     	; 0x5110 <STEEPER_CW+0x1cc>
    5136:	14 c0       	rjmp	.+40     	; 0x5160 <STEEPER_CW+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5138:	6b a1       	ldd	r22, Y+35	; 0x23
    513a:	7c a1       	ldd	r23, Y+36	; 0x24
    513c:	8d a1       	ldd	r24, Y+37	; 0x25
    513e:	9e a1       	ldd	r25, Y+38	; 0x26
    5140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	9a a3       	std	Y+34, r25	; 0x22
    514a:	89 a3       	std	Y+33, r24	; 0x21
    514c:	89 a1       	ldd	r24, Y+33	; 0x21
    514e:	9a a1       	ldd	r25, Y+34	; 0x22
    5150:	9e 8f       	std	Y+30, r25	; 0x1e
    5152:	8d 8f       	std	Y+29, r24	; 0x1d
    5154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5156:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5158:	01 97       	sbiw	r24, 0x01	; 1
    515a:	f1 f7       	brne	.-4      	; 0x5158 <STEEPER_CW+0x214>
    515c:	9e 8f       	std	Y+30, r25	; 0x1e
    515e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    5160:	88 e1       	ldi	r24, 0x18	; 24
    5162:	60 e0       	ldi	r22, 0x00	; 0
    5164:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    5168:	89 e1       	ldi	r24, 0x19	; 25
    516a:	60 e0       	ldi	r22, 0x00	; 0
    516c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 , HIGH) ;
    5170:	8a e1       	ldi	r24, 0x1A	; 26
    5172:	61 e0       	ldi	r22, 0x01	; 1
    5174:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    5178:	8b e1       	ldi	r24, 0x1B	; 27
    517a:	60 e0       	ldi	r22, 0x00	; 0
    517c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	a8 e4       	ldi	r26, 0x48	; 72
    5186:	b3 e4       	ldi	r27, 0x43	; 67
    5188:	89 8f       	std	Y+25, r24	; 0x19
    518a:	9a 8f       	std	Y+26, r25	; 0x1a
    518c:	ab 8f       	std	Y+27, r26	; 0x1b
    518e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5190:	69 8d       	ldd	r22, Y+25	; 0x19
    5192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5198:	20 e0       	ldi	r18, 0x00	; 0
    519a:	30 e0       	ldi	r19, 0x00	; 0
    519c:	4a ef       	ldi	r20, 0xFA	; 250
    519e:	54 e4       	ldi	r21, 0x44	; 68
    51a0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    51a4:	dc 01       	movw	r26, r24
    51a6:	cb 01       	movw	r24, r22
    51a8:	8d 8b       	std	Y+21, r24	; 0x15
    51aa:	9e 8b       	std	Y+22, r25	; 0x16
    51ac:	af 8b       	std	Y+23, r26	; 0x17
    51ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51b0:	6d 89       	ldd	r22, Y+21	; 0x15
    51b2:	7e 89       	ldd	r23, Y+22	; 0x16
    51b4:	8f 89       	ldd	r24, Y+23	; 0x17
    51b6:	98 8d       	ldd	r25, Y+24	; 0x18
    51b8:	20 e0       	ldi	r18, 0x00	; 0
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	40 e8       	ldi	r20, 0x80	; 128
    51be:	5f e3       	ldi	r21, 0x3F	; 63
    51c0:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    51c4:	88 23       	and	r24, r24
    51c6:	2c f4       	brge	.+10     	; 0x51d2 <STEEPER_CW+0x28e>
		__ticks = 1;
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	9c 8b       	std	Y+20, r25	; 0x14
    51ce:	8b 8b       	std	Y+19, r24	; 0x13
    51d0:	3f c0       	rjmp	.+126    	; 0x5250 <STEEPER_CW+0x30c>
	else if (__tmp > 65535)
    51d2:	6d 89       	ldd	r22, Y+21	; 0x15
    51d4:	7e 89       	ldd	r23, Y+22	; 0x16
    51d6:	8f 89       	ldd	r24, Y+23	; 0x17
    51d8:	98 8d       	ldd	r25, Y+24	; 0x18
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	3f ef       	ldi	r19, 0xFF	; 255
    51de:	4f e7       	ldi	r20, 0x7F	; 127
    51e0:	57 e4       	ldi	r21, 0x47	; 71
    51e2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    51e6:	18 16       	cp	r1, r24
    51e8:	4c f5       	brge	.+82     	; 0x523c <STEEPER_CW+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ea:	69 8d       	ldd	r22, Y+25	; 0x19
    51ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	40 e2       	ldi	r20, 0x20	; 32
    51f8:	51 e4       	ldi	r21, 0x41	; 65
    51fa:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    51fe:	dc 01       	movw	r26, r24
    5200:	cb 01       	movw	r24, r22
    5202:	bc 01       	movw	r22, r24
    5204:	cd 01       	movw	r24, r26
    5206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520a:	dc 01       	movw	r26, r24
    520c:	cb 01       	movw	r24, r22
    520e:	9c 8b       	std	Y+20, r25	; 0x14
    5210:	8b 8b       	std	Y+19, r24	; 0x13
    5212:	0f c0       	rjmp	.+30     	; 0x5232 <STEEPER_CW+0x2ee>
    5214:	88 ec       	ldi	r24, 0xC8	; 200
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	9a 8b       	std	Y+18, r25	; 0x12
    521a:	89 8b       	std	Y+17, r24	; 0x11
    521c:	89 89       	ldd	r24, Y+17	; 0x11
    521e:	9a 89       	ldd	r25, Y+18	; 0x12
    5220:	01 97       	sbiw	r24, 0x01	; 1
    5222:	f1 f7       	brne	.-4      	; 0x5220 <STEEPER_CW+0x2dc>
    5224:	9a 8b       	std	Y+18, r25	; 0x12
    5226:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5228:	8b 89       	ldd	r24, Y+19	; 0x13
    522a:	9c 89       	ldd	r25, Y+20	; 0x14
    522c:	01 97       	sbiw	r24, 0x01	; 1
    522e:	9c 8b       	std	Y+20, r25	; 0x14
    5230:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5232:	8b 89       	ldd	r24, Y+19	; 0x13
    5234:	9c 89       	ldd	r25, Y+20	; 0x14
    5236:	00 97       	sbiw	r24, 0x00	; 0
    5238:	69 f7       	brne	.-38     	; 0x5214 <STEEPER_CW+0x2d0>
    523a:	14 c0       	rjmp	.+40     	; 0x5264 <STEEPER_CW+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    523c:	6d 89       	ldd	r22, Y+21	; 0x15
    523e:	7e 89       	ldd	r23, Y+22	; 0x16
    5240:	8f 89       	ldd	r24, Y+23	; 0x17
    5242:	98 8d       	ldd	r25, Y+24	; 0x18
    5244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	9c 8b       	std	Y+20, r25	; 0x14
    524e:	8b 8b       	std	Y+19, r24	; 0x13
    5250:	8b 89       	ldd	r24, Y+19	; 0x13
    5252:	9c 89       	ldd	r25, Y+20	; 0x14
    5254:	98 8b       	std	Y+16, r25	; 0x10
    5256:	8f 87       	std	Y+15, r24	; 0x0f
    5258:	8f 85       	ldd	r24, Y+15	; 0x0f
    525a:	98 89       	ldd	r25, Y+16	; 0x10
    525c:	01 97       	sbiw	r24, 0x01	; 1
    525e:	f1 f7       	brne	.-4      	; 0x525c <STEEPER_CW+0x318>
    5260:	98 8b       	std	Y+16, r25	; 0x10
    5262:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    5264:	88 e1       	ldi	r24, 0x18	; 24
    5266:	60 e0       	ldi	r22, 0x00	; 0
    5268:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    526c:	89 e1       	ldi	r24, 0x19	; 25
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    5274:	8a e1       	ldi	r24, 0x1A	; 26
    5276:	60 e0       	ldi	r22, 0x00	; 0
    5278:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 , HIGH) ;
    527c:	8b e1       	ldi	r24, 0x1B	; 27
    527e:	61 e0       	ldi	r22, 0x01	; 1
    5280:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5284:	80 e0       	ldi	r24, 0x00	; 0
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	a8 e4       	ldi	r26, 0x48	; 72
    528a:	b3 e4       	ldi	r27, 0x43	; 67
    528c:	8b 87       	std	Y+11, r24	; 0x0b
    528e:	9c 87       	std	Y+12, r25	; 0x0c
    5290:	ad 87       	std	Y+13, r26	; 0x0d
    5292:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5294:	6b 85       	ldd	r22, Y+11	; 0x0b
    5296:	7c 85       	ldd	r23, Y+12	; 0x0c
    5298:	8d 85       	ldd	r24, Y+13	; 0x0d
    529a:	9e 85       	ldd	r25, Y+14	; 0x0e
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	4a ef       	ldi	r20, 0xFA	; 250
    52a2:	54 e4       	ldi	r21, 0x44	; 68
    52a4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22
    52ac:	8f 83       	std	Y+7, r24	; 0x07
    52ae:	98 87       	std	Y+8, r25	; 0x08
    52b0:	a9 87       	std	Y+9, r26	; 0x09
    52b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52b4:	6f 81       	ldd	r22, Y+7	; 0x07
    52b6:	78 85       	ldd	r23, Y+8	; 0x08
    52b8:	89 85       	ldd	r24, Y+9	; 0x09
    52ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	40 e8       	ldi	r20, 0x80	; 128
    52c2:	5f e3       	ldi	r21, 0x3F	; 63
    52c4:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    52c8:	88 23       	and	r24, r24
    52ca:	2c f4       	brge	.+10     	; 0x52d6 <STEEPER_CW+0x392>
		__ticks = 1;
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	9e 83       	std	Y+6, r25	; 0x06
    52d2:	8d 83       	std	Y+5, r24	; 0x05
    52d4:	3f c0       	rjmp	.+126    	; 0x5354 <STEEPER_CW+0x410>
	else if (__tmp > 65535)
    52d6:	6f 81       	ldd	r22, Y+7	; 0x07
    52d8:	78 85       	ldd	r23, Y+8	; 0x08
    52da:	89 85       	ldd	r24, Y+9	; 0x09
    52dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52de:	20 e0       	ldi	r18, 0x00	; 0
    52e0:	3f ef       	ldi	r19, 0xFF	; 255
    52e2:	4f e7       	ldi	r20, 0x7F	; 127
    52e4:	57 e4       	ldi	r21, 0x47	; 71
    52e6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    52ea:	18 16       	cp	r1, r24
    52ec:	4c f5       	brge	.+82     	; 0x5340 <STEEPER_CW+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    52f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    52f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	30 e0       	ldi	r19, 0x00	; 0
    52fa:	40 e2       	ldi	r20, 0x20	; 32
    52fc:	51 e4       	ldi	r21, 0x41	; 65
    52fe:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5302:	dc 01       	movw	r26, r24
    5304:	cb 01       	movw	r24, r22
    5306:	bc 01       	movw	r22, r24
    5308:	cd 01       	movw	r24, r26
    530a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    530e:	dc 01       	movw	r26, r24
    5310:	cb 01       	movw	r24, r22
    5312:	9e 83       	std	Y+6, r25	; 0x06
    5314:	8d 83       	std	Y+5, r24	; 0x05
    5316:	0f c0       	rjmp	.+30     	; 0x5336 <STEEPER_CW+0x3f2>
    5318:	88 ec       	ldi	r24, 0xC8	; 200
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	9c 83       	std	Y+4, r25	; 0x04
    531e:	8b 83       	std	Y+3, r24	; 0x03
    5320:	8b 81       	ldd	r24, Y+3	; 0x03
    5322:	9c 81       	ldd	r25, Y+4	; 0x04
    5324:	01 97       	sbiw	r24, 0x01	; 1
    5326:	f1 f7       	brne	.-4      	; 0x5324 <STEEPER_CW+0x3e0>
    5328:	9c 83       	std	Y+4, r25	; 0x04
    532a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532c:	8d 81       	ldd	r24, Y+5	; 0x05
    532e:	9e 81       	ldd	r25, Y+6	; 0x06
    5330:	01 97       	sbiw	r24, 0x01	; 1
    5332:	9e 83       	std	Y+6, r25	; 0x06
    5334:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5336:	8d 81       	ldd	r24, Y+5	; 0x05
    5338:	9e 81       	ldd	r25, Y+6	; 0x06
    533a:	00 97       	sbiw	r24, 0x00	; 0
    533c:	69 f7       	brne	.-38     	; 0x5318 <STEEPER_CW+0x3d4>
    533e:	14 c0       	rjmp	.+40     	; 0x5368 <STEEPER_CW+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5340:	6f 81       	ldd	r22, Y+7	; 0x07
    5342:	78 85       	ldd	r23, Y+8	; 0x08
    5344:	89 85       	ldd	r24, Y+9	; 0x09
    5346:	9a 85       	ldd	r25, Y+10	; 0x0a
    5348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534c:	dc 01       	movw	r26, r24
    534e:	cb 01       	movw	r24, r22
    5350:	9e 83       	std	Y+6, r25	; 0x06
    5352:	8d 83       	std	Y+5, r24	; 0x05
    5354:	8d 81       	ldd	r24, Y+5	; 0x05
    5356:	9e 81       	ldd	r25, Y+6	; 0x06
    5358:	9a 83       	std	Y+2, r25	; 0x02
    535a:	89 83       	std	Y+1, r24	; 0x01
    535c:	89 81       	ldd	r24, Y+1	; 0x01
    535e:	9a 81       	ldd	r25, Y+2	; 0x02
    5360:	01 97       	sbiw	r24, 0x01	; 1
    5362:	f1 f7       	brne	.-4      	; 0x5360 <STEEPER_CW+0x41c>
    5364:	9a 83       	std	Y+2, r25	; 0x02
    5366:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STEPPER_DELAY) ;
}
    5368:	e8 96       	adiw	r28, 0x38	; 56
    536a:	0f b6       	in	r0, 0x3f	; 63
    536c:	f8 94       	cli
    536e:	de bf       	out	0x3e, r29	; 62
    5370:	0f be       	out	0x3f, r0	; 63
    5372:	cd bf       	out	0x3d, r28	; 61
    5374:	cf 91       	pop	r28
    5376:	df 91       	pop	r29
    5378:	08 95       	ret

0000537a <STEEPER_CCW>:
void STEEPER_CCW (void)
{
    537a:	df 93       	push	r29
    537c:	cf 93       	push	r28
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
    5382:	e8 97       	sbiw	r28, 0x38	; 56
    5384:	0f b6       	in	r0, 0x3f	; 63
    5386:	f8 94       	cli
    5388:	de bf       	out	0x3e, r29	; 62
    538a:	0f be       	out	0x3f, r0	; 63
    538c:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePIN(B1 ,  LOW) ;
    538e:	88 e1       	ldi	r24, 0x18	; 24
    5390:	60 e0       	ldi	r22, 0x00	; 0
    5392:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    5396:	89 e1       	ldi	r24, 0x19	; 25
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    539e:	8a e1       	ldi	r24, 0x1A	; 26
    53a0:	60 e0       	ldi	r22, 0x00	; 0
    53a2:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 , HIGH) ;
    53a6:	8b e1       	ldi	r24, 0x1B	; 27
    53a8:	61 e0       	ldi	r22, 0x01	; 1
    53aa:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    53ae:	80 e0       	ldi	r24, 0x00	; 0
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	a8 e4       	ldi	r26, 0x48	; 72
    53b4:	b3 e4       	ldi	r27, 0x43	; 67
    53b6:	8d ab       	std	Y+53, r24	; 0x35
    53b8:	9e ab       	std	Y+54, r25	; 0x36
    53ba:	af ab       	std	Y+55, r26	; 0x37
    53bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53be:	6d a9       	ldd	r22, Y+53	; 0x35
    53c0:	7e a9       	ldd	r23, Y+54	; 0x36
    53c2:	8f a9       	ldd	r24, Y+55	; 0x37
    53c4:	98 ad       	ldd	r25, Y+56	; 0x38
    53c6:	20 e0       	ldi	r18, 0x00	; 0
    53c8:	30 e0       	ldi	r19, 0x00	; 0
    53ca:	4a ef       	ldi	r20, 0xFA	; 250
    53cc:	54 e4       	ldi	r21, 0x44	; 68
    53ce:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    53d2:	dc 01       	movw	r26, r24
    53d4:	cb 01       	movw	r24, r22
    53d6:	89 ab       	std	Y+49, r24	; 0x31
    53d8:	9a ab       	std	Y+50, r25	; 0x32
    53da:	ab ab       	std	Y+51, r26	; 0x33
    53dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    53de:	69 a9       	ldd	r22, Y+49	; 0x31
    53e0:	7a a9       	ldd	r23, Y+50	; 0x32
    53e2:	8b a9       	ldd	r24, Y+51	; 0x33
    53e4:	9c a9       	ldd	r25, Y+52	; 0x34
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	40 e8       	ldi	r20, 0x80	; 128
    53ec:	5f e3       	ldi	r21, 0x3F	; 63
    53ee:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    53f2:	88 23       	and	r24, r24
    53f4:	2c f4       	brge	.+10     	; 0x5400 <STEEPER_CCW+0x86>
		__ticks = 1;
    53f6:	81 e0       	ldi	r24, 0x01	; 1
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	98 ab       	std	Y+48, r25	; 0x30
    53fc:	8f a7       	std	Y+47, r24	; 0x2f
    53fe:	3f c0       	rjmp	.+126    	; 0x547e <STEEPER_CCW+0x104>
	else if (__tmp > 65535)
    5400:	69 a9       	ldd	r22, Y+49	; 0x31
    5402:	7a a9       	ldd	r23, Y+50	; 0x32
    5404:	8b a9       	ldd	r24, Y+51	; 0x33
    5406:	9c a9       	ldd	r25, Y+52	; 0x34
    5408:	20 e0       	ldi	r18, 0x00	; 0
    540a:	3f ef       	ldi	r19, 0xFF	; 255
    540c:	4f e7       	ldi	r20, 0x7F	; 127
    540e:	57 e4       	ldi	r21, 0x47	; 71
    5410:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    5414:	18 16       	cp	r1, r24
    5416:	4c f5       	brge	.+82     	; 0x546a <STEEPER_CCW+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5418:	6d a9       	ldd	r22, Y+53	; 0x35
    541a:	7e a9       	ldd	r23, Y+54	; 0x36
    541c:	8f a9       	ldd	r24, Y+55	; 0x37
    541e:	98 ad       	ldd	r25, Y+56	; 0x38
    5420:	20 e0       	ldi	r18, 0x00	; 0
    5422:	30 e0       	ldi	r19, 0x00	; 0
    5424:	40 e2       	ldi	r20, 0x20	; 32
    5426:	51 e4       	ldi	r21, 0x41	; 65
    5428:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    542c:	dc 01       	movw	r26, r24
    542e:	cb 01       	movw	r24, r22
    5430:	bc 01       	movw	r22, r24
    5432:	cd 01       	movw	r24, r26
    5434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5438:	dc 01       	movw	r26, r24
    543a:	cb 01       	movw	r24, r22
    543c:	98 ab       	std	Y+48, r25	; 0x30
    543e:	8f a7       	std	Y+47, r24	; 0x2f
    5440:	0f c0       	rjmp	.+30     	; 0x5460 <STEEPER_CCW+0xe6>
    5442:	88 ec       	ldi	r24, 0xC8	; 200
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	9e a7       	std	Y+46, r25	; 0x2e
    5448:	8d a7       	std	Y+45, r24	; 0x2d
    544a:	8d a5       	ldd	r24, Y+45	; 0x2d
    544c:	9e a5       	ldd	r25, Y+46	; 0x2e
    544e:	01 97       	sbiw	r24, 0x01	; 1
    5450:	f1 f7       	brne	.-4      	; 0x544e <STEEPER_CCW+0xd4>
    5452:	9e a7       	std	Y+46, r25	; 0x2e
    5454:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5456:	8f a5       	ldd	r24, Y+47	; 0x2f
    5458:	98 a9       	ldd	r25, Y+48	; 0x30
    545a:	01 97       	sbiw	r24, 0x01	; 1
    545c:	98 ab       	std	Y+48, r25	; 0x30
    545e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5460:	8f a5       	ldd	r24, Y+47	; 0x2f
    5462:	98 a9       	ldd	r25, Y+48	; 0x30
    5464:	00 97       	sbiw	r24, 0x00	; 0
    5466:	69 f7       	brne	.-38     	; 0x5442 <STEEPER_CCW+0xc8>
    5468:	14 c0       	rjmp	.+40     	; 0x5492 <STEEPER_CCW+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    546a:	69 a9       	ldd	r22, Y+49	; 0x31
    546c:	7a a9       	ldd	r23, Y+50	; 0x32
    546e:	8b a9       	ldd	r24, Y+51	; 0x33
    5470:	9c a9       	ldd	r25, Y+52	; 0x34
    5472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5476:	dc 01       	movw	r26, r24
    5478:	cb 01       	movw	r24, r22
    547a:	98 ab       	std	Y+48, r25	; 0x30
    547c:	8f a7       	std	Y+47, r24	; 0x2f
    547e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5480:	98 a9       	ldd	r25, Y+48	; 0x30
    5482:	9c a7       	std	Y+44, r25	; 0x2c
    5484:	8b a7       	std	Y+43, r24	; 0x2b
    5486:	8b a5       	ldd	r24, Y+43	; 0x2b
    5488:	9c a5       	ldd	r25, Y+44	; 0x2c
    548a:	01 97       	sbiw	r24, 0x01	; 1
    548c:	f1 f7       	brne	.-4      	; 0x548a <STEEPER_CCW+0x110>
    548e:	9c a7       	std	Y+44, r25	; 0x2c
    5490:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    5492:	88 e1       	ldi	r24, 0x18	; 24
    5494:	60 e0       	ldi	r22, 0x00	; 0
    5496:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    549a:	89 e1       	ldi	r24, 0x19	; 25
    549c:	60 e0       	ldi	r22, 0x00	; 0
    549e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 , HIGH) ;
    54a2:	8a e1       	ldi	r24, 0x1A	; 26
    54a4:	61 e0       	ldi	r22, 0x01	; 1
    54a6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    54aa:	8b e1       	ldi	r24, 0x1B	; 27
    54ac:	60 e0       	ldi	r22, 0x00	; 0
    54ae:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    54b2:	80 e0       	ldi	r24, 0x00	; 0
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	a8 e4       	ldi	r26, 0x48	; 72
    54b8:	b3 e4       	ldi	r27, 0x43	; 67
    54ba:	8f a3       	std	Y+39, r24	; 0x27
    54bc:	98 a7       	std	Y+40, r25	; 0x28
    54be:	a9 a7       	std	Y+41, r26	; 0x29
    54c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54c2:	6f a1       	ldd	r22, Y+39	; 0x27
    54c4:	78 a5       	ldd	r23, Y+40	; 0x28
    54c6:	89 a5       	ldd	r24, Y+41	; 0x29
    54c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    54ca:	20 e0       	ldi	r18, 0x00	; 0
    54cc:	30 e0       	ldi	r19, 0x00	; 0
    54ce:	4a ef       	ldi	r20, 0xFA	; 250
    54d0:	54 e4       	ldi	r21, 0x44	; 68
    54d2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    54d6:	dc 01       	movw	r26, r24
    54d8:	cb 01       	movw	r24, r22
    54da:	8b a3       	std	Y+35, r24	; 0x23
    54dc:	9c a3       	std	Y+36, r25	; 0x24
    54de:	ad a3       	std	Y+37, r26	; 0x25
    54e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54e2:	6b a1       	ldd	r22, Y+35	; 0x23
    54e4:	7c a1       	ldd	r23, Y+36	; 0x24
    54e6:	8d a1       	ldd	r24, Y+37	; 0x25
    54e8:	9e a1       	ldd	r25, Y+38	; 0x26
    54ea:	20 e0       	ldi	r18, 0x00	; 0
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	40 e8       	ldi	r20, 0x80	; 128
    54f0:	5f e3       	ldi	r21, 0x3F	; 63
    54f2:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    54f6:	88 23       	and	r24, r24
    54f8:	2c f4       	brge	.+10     	; 0x5504 <STEEPER_CCW+0x18a>
		__ticks = 1;
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	9a a3       	std	Y+34, r25	; 0x22
    5500:	89 a3       	std	Y+33, r24	; 0x21
    5502:	3f c0       	rjmp	.+126    	; 0x5582 <STEEPER_CCW+0x208>
	else if (__tmp > 65535)
    5504:	6b a1       	ldd	r22, Y+35	; 0x23
    5506:	7c a1       	ldd	r23, Y+36	; 0x24
    5508:	8d a1       	ldd	r24, Y+37	; 0x25
    550a:	9e a1       	ldd	r25, Y+38	; 0x26
    550c:	20 e0       	ldi	r18, 0x00	; 0
    550e:	3f ef       	ldi	r19, 0xFF	; 255
    5510:	4f e7       	ldi	r20, 0x7F	; 127
    5512:	57 e4       	ldi	r21, 0x47	; 71
    5514:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    5518:	18 16       	cp	r1, r24
    551a:	4c f5       	brge	.+82     	; 0x556e <STEEPER_CCW+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    551c:	6f a1       	ldd	r22, Y+39	; 0x27
    551e:	78 a5       	ldd	r23, Y+40	; 0x28
    5520:	89 a5       	ldd	r24, Y+41	; 0x29
    5522:	9a a5       	ldd	r25, Y+42	; 0x2a
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	40 e2       	ldi	r20, 0x20	; 32
    552a:	51 e4       	ldi	r21, 0x41	; 65
    552c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	bc 01       	movw	r22, r24
    5536:	cd 01       	movw	r24, r26
    5538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    553c:	dc 01       	movw	r26, r24
    553e:	cb 01       	movw	r24, r22
    5540:	9a a3       	std	Y+34, r25	; 0x22
    5542:	89 a3       	std	Y+33, r24	; 0x21
    5544:	0f c0       	rjmp	.+30     	; 0x5564 <STEEPER_CCW+0x1ea>
    5546:	88 ec       	ldi	r24, 0xC8	; 200
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	98 a3       	std	Y+32, r25	; 0x20
    554c:	8f 8f       	std	Y+31, r24	; 0x1f
    554e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5550:	98 a1       	ldd	r25, Y+32	; 0x20
    5552:	01 97       	sbiw	r24, 0x01	; 1
    5554:	f1 f7       	brne	.-4      	; 0x5552 <STEEPER_CCW+0x1d8>
    5556:	98 a3       	std	Y+32, r25	; 0x20
    5558:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    555a:	89 a1       	ldd	r24, Y+33	; 0x21
    555c:	9a a1       	ldd	r25, Y+34	; 0x22
    555e:	01 97       	sbiw	r24, 0x01	; 1
    5560:	9a a3       	std	Y+34, r25	; 0x22
    5562:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5564:	89 a1       	ldd	r24, Y+33	; 0x21
    5566:	9a a1       	ldd	r25, Y+34	; 0x22
    5568:	00 97       	sbiw	r24, 0x00	; 0
    556a:	69 f7       	brne	.-38     	; 0x5546 <STEEPER_CCW+0x1cc>
    556c:	14 c0       	rjmp	.+40     	; 0x5596 <STEEPER_CCW+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    556e:	6b a1       	ldd	r22, Y+35	; 0x23
    5570:	7c a1       	ldd	r23, Y+36	; 0x24
    5572:	8d a1       	ldd	r24, Y+37	; 0x25
    5574:	9e a1       	ldd	r25, Y+38	; 0x26
    5576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    557a:	dc 01       	movw	r26, r24
    557c:	cb 01       	movw	r24, r22
    557e:	9a a3       	std	Y+34, r25	; 0x22
    5580:	89 a3       	std	Y+33, r24	; 0x21
    5582:	89 a1       	ldd	r24, Y+33	; 0x21
    5584:	9a a1       	ldd	r25, Y+34	; 0x22
    5586:	9e 8f       	std	Y+30, r25	; 0x1e
    5588:	8d 8f       	std	Y+29, r24	; 0x1d
    558a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    558c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    558e:	01 97       	sbiw	r24, 0x01	; 1
    5590:	f1 f7       	brne	.-4      	; 0x558e <STEEPER_CCW+0x214>
    5592:	9e 8f       	std	Y+30, r25	; 0x1e
    5594:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    5596:	88 e1       	ldi	r24, 0x18	; 24
    5598:	60 e0       	ldi	r22, 0x00	; 0
    559a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 , HIGH) ;
    559e:	89 e1       	ldi	r24, 0x19	; 25
    55a0:	61 e0       	ldi	r22, 0x01	; 1
    55a2:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    55a6:	8a e1       	ldi	r24, 0x1A	; 26
    55a8:	60 e0       	ldi	r22, 0x00	; 0
    55aa:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    55ae:	8b e1       	ldi	r24, 0x1B	; 27
    55b0:	60 e0       	ldi	r22, 0x00	; 0
    55b2:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    55b6:	80 e0       	ldi	r24, 0x00	; 0
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	a8 e4       	ldi	r26, 0x48	; 72
    55bc:	b3 e4       	ldi	r27, 0x43	; 67
    55be:	89 8f       	std	Y+25, r24	; 0x19
    55c0:	9a 8f       	std	Y+26, r25	; 0x1a
    55c2:	ab 8f       	std	Y+27, r26	; 0x1b
    55c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55c6:	69 8d       	ldd	r22, Y+25	; 0x19
    55c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55ce:	20 e0       	ldi	r18, 0x00	; 0
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	4a ef       	ldi	r20, 0xFA	; 250
    55d4:	54 e4       	ldi	r21, 0x44	; 68
    55d6:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    55da:	dc 01       	movw	r26, r24
    55dc:	cb 01       	movw	r24, r22
    55de:	8d 8b       	std	Y+21, r24	; 0x15
    55e0:	9e 8b       	std	Y+22, r25	; 0x16
    55e2:	af 8b       	std	Y+23, r26	; 0x17
    55e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55e6:	6d 89       	ldd	r22, Y+21	; 0x15
    55e8:	7e 89       	ldd	r23, Y+22	; 0x16
    55ea:	8f 89       	ldd	r24, Y+23	; 0x17
    55ec:	98 8d       	ldd	r25, Y+24	; 0x18
    55ee:	20 e0       	ldi	r18, 0x00	; 0
    55f0:	30 e0       	ldi	r19, 0x00	; 0
    55f2:	40 e8       	ldi	r20, 0x80	; 128
    55f4:	5f e3       	ldi	r21, 0x3F	; 63
    55f6:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    55fa:	88 23       	and	r24, r24
    55fc:	2c f4       	brge	.+10     	; 0x5608 <STEEPER_CCW+0x28e>
		__ticks = 1;
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	9c 8b       	std	Y+20, r25	; 0x14
    5604:	8b 8b       	std	Y+19, r24	; 0x13
    5606:	3f c0       	rjmp	.+126    	; 0x5686 <STEEPER_CCW+0x30c>
	else if (__tmp > 65535)
    5608:	6d 89       	ldd	r22, Y+21	; 0x15
    560a:	7e 89       	ldd	r23, Y+22	; 0x16
    560c:	8f 89       	ldd	r24, Y+23	; 0x17
    560e:	98 8d       	ldd	r25, Y+24	; 0x18
    5610:	20 e0       	ldi	r18, 0x00	; 0
    5612:	3f ef       	ldi	r19, 0xFF	; 255
    5614:	4f e7       	ldi	r20, 0x7F	; 127
    5616:	57 e4       	ldi	r21, 0x47	; 71
    5618:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    561c:	18 16       	cp	r1, r24
    561e:	4c f5       	brge	.+82     	; 0x5672 <STEEPER_CCW+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5620:	69 8d       	ldd	r22, Y+25	; 0x19
    5622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	40 e2       	ldi	r20, 0x20	; 32
    562e:	51 e4       	ldi	r21, 0x41	; 65
    5630:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	bc 01       	movw	r22, r24
    563a:	cd 01       	movw	r24, r26
    563c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5640:	dc 01       	movw	r26, r24
    5642:	cb 01       	movw	r24, r22
    5644:	9c 8b       	std	Y+20, r25	; 0x14
    5646:	8b 8b       	std	Y+19, r24	; 0x13
    5648:	0f c0       	rjmp	.+30     	; 0x5668 <STEEPER_CCW+0x2ee>
    564a:	88 ec       	ldi	r24, 0xC8	; 200
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	9a 8b       	std	Y+18, r25	; 0x12
    5650:	89 8b       	std	Y+17, r24	; 0x11
    5652:	89 89       	ldd	r24, Y+17	; 0x11
    5654:	9a 89       	ldd	r25, Y+18	; 0x12
    5656:	01 97       	sbiw	r24, 0x01	; 1
    5658:	f1 f7       	brne	.-4      	; 0x5656 <STEEPER_CCW+0x2dc>
    565a:	9a 8b       	std	Y+18, r25	; 0x12
    565c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    565e:	8b 89       	ldd	r24, Y+19	; 0x13
    5660:	9c 89       	ldd	r25, Y+20	; 0x14
    5662:	01 97       	sbiw	r24, 0x01	; 1
    5664:	9c 8b       	std	Y+20, r25	; 0x14
    5666:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5668:	8b 89       	ldd	r24, Y+19	; 0x13
    566a:	9c 89       	ldd	r25, Y+20	; 0x14
    566c:	00 97       	sbiw	r24, 0x00	; 0
    566e:	69 f7       	brne	.-38     	; 0x564a <STEEPER_CCW+0x2d0>
    5670:	14 c0       	rjmp	.+40     	; 0x569a <STEEPER_CCW+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5672:	6d 89       	ldd	r22, Y+21	; 0x15
    5674:	7e 89       	ldd	r23, Y+22	; 0x16
    5676:	8f 89       	ldd	r24, Y+23	; 0x17
    5678:	98 8d       	ldd	r25, Y+24	; 0x18
    567a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    567e:	dc 01       	movw	r26, r24
    5680:	cb 01       	movw	r24, r22
    5682:	9c 8b       	std	Y+20, r25	; 0x14
    5684:	8b 8b       	std	Y+19, r24	; 0x13
    5686:	8b 89       	ldd	r24, Y+19	; 0x13
    5688:	9c 89       	ldd	r25, Y+20	; 0x14
    568a:	98 8b       	std	Y+16, r25	; 0x10
    568c:	8f 87       	std	Y+15, r24	; 0x0f
    568e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5690:	98 89       	ldd	r25, Y+16	; 0x10
    5692:	01 97       	sbiw	r24, 0x01	; 1
    5694:	f1 f7       	brne	.-4      	; 0x5692 <STEEPER_CCW+0x318>
    5696:	98 8b       	std	Y+16, r25	; 0x10
    5698:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  HIGH) ;
    569a:	88 e1       	ldi	r24, 0x18	; 24
    569c:	61 e0       	ldi	r22, 0x01	; 1
    569e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    56a2:	89 e1       	ldi	r24, 0x19	; 25
    56a4:	60 e0       	ldi	r22, 0x00	; 0
    56a6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    56aa:	8a e1       	ldi	r24, 0x1A	; 26
    56ac:	60 e0       	ldi	r22, 0x00	; 0
    56ae:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    56b2:	8b e1       	ldi	r24, 0x1B	; 27
    56b4:	60 e0       	ldi	r22, 0x00	; 0
    56b6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    56ba:	80 e0       	ldi	r24, 0x00	; 0
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	a8 e4       	ldi	r26, 0x48	; 72
    56c0:	b3 e4       	ldi	r27, 0x43	; 67
    56c2:	8b 87       	std	Y+11, r24	; 0x0b
    56c4:	9c 87       	std	Y+12, r25	; 0x0c
    56c6:	ad 87       	std	Y+13, r26	; 0x0d
    56c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    56cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    56ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    56d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    56d2:	20 e0       	ldi	r18, 0x00	; 0
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	4a ef       	ldi	r20, 0xFA	; 250
    56d8:	54 e4       	ldi	r21, 0x44	; 68
    56da:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    56de:	dc 01       	movw	r26, r24
    56e0:	cb 01       	movw	r24, r22
    56e2:	8f 83       	std	Y+7, r24	; 0x07
    56e4:	98 87       	std	Y+8, r25	; 0x08
    56e6:	a9 87       	std	Y+9, r26	; 0x09
    56e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56ea:	6f 81       	ldd	r22, Y+7	; 0x07
    56ec:	78 85       	ldd	r23, Y+8	; 0x08
    56ee:	89 85       	ldd	r24, Y+9	; 0x09
    56f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	30 e0       	ldi	r19, 0x00	; 0
    56f6:	40 e8       	ldi	r20, 0x80	; 128
    56f8:	5f e3       	ldi	r21, 0x3F	; 63
    56fa:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    56fe:	88 23       	and	r24, r24
    5700:	2c f4       	brge	.+10     	; 0x570c <STEEPER_CCW+0x392>
		__ticks = 1;
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	9e 83       	std	Y+6, r25	; 0x06
    5708:	8d 83       	std	Y+5, r24	; 0x05
    570a:	3f c0       	rjmp	.+126    	; 0x578a <STEEPER_CCW+0x410>
	else if (__tmp > 65535)
    570c:	6f 81       	ldd	r22, Y+7	; 0x07
    570e:	78 85       	ldd	r23, Y+8	; 0x08
    5710:	89 85       	ldd	r24, Y+9	; 0x09
    5712:	9a 85       	ldd	r25, Y+10	; 0x0a
    5714:	20 e0       	ldi	r18, 0x00	; 0
    5716:	3f ef       	ldi	r19, 0xFF	; 255
    5718:	4f e7       	ldi	r20, 0x7F	; 127
    571a:	57 e4       	ldi	r21, 0x47	; 71
    571c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    5720:	18 16       	cp	r1, r24
    5722:	4c f5       	brge	.+82     	; 0x5776 <STEEPER_CCW+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5724:	6b 85       	ldd	r22, Y+11	; 0x0b
    5726:	7c 85       	ldd	r23, Y+12	; 0x0c
    5728:	8d 85       	ldd	r24, Y+13	; 0x0d
    572a:	9e 85       	ldd	r25, Y+14	; 0x0e
    572c:	20 e0       	ldi	r18, 0x00	; 0
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	40 e2       	ldi	r20, 0x20	; 32
    5732:	51 e4       	ldi	r21, 0x41	; 65
    5734:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	bc 01       	movw	r22, r24
    573e:	cd 01       	movw	r24, r26
    5740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5744:	dc 01       	movw	r26, r24
    5746:	cb 01       	movw	r24, r22
    5748:	9e 83       	std	Y+6, r25	; 0x06
    574a:	8d 83       	std	Y+5, r24	; 0x05
    574c:	0f c0       	rjmp	.+30     	; 0x576c <STEEPER_CCW+0x3f2>
    574e:	88 ec       	ldi	r24, 0xC8	; 200
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	9c 83       	std	Y+4, r25	; 0x04
    5754:	8b 83       	std	Y+3, r24	; 0x03
    5756:	8b 81       	ldd	r24, Y+3	; 0x03
    5758:	9c 81       	ldd	r25, Y+4	; 0x04
    575a:	01 97       	sbiw	r24, 0x01	; 1
    575c:	f1 f7       	brne	.-4      	; 0x575a <STEEPER_CCW+0x3e0>
    575e:	9c 83       	std	Y+4, r25	; 0x04
    5760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5762:	8d 81       	ldd	r24, Y+5	; 0x05
    5764:	9e 81       	ldd	r25, Y+6	; 0x06
    5766:	01 97       	sbiw	r24, 0x01	; 1
    5768:	9e 83       	std	Y+6, r25	; 0x06
    576a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    576c:	8d 81       	ldd	r24, Y+5	; 0x05
    576e:	9e 81       	ldd	r25, Y+6	; 0x06
    5770:	00 97       	sbiw	r24, 0x00	; 0
    5772:	69 f7       	brne	.-38     	; 0x574e <STEEPER_CCW+0x3d4>
    5774:	14 c0       	rjmp	.+40     	; 0x579e <STEEPER_CCW+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5776:	6f 81       	ldd	r22, Y+7	; 0x07
    5778:	78 85       	ldd	r23, Y+8	; 0x08
    577a:	89 85       	ldd	r24, Y+9	; 0x09
    577c:	9a 85       	ldd	r25, Y+10	; 0x0a
    577e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5782:	dc 01       	movw	r26, r24
    5784:	cb 01       	movw	r24, r22
    5786:	9e 83       	std	Y+6, r25	; 0x06
    5788:	8d 83       	std	Y+5, r24	; 0x05
    578a:	8d 81       	ldd	r24, Y+5	; 0x05
    578c:	9e 81       	ldd	r25, Y+6	; 0x06
    578e:	9a 83       	std	Y+2, r25	; 0x02
    5790:	89 83       	std	Y+1, r24	; 0x01
    5792:	89 81       	ldd	r24, Y+1	; 0x01
    5794:	9a 81       	ldd	r25, Y+2	; 0x02
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	f1 f7       	brne	.-4      	; 0x5796 <STEEPER_CCW+0x41c>
    579a:	9a 83       	std	Y+2, r25	; 0x02
    579c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STEPPER_DELAY) ;
}
    579e:	e8 96       	adiw	r28, 0x38	; 56
    57a0:	0f b6       	in	r0, 0x3f	; 63
    57a2:	f8 94       	cli
    57a4:	de bf       	out	0x3e, r29	; 62
    57a6:	0f be       	out	0x3f, r0	; 63
    57a8:	cd bf       	out	0x3d, r28	; 61
    57aa:	cf 91       	pop	r28
    57ac:	df 91       	pop	r29
    57ae:	08 95       	ret

000057b0 <SPI_MasterInit>:
#include "SPI.h"

static void(*SPI_STC_Fptr)(void)=NULLPTR;

void SPI_MasterInit() 
{
    57b0:	df 93       	push	r29
    57b2:	cf 93       	push	r28
    57b4:	cd b7       	in	r28, 0x3d	; 61
    57b6:	de b7       	in	r29, 0x3e	; 62
	/*** MSB **/ 
	CLEAR_BIT(SPCR,DORD) ;
    57b8:	ad e2       	ldi	r26, 0x2D	; 45
    57ba:	b0 e0       	ldi	r27, 0x00	; 0
    57bc:	ed e2       	ldi	r30, 0x2D	; 45
    57be:	f0 e0       	ldi	r31, 0x00	; 0
    57c0:	80 81       	ld	r24, Z
    57c2:	8f 7d       	andi	r24, 0xDF	; 223
    57c4:	8c 93       	st	X, r24
	/* master is set */
	SET_BIT(SPCR,MSTR) ;
    57c6:	ad e2       	ldi	r26, 0x2D	; 45
    57c8:	b0 e0       	ldi	r27, 0x00	; 0
    57ca:	ed e2       	ldi	r30, 0x2D	; 45
    57cc:	f0 e0       	ldi	r31, 0x00	; 0
    57ce:	80 81       	ld	r24, Z
    57d0:	80 61       	ori	r24, 0x10	; 16
    57d2:	8c 93       	st	X, r24
	/* clk idle ow | leading edge is rising */
	CLEAR_BIT(SPCR,CPOL) ;
    57d4:	ad e2       	ldi	r26, 0x2D	; 45
    57d6:	b0 e0       	ldi	r27, 0x00	; 0
    57d8:	ed e2       	ldi	r30, 0x2D	; 45
    57da:	f0 e0       	ldi	r31, 0x00	; 0
    57dc:	80 81       	ld	r24, Z
    57de:	87 7f       	andi	r24, 0xF7	; 247
    57e0:	8c 93       	st	X, r24
	/* sample at leading */ 
	CLEAR_BIT(SPCR,CPHA) ;
    57e2:	ad e2       	ldi	r26, 0x2D	; 45
    57e4:	b0 e0       	ldi	r27, 0x00	; 0
    57e6:	ed e2       	ldi	r30, 0x2D	; 45
    57e8:	f0 e0       	ldi	r31, 0x00	; 0
    57ea:	80 81       	ld	r24, Z
    57ec:	8b 7f       	andi	r24, 0xFB	; 251
    57ee:	8c 93       	st	X, r24
	/* clk fosc /16 */
	SET_BIT(SPCR,SPR0) ;
    57f0:	ad e2       	ldi	r26, 0x2D	; 45
    57f2:	b0 e0       	ldi	r27, 0x00	; 0
    57f4:	ed e2       	ldi	r30, 0x2D	; 45
    57f6:	f0 e0       	ldi	r31, 0x00	; 0
    57f8:	80 81       	ld	r24, Z
    57fa:	81 60       	ori	r24, 0x01	; 1
    57fc:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPR1) ;
    57fe:	ad e2       	ldi	r26, 0x2D	; 45
    5800:	b0 e0       	ldi	r27, 0x00	; 0
    5802:	ed e2       	ldi	r30, 0x2D	; 45
    5804:	f0 e0       	ldi	r31, 0x00	; 0
    5806:	80 81       	ld	r24, Z
    5808:	8d 7f       	andi	r24, 0xFD	; 253
    580a:	8c 93       	st	X, r24
	CLEAR_BIT(SPSR,SPI2X) ;
    580c:	ae e2       	ldi	r26, 0x2E	; 46
    580e:	b0 e0       	ldi	r27, 0x00	; 0
    5810:	ee e2       	ldi	r30, 0x2E	; 46
    5812:	f0 e0       	ldi	r31, 0x00	; 0
    5814:	80 81       	ld	r24, Z
    5816:	8e 7f       	andi	r24, 0xFE	; 254
    5818:	8c 93       	st	X, r24
	/** SPI ENABLE **/
	SET_BIT(SPCR,SPE) ;
    581a:	ad e2       	ldi	r26, 0x2D	; 45
    581c:	b0 e0       	ldi	r27, 0x00	; 0
    581e:	ed e2       	ldi	r30, 0x2D	; 45
    5820:	f0 e0       	ldi	r31, 0x00	; 0
    5822:	80 81       	ld	r24, Z
    5824:	80 64       	ori	r24, 0x40	; 64
    5826:	8c 93       	st	X, r24
}
    5828:	cf 91       	pop	r28
    582a:	df 91       	pop	r29
    582c:	08 95       	ret

0000582e <SPI_SalveInit>:
void SPI_SalveInit() 
{
    582e:	df 93       	push	r29
    5830:	cf 93       	push	r28
    5832:	cd b7       	in	r28, 0x3d	; 61
    5834:	de b7       	in	r29, 0x3e	; 62
	/*** MSB **/
	CLEAR_BIT(SPCR,DORD) ;
    5836:	ad e2       	ldi	r26, 0x2D	; 45
    5838:	b0 e0       	ldi	r27, 0x00	; 0
    583a:	ed e2       	ldi	r30, 0x2D	; 45
    583c:	f0 e0       	ldi	r31, 0x00	; 0
    583e:	80 81       	ld	r24, Z
    5840:	8f 7d       	andi	r24, 0xDF	; 223
    5842:	8c 93       	st	X, r24
	/* salve is set */
	CLEAR_BIT(SPCR,MSTR) ;
    5844:	ad e2       	ldi	r26, 0x2D	; 45
    5846:	b0 e0       	ldi	r27, 0x00	; 0
    5848:	ed e2       	ldi	r30, 0x2D	; 45
    584a:	f0 e0       	ldi	r31, 0x00	; 0
    584c:	80 81       	ld	r24, Z
    584e:	8f 7e       	andi	r24, 0xEF	; 239
    5850:	8c 93       	st	X, r24
	/* clk idle ow | leading edge is rising */
	CLEAR_BIT(SPCR,CPOL) ;
    5852:	ad e2       	ldi	r26, 0x2D	; 45
    5854:	b0 e0       	ldi	r27, 0x00	; 0
    5856:	ed e2       	ldi	r30, 0x2D	; 45
    5858:	f0 e0       	ldi	r31, 0x00	; 0
    585a:	80 81       	ld	r24, Z
    585c:	87 7f       	andi	r24, 0xF7	; 247
    585e:	8c 93       	st	X, r24
	/* sample at leading */
	CLEAR_BIT(SPCR,CPHA) ;
    5860:	ad e2       	ldi	r26, 0x2D	; 45
    5862:	b0 e0       	ldi	r27, 0x00	; 0
    5864:	ed e2       	ldi	r30, 0x2D	; 45
    5866:	f0 e0       	ldi	r31, 0x00	; 0
    5868:	80 81       	ld	r24, Z
    586a:	8b 7f       	andi	r24, 0xFB	; 251
    586c:	8c 93       	st	X, r24
	/** SPI ENABLE **/
	SET_BIT(SPCR,SPE) ;
    586e:	ad e2       	ldi	r26, 0x2D	; 45
    5870:	b0 e0       	ldi	r27, 0x00	; 0
    5872:	ed e2       	ldi	r30, 0x2D	; 45
    5874:	f0 e0       	ldi	r31, 0x00	; 0
    5876:	80 81       	ld	r24, Z
    5878:	80 64       	ori	r24, 0x40	; 64
    587a:	8c 93       	st	X, r24
	
}
    587c:	cf 91       	pop	r28
    587e:	df 91       	pop	r29
    5880:	08 95       	ret

00005882 <SPI_Transfer>:
u8 SPI_Transfer (u8 data) 
{
    5882:	df 93       	push	r29
    5884:	cf 93       	push	r28
    5886:	0f 92       	push	r0
    5888:	cd b7       	in	r28, 0x3d	; 61
    588a:	de b7       	in	r29, 0x3e	; 62
    588c:	89 83       	std	Y+1, r24	; 0x01
	/* send data */
	SPDR = data ; 
    588e:	ef e2       	ldi	r30, 0x2F	; 47
    5890:	f0 e0       	ldi	r31, 0x00	; 0
    5892:	89 81       	ldd	r24, Y+1	; 0x01
    5894:	80 83       	st	Z, r24
	while(!READ_BIT(SPSR,SPIF)) ; 
    5896:	ee e2       	ldi	r30, 0x2E	; 46
    5898:	f0 e0       	ldi	r31, 0x00	; 0
    589a:	80 81       	ld	r24, Z
    589c:	88 23       	and	r24, r24
    589e:	dc f7       	brge	.-10     	; 0x5896 <SPI_Transfer+0x14>
	return SPDR ;
    58a0:	ef e2       	ldi	r30, 0x2F	; 47
    58a2:	f0 e0       	ldi	r31, 0x00	; 0
    58a4:	80 81       	ld	r24, Z
}
    58a6:	0f 90       	pop	r0
    58a8:	cf 91       	pop	r28
    58aa:	df 91       	pop	r29
    58ac:	08 95       	ret

000058ae <SPI_Send>:
void SPI_Send (u8 data)
{
    58ae:	df 93       	push	r29
    58b0:	cf 93       	push	r28
    58b2:	0f 92       	push	r0
    58b4:	cd b7       	in	r28, 0x3d	; 61
    58b6:	de b7       	in	r29, 0x3e	; 62
    58b8:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data ;
    58ba:	ef e2       	ldi	r30, 0x2F	; 47
    58bc:	f0 e0       	ldi	r31, 0x00	; 0
    58be:	89 81       	ldd	r24, Y+1	; 0x01
    58c0:	80 83       	st	Z, r24
	while(!READ_BIT(SPSR,SPIF)) ;
    58c2:	ee e2       	ldi	r30, 0x2E	; 46
    58c4:	f0 e0       	ldi	r31, 0x00	; 0
    58c6:	80 81       	ld	r24, Z
    58c8:	88 23       	and	r24, r24
    58ca:	dc f7       	brge	.-10     	; 0x58c2 <SPI_Send+0x14>
}
    58cc:	0f 90       	pop	r0
    58ce:	cf 91       	pop	r28
    58d0:	df 91       	pop	r29
    58d2:	08 95       	ret

000058d4 <SPI_Receive>:
u8 SPI_Receive(void)
{
    58d4:	df 93       	push	r29
    58d6:	cf 93       	push	r28
    58d8:	cd b7       	in	r28, 0x3d	; 61
    58da:	de b7       	in	r29, 0x3e	; 62
	while(!READ_BIT(SPSR,SPIF)) ;
    58dc:	ee e2       	ldi	r30, 0x2E	; 46
    58de:	f0 e0       	ldi	r31, 0x00	; 0
    58e0:	80 81       	ld	r24, Z
    58e2:	88 23       	and	r24, r24
    58e4:	dc f7       	brge	.-10     	; 0x58dc <SPI_Receive+0x8>
	return SPDR ; 
    58e6:	ef e2       	ldi	r30, 0x2F	; 47
    58e8:	f0 e0       	ldi	r31, 0x00	; 0
    58ea:	80 81       	ld	r24, Z
}
    58ec:	cf 91       	pop	r28
    58ee:	df 91       	pop	r29
    58f0:	08 95       	ret

000058f2 <SPI_SendString>:
void SPI_SendString(u8* str)
{
    58f2:	df 93       	push	r29
    58f4:	cf 93       	push	r28
    58f6:	00 d0       	rcall	.+0      	; 0x58f8 <SPI_SendString+0x6>
    58f8:	0f 92       	push	r0
    58fa:	cd b7       	in	r28, 0x3d	; 61
    58fc:	de b7       	in	r29, 0x3e	; 62
    58fe:	9b 83       	std	Y+3, r25	; 0x03
    5900:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ; 
	for(i= 0 ; str[i] ; ++i)
    5902:	19 82       	std	Y+1, r1	; 0x01
    5904:	0e c0       	rjmp	.+28     	; 0x5922 <SPI_SendString+0x30>
	{
		SPI_Send(str[i]) ;
    5906:	89 81       	ldd	r24, Y+1	; 0x01
    5908:	28 2f       	mov	r18, r24
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	8a 81       	ldd	r24, Y+2	; 0x02
    590e:	9b 81       	ldd	r25, Y+3	; 0x03
    5910:	fc 01       	movw	r30, r24
    5912:	e2 0f       	add	r30, r18
    5914:	f3 1f       	adc	r31, r19
    5916:	80 81       	ld	r24, Z
    5918:	0e 94 57 2c 	call	0x58ae	; 0x58ae <SPI_Send>
	return SPDR ; 
}
void SPI_SendString(u8* str)
{
	u8 i ; 
	for(i= 0 ; str[i] ; ++i)
    591c:	89 81       	ldd	r24, Y+1	; 0x01
    591e:	8f 5f       	subi	r24, 0xFF	; 255
    5920:	89 83       	std	Y+1, r24	; 0x01
    5922:	89 81       	ldd	r24, Y+1	; 0x01
    5924:	28 2f       	mov	r18, r24
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	8a 81       	ldd	r24, Y+2	; 0x02
    592a:	9b 81       	ldd	r25, Y+3	; 0x03
    592c:	fc 01       	movw	r30, r24
    592e:	e2 0f       	add	r30, r18
    5930:	f3 1f       	adc	r31, r19
    5932:	80 81       	ld	r24, Z
    5934:	88 23       	and	r24, r24
    5936:	39 f7       	brne	.-50     	; 0x5906 <SPI_SendString+0x14>
	{
		SPI_Send(str[i]) ;
	}
	SPI_Send(13) ;
    5938:	8d e0       	ldi	r24, 0x0D	; 13
    593a:	0e 94 57 2c 	call	0x58ae	; 0x58ae <SPI_Send>
	
}
    593e:	0f 90       	pop	r0
    5940:	0f 90       	pop	r0
    5942:	0f 90       	pop	r0
    5944:	cf 91       	pop	r28
    5946:	df 91       	pop	r29
    5948:	08 95       	ret

0000594a <SPI_ReceiveString>:
void SPI_ReceiveString(u8* str)
{
    594a:	0f 93       	push	r16
    594c:	1f 93       	push	r17
    594e:	df 93       	push	r29
    5950:	cf 93       	push	r28
    5952:	00 d0       	rcall	.+0      	; 0x5954 <SPI_ReceiveString+0xa>
    5954:	0f 92       	push	r0
    5956:	cd b7       	in	r28, 0x3d	; 61
    5958:	de b7       	in	r29, 0x3e	; 62
    595a:	9b 83       	std	Y+3, r25	; 0x03
    595c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ; 
    595e:	19 82       	std	Y+1, r1	; 0x01
	str[i] = SPI_Receive() ;
    5960:	89 81       	ldd	r24, Y+1	; 0x01
    5962:	28 2f       	mov	r18, r24
    5964:	30 e0       	ldi	r19, 0x00	; 0
    5966:	8a 81       	ldd	r24, Y+2	; 0x02
    5968:	9b 81       	ldd	r25, Y+3	; 0x03
    596a:	8c 01       	movw	r16, r24
    596c:	02 0f       	add	r16, r18
    596e:	13 1f       	adc	r17, r19
    5970:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <SPI_Receive>
    5974:	f8 01       	movw	r30, r16
    5976:	80 83       	st	Z, r24
	for(i= 0 ; str[i] != 13 ; )
    5978:	19 82       	std	Y+1, r1	; 0x01
    597a:	0f c0       	rjmp	.+30     	; 0x599a <SPI_ReceiveString+0x50>
	{
		++i ;
    597c:	89 81       	ldd	r24, Y+1	; 0x01
    597e:	8f 5f       	subi	r24, 0xFF	; 255
    5980:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_Receive() ;
    5982:	89 81       	ldd	r24, Y+1	; 0x01
    5984:	28 2f       	mov	r18, r24
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	8a 81       	ldd	r24, Y+2	; 0x02
    598a:	9b 81       	ldd	r25, Y+3	; 0x03
    598c:	8c 01       	movw	r16, r24
    598e:	02 0f       	add	r16, r18
    5990:	13 1f       	adc	r17, r19
    5992:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <SPI_Receive>
    5996:	f8 01       	movw	r30, r16
    5998:	80 83       	st	Z, r24
}
void SPI_ReceiveString(u8* str)
{
	u8 i = 0 ; 
	str[i] = SPI_Receive() ;
	for(i= 0 ; str[i] != 13 ; )
    599a:	89 81       	ldd	r24, Y+1	; 0x01
    599c:	28 2f       	mov	r18, r24
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	8a 81       	ldd	r24, Y+2	; 0x02
    59a2:	9b 81       	ldd	r25, Y+3	; 0x03
    59a4:	fc 01       	movw	r30, r24
    59a6:	e2 0f       	add	r30, r18
    59a8:	f3 1f       	adc	r31, r19
    59aa:	80 81       	ld	r24, Z
    59ac:	8d 30       	cpi	r24, 0x0D	; 13
    59ae:	31 f7       	brne	.-52     	; 0x597c <SPI_ReceiveString+0x32>
	{
		++i ;
		str[i] = SPI_Receive() ;
	}
	
}
    59b0:	0f 90       	pop	r0
    59b2:	0f 90       	pop	r0
    59b4:	0f 90       	pop	r0
    59b6:	cf 91       	pop	r28
    59b8:	df 91       	pop	r29
    59ba:	1f 91       	pop	r17
    59bc:	0f 91       	pop	r16
    59be:	08 95       	ret

000059c0 <POT_VoltRead>:
 *  Author: EL-talkhawy
 */ 

#include "Sensor.h"
u16 POT_VoltRead(void) 
{
    59c0:	df 93       	push	r29
    59c2:	cf 93       	push	r28
    59c4:	00 d0       	rcall	.+0      	; 0x59c6 <POT_VoltRead+0x6>
    59c6:	00 d0       	rcall	.+0      	; 0x59c8 <POT_VoltRead+0x8>
    59c8:	cd b7       	in	r28, 0x3d	; 61
    59ca:	de b7       	in	r29, 0x3e	; 62
	u16 adc = ADC_Read(POT_CH) ;
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    59d2:	9c 83       	std	Y+4, r25	; 0x04
    59d4:	8b 83       	std	Y+3, r24	; 0x03
	/*u8 volt = (adc*5)/1024 ;
	 here does not accuarte and to avoid use float we modify it from v to mv
	 and also change from u8 to u16 */
	u16 volt = ((u32)adc*5000) / 1024 ; 
    59d6:	8b 81       	ldd	r24, Y+3	; 0x03
    59d8:	9c 81       	ldd	r25, Y+4	; 0x04
    59da:	cc 01       	movw	r24, r24
    59dc:	a0 e0       	ldi	r26, 0x00	; 0
    59de:	b0 e0       	ldi	r27, 0x00	; 0
    59e0:	28 e8       	ldi	r18, 0x88	; 136
    59e2:	33 e1       	ldi	r19, 0x13	; 19
    59e4:	40 e0       	ldi	r20, 0x00	; 0
    59e6:	50 e0       	ldi	r21, 0x00	; 0
    59e8:	bc 01       	movw	r22, r24
    59ea:	cd 01       	movw	r24, r26
    59ec:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    59f0:	dc 01       	movw	r26, r24
    59f2:	cb 01       	movw	r24, r22
    59f4:	07 2e       	mov	r0, r23
    59f6:	7a e0       	ldi	r23, 0x0A	; 10
    59f8:	b6 95       	lsr	r27
    59fa:	a7 95       	ror	r26
    59fc:	97 95       	ror	r25
    59fe:	87 95       	ror	r24
    5a00:	7a 95       	dec	r23
    5a02:	d1 f7       	brne	.-12     	; 0x59f8 <POT_VoltRead+0x38>
    5a04:	70 2d       	mov	r23, r0
    5a06:	9a 83       	std	Y+2, r25	; 0x02
    5a08:	89 83       	std	Y+1, r24	; 0x01
	/* if we cal adc *5000 do this op in int but it can be larger than int so truncation occuar 
	so we cast adc to u32 to cal in long  the problem ocuuar here becuase truncation occuar before division */
	return volt ;
    5a0a:	89 81       	ldd	r24, Y+1	; 0x01
    5a0c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5a0e:	0f 90       	pop	r0
    5a10:	0f 90       	pop	r0
    5a12:	0f 90       	pop	r0
    5a14:	0f 90       	pop	r0
    5a16:	cf 91       	pop	r28
    5a18:	df 91       	pop	r29
    5a1a:	08 95       	ret

00005a1c <POT_PrecRead>:
u8  POT_PrecRead(void)
{ /* precantge*/
    5a1c:	df 93       	push	r29
    5a1e:	cf 93       	push	r28
    5a20:	00 d0       	rcall	.+0      	; 0x5a22 <POT_PrecRead+0x6>
    5a22:	00 d0       	rcall	.+0      	; 0x5a24 <POT_PrecRead+0x8>
    5a24:	cd b7       	in	r28, 0x3d	; 61
    5a26:	de b7       	in	r29, 0x3e	; 62
	u16 adc = ADC_Read(POT_CH) ;
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    5a2e:	9c 83       	std	Y+4, r25	; 0x04
    5a30:	8b 83       	std	Y+3, r24	; 0x03
	u16 volt = ((u32)adc*5000) / 1024 ; 
    5a32:	8b 81       	ldd	r24, Y+3	; 0x03
    5a34:	9c 81       	ldd	r25, Y+4	; 0x04
    5a36:	cc 01       	movw	r24, r24
    5a38:	a0 e0       	ldi	r26, 0x00	; 0
    5a3a:	b0 e0       	ldi	r27, 0x00	; 0
    5a3c:	28 e8       	ldi	r18, 0x88	; 136
    5a3e:	33 e1       	ldi	r19, 0x13	; 19
    5a40:	40 e0       	ldi	r20, 0x00	; 0
    5a42:	50 e0       	ldi	r21, 0x00	; 0
    5a44:	bc 01       	movw	r22, r24
    5a46:	cd 01       	movw	r24, r26
    5a48:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    5a4c:	dc 01       	movw	r26, r24
    5a4e:	cb 01       	movw	r24, r22
    5a50:	07 2e       	mov	r0, r23
    5a52:	7a e0       	ldi	r23, 0x0A	; 10
    5a54:	b6 95       	lsr	r27
    5a56:	a7 95       	ror	r26
    5a58:	97 95       	ror	r25
    5a5a:	87 95       	ror	r24
    5a5c:	7a 95       	dec	r23
    5a5e:	d1 f7       	brne	.-12     	; 0x5a54 <POT_PrecRead+0x38>
    5a60:	70 2d       	mov	r23, r0
    5a62:	9a 83       	std	Y+2, r25	; 0x02
    5a64:	89 83       	std	Y+1, r24	; 0x01
	return (((u32)volt *100) / 4995) ;
    5a66:	89 81       	ldd	r24, Y+1	; 0x01
    5a68:	9a 81       	ldd	r25, Y+2	; 0x02
    5a6a:	cc 01       	movw	r24, r24
    5a6c:	a0 e0       	ldi	r26, 0x00	; 0
    5a6e:	b0 e0       	ldi	r27, 0x00	; 0
    5a70:	24 e6       	ldi	r18, 0x64	; 100
    5a72:	30 e0       	ldi	r19, 0x00	; 0
    5a74:	40 e0       	ldi	r20, 0x00	; 0
    5a76:	50 e0       	ldi	r21, 0x00	; 0
    5a78:	bc 01       	movw	r22, r24
    5a7a:	cd 01       	movw	r24, r26
    5a7c:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    5a80:	dc 01       	movw	r26, r24
    5a82:	cb 01       	movw	r24, r22
    5a84:	23 e8       	ldi	r18, 0x83	; 131
    5a86:	33 e1       	ldi	r19, 0x13	; 19
    5a88:	40 e0       	ldi	r20, 0x00	; 0
    5a8a:	50 e0       	ldi	r21, 0x00	; 0
    5a8c:	bc 01       	movw	r22, r24
    5a8e:	cd 01       	movw	r24, r26
    5a90:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    5a94:	da 01       	movw	r26, r20
    5a96:	c9 01       	movw	r24, r18
	
}
    5a98:	0f 90       	pop	r0
    5a9a:	0f 90       	pop	r0
    5a9c:	0f 90       	pop	r0
    5a9e:	0f 90       	pop	r0
    5aa0:	cf 91       	pop	r28
    5aa2:	df 91       	pop	r29
    5aa4:	08 95       	ret

00005aa6 <TEMP_Read>:
u16 TEMP_Read(void) 
{  // increase 10mv for every degree
    5aa6:	df 93       	push	r29
    5aa8:	cf 93       	push	r28
    5aaa:	00 d0       	rcall	.+0      	; 0x5aac <TEMP_Read+0x6>
    5aac:	00 d0       	rcall	.+0      	; 0x5aae <TEMP_Read+0x8>
    5aae:	00 d0       	rcall	.+0      	; 0x5ab0 <TEMP_Read+0xa>
    5ab0:	cd b7       	in	r28, 0x3d	; 61
    5ab2:	de b7       	in	r29, 0x3e	; 62
	u16 adc  = ADC_Read(LM_35) ; 
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    5aba:	9e 83       	std	Y+6, r25	; 0x06
    5abc:	8d 83       	std	Y+5, r24	; 0x05
	u16 volt = ((u32)adc*5000) / 1024 ; 
    5abe:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ac2:	cc 01       	movw	r24, r24
    5ac4:	a0 e0       	ldi	r26, 0x00	; 0
    5ac6:	b0 e0       	ldi	r27, 0x00	; 0
    5ac8:	28 e8       	ldi	r18, 0x88	; 136
    5aca:	33 e1       	ldi	r19, 0x13	; 19
    5acc:	40 e0       	ldi	r20, 0x00	; 0
    5ace:	50 e0       	ldi	r21, 0x00	; 0
    5ad0:	bc 01       	movw	r22, r24
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	07 2e       	mov	r0, r23
    5ade:	7a e0       	ldi	r23, 0x0A	; 10
    5ae0:	b6 95       	lsr	r27
    5ae2:	a7 95       	ror	r26
    5ae4:	97 95       	ror	r25
    5ae6:	87 95       	ror	r24
    5ae8:	7a 95       	dec	r23
    5aea:	d1 f7       	brne	.-12     	; 0x5ae0 <TEMP_Read+0x3a>
    5aec:	70 2d       	mov	r23, r0
    5aee:	9c 83       	std	Y+4, r25	; 0x04
    5af0:	8b 83       	std	Y+3, r24	; 0x03
	u16 t = volt  ; // not volt / 10 increase zero but save accuarcy 
    5af2:	8b 81       	ldd	r24, Y+3	; 0x03
    5af4:	9c 81       	ldd	r25, Y+4	; 0x04
    5af6:	9a 83       	std	Y+2, r25	; 0x02
    5af8:	89 83       	std	Y+1, r24	; 0x01
	return t  ;
    5afa:	89 81       	ldd	r24, Y+1	; 0x01
    5afc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5afe:	26 96       	adiw	r28, 0x06	; 6
    5b00:	0f b6       	in	r0, 0x3f	; 63
    5b02:	f8 94       	cli
    5b04:	de bf       	out	0x3e, r29	; 62
    5b06:	0f be       	out	0x3f, r0	; 63
    5b08:	cd bf       	out	0x3d, r28	; 61
    5b0a:	cf 91       	pop	r28
    5b0c:	df 91       	pop	r29
    5b0e:	08 95       	ret

00005b10 <PRESS_Read>:

u16 PRESS_Read(void)
{
    5b10:	df 93       	push	r29
    5b12:	cf 93       	push	r28
    5b14:	00 d0       	rcall	.+0      	; 0x5b16 <PRESS_Read+0x6>
    5b16:	00 d0       	rcall	.+0      	; 0x5b18 <PRESS_Read+0x8>
    5b18:	00 d0       	rcall	.+0      	; 0x5b1a <PRESS_Read+0xa>
    5b1a:	cd b7       	in	r28, 0x3d	; 61
    5b1c:	de b7       	in	r29, 0x3e	; 62
	u16 adc = ADC_Read(MPX_4115) ; 
    5b1e:	81 e0       	ldi	r24, 0x01	; 1
    5b20:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    5b24:	9e 83       	std	Y+6, r25	; 0x06
    5b26:	8d 83       	std	Y+5, r24	; 0x05
	u32 p = ((u32)adc-55)*10857 + 1500000 ; 
    5b28:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b2c:	cc 01       	movw	r24, r24
    5b2e:	a0 e0       	ldi	r26, 0x00	; 0
    5b30:	b0 e0       	ldi	r27, 0x00	; 0
    5b32:	29 e6       	ldi	r18, 0x69	; 105
    5b34:	3a e2       	ldi	r19, 0x2A	; 42
    5b36:	40 e0       	ldi	r20, 0x00	; 0
    5b38:	50 e0       	ldi	r21, 0x00	; 0
    5b3a:	bc 01       	movw	r22, r24
    5b3c:	cd 01       	movw	r24, r26
    5b3e:	0e 94 0f 38 	call	0x701e	; 0x701e <__mulsi3>
    5b42:	dc 01       	movw	r26, r24
    5b44:	cb 01       	movw	r24, r22
    5b46:	8f 52       	subi	r24, 0x2F	; 47
    5b48:	99 43       	sbci	r25, 0x39	; 57
    5b4a:	a2 4f       	sbci	r26, 0xF2	; 242
    5b4c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b4e:	89 83       	std	Y+1, r24	; 0x01
    5b50:	9a 83       	std	Y+2, r25	; 0x02
    5b52:	ab 83       	std	Y+3, r26	; 0x03
    5b54:	bc 83       	std	Y+4, r27	; 0x04
	p = p /10000 ; //pressure here increase zero 
    5b56:	89 81       	ldd	r24, Y+1	; 0x01
    5b58:	9a 81       	ldd	r25, Y+2	; 0x02
    5b5a:	ab 81       	ldd	r26, Y+3	; 0x03
    5b5c:	bc 81       	ldd	r27, Y+4	; 0x04
    5b5e:	20 e1       	ldi	r18, 0x10	; 16
    5b60:	37 e2       	ldi	r19, 0x27	; 39
    5b62:	40 e0       	ldi	r20, 0x00	; 0
    5b64:	50 e0       	ldi	r21, 0x00	; 0
    5b66:	bc 01       	movw	r22, r24
    5b68:	cd 01       	movw	r24, r26
    5b6a:	0e 94 42 38 	call	0x7084	; 0x7084 <__udivmodsi4>
    5b6e:	da 01       	movw	r26, r20
    5b70:	c9 01       	movw	r24, r18
    5b72:	89 83       	std	Y+1, r24	; 0x01
    5b74:	9a 83       	std	Y+2, r25	; 0x02
    5b76:	ab 83       	std	Y+3, r26	; 0x03
    5b78:	bc 83       	std	Y+4, r27	; 0x04
	return p ;
    5b7a:	89 81       	ldd	r24, Y+1	; 0x01
    5b7c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5b7e:	26 96       	adiw	r28, 0x06	; 6
    5b80:	0f b6       	in	r0, 0x3f	; 63
    5b82:	f8 94       	cli
    5b84:	de bf       	out	0x3e, r29	; 62
    5b86:	0f be       	out	0x3f, r0	; 63
    5b88:	cd bf       	out	0x3d, r28	; 61
    5b8a:	cf 91       	pop	r28
    5b8c:	df 91       	pop	r29
    5b8e:	08 95       	ret

00005b90 <UART_Init>:
#include "util/delay.h"

static void(*UART_RX_Fptr)(void)=NULLPTR;
static void(*UART_TX_Fptr)(void)=NULLPTR;
void UART_Init(void)
{
    5b90:	df 93       	push	r29
    5b92:	cf 93       	push	r28
    5b94:	cd b7       	in	r28, 0x3d	; 61
    5b96:	de b7       	in	r29, 0x3e	; 62
	// baud rate 9600
	UBRRL=51;
    5b98:	e9 e2       	ldi	r30, 0x29	; 41
    5b9a:	f0 e0       	ldi	r31, 0x00	; 0
    5b9c:	83 e3       	ldi	r24, 0x33	; 51
    5b9e:	80 83       	st	Z, r24
	//normal speed
	CLEAR_BIT(UCSRA,U2X);
    5ba0:	ab e2       	ldi	r26, 0x2B	; 43
    5ba2:	b0 e0       	ldi	r27, 0x00	; 0
    5ba4:	eb e2       	ldi	r30, 0x2B	; 43
    5ba6:	f0 e0       	ldi	r31, 0x00	; 0
    5ba8:	80 81       	ld	r24, Z
    5baa:	8d 7f       	andi	r24, 0xFD	; 253
    5bac:	8c 93       	st	X, r24
	
	//DEFAULT FRAME  8data 1 stop no parity
	//ENABLE
	SET_BIT(UCSRB,RXEN);
    5bae:	aa e2       	ldi	r26, 0x2A	; 42
    5bb0:	b0 e0       	ldi	r27, 0x00	; 0
    5bb2:	ea e2       	ldi	r30, 0x2A	; 42
    5bb4:	f0 e0       	ldi	r31, 0x00	; 0
    5bb6:	80 81       	ld	r24, Z
    5bb8:	80 61       	ori	r24, 0x10	; 16
    5bba:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    5bbc:	aa e2       	ldi	r26, 0x2A	; 42
    5bbe:	b0 e0       	ldi	r27, 0x00	; 0
    5bc0:	ea e2       	ldi	r30, 0x2A	; 42
    5bc2:	f0 e0       	ldi	r31, 0x00	; 0
    5bc4:	80 81       	ld	r24, Z
    5bc6:	88 60       	ori	r24, 0x08	; 8
    5bc8:	8c 93       	st	X, r24
}
    5bca:	cf 91       	pop	r28
    5bcc:	df 91       	pop	r29
    5bce:	08 95       	ret

00005bd0 <UART_Send>:

void UART_Send(u8 data)
{
    5bd0:	df 93       	push	r29
    5bd2:	cf 93       	push	r28
    5bd4:	0f 92       	push	r0
    5bd6:	cd b7       	in	r28, 0x3d	; 61
    5bd8:	de b7       	in	r29, 0x3e	; 62
    5bda:	89 83       	std	Y+1, r24	; 0x01
	while(!READ_BIT(UCSRA,UDRE));
    5bdc:	eb e2       	ldi	r30, 0x2B	; 43
    5bde:	f0 e0       	ldi	r31, 0x00	; 0
    5be0:	80 81       	ld	r24, Z
    5be2:	82 95       	swap	r24
    5be4:	86 95       	lsr	r24
    5be6:	87 70       	andi	r24, 0x07	; 7
    5be8:	88 2f       	mov	r24, r24
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	81 70       	andi	r24, 0x01	; 1
    5bee:	90 70       	andi	r25, 0x00	; 0
    5bf0:	00 97       	sbiw	r24, 0x00	; 0
    5bf2:	a1 f3       	breq	.-24     	; 0x5bdc <UART_Send+0xc>
	UDR=data;
    5bf4:	ec e2       	ldi	r30, 0x2C	; 44
    5bf6:	f0 e0       	ldi	r31, 0x00	; 0
    5bf8:	89 81       	ldd	r24, Y+1	; 0x01
    5bfa:	80 83       	st	Z, r24
}
    5bfc:	0f 90       	pop	r0
    5bfe:	cf 91       	pop	r28
    5c00:	df 91       	pop	r29
    5c02:	08 95       	ret

00005c04 <UART_Receive>:

u8 UART_Receive(void)
{
    5c04:	df 93       	push	r29
    5c06:	cf 93       	push	r28
    5c08:	cd b7       	in	r28, 0x3d	; 61
    5c0a:	de b7       	in	r29, 0x3e	; 62
	while(!READ_BIT(UCSRA,RXC));
    5c0c:	eb e2       	ldi	r30, 0x2B	; 43
    5c0e:	f0 e0       	ldi	r31, 0x00	; 0
    5c10:	80 81       	ld	r24, Z
    5c12:	88 23       	and	r24, r24
    5c14:	dc f7       	brge	.-10     	; 0x5c0c <UART_Receive+0x8>
	return UDR;
    5c16:	ec e2       	ldi	r30, 0x2C	; 44
    5c18:	f0 e0       	ldi	r31, 0x00	; 0
    5c1a:	80 81       	ld	r24, Z
}
    5c1c:	cf 91       	pop	r28
    5c1e:	df 91       	pop	r29
    5c20:	08 95       	ret

00005c22 <UART_Receive_PerodicCheck>:

u8 UART_Receive_PerodicCheck(u8*pdata)
{
    5c22:	df 93       	push	r29
    5c24:	cf 93       	push	r28
    5c26:	00 d0       	rcall	.+0      	; 0x5c28 <UART_Receive_PerodicCheck+0x6>
    5c28:	0f 92       	push	r0
    5c2a:	cd b7       	in	r28, 0x3d	; 61
    5c2c:	de b7       	in	r29, 0x3e	; 62
    5c2e:	9a 83       	std	Y+2, r25	; 0x02
    5c30:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UCSRA,RXC))
    5c32:	eb e2       	ldi	r30, 0x2B	; 43
    5c34:	f0 e0       	ldi	r31, 0x00	; 0
    5c36:	80 81       	ld	r24, Z
    5c38:	88 23       	and	r24, r24
    5c3a:	4c f4       	brge	.+18     	; 0x5c4e <UART_Receive_PerodicCheck+0x2c>
	{
		*pdata=UDR;
    5c3c:	ec e2       	ldi	r30, 0x2C	; 44
    5c3e:	f0 e0       	ldi	r31, 0x00	; 0
    5c40:	80 81       	ld	r24, Z
    5c42:	e9 81       	ldd	r30, Y+1	; 0x01
    5c44:	fa 81       	ldd	r31, Y+2	; 0x02
    5c46:	80 83       	st	Z, r24
		return 1;
    5c48:	81 e0       	ldi	r24, 0x01	; 1
    5c4a:	8b 83       	std	Y+3, r24	; 0x03
    5c4c:	01 c0       	rjmp	.+2      	; 0x5c50 <UART_Receive_PerodicCheck+0x2e>
	}
	return 0;
    5c4e:	1b 82       	std	Y+3, r1	; 0x03
    5c50:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5c52:	0f 90       	pop	r0
    5c54:	0f 90       	pop	r0
    5c56:	0f 90       	pop	r0
    5c58:	cf 91       	pop	r28
    5c5a:	df 91       	pop	r29
    5c5c:	08 95       	ret

00005c5e <UART_SendNoBlock>:

void UART_SendNoBlock(u8 data)
{
    5c5e:	df 93       	push	r29
    5c60:	cf 93       	push	r28
    5c62:	0f 92       	push	r0
    5c64:	cd b7       	in	r28, 0x3d	; 61
    5c66:	de b7       	in	r29, 0x3e	; 62
    5c68:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    5c6a:	ec e2       	ldi	r30, 0x2C	; 44
    5c6c:	f0 e0       	ldi	r31, 0x00	; 0
    5c6e:	89 81       	ldd	r24, Y+1	; 0x01
    5c70:	80 83       	st	Z, r24
}
    5c72:	0f 90       	pop	r0
    5c74:	cf 91       	pop	r28
    5c76:	df 91       	pop	r29
    5c78:	08 95       	ret

00005c7a <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
    5c7a:	df 93       	push	r29
    5c7c:	cf 93       	push	r28
    5c7e:	cd b7       	in	r28, 0x3d	; 61
    5c80:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    5c82:	ec e2       	ldi	r30, 0x2C	; 44
    5c84:	f0 e0       	ldi	r31, 0x00	; 0
    5c86:	80 81       	ld	r24, Z
}
    5c88:	cf 91       	pop	r28
    5c8a:	df 91       	pop	r29
    5c8c:	08 95       	ret

00005c8e <UART_RX_InterruptEnable>:


void UART_RX_InterruptEnable(void)
{
    5c8e:	df 93       	push	r29
    5c90:	cf 93       	push	r28
    5c92:	cd b7       	in	r28, 0x3d	; 61
    5c94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    5c96:	aa e2       	ldi	r26, 0x2A	; 42
    5c98:	b0 e0       	ldi	r27, 0x00	; 0
    5c9a:	ea e2       	ldi	r30, 0x2A	; 42
    5c9c:	f0 e0       	ldi	r31, 0x00	; 0
    5c9e:	80 81       	ld	r24, Z
    5ca0:	80 68       	ori	r24, 0x80	; 128
    5ca2:	8c 93       	st	X, r24
}
    5ca4:	cf 91       	pop	r28
    5ca6:	df 91       	pop	r29
    5ca8:	08 95       	ret

00005caa <UART_RX_InterruptDisable>:

void UART_RX_InterruptDisable(void)
{
    5caa:	df 93       	push	r29
    5cac:	cf 93       	push	r28
    5cae:	cd b7       	in	r28, 0x3d	; 61
    5cb0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
    5cb2:	aa e2       	ldi	r26, 0x2A	; 42
    5cb4:	b0 e0       	ldi	r27, 0x00	; 0
    5cb6:	ea e2       	ldi	r30, 0x2A	; 42
    5cb8:	f0 e0       	ldi	r31, 0x00	; 0
    5cba:	80 81       	ld	r24, Z
    5cbc:	8f 77       	andi	r24, 0x7F	; 127
    5cbe:	8c 93       	st	X, r24
}
    5cc0:	cf 91       	pop	r28
    5cc2:	df 91       	pop	r29
    5cc4:	08 95       	ret

00005cc6 <UART_TX_InterruptEnable>:

void UART_TX_InterruptEnable(void)
{
    5cc6:	df 93       	push	r29
    5cc8:	cf 93       	push	r28
    5cca:	cd b7       	in	r28, 0x3d	; 61
    5ccc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    5cce:	aa e2       	ldi	r26, 0x2A	; 42
    5cd0:	b0 e0       	ldi	r27, 0x00	; 0
    5cd2:	ea e2       	ldi	r30, 0x2A	; 42
    5cd4:	f0 e0       	ldi	r31, 0x00	; 0
    5cd6:	80 81       	ld	r24, Z
    5cd8:	80 64       	ori	r24, 0x40	; 64
    5cda:	8c 93       	st	X, r24
}
    5cdc:	cf 91       	pop	r28
    5cde:	df 91       	pop	r29
    5ce0:	08 95       	ret

00005ce2 <UART_TX_InterruptDisable>:

void UART_TX_InterruptDisable(void)
{
    5ce2:	df 93       	push	r29
    5ce4:	cf 93       	push	r28
    5ce6:	cd b7       	in	r28, 0x3d	; 61
    5ce8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
    5cea:	aa e2       	ldi	r26, 0x2A	; 42
    5cec:	b0 e0       	ldi	r27, 0x00	; 0
    5cee:	ea e2       	ldi	r30, 0x2A	; 42
    5cf0:	f0 e0       	ldi	r31, 0x00	; 0
    5cf2:	80 81       	ld	r24, Z
    5cf4:	8f 7b       	andi	r24, 0xBF	; 191
    5cf6:	8c 93       	st	X, r24
}
    5cf8:	cf 91       	pop	r28
    5cfa:	df 91       	pop	r29
    5cfc:	08 95       	ret

00005cfe <UART_RX_SetCallBack>:

void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
    5cfe:	df 93       	push	r29
    5d00:	cf 93       	push	r28
    5d02:	00 d0       	rcall	.+0      	; 0x5d04 <UART_RX_SetCallBack+0x6>
    5d04:	cd b7       	in	r28, 0x3d	; 61
    5d06:	de b7       	in	r29, 0x3e	; 62
    5d08:	9a 83       	std	Y+2, r25	; 0x02
    5d0a:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    5d0c:	89 81       	ldd	r24, Y+1	; 0x01
    5d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d10:	90 93 a7 01 	sts	0x01A7, r25
    5d14:	80 93 a6 01 	sts	0x01A6, r24
}
    5d18:	0f 90       	pop	r0
    5d1a:	0f 90       	pop	r0
    5d1c:	cf 91       	pop	r28
    5d1e:	df 91       	pop	r29
    5d20:	08 95       	ret

00005d22 <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
    5d22:	df 93       	push	r29
    5d24:	cf 93       	push	r28
    5d26:	00 d0       	rcall	.+0      	; 0x5d28 <UART_TX_SetCallBack+0x6>
    5d28:	cd b7       	in	r28, 0x3d	; 61
    5d2a:	de b7       	in	r29, 0x3e	; 62
    5d2c:	9a 83       	std	Y+2, r25	; 0x02
    5d2e:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    5d30:	89 81       	ldd	r24, Y+1	; 0x01
    5d32:	9a 81       	ldd	r25, Y+2	; 0x02
    5d34:	90 93 a9 01 	sts	0x01A9, r25
    5d38:	80 93 a8 01 	sts	0x01A8, r24
}
    5d3c:	0f 90       	pop	r0
    5d3e:	0f 90       	pop	r0
    5d40:	cf 91       	pop	r28
    5d42:	df 91       	pop	r29
    5d44:	08 95       	ret

00005d46 <__vector_13>:


ISR(UART_RX_vect)
{
    5d46:	1f 92       	push	r1
    5d48:	0f 92       	push	r0
    5d4a:	0f b6       	in	r0, 0x3f	; 63
    5d4c:	0f 92       	push	r0
    5d4e:	11 24       	eor	r1, r1
    5d50:	2f 93       	push	r18
    5d52:	3f 93       	push	r19
    5d54:	4f 93       	push	r20
    5d56:	5f 93       	push	r21
    5d58:	6f 93       	push	r22
    5d5a:	7f 93       	push	r23
    5d5c:	8f 93       	push	r24
    5d5e:	9f 93       	push	r25
    5d60:	af 93       	push	r26
    5d62:	bf 93       	push	r27
    5d64:	ef 93       	push	r30
    5d66:	ff 93       	push	r31
    5d68:	df 93       	push	r29
    5d6a:	cf 93       	push	r28
    5d6c:	cd b7       	in	r28, 0x3d	; 61
    5d6e:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr!=NULLPTR)
    5d70:	80 91 a6 01 	lds	r24, 0x01A6
    5d74:	90 91 a7 01 	lds	r25, 0x01A7
    5d78:	00 97       	sbiw	r24, 0x00	; 0
    5d7a:	29 f0       	breq	.+10     	; 0x5d86 <__vector_13+0x40>
	{
		UART_RX_Fptr();
    5d7c:	e0 91 a6 01 	lds	r30, 0x01A6
    5d80:	f0 91 a7 01 	lds	r31, 0x01A7
    5d84:	09 95       	icall
	}
}
    5d86:	cf 91       	pop	r28
    5d88:	df 91       	pop	r29
    5d8a:	ff 91       	pop	r31
    5d8c:	ef 91       	pop	r30
    5d8e:	bf 91       	pop	r27
    5d90:	af 91       	pop	r26
    5d92:	9f 91       	pop	r25
    5d94:	8f 91       	pop	r24
    5d96:	7f 91       	pop	r23
    5d98:	6f 91       	pop	r22
    5d9a:	5f 91       	pop	r21
    5d9c:	4f 91       	pop	r20
    5d9e:	3f 91       	pop	r19
    5da0:	2f 91       	pop	r18
    5da2:	0f 90       	pop	r0
    5da4:	0f be       	out	0x3f, r0	; 63
    5da6:	0f 90       	pop	r0
    5da8:	1f 90       	pop	r1
    5daa:	18 95       	reti

00005dac <__vector_15>:

ISR(UART_TX_vect)
{
    5dac:	1f 92       	push	r1
    5dae:	0f 92       	push	r0
    5db0:	0f b6       	in	r0, 0x3f	; 63
    5db2:	0f 92       	push	r0
    5db4:	11 24       	eor	r1, r1
    5db6:	2f 93       	push	r18
    5db8:	3f 93       	push	r19
    5dba:	4f 93       	push	r20
    5dbc:	5f 93       	push	r21
    5dbe:	6f 93       	push	r22
    5dc0:	7f 93       	push	r23
    5dc2:	8f 93       	push	r24
    5dc4:	9f 93       	push	r25
    5dc6:	af 93       	push	r26
    5dc8:	bf 93       	push	r27
    5dca:	ef 93       	push	r30
    5dcc:	ff 93       	push	r31
    5dce:	df 93       	push	r29
    5dd0:	cf 93       	push	r28
    5dd2:	cd b7       	in	r28, 0x3d	; 61
    5dd4:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Fptr!=NULLPTR)
    5dd6:	80 91 a8 01 	lds	r24, 0x01A8
    5dda:	90 91 a9 01 	lds	r25, 0x01A9
    5dde:	00 97       	sbiw	r24, 0x00	; 0
    5de0:	29 f0       	breq	.+10     	; 0x5dec <__vector_15+0x40>
	{
		UART_TX_Fptr();
    5de2:	e0 91 a8 01 	lds	r30, 0x01A8
    5de6:	f0 91 a9 01 	lds	r31, 0x01A9
    5dea:	09 95       	icall
	}
}
    5dec:	cf 91       	pop	r28
    5dee:	df 91       	pop	r29
    5df0:	ff 91       	pop	r31
    5df2:	ef 91       	pop	r30
    5df4:	bf 91       	pop	r27
    5df6:	af 91       	pop	r26
    5df8:	9f 91       	pop	r25
    5dfa:	8f 91       	pop	r24
    5dfc:	7f 91       	pop	r23
    5dfe:	6f 91       	pop	r22
    5e00:	5f 91       	pop	r21
    5e02:	4f 91       	pop	r20
    5e04:	3f 91       	pop	r19
    5e06:	2f 91       	pop	r18
    5e08:	0f 90       	pop	r0
    5e0a:	0f be       	out	0x3f, r0	; 63
    5e0c:	0f 90       	pop	r0
    5e0e:	1f 90       	pop	r1
    5e10:	18 95       	reti

00005e12 <UART_SendString>:

#include "UART_Services.h"
#include "LCD.h"

void UART_SendString(u8*str)
{
    5e12:	df 93       	push	r29
    5e14:	cf 93       	push	r28
    5e16:	00 d0       	rcall	.+0      	; 0x5e18 <UART_SendString+0x6>
    5e18:	0f 92       	push	r0
    5e1a:	cd b7       	in	r28, 0x3d	; 61
    5e1c:	de b7       	in	r29, 0x3e	; 62
    5e1e:	9b 83       	std	Y+3, r25	; 0x03
    5e20:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for (i=0;str[i];i++)
    5e22:	19 82       	std	Y+1, r1	; 0x01
    5e24:	0e c0       	rjmp	.+28     	; 0x5e42 <UART_SendString+0x30>
	{
		UART_Send(str[i]);
    5e26:	89 81       	ldd	r24, Y+1	; 0x01
    5e28:	28 2f       	mov	r18, r24
    5e2a:	30 e0       	ldi	r19, 0x00	; 0
    5e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e30:	fc 01       	movw	r30, r24
    5e32:	e2 0f       	add	r30, r18
    5e34:	f3 1f       	adc	r31, r19
    5e36:	80 81       	ld	r24, Z
    5e38:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
#include "LCD.h"

void UART_SendString(u8*str)
{
	u8 i;
	for (i=0;str[i];i++)
    5e3c:	89 81       	ldd	r24, Y+1	; 0x01
    5e3e:	8f 5f       	subi	r24, 0xFF	; 255
    5e40:	89 83       	std	Y+1, r24	; 0x01
    5e42:	89 81       	ldd	r24, Y+1	; 0x01
    5e44:	28 2f       	mov	r18, r24
    5e46:	30 e0       	ldi	r19, 0x00	; 0
    5e48:	8a 81       	ldd	r24, Y+2	; 0x02
    5e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e4c:	fc 01       	movw	r30, r24
    5e4e:	e2 0f       	add	r30, r18
    5e50:	f3 1f       	adc	r31, r19
    5e52:	80 81       	ld	r24, Z
    5e54:	88 23       	and	r24, r24
    5e56:	39 f7       	brne	.-50     	; 0x5e26 <UART_SendString+0x14>
	{
		UART_Send(str[i]);
	}
   UART_Send(13);
    5e58:	8d e0       	ldi	r24, 0x0D	; 13
    5e5a:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
}
    5e5e:	0f 90       	pop	r0
    5e60:	0f 90       	pop	r0
    5e62:	0f 90       	pop	r0
    5e64:	cf 91       	pop	r28
    5e66:	df 91       	pop	r29
    5e68:	08 95       	ret

00005e6a <UART_ReceiveString>:

void UART_ReceiveString(u8*str)
{
    5e6a:	0f 93       	push	r16
    5e6c:	1f 93       	push	r17
    5e6e:	df 93       	push	r29
    5e70:	cf 93       	push	r28
    5e72:	00 d0       	rcall	.+0      	; 0x5e74 <UART_ReceiveString+0xa>
    5e74:	0f 92       	push	r0
    5e76:	cd b7       	in	r28, 0x3d	; 61
    5e78:	de b7       	in	r29, 0x3e	; 62
    5e7a:	9b 83       	std	Y+3, r25	; 0x03
    5e7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    5e7e:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_Receive();
    5e80:	89 81       	ldd	r24, Y+1	; 0x01
    5e82:	28 2f       	mov	r18, r24
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	8a 81       	ldd	r24, Y+2	; 0x02
    5e88:	9b 81       	ldd	r25, Y+3	; 0x03
    5e8a:	8c 01       	movw	r16, r24
    5e8c:	02 0f       	add	r16, r18
    5e8e:	13 1f       	adc	r17, r19
    5e90:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    5e94:	f8 01       	movw	r30, r16
    5e96:	80 83       	st	Z, r24
	for (i=0;str[i]!=13;)
    5e98:	19 82       	std	Y+1, r1	; 0x01
    5e9a:	0f c0       	rjmp	.+30     	; 0x5eba <UART_ReceiveString+0x50>
	{
		i++;
    5e9c:	89 81       	ldd	r24, Y+1	; 0x01
    5e9e:	8f 5f       	subi	r24, 0xFF	; 255
    5ea0:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_Receive();
    5ea2:	89 81       	ldd	r24, Y+1	; 0x01
    5ea4:	28 2f       	mov	r18, r24
    5ea6:	30 e0       	ldi	r19, 0x00	; 0
    5ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    5eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    5eac:	8c 01       	movw	r16, r24
    5eae:	02 0f       	add	r16, r18
    5eb0:	13 1f       	adc	r17, r19
    5eb2:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    5eb6:	f8 01       	movw	r30, r16
    5eb8:	80 83       	st	Z, r24

void UART_ReceiveString(u8*str)
{
	u8 i=0;
	str[i]=UART_Receive();
	for (i=0;str[i]!=13;)
    5eba:	89 81       	ldd	r24, Y+1	; 0x01
    5ebc:	28 2f       	mov	r18, r24
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ec4:	fc 01       	movw	r30, r24
    5ec6:	e2 0f       	add	r30, r18
    5ec8:	f3 1f       	adc	r31, r19
    5eca:	80 81       	ld	r24, Z
    5ecc:	8d 30       	cpi	r24, 0x0D	; 13
    5ece:	31 f7       	brne	.-52     	; 0x5e9c <UART_ReceiveString+0x32>
	{
		i++;
		str[i]=UART_Receive();
	}
	str[i]='\0';
    5ed0:	89 81       	ldd	r24, Y+1	; 0x01
    5ed2:	28 2f       	mov	r18, r24
    5ed4:	30 e0       	ldi	r19, 0x00	; 0
    5ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    5eda:	fc 01       	movw	r30, r24
    5edc:	e2 0f       	add	r30, r18
    5ede:	f3 1f       	adc	r31, r19
    5ee0:	10 82       	st	Z, r1
}
    5ee2:	0f 90       	pop	r0
    5ee4:	0f 90       	pop	r0
    5ee6:	0f 90       	pop	r0
    5ee8:	cf 91       	pop	r28
    5eea:	df 91       	pop	r29
    5eec:	1f 91       	pop	r17
    5eee:	0f 91       	pop	r16
    5ef0:	08 95       	ret

00005ef2 <IntToString>:
static void IntToString (u8* str, s64 num)
{
    5ef2:	8f 92       	push	r8
    5ef4:	9f 92       	push	r9
    5ef6:	af 92       	push	r10
    5ef8:	bf 92       	push	r11
    5efa:	cf 92       	push	r12
    5efc:	df 92       	push	r13
    5efe:	ef 92       	push	r14
    5f00:	ff 92       	push	r15
    5f02:	0f 93       	push	r16
    5f04:	1f 93       	push	r17
    5f06:	df 93       	push	r29
    5f08:	cf 93       	push	r28
    5f0a:	cd b7       	in	r28, 0x3d	; 61
    5f0c:	de b7       	in	r29, 0x3e	; 62
    5f0e:	c2 54       	subi	r28, 0x42	; 66
    5f10:	d0 40       	sbci	r29, 0x00	; 0
    5f12:	0f b6       	in	r0, 0x3f	; 63
    5f14:	f8 94       	cli
    5f16:	de bf       	out	0x3e, r29	; 62
    5f18:	0f be       	out	0x3f, r0	; 63
    5f1a:	cd bf       	out	0x3d, r28	; 61
    5f1c:	9a 87       	std	Y+10, r25	; 0x0a
    5f1e:	89 87       	std	Y+9, r24	; 0x09
    5f20:	0b 87       	std	Y+11, r16	; 0x0b
    5f22:	1c 87       	std	Y+12, r17	; 0x0c
    5f24:	2d 87       	std	Y+13, r18	; 0x0d
    5f26:	3e 87       	std	Y+14, r19	; 0x0e
    5f28:	4f 87       	std	Y+15, r20	; 0x0f
    5f2a:	58 8b       	std	Y+16, r21	; 0x10
    5f2c:	69 8b       	std	Y+17, r22	; 0x11
    5f2e:	7a 8b       	std	Y+18, r23	; 0x12
	int i =0, j, temp, flag = 1 ;
    5f30:	18 86       	std	Y+8, r1	; 0x08
    5f32:	1f 82       	std	Y+7, r1	; 0x07
    5f34:	81 e0       	ldi	r24, 0x01	; 1
    5f36:	90 e0       	ldi	r25, 0x00	; 0
    5f38:	9a 83       	std	Y+2, r25	; 0x02
    5f3a:	89 83       	std	Y+1, r24	; 0x01
	if(num==0)
    5f3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f40:	89 2b       	or	r24, r25
    5f42:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f44:	89 2b       	or	r24, r25
    5f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f48:	89 2b       	or	r24, r25
    5f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f4c:	89 2b       	or	r24, r25
    5f4e:	98 89       	ldd	r25, Y+16	; 0x10
    5f50:	89 2b       	or	r24, r25
    5f52:	99 89       	ldd	r25, Y+17	; 0x11
    5f54:	89 2b       	or	r24, r25
    5f56:	9a 89       	ldd	r25, Y+18	; 0x12
    5f58:	89 2b       	or	r24, r25
    5f5a:	88 23       	and	r24, r24
    5f5c:	b9 f4       	brne	.+46     	; 0x5f8c <IntToString+0x9a>
	{
		str[i] = '0' ;
    5f5e:	2f 81       	ldd	r18, Y+7	; 0x07
    5f60:	38 85       	ldd	r19, Y+8	; 0x08
    5f62:	89 85       	ldd	r24, Y+9	; 0x09
    5f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f66:	fc 01       	movw	r30, r24
    5f68:	e2 0f       	add	r30, r18
    5f6a:	f3 1f       	adc	r31, r19
    5f6c:	80 e3       	ldi	r24, 0x30	; 48
    5f6e:	80 83       	st	Z, r24
		str[++i] = '\0' ;
    5f70:	8f 81       	ldd	r24, Y+7	; 0x07
    5f72:	98 85       	ldd	r25, Y+8	; 0x08
    5f74:	01 96       	adiw	r24, 0x01	; 1
    5f76:	98 87       	std	Y+8, r25	; 0x08
    5f78:	8f 83       	std	Y+7, r24	; 0x07
    5f7a:	2f 81       	ldd	r18, Y+7	; 0x07
    5f7c:	38 85       	ldd	r19, Y+8	; 0x08
    5f7e:	89 85       	ldd	r24, Y+9	; 0x09
    5f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f82:	fc 01       	movw	r30, r24
    5f84:	e2 0f       	add	r30, r18
    5f86:	f3 1f       	adc	r31, r19
    5f88:	10 82       	st	Z, r1
    5f8a:	7e c2       	rjmp	.+1276   	; 0x6488 <IntToString+0x596>
	}
	else
	{
		if (num < 0 )
    5f8c:	8a 89       	ldd	r24, Y+18	; 0x12
    5f8e:	88 23       	and	r24, r24
    5f90:	d4 f0       	brlt	.+52     	; 0x5fc6 <IntToString+0xd4>
    5f92:	8a 89       	ldd	r24, Y+18	; 0x12
    5f94:	88 23       	and	r24, r24
    5f96:	09 f0       	breq	.+2      	; 0x5f9a <IntToString+0xa8>
    5f98:	74 c1       	rjmp	.+744    	; 0x6282 <IntToString+0x390>
    5f9a:	89 89       	ldd	r24, Y+17	; 0x11
    5f9c:	88 23       	and	r24, r24
    5f9e:	09 f0       	breq	.+2      	; 0x5fa2 <IntToString+0xb0>
    5fa0:	70 c1       	rjmp	.+736    	; 0x6282 <IntToString+0x390>
    5fa2:	88 89       	ldd	r24, Y+16	; 0x10
    5fa4:	88 23       	and	r24, r24
    5fa6:	09 f0       	breq	.+2      	; 0x5faa <IntToString+0xb8>
    5fa8:	6c c1       	rjmp	.+728    	; 0x6282 <IntToString+0x390>
    5faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fac:	88 23       	and	r24, r24
    5fae:	09 f0       	breq	.+2      	; 0x5fb2 <IntToString+0xc0>
    5fb0:	68 c1       	rjmp	.+720    	; 0x6282 <IntToString+0x390>
    5fb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    5fb4:	88 23       	and	r24, r24
    5fb6:	09 f0       	breq	.+2      	; 0x5fba <IntToString+0xc8>
    5fb8:	64 c1       	rjmp	.+712    	; 0x6282 <IntToString+0x390>
    5fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fbc:	88 23       	and	r24, r24
    5fbe:	09 f0       	breq	.+2      	; 0x5fc2 <IntToString+0xd0>
    5fc0:	60 c1       	rjmp	.+704    	; 0x6282 <IntToString+0x390>
    5fc2:	4c 85       	ldd	r20, Y+12	; 0x0c
    5fc4:	5e c1       	rjmp	.+700    	; 0x6282 <IntToString+0x390>
		{
			str[i++] = '-' ;
    5fc6:	2f 81       	ldd	r18, Y+7	; 0x07
    5fc8:	38 85       	ldd	r19, Y+8	; 0x08
    5fca:	89 85       	ldd	r24, Y+9	; 0x09
    5fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fce:	fc 01       	movw	r30, r24
    5fd0:	e2 0f       	add	r30, r18
    5fd2:	f3 1f       	adc	r31, r19
    5fd4:	8d e2       	ldi	r24, 0x2D	; 45
    5fd6:	80 83       	st	Z, r24
    5fd8:	8f 81       	ldd	r24, Y+7	; 0x07
    5fda:	98 85       	ldd	r25, Y+8	; 0x08
    5fdc:	01 96       	adiw	r24, 0x01	; 1
    5fde:	98 87       	std	Y+8, r25	; 0x08
    5fe0:	8f 83       	std	Y+7, r24	; 0x07
			num *= -1 ;
    5fe2:	1c 8a       	std	Y+20, r1	; 0x14
    5fe4:	1d 8a       	std	Y+21, r1	; 0x15
    5fe6:	1e 8a       	std	Y+22, r1	; 0x16
    5fe8:	1f 8a       	std	Y+23, r1	; 0x17
    5fea:	18 8e       	std	Y+24, r1	; 0x18
    5fec:	19 8e       	std	Y+25, r1	; 0x19
    5fee:	1a 8e       	std	Y+26, r1	; 0x1a
    5ff0:	1b 8e       	std	Y+27, r1	; 0x1b
    5ff2:	5b 85       	ldd	r21, Y+11	; 0x0b
    5ff4:	5c 8f       	std	Y+28, r21	; 0x1c
    5ff6:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ff8:	8d 8f       	std	Y+29, r24	; 0x1d
    5ffa:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ffc:	9e 8f       	std	Y+30, r25	; 0x1e
    5ffe:	ee 85       	ldd	r30, Y+14	; 0x0e
    6000:	ef 8f       	std	Y+31, r30	; 0x1f
    6002:	ff 85       	ldd	r31, Y+15	; 0x0f
    6004:	f8 a3       	std	Y+32, r31	; 0x20
    6006:	48 89       	ldd	r20, Y+16	; 0x10
    6008:	49 a3       	std	Y+33, r20	; 0x21
    600a:	59 89       	ldd	r21, Y+17	; 0x11
    600c:	5a a3       	std	Y+34, r21	; 0x22
    600e:	8a 89       	ldd	r24, Y+18	; 0x12
    6010:	8b a3       	std	Y+35, r24	; 0x23
    6012:	9c 89       	ldd	r25, Y+20	; 0x14
    6014:	ec 8d       	ldd	r30, Y+28	; 0x1c
    6016:	9e 1b       	sub	r25, r30
    6018:	9c a3       	std	Y+36, r25	; 0x24
    601a:	f1 e0       	ldi	r31, 0x01	; 1
    601c:	fc a7       	std	Y+44, r31	; 0x2c
    601e:	4c a1       	ldd	r20, Y+36	; 0x24
    6020:	5c 89       	ldd	r21, Y+20	; 0x14
    6022:	54 17       	cp	r21, r20
    6024:	08 f0       	brcs	.+2      	; 0x6028 <IntToString+0x136>
    6026:	1c a6       	std	Y+44, r1	; 0x2c
    6028:	8d 89       	ldd	r24, Y+21	; 0x15
    602a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    602c:	89 1b       	sub	r24, r25
    602e:	8d a3       	std	Y+37, r24	; 0x25
    6030:	e1 e0       	ldi	r30, 0x01	; 1
    6032:	ed a7       	std	Y+45, r30	; 0x2d
    6034:	fd a1       	ldd	r31, Y+37	; 0x25
    6036:	4d 89       	ldd	r20, Y+21	; 0x15
    6038:	4f 17       	cp	r20, r31
    603a:	08 f0       	brcs	.+2      	; 0x603e <IntToString+0x14c>
    603c:	1d a6       	std	Y+45, r1	; 0x2d
    603e:	5d a1       	ldd	r21, Y+37	; 0x25
    6040:	8c a5       	ldd	r24, Y+44	; 0x2c
    6042:	58 1b       	sub	r21, r24
    6044:	5e a7       	std	Y+46, r21	; 0x2e
    6046:	91 e0       	ldi	r25, 0x01	; 1
    6048:	9f a7       	std	Y+47, r25	; 0x2f
    604a:	ee a5       	ldd	r30, Y+46	; 0x2e
    604c:	fd a1       	ldd	r31, Y+37	; 0x25
    604e:	fe 17       	cp	r31, r30
    6050:	08 f0       	brcs	.+2      	; 0x6054 <IntToString+0x162>
    6052:	1f a6       	std	Y+47, r1	; 0x2f
    6054:	4d a5       	ldd	r20, Y+45	; 0x2d
    6056:	5f a5       	ldd	r21, Y+47	; 0x2f
    6058:	45 2b       	or	r20, r21
    605a:	4d a7       	std	Y+45, r20	; 0x2d
    605c:	8e a5       	ldd	r24, Y+46	; 0x2e
    605e:	8d a3       	std	Y+37, r24	; 0x25
    6060:	9e 89       	ldd	r25, Y+22	; 0x16
    6062:	ee 8d       	ldd	r30, Y+30	; 0x1e
    6064:	9e 1b       	sub	r25, r30
    6066:	9e a3       	std	Y+38, r25	; 0x26
    6068:	f1 e0       	ldi	r31, 0x01	; 1
    606a:	f8 ab       	std	Y+48, r31	; 0x30
    606c:	4e a1       	ldd	r20, Y+38	; 0x26
    606e:	5e 89       	ldd	r21, Y+22	; 0x16
    6070:	54 17       	cp	r21, r20
    6072:	08 f0       	brcs	.+2      	; 0x6076 <IntToString+0x184>
    6074:	18 aa       	std	Y+48, r1	; 0x30
    6076:	8e a1       	ldd	r24, Y+38	; 0x26
    6078:	9d a5       	ldd	r25, Y+45	; 0x2d
    607a:	89 1b       	sub	r24, r25
    607c:	89 ab       	std	Y+49, r24	; 0x31
    607e:	e1 e0       	ldi	r30, 0x01	; 1
    6080:	ea ab       	std	Y+50, r30	; 0x32
    6082:	f9 a9       	ldd	r31, Y+49	; 0x31
    6084:	4e a1       	ldd	r20, Y+38	; 0x26
    6086:	4f 17       	cp	r20, r31
    6088:	08 f0       	brcs	.+2      	; 0x608c <IntToString+0x19a>
    608a:	1a aa       	std	Y+50, r1	; 0x32
    608c:	58 a9       	ldd	r21, Y+48	; 0x30
    608e:	8a a9       	ldd	r24, Y+50	; 0x32
    6090:	58 2b       	or	r21, r24
    6092:	58 ab       	std	Y+48, r21	; 0x30
    6094:	99 a9       	ldd	r25, Y+49	; 0x31
    6096:	9e a3       	std	Y+38, r25	; 0x26
    6098:	ef 89       	ldd	r30, Y+23	; 0x17
    609a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    609c:	ef 1b       	sub	r30, r31
    609e:	ef a3       	std	Y+39, r30	; 0x27
    60a0:	41 e0       	ldi	r20, 0x01	; 1
    60a2:	4b ab       	std	Y+51, r20	; 0x33
    60a4:	5f a1       	ldd	r21, Y+39	; 0x27
    60a6:	8f 89       	ldd	r24, Y+23	; 0x17
    60a8:	85 17       	cp	r24, r21
    60aa:	08 f0       	brcs	.+2      	; 0x60ae <IntToString+0x1bc>
    60ac:	1b aa       	std	Y+51, r1	; 0x33
    60ae:	9f a1       	ldd	r25, Y+39	; 0x27
    60b0:	e8 a9       	ldd	r30, Y+48	; 0x30
    60b2:	9e 1b       	sub	r25, r30
    60b4:	9c ab       	std	Y+52, r25	; 0x34
    60b6:	f1 e0       	ldi	r31, 0x01	; 1
    60b8:	fd ab       	std	Y+53, r31	; 0x35
    60ba:	4c a9       	ldd	r20, Y+52	; 0x34
    60bc:	5f a1       	ldd	r21, Y+39	; 0x27
    60be:	54 17       	cp	r21, r20
    60c0:	08 f0       	brcs	.+2      	; 0x60c4 <IntToString+0x1d2>
    60c2:	1d aa       	std	Y+53, r1	; 0x35
    60c4:	8b a9       	ldd	r24, Y+51	; 0x33
    60c6:	9d a9       	ldd	r25, Y+53	; 0x35
    60c8:	89 2b       	or	r24, r25
    60ca:	8b ab       	std	Y+51, r24	; 0x33
    60cc:	ec a9       	ldd	r30, Y+52	; 0x34
    60ce:	ef a3       	std	Y+39, r30	; 0x27
    60d0:	f8 8d       	ldd	r31, Y+24	; 0x18
    60d2:	48 a1       	ldd	r20, Y+32	; 0x20
    60d4:	f4 1b       	sub	r31, r20
    60d6:	f8 a7       	std	Y+40, r31	; 0x28
    60d8:	51 e0       	ldi	r21, 0x01	; 1
    60da:	5e ab       	std	Y+54, r21	; 0x36
    60dc:	88 a5       	ldd	r24, Y+40	; 0x28
    60de:	98 8d       	ldd	r25, Y+24	; 0x18
    60e0:	98 17       	cp	r25, r24
    60e2:	08 f0       	brcs	.+2      	; 0x60e6 <IntToString+0x1f4>
    60e4:	1e aa       	std	Y+54, r1	; 0x36
    60e6:	e8 a5       	ldd	r30, Y+40	; 0x28
    60e8:	fb a9       	ldd	r31, Y+51	; 0x33
    60ea:	ef 1b       	sub	r30, r31
    60ec:	ef ab       	std	Y+55, r30	; 0x37
    60ee:	41 e0       	ldi	r20, 0x01	; 1
    60f0:	48 af       	std	Y+56, r20	; 0x38
    60f2:	5f a9       	ldd	r21, Y+55	; 0x37
    60f4:	88 a5       	ldd	r24, Y+40	; 0x28
    60f6:	85 17       	cp	r24, r21
    60f8:	08 f0       	brcs	.+2      	; 0x60fc <IntToString+0x20a>
    60fa:	18 ae       	std	Y+56, r1	; 0x38
    60fc:	9e a9       	ldd	r25, Y+54	; 0x36
    60fe:	e8 ad       	ldd	r30, Y+56	; 0x38
    6100:	9e 2b       	or	r25, r30
    6102:	9e ab       	std	Y+54, r25	; 0x36
    6104:	ff a9       	ldd	r31, Y+55	; 0x37
    6106:	f8 a7       	std	Y+40, r31	; 0x28
    6108:	49 8d       	ldd	r20, Y+25	; 0x19
    610a:	59 a1       	ldd	r21, Y+33	; 0x21
    610c:	45 1b       	sub	r20, r21
    610e:	49 a7       	std	Y+41, r20	; 0x29
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	89 af       	std	Y+57, r24	; 0x39
    6114:	99 a5       	ldd	r25, Y+41	; 0x29
    6116:	e9 8d       	ldd	r30, Y+25	; 0x19
    6118:	e9 17       	cp	r30, r25
    611a:	08 f0       	brcs	.+2      	; 0x611e <IntToString+0x22c>
    611c:	19 ae       	std	Y+57, r1	; 0x39
    611e:	f9 a5       	ldd	r31, Y+41	; 0x29
    6120:	4e a9       	ldd	r20, Y+54	; 0x36
    6122:	f4 1b       	sub	r31, r20
    6124:	fa af       	std	Y+58, r31	; 0x3a
    6126:	51 e0       	ldi	r21, 0x01	; 1
    6128:	5b af       	std	Y+59, r21	; 0x3b
    612a:	8a ad       	ldd	r24, Y+58	; 0x3a
    612c:	99 a5       	ldd	r25, Y+41	; 0x29
    612e:	98 17       	cp	r25, r24
    6130:	08 f0       	brcs	.+2      	; 0x6134 <IntToString+0x242>
    6132:	1b ae       	std	Y+59, r1	; 0x3b
    6134:	e9 ad       	ldd	r30, Y+57	; 0x39
    6136:	fb ad       	ldd	r31, Y+59	; 0x3b
    6138:	ef 2b       	or	r30, r31
    613a:	e9 af       	std	Y+57, r30	; 0x39
    613c:	4a ad       	ldd	r20, Y+58	; 0x3a
    613e:	49 a7       	std	Y+41, r20	; 0x29
    6140:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6142:	8a a1       	ldd	r24, Y+34	; 0x22
    6144:	58 1b       	sub	r21, r24
    6146:	5a a7       	std	Y+42, r21	; 0x2a
    6148:	91 e0       	ldi	r25, 0x01	; 1
    614a:	9c af       	std	Y+60, r25	; 0x3c
    614c:	ea a5       	ldd	r30, Y+42	; 0x2a
    614e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6150:	fe 17       	cp	r31, r30
    6152:	08 f0       	brcs	.+2      	; 0x6156 <IntToString+0x264>
    6154:	1c ae       	std	Y+60, r1	; 0x3c
    6156:	4a a5       	ldd	r20, Y+42	; 0x2a
    6158:	59 ad       	ldd	r21, Y+57	; 0x39
    615a:	45 1b       	sub	r20, r21
    615c:	4d af       	std	Y+61, r20	; 0x3d
    615e:	81 e0       	ldi	r24, 0x01	; 1
    6160:	8e af       	std	Y+62, r24	; 0x3e
    6162:	9d ad       	ldd	r25, Y+61	; 0x3d
    6164:	ea a5       	ldd	r30, Y+42	; 0x2a
    6166:	e9 17       	cp	r30, r25
    6168:	08 f0       	brcs	.+2      	; 0x616c <IntToString+0x27a>
    616a:	1e ae       	std	Y+62, r1	; 0x3e
    616c:	fc ad       	ldd	r31, Y+60	; 0x3c
    616e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6170:	f4 2b       	or	r31, r20
    6172:	fc af       	std	Y+60, r31	; 0x3c
    6174:	5d ad       	ldd	r21, Y+61	; 0x3d
    6176:	5a a7       	std	Y+42, r21	; 0x2a
    6178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    617a:	9b a1       	ldd	r25, Y+35	; 0x23
    617c:	89 1b       	sub	r24, r25
    617e:	8b a7       	std	Y+43, r24	; 0x2b
    6180:	8b a5       	ldd	r24, Y+43	; 0x2b
    6182:	ec ad       	ldd	r30, Y+60	; 0x3c
    6184:	8e 1b       	sub	r24, r30
    6186:	8b a7       	std	Y+43, r24	; 0x2b
    6188:	fc a1       	ldd	r31, Y+36	; 0x24
    618a:	fb 87       	std	Y+11, r31	; 0x0b
    618c:	4d a1       	ldd	r20, Y+37	; 0x25
    618e:	4c 87       	std	Y+12, r20	; 0x0c
    6190:	5e a1       	ldd	r21, Y+38	; 0x26
    6192:	5d 87       	std	Y+13, r21	; 0x0d
    6194:	8f a1       	ldd	r24, Y+39	; 0x27
    6196:	8e 87       	std	Y+14, r24	; 0x0e
    6198:	98 a5       	ldd	r25, Y+40	; 0x28
    619a:	9f 87       	std	Y+15, r25	; 0x0f
    619c:	e9 a5       	ldd	r30, Y+41	; 0x29
    619e:	e8 8b       	std	Y+16, r30	; 0x10
    61a0:	fa a5       	ldd	r31, Y+42	; 0x2a
    61a2:	f9 8b       	std	Y+17, r31	; 0x11
    61a4:	4b a5       	ldd	r20, Y+43	; 0x2b
    61a6:	4a 8b       	std	Y+18, r20	; 0x12
			flag = 0 ;
    61a8:	1a 82       	std	Y+2, r1	; 0x02
    61aa:	19 82       	std	Y+1, r1	; 0x01
    61ac:	6a c0       	rjmp	.+212    	; 0x6282 <IntToString+0x390>
		}
		for(  ; num > 0 ; ++i)
		{
			str[i] = (num%10) + '0' ;
    61ae:	2f 81       	ldd	r18, Y+7	; 0x07
    61b0:	38 85       	ldd	r19, Y+8	; 0x08
    61b2:	89 85       	ldd	r24, Y+9	; 0x09
    61b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    61b6:	4c 01       	movw	r8, r24
    61b8:	82 0e       	add	r8, r18
    61ba:	93 1e       	adc	r9, r19
    61bc:	ab 84       	ldd	r10, Y+11	; 0x0b
    61be:	bc 84       	ldd	r11, Y+12	; 0x0c
    61c0:	cd 84       	ldd	r12, Y+13	; 0x0d
    61c2:	de 84       	ldd	r13, Y+14	; 0x0e
    61c4:	ef 84       	ldd	r14, Y+15	; 0x0f
    61c6:	f8 88       	ldd	r15, Y+16	; 0x10
    61c8:	09 89       	ldd	r16, Y+17	; 0x11
    61ca:	1a 89       	ldd	r17, Y+18	; 0x12
    61cc:	2a 2d       	mov	r18, r10
    61ce:	3b 2d       	mov	r19, r11
    61d0:	4c 2d       	mov	r20, r12
    61d2:	5d 2d       	mov	r21, r13
    61d4:	6e 2d       	mov	r22, r14
    61d6:	7f 2d       	mov	r23, r15
    61d8:	80 2f       	mov	r24, r16
    61da:	91 2f       	mov	r25, r17
    61dc:	0f 2e       	mov	r0, r31
    61de:	fa e0       	ldi	r31, 0x0A	; 10
    61e0:	af 2e       	mov	r10, r31
    61e2:	f0 2d       	mov	r31, r0
    61e4:	bb 24       	eor	r11, r11
    61e6:	cc 24       	eor	r12, r12
    61e8:	dd 24       	eor	r13, r13
    61ea:	ee 24       	eor	r14, r14
    61ec:	ff 24       	eor	r15, r15
    61ee:	00 e0       	ldi	r16, 0x00	; 0
    61f0:	10 e0       	ldi	r17, 0x00	; 0
    61f2:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    61f6:	a2 2e       	mov	r10, r18
    61f8:	b3 2e       	mov	r11, r19
    61fa:	c4 2e       	mov	r12, r20
    61fc:	d5 2e       	mov	r13, r21
    61fe:	e6 2e       	mov	r14, r22
    6200:	f7 2e       	mov	r15, r23
    6202:	08 2f       	mov	r16, r24
    6204:	19 2f       	mov	r17, r25
    6206:	2a 2d       	mov	r18, r10
    6208:	3b 2d       	mov	r19, r11
    620a:	4c 2d       	mov	r20, r12
    620c:	5d 2d       	mov	r21, r13
    620e:	6e 2d       	mov	r22, r14
    6210:	7f 2d       	mov	r23, r15
    6212:	80 2f       	mov	r24, r16
    6214:	91 2f       	mov	r25, r17
    6216:	82 2f       	mov	r24, r18
    6218:	80 5d       	subi	r24, 0xD0	; 208
    621a:	f4 01       	movw	r30, r8
    621c:	80 83       	st	Z, r24
			num /= 10 ;
    621e:	ab 84       	ldd	r10, Y+11	; 0x0b
    6220:	bc 84       	ldd	r11, Y+12	; 0x0c
    6222:	cd 84       	ldd	r12, Y+13	; 0x0d
    6224:	de 84       	ldd	r13, Y+14	; 0x0e
    6226:	ef 84       	ldd	r14, Y+15	; 0x0f
    6228:	f8 88       	ldd	r15, Y+16	; 0x10
    622a:	09 89       	ldd	r16, Y+17	; 0x11
    622c:	1a 89       	ldd	r17, Y+18	; 0x12
    622e:	2a 2d       	mov	r18, r10
    6230:	3b 2d       	mov	r19, r11
    6232:	4c 2d       	mov	r20, r12
    6234:	5d 2d       	mov	r21, r13
    6236:	6e 2d       	mov	r22, r14
    6238:	7f 2d       	mov	r23, r15
    623a:	80 2f       	mov	r24, r16
    623c:	91 2f       	mov	r25, r17
    623e:	0f 2e       	mov	r0, r31
    6240:	fa e0       	ldi	r31, 0x0A	; 10
    6242:	af 2e       	mov	r10, r31
    6244:	f0 2d       	mov	r31, r0
    6246:	bb 24       	eor	r11, r11
    6248:	cc 24       	eor	r12, r12
    624a:	dd 24       	eor	r13, r13
    624c:	ee 24       	eor	r14, r14
    624e:	ff 24       	eor	r15, r15
    6250:	00 e0       	ldi	r16, 0x00	; 0
    6252:	10 e0       	ldi	r17, 0x00	; 0
    6254:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    6258:	a2 2e       	mov	r10, r18
    625a:	b3 2e       	mov	r11, r19
    625c:	c4 2e       	mov	r12, r20
    625e:	d5 2e       	mov	r13, r21
    6260:	e6 2e       	mov	r14, r22
    6262:	f7 2e       	mov	r15, r23
    6264:	08 2f       	mov	r16, r24
    6266:	19 2f       	mov	r17, r25
    6268:	ab 86       	std	Y+11, r10	; 0x0b
    626a:	bc 86       	std	Y+12, r11	; 0x0c
    626c:	cd 86       	std	Y+13, r12	; 0x0d
    626e:	de 86       	std	Y+14, r13	; 0x0e
    6270:	ef 86       	std	Y+15, r14	; 0x0f
    6272:	f8 8a       	std	Y+16, r15	; 0x10
    6274:	09 8b       	std	Y+17, r16	; 0x11
    6276:	1a 8b       	std	Y+18, r17	; 0x12
		{
			str[i++] = '-' ;
			num *= -1 ;
			flag = 0 ;
		}
		for(  ; num > 0 ; ++i)
    6278:	8f 81       	ldd	r24, Y+7	; 0x07
    627a:	98 85       	ldd	r25, Y+8	; 0x08
    627c:	01 96       	adiw	r24, 0x01	; 1
    627e:	98 87       	std	Y+8, r25	; 0x08
    6280:	8f 83       	std	Y+7, r24	; 0x07
    6282:	8a 89       	ldd	r24, Y+18	; 0x12
    6284:	18 16       	cp	r1, r24
    6286:	0c f4       	brge	.+2      	; 0x628a <IntToString+0x398>
    6288:	92 cf       	rjmp	.-220    	; 0x61ae <IntToString+0x2bc>
    628a:	8a 89       	ldd	r24, Y+18	; 0x12
    628c:	88 23       	and	r24, r24
    628e:	71 f5       	brne	.+92     	; 0x62ec <IntToString+0x3fa>
    6290:	89 89       	ldd	r24, Y+17	; 0x11
    6292:	88 23       	and	r24, r24
    6294:	09 f0       	breq	.+2      	; 0x6298 <IntToString+0x3a6>
    6296:	8b cf       	rjmp	.-234    	; 0x61ae <IntToString+0x2bc>
    6298:	89 89       	ldd	r24, Y+17	; 0x11
    629a:	88 23       	and	r24, r24
    629c:	39 f5       	brne	.+78     	; 0x62ec <IntToString+0x3fa>
    629e:	88 89       	ldd	r24, Y+16	; 0x10
    62a0:	88 23       	and	r24, r24
    62a2:	09 f0       	breq	.+2      	; 0x62a6 <IntToString+0x3b4>
    62a4:	84 cf       	rjmp	.-248    	; 0x61ae <IntToString+0x2bc>
    62a6:	88 89       	ldd	r24, Y+16	; 0x10
    62a8:	88 23       	and	r24, r24
    62aa:	01 f5       	brne	.+64     	; 0x62ec <IntToString+0x3fa>
    62ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    62ae:	88 23       	and	r24, r24
    62b0:	09 f0       	breq	.+2      	; 0x62b4 <IntToString+0x3c2>
    62b2:	7d cf       	rjmp	.-262    	; 0x61ae <IntToString+0x2bc>
    62b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    62b6:	88 23       	and	r24, r24
    62b8:	c9 f4       	brne	.+50     	; 0x62ec <IntToString+0x3fa>
    62ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    62bc:	88 23       	and	r24, r24
    62be:	09 f0       	breq	.+2      	; 0x62c2 <IntToString+0x3d0>
    62c0:	76 cf       	rjmp	.-276    	; 0x61ae <IntToString+0x2bc>
    62c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    62c4:	88 23       	and	r24, r24
    62c6:	91 f4       	brne	.+36     	; 0x62ec <IntToString+0x3fa>
    62c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    62ca:	88 23       	and	r24, r24
    62cc:	09 f0       	breq	.+2      	; 0x62d0 <IntToString+0x3de>
    62ce:	6f cf       	rjmp	.-290    	; 0x61ae <IntToString+0x2bc>
    62d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    62d2:	88 23       	and	r24, r24
    62d4:	59 f4       	brne	.+22     	; 0x62ec <IntToString+0x3fa>
    62d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    62d8:	88 23       	and	r24, r24
    62da:	09 f0       	breq	.+2      	; 0x62de <IntToString+0x3ec>
    62dc:	68 cf       	rjmp	.-304    	; 0x61ae <IntToString+0x2bc>
    62de:	8c 85       	ldd	r24, Y+12	; 0x0c
    62e0:	88 23       	and	r24, r24
    62e2:	21 f4       	brne	.+8      	; 0x62ec <IntToString+0x3fa>
    62e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    62e6:	88 23       	and	r24, r24
    62e8:	09 f0       	breq	.+2      	; 0x62ec <IntToString+0x3fa>
    62ea:	61 cf       	rjmp	.-318    	; 0x61ae <IntToString+0x2bc>
		{
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
    62ec:	89 81       	ldd	r24, Y+1	; 0x01
    62ee:	9a 81       	ldd	r25, Y+2	; 0x02
    62f0:	00 97       	sbiw	r24, 0x00	; 0
    62f2:	09 f4       	brne	.+2      	; 0x62f6 <IntToString+0x404>
    62f4:	62 c0       	rjmp	.+196    	; 0x63ba <IntToString+0x4c8>
		{
			for( j= 0; j < (i/2) ; ++j)
    62f6:	1e 82       	std	Y+6, r1	; 0x06
    62f8:	1d 82       	std	Y+5, r1	; 0x05
    62fa:	3c c0       	rjmp	.+120    	; 0x6374 <IntToString+0x482>
			{
				temp = str[i-j-1] ;
    62fc:	2f 81       	ldd	r18, Y+7	; 0x07
    62fe:	38 85       	ldd	r19, Y+8	; 0x08
    6300:	8d 81       	ldd	r24, Y+5	; 0x05
    6302:	9e 81       	ldd	r25, Y+6	; 0x06
    6304:	a9 01       	movw	r20, r18
    6306:	48 1b       	sub	r20, r24
    6308:	59 0b       	sbc	r21, r25
    630a:	ca 01       	movw	r24, r20
    630c:	9c 01       	movw	r18, r24
    630e:	21 50       	subi	r18, 0x01	; 1
    6310:	30 40       	sbci	r19, 0x00	; 0
    6312:	89 85       	ldd	r24, Y+9	; 0x09
    6314:	9a 85       	ldd	r25, Y+10	; 0x0a
    6316:	fc 01       	movw	r30, r24
    6318:	e2 0f       	add	r30, r18
    631a:	f3 1f       	adc	r31, r19
    631c:	80 81       	ld	r24, Z
    631e:	88 2f       	mov	r24, r24
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	9c 83       	std	Y+4, r25	; 0x04
    6324:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j-1] = str[j] ;
    6326:	2f 81       	ldd	r18, Y+7	; 0x07
    6328:	38 85       	ldd	r19, Y+8	; 0x08
    632a:	8d 81       	ldd	r24, Y+5	; 0x05
    632c:	9e 81       	ldd	r25, Y+6	; 0x06
    632e:	f9 01       	movw	r30, r18
    6330:	e8 1b       	sub	r30, r24
    6332:	f9 0b       	sbc	r31, r25
    6334:	cf 01       	movw	r24, r30
    6336:	9c 01       	movw	r18, r24
    6338:	21 50       	subi	r18, 0x01	; 1
    633a:	30 40       	sbci	r19, 0x00	; 0
    633c:	89 85       	ldd	r24, Y+9	; 0x09
    633e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6340:	dc 01       	movw	r26, r24
    6342:	a2 0f       	add	r26, r18
    6344:	b3 1f       	adc	r27, r19
    6346:	2d 81       	ldd	r18, Y+5	; 0x05
    6348:	3e 81       	ldd	r19, Y+6	; 0x06
    634a:	89 85       	ldd	r24, Y+9	; 0x09
    634c:	9a 85       	ldd	r25, Y+10	; 0x0a
    634e:	fc 01       	movw	r30, r24
    6350:	e2 0f       	add	r30, r18
    6352:	f3 1f       	adc	r31, r19
    6354:	80 81       	ld	r24, Z
    6356:	8c 93       	st	X, r24
				str[j] = temp ;
    6358:	2d 81       	ldd	r18, Y+5	; 0x05
    635a:	3e 81       	ldd	r19, Y+6	; 0x06
    635c:	89 85       	ldd	r24, Y+9	; 0x09
    635e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6360:	fc 01       	movw	r30, r24
    6362:	e2 0f       	add	r30, r18
    6364:	f3 1f       	adc	r31, r19
    6366:	8b 81       	ldd	r24, Y+3	; 0x03
    6368:	80 83       	st	Z, r24
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
		{
			for( j= 0; j < (i/2) ; ++j)
    636a:	8d 81       	ldd	r24, Y+5	; 0x05
    636c:	9e 81       	ldd	r25, Y+6	; 0x06
    636e:	01 96       	adiw	r24, 0x01	; 1
    6370:	9e 83       	std	Y+6, r25	; 0x06
    6372:	8d 83       	std	Y+5, r24	; 0x05
    6374:	8f 81       	ldd	r24, Y+7	; 0x07
    6376:	98 85       	ldd	r25, Y+8	; 0x08
    6378:	21 96       	adiw	r28, 0x01	; 1
    637a:	9f af       	std	Y+63, r25	; 0x3f
    637c:	8e af       	std	Y+62, r24	; 0x3e
    637e:	21 97       	sbiw	r28, 0x01	; 1
    6380:	21 96       	adiw	r28, 0x01	; 1
    6382:	4e ad       	ldd	r20, Y+62	; 0x3e
    6384:	5f ad       	ldd	r21, Y+63	; 0x3f
    6386:	21 97       	sbiw	r28, 0x01	; 1
    6388:	55 23       	and	r21, r21
    638a:	4c f4       	brge	.+18     	; 0x639e <IntToString+0x4ac>
    638c:	21 96       	adiw	r28, 0x01	; 1
    638e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6390:	9f ad       	ldd	r25, Y+63	; 0x3f
    6392:	21 97       	sbiw	r28, 0x01	; 1
    6394:	01 96       	adiw	r24, 0x01	; 1
    6396:	21 96       	adiw	r28, 0x01	; 1
    6398:	9f af       	std	Y+63, r25	; 0x3f
    639a:	8e af       	std	Y+62, r24	; 0x3e
    639c:	21 97       	sbiw	r28, 0x01	; 1
    639e:	21 96       	adiw	r28, 0x01	; 1
    63a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    63a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    63a4:	21 97       	sbiw	r28, 0x01	; 1
    63a6:	95 95       	asr	r25
    63a8:	87 95       	ror	r24
    63aa:	9c 01       	movw	r18, r24
    63ac:	8d 81       	ldd	r24, Y+5	; 0x05
    63ae:	9e 81       	ldd	r25, Y+6	; 0x06
    63b0:	82 17       	cp	r24, r18
    63b2:	93 07       	cpc	r25, r19
    63b4:	0c f4       	brge	.+2      	; 0x63b8 <IntToString+0x4c6>
    63b6:	a2 cf       	rjmp	.-188    	; 0x62fc <IntToString+0x40a>
    63b8:	5f c0       	rjmp	.+190    	; 0x6478 <IntToString+0x586>
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    63ba:	81 e0       	ldi	r24, 0x01	; 1
    63bc:	90 e0       	ldi	r25, 0x00	; 0
    63be:	9e 83       	std	Y+6, r25	; 0x06
    63c0:	8d 83       	std	Y+5, r24	; 0x05
    63c2:	38 c0       	rjmp	.+112    	; 0x6434 <IntToString+0x542>
			{
				temp = str[i-j] ;
    63c4:	2f 81       	ldd	r18, Y+7	; 0x07
    63c6:	38 85       	ldd	r19, Y+8	; 0x08
    63c8:	8d 81       	ldd	r24, Y+5	; 0x05
    63ca:	9e 81       	ldd	r25, Y+6	; 0x06
    63cc:	f9 01       	movw	r30, r18
    63ce:	e8 1b       	sub	r30, r24
    63d0:	f9 0b       	sbc	r31, r25
    63d2:	cf 01       	movw	r24, r30
    63d4:	9c 01       	movw	r18, r24
    63d6:	89 85       	ldd	r24, Y+9	; 0x09
    63d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    63da:	fc 01       	movw	r30, r24
    63dc:	e2 0f       	add	r30, r18
    63de:	f3 1f       	adc	r31, r19
    63e0:	80 81       	ld	r24, Z
    63e2:	88 2f       	mov	r24, r24
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	9c 83       	std	Y+4, r25	; 0x04
    63e8:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j] = str[j] ;
    63ea:	2f 81       	ldd	r18, Y+7	; 0x07
    63ec:	38 85       	ldd	r19, Y+8	; 0x08
    63ee:	8d 81       	ldd	r24, Y+5	; 0x05
    63f0:	9e 81       	ldd	r25, Y+6	; 0x06
    63f2:	a9 01       	movw	r20, r18
    63f4:	48 1b       	sub	r20, r24
    63f6:	59 0b       	sbc	r21, r25
    63f8:	ca 01       	movw	r24, r20
    63fa:	9c 01       	movw	r18, r24
    63fc:	89 85       	ldd	r24, Y+9	; 0x09
    63fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6400:	dc 01       	movw	r26, r24
    6402:	a2 0f       	add	r26, r18
    6404:	b3 1f       	adc	r27, r19
    6406:	2d 81       	ldd	r18, Y+5	; 0x05
    6408:	3e 81       	ldd	r19, Y+6	; 0x06
    640a:	89 85       	ldd	r24, Y+9	; 0x09
    640c:	9a 85       	ldd	r25, Y+10	; 0x0a
    640e:	fc 01       	movw	r30, r24
    6410:	e2 0f       	add	r30, r18
    6412:	f3 1f       	adc	r31, r19
    6414:	80 81       	ld	r24, Z
    6416:	8c 93       	st	X, r24
				str[j] = temp ;
    6418:	2d 81       	ldd	r18, Y+5	; 0x05
    641a:	3e 81       	ldd	r19, Y+6	; 0x06
    641c:	89 85       	ldd	r24, Y+9	; 0x09
    641e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6420:	fc 01       	movw	r30, r24
    6422:	e2 0f       	add	r30, r18
    6424:	f3 1f       	adc	r31, r19
    6426:	8b 81       	ldd	r24, Y+3	; 0x03
    6428:	80 83       	st	Z, r24
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    642a:	8d 81       	ldd	r24, Y+5	; 0x05
    642c:	9e 81       	ldd	r25, Y+6	; 0x06
    642e:	01 96       	adiw	r24, 0x01	; 1
    6430:	9e 83       	std	Y+6, r25	; 0x06
    6432:	8d 83       	std	Y+5, r24	; 0x05
    6434:	8f 81       	ldd	r24, Y+7	; 0x07
    6436:	98 85       	ldd	r25, Y+8	; 0x08
    6438:	23 96       	adiw	r28, 0x03	; 3
    643a:	9f af       	std	Y+63, r25	; 0x3f
    643c:	8e af       	std	Y+62, r24	; 0x3e
    643e:	23 97       	sbiw	r28, 0x03	; 3
    6440:	23 96       	adiw	r28, 0x03	; 3
    6442:	8e ad       	ldd	r24, Y+62	; 0x3e
    6444:	9f ad       	ldd	r25, Y+63	; 0x3f
    6446:	23 97       	sbiw	r28, 0x03	; 3
    6448:	99 23       	and	r25, r25
    644a:	4c f4       	brge	.+18     	; 0x645e <IntToString+0x56c>
    644c:	23 96       	adiw	r28, 0x03	; 3
    644e:	ee ad       	ldd	r30, Y+62	; 0x3e
    6450:	ff ad       	ldd	r31, Y+63	; 0x3f
    6452:	23 97       	sbiw	r28, 0x03	; 3
    6454:	31 96       	adiw	r30, 0x01	; 1
    6456:	23 96       	adiw	r28, 0x03	; 3
    6458:	ff af       	std	Y+63, r31	; 0x3f
    645a:	ee af       	std	Y+62, r30	; 0x3e
    645c:	23 97       	sbiw	r28, 0x03	; 3
    645e:	23 96       	adiw	r28, 0x03	; 3
    6460:	8e ad       	ldd	r24, Y+62	; 0x3e
    6462:	9f ad       	ldd	r25, Y+63	; 0x3f
    6464:	23 97       	sbiw	r28, 0x03	; 3
    6466:	95 95       	asr	r25
    6468:	87 95       	ror	r24
    646a:	9c 01       	movw	r18, r24
    646c:	8d 81       	ldd	r24, Y+5	; 0x05
    646e:	9e 81       	ldd	r25, Y+6	; 0x06
    6470:	28 17       	cp	r18, r24
    6472:	39 07       	cpc	r19, r25
    6474:	0c f0       	brlt	.+2      	; 0x6478 <IntToString+0x586>
    6476:	a6 cf       	rjmp	.-180    	; 0x63c4 <IntToString+0x4d2>
				str[j] = temp ;
			}
		}


		str[i] = 0 ;
    6478:	8f 81       	ldd	r24, Y+7	; 0x07
    647a:	98 85       	ldd	r25, Y+8	; 0x08
    647c:	29 85       	ldd	r18, Y+9	; 0x09
    647e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6480:	f9 01       	movw	r30, r18
    6482:	e8 0f       	add	r30, r24
    6484:	f9 1f       	adc	r31, r25
    6486:	10 82       	st	Z, r1

	}
}
    6488:	ce 5b       	subi	r28, 0xBE	; 190
    648a:	df 4f       	sbci	r29, 0xFF	; 255
    648c:	0f b6       	in	r0, 0x3f	; 63
    648e:	f8 94       	cli
    6490:	de bf       	out	0x3e, r29	; 62
    6492:	0f be       	out	0x3f, r0	; 63
    6494:	cd bf       	out	0x3d, r28	; 61
    6496:	cf 91       	pop	r28
    6498:	df 91       	pop	r29
    649a:	1f 91       	pop	r17
    649c:	0f 91       	pop	r16
    649e:	ff 90       	pop	r15
    64a0:	ef 90       	pop	r14
    64a2:	df 90       	pop	r13
    64a4:	cf 90       	pop	r12
    64a6:	bf 90       	pop	r11
    64a8:	af 90       	pop	r10
    64aa:	9f 90       	pop	r9
    64ac:	8f 90       	pop	r8
    64ae:	08 95       	ret

000064b0 <UART_SendNumber>:


void UART_SendNumber (s64 num)
{
    64b0:	8f 92       	push	r8
    64b2:	9f 92       	push	r9
    64b4:	af 92       	push	r10
    64b6:	bf 92       	push	r11
    64b8:	cf 92       	push	r12
    64ba:	df 92       	push	r13
    64bc:	ef 92       	push	r14
    64be:	ff 92       	push	r15
    64c0:	0f 93       	push	r16
    64c2:	1f 93       	push	r17
    64c4:	df 93       	push	r29
    64c6:	cf 93       	push	r28
    64c8:	cd b7       	in	r28, 0x3d	; 61
    64ca:	de b7       	in	r29, 0x3e	; 62
    64cc:	a6 97       	sbiw	r28, 0x26	; 38
    64ce:	0f b6       	in	r0, 0x3f	; 63
    64d0:	f8 94       	cli
    64d2:	de bf       	out	0x3e, r29	; 62
    64d4:	0f be       	out	0x3f, r0	; 63
    64d6:	cd bf       	out	0x3d, r28	; 61
    64d8:	2f 8f       	std	Y+31, r18	; 0x1f
    64da:	38 a3       	std	Y+32, r19	; 0x20
    64dc:	49 a3       	std	Y+33, r20	; 0x21
    64de:	5a a3       	std	Y+34, r21	; 0x22
    64e0:	6b a3       	std	Y+35, r22	; 0x23
    64e2:	7c a3       	std	Y+36, r23	; 0x24
    64e4:	8d a3       	std	Y+37, r24	; 0x25
    64e6:	9e a3       	std	Y+38, r25	; 0x26
	u8 str [30] = {0} ;
    64e8:	8e e1       	ldi	r24, 0x1E	; 30
    64ea:	fe 01       	movw	r30, r28
    64ec:	31 96       	adiw	r30, 0x01	; 1
    64ee:	df 01       	movw	r26, r30
    64f0:	98 2f       	mov	r25, r24
    64f2:	1d 92       	st	X+, r1
    64f4:	9a 95       	dec	r25
    64f6:	e9 f7       	brne	.-6      	; 0x64f2 <UART_SendNumber+0x42>
	IntToString(str , num) ;
    64f8:	8f 8c       	ldd	r8, Y+31	; 0x1f
    64fa:	98 a0       	ldd	r9, Y+32	; 0x20
    64fc:	a9 a0       	ldd	r10, Y+33	; 0x21
    64fe:	ba a0       	ldd	r11, Y+34	; 0x22
    6500:	cb a0       	ldd	r12, Y+35	; 0x23
    6502:	dc a0       	ldd	r13, Y+36	; 0x24
    6504:	ed a0       	ldd	r14, Y+37	; 0x25
    6506:	fe a0       	ldd	r15, Y+38	; 0x26
    6508:	ce 01       	movw	r24, r28
    650a:	01 96       	adiw	r24, 0x01	; 1
    650c:	08 2d       	mov	r16, r8
    650e:	19 2d       	mov	r17, r9
    6510:	2a 2d       	mov	r18, r10
    6512:	3b 2d       	mov	r19, r11
    6514:	4c 2d       	mov	r20, r12
    6516:	5d 2d       	mov	r21, r13
    6518:	6e 2d       	mov	r22, r14
    651a:	7f 2d       	mov	r23, r15
    651c:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <IntToString>
	UART_SendString(str) ;
    6520:	ce 01       	movw	r24, r28
    6522:	01 96       	adiw	r24, 0x01	; 1
    6524:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <UART_SendString>
	
}
    6528:	a6 96       	adiw	r28, 0x26	; 38
    652a:	0f b6       	in	r0, 0x3f	; 63
    652c:	f8 94       	cli
    652e:	de bf       	out	0x3e, r29	; 62
    6530:	0f be       	out	0x3f, r0	; 63
    6532:	cd bf       	out	0x3d, r28	; 61
    6534:	cf 91       	pop	r28
    6536:	df 91       	pop	r29
    6538:	1f 91       	pop	r17
    653a:	0f 91       	pop	r16
    653c:	ff 90       	pop	r15
    653e:	ef 90       	pop	r14
    6540:	df 90       	pop	r13
    6542:	cf 90       	pop	r12
    6544:	bf 90       	pop	r11
    6546:	af 90       	pop	r10
    6548:	9f 90       	pop	r9
    654a:	8f 90       	pop	r8
    654c:	08 95       	ret

0000654e <UART_SendNumberU32>:
void UART_SendNumberU32(u32 num)
{
    654e:	df 93       	push	r29
    6550:	cf 93       	push	r28
    6552:	00 d0       	rcall	.+0      	; 0x6554 <UART_SendNumberU32+0x6>
    6554:	00 d0       	rcall	.+0      	; 0x6556 <UART_SendNumberU32+0x8>
    6556:	00 d0       	rcall	.+0      	; 0x6558 <UART_SendNumberU32+0xa>
    6558:	cd b7       	in	r28, 0x3d	; 61
    655a:	de b7       	in	r29, 0x3e	; 62
    655c:	6b 83       	std	Y+3, r22	; 0x03
    655e:	7c 83       	std	Y+4, r23	; 0x04
    6560:	8d 83       	std	Y+5, r24	; 0x05
    6562:	9e 83       	std	Y+6, r25	; 0x06
	//UART_Send((u8)num);
	//UART_Send((u8)(num>>8));
	//UART_Send((u8)(num>>16));
	//UART_Send((u8)(num>>24));
	u8*p=&num;
    6564:	ce 01       	movw	r24, r28
    6566:	03 96       	adiw	r24, 0x03	; 3
    6568:	9a 83       	std	Y+2, r25	; 0x02
    656a:	89 83       	std	Y+1, r24	; 0x01
	UART_Send(p[0]);
    656c:	e9 81       	ldd	r30, Y+1	; 0x01
    656e:	fa 81       	ldd	r31, Y+2	; 0x02
    6570:	80 81       	ld	r24, Z
    6572:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
	UART_Send(p[1]);
    6576:	89 81       	ldd	r24, Y+1	; 0x01
    6578:	9a 81       	ldd	r25, Y+2	; 0x02
    657a:	fc 01       	movw	r30, r24
    657c:	31 96       	adiw	r30, 0x01	; 1
    657e:	80 81       	ld	r24, Z
    6580:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
	UART_Send(p[2]);
    6584:	89 81       	ldd	r24, Y+1	; 0x01
    6586:	9a 81       	ldd	r25, Y+2	; 0x02
    6588:	fc 01       	movw	r30, r24
    658a:	32 96       	adiw	r30, 0x02	; 2
    658c:	80 81       	ld	r24, Z
    658e:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
	UART_Send(p[3]);
    6592:	89 81       	ldd	r24, Y+1	; 0x01
    6594:	9a 81       	ldd	r25, Y+2	; 0x02
    6596:	fc 01       	movw	r30, r24
    6598:	33 96       	adiw	r30, 0x03	; 3
    659a:	80 81       	ld	r24, Z
    659c:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
}
    65a0:	26 96       	adiw	r28, 0x06	; 6
    65a2:	0f b6       	in	r0, 0x3f	; 63
    65a4:	f8 94       	cli
    65a6:	de bf       	out	0x3e, r29	; 62
    65a8:	0f be       	out	0x3f, r0	; 63
    65aa:	cd bf       	out	0x3d, r28	; 61
    65ac:	cf 91       	pop	r28
    65ae:	df 91       	pop	r29
    65b0:	08 95       	ret

000065b2 <UART_ReceiveNumberU32>:


u32 UART_ReceiveNumberU32(void)
{
    65b2:	0f 93       	push	r16
    65b4:	1f 93       	push	r17
    65b6:	df 93       	push	r29
    65b8:	cf 93       	push	r28
    65ba:	00 d0       	rcall	.+0      	; 0x65bc <UART_ReceiveNumberU32+0xa>
    65bc:	00 d0       	rcall	.+0      	; 0x65be <UART_ReceiveNumberU32+0xc>
    65be:	00 d0       	rcall	.+0      	; 0x65c0 <UART_ReceiveNumberU32+0xe>
    65c0:	cd b7       	in	r28, 0x3d	; 61
    65c2:	de b7       	in	r29, 0x3e	; 62
	//u8 b3=UART_Receive();
	//u8 b4=UART_Receive();
	//u32 num=0;
	//num=b1|(u32)b2<<8|(u32)b2<<16|(u32)b3<<24;
	u32 num;
	u8*p=&num;
    65c4:	ce 01       	movw	r24, r28
    65c6:	03 96       	adiw	r24, 0x03	; 3
    65c8:	9a 83       	std	Y+2, r25	; 0x02
    65ca:	89 83       	std	Y+1, r24	; 0x01
	p[0]=UART_Receive();
    65cc:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    65d0:	e9 81       	ldd	r30, Y+1	; 0x01
    65d2:	fa 81       	ldd	r31, Y+2	; 0x02
    65d4:	80 83       	st	Z, r24
	p[1]=UART_Receive();
    65d6:	89 81       	ldd	r24, Y+1	; 0x01
    65d8:	9a 81       	ldd	r25, Y+2	; 0x02
    65da:	8c 01       	movw	r16, r24
    65dc:	0f 5f       	subi	r16, 0xFF	; 255
    65de:	1f 4f       	sbci	r17, 0xFF	; 255
    65e0:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    65e4:	f8 01       	movw	r30, r16
    65e6:	80 83       	st	Z, r24
	p[2]=UART_Receive();
    65e8:	89 81       	ldd	r24, Y+1	; 0x01
    65ea:	9a 81       	ldd	r25, Y+2	; 0x02
    65ec:	8c 01       	movw	r16, r24
    65ee:	0e 5f       	subi	r16, 0xFE	; 254
    65f0:	1f 4f       	sbci	r17, 0xFF	; 255
    65f2:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    65f6:	f8 01       	movw	r30, r16
    65f8:	80 83       	st	Z, r24
	p[3]=UART_Receive();
    65fa:	89 81       	ldd	r24, Y+1	; 0x01
    65fc:	9a 81       	ldd	r25, Y+2	; 0x02
    65fe:	8c 01       	movw	r16, r24
    6600:	0d 5f       	subi	r16, 0xFD	; 253
    6602:	1f 4f       	sbci	r17, 0xFF	; 255
    6604:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    6608:	f8 01       	movw	r30, r16
    660a:	80 83       	st	Z, r24
	return num;		
    660c:	8b 81       	ldd	r24, Y+3	; 0x03
    660e:	9c 81       	ldd	r25, Y+4	; 0x04
    6610:	ad 81       	ldd	r26, Y+5	; 0x05
    6612:	be 81       	ldd	r27, Y+6	; 0x06
}
    6614:	bc 01       	movw	r22, r24
    6616:	cd 01       	movw	r24, r26
    6618:	26 96       	adiw	r28, 0x06	; 6
    661a:	0f b6       	in	r0, 0x3f	; 63
    661c:	f8 94       	cli
    661e:	de bf       	out	0x3e, r29	; 62
    6620:	0f be       	out	0x3f, r0	; 63
    6622:	cd bf       	out	0x3d, r28	; 61
    6624:	cf 91       	pop	r28
    6626:	df 91       	pop	r29
    6628:	1f 91       	pop	r17
    662a:	0f 91       	pop	r16
    662c:	08 95       	ret

0000662e <UART_SendString_CheckSum>:

void UART_SendString_CheckSum(u8*str)
{
    662e:	df 93       	push	r29
    6630:	cf 93       	push	r28
    6632:	00 d0       	rcall	.+0      	; 0x6634 <UART_SendString_CheckSum+0x6>
    6634:	00 d0       	rcall	.+0      	; 0x6636 <UART_SendString_CheckSum+0x8>
    6636:	00 d0       	rcall	.+0      	; 0x6638 <UART_SendString_CheckSum+0xa>
    6638:	cd b7       	in	r28, 0x3d	; 61
    663a:	de b7       	in	r29, 0x3e	; 62
    663c:	9e 83       	std	Y+6, r25	; 0x06
    663e:	8d 83       	std	Y+5, r24	; 0x05
	u8 i=0,j=0;
    6640:	1c 82       	std	Y+4, r1	; 0x04
    6642:	1b 82       	std	Y+3, r1	; 0x03
	u16 sum=0;
    6644:	1a 82       	std	Y+2, r1	; 0x02
    6646:	19 82       	std	Y+1, r1	; 0x01
	for (i=0;str[i];i++)
    6648:	1c 82       	std	Y+4, r1	; 0x04
    664a:	14 c0       	rjmp	.+40     	; 0x6674 <UART_SendString_CheckSum+0x46>
	{
		sum+=str[i];
    664c:	8c 81       	ldd	r24, Y+4	; 0x04
    664e:	28 2f       	mov	r18, r24
    6650:	30 e0       	ldi	r19, 0x00	; 0
    6652:	8d 81       	ldd	r24, Y+5	; 0x05
    6654:	9e 81       	ldd	r25, Y+6	; 0x06
    6656:	fc 01       	movw	r30, r24
    6658:	e2 0f       	add	r30, r18
    665a:	f3 1f       	adc	r31, r19
    665c:	80 81       	ld	r24, Z
    665e:	28 2f       	mov	r18, r24
    6660:	30 e0       	ldi	r19, 0x00	; 0
    6662:	89 81       	ldd	r24, Y+1	; 0x01
    6664:	9a 81       	ldd	r25, Y+2	; 0x02
    6666:	82 0f       	add	r24, r18
    6668:	93 1f       	adc	r25, r19
    666a:	9a 83       	std	Y+2, r25	; 0x02
    666c:	89 83       	std	Y+1, r24	; 0x01

void UART_SendString_CheckSum(u8*str)
{
	u8 i=0,j=0;
	u16 sum=0;
	for (i=0;str[i];i++)
    666e:	8c 81       	ldd	r24, Y+4	; 0x04
    6670:	8f 5f       	subi	r24, 0xFF	; 255
    6672:	8c 83       	std	Y+4, r24	; 0x04
    6674:	8c 81       	ldd	r24, Y+4	; 0x04
    6676:	28 2f       	mov	r18, r24
    6678:	30 e0       	ldi	r19, 0x00	; 0
    667a:	8d 81       	ldd	r24, Y+5	; 0x05
    667c:	9e 81       	ldd	r25, Y+6	; 0x06
    667e:	fc 01       	movw	r30, r24
    6680:	e2 0f       	add	r30, r18
    6682:	f3 1f       	adc	r31, r19
    6684:	80 81       	ld	r24, Z
    6686:	88 23       	and	r24, r24
    6688:	09 f7       	brne	.-62     	; 0x664c <UART_SendString_CheckSum+0x1e>
	{
		sum+=str[i];
	}
	UART_Send(i);
    668a:	8c 81       	ldd	r24, Y+4	; 0x04
    668c:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
	for (j=0;str[j];j++)
    6690:	1b 82       	std	Y+3, r1	; 0x03
    6692:	0e c0       	rjmp	.+28     	; 0x66b0 <UART_SendString_CheckSum+0x82>
	{
		UART_Send(str[j]);
    6694:	8b 81       	ldd	r24, Y+3	; 0x03
    6696:	28 2f       	mov	r18, r24
    6698:	30 e0       	ldi	r19, 0x00	; 0
    669a:	8d 81       	ldd	r24, Y+5	; 0x05
    669c:	9e 81       	ldd	r25, Y+6	; 0x06
    669e:	fc 01       	movw	r30, r24
    66a0:	e2 0f       	add	r30, r18
    66a2:	f3 1f       	adc	r31, r19
    66a4:	80 81       	ld	r24, Z
    66a6:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
	for (i=0;str[i];i++)
	{
		sum+=str[i];
	}
	UART_Send(i);
	for (j=0;str[j];j++)
    66aa:	8b 81       	ldd	r24, Y+3	; 0x03
    66ac:	8f 5f       	subi	r24, 0xFF	; 255
    66ae:	8b 83       	std	Y+3, r24	; 0x03
    66b0:	8b 81       	ldd	r24, Y+3	; 0x03
    66b2:	28 2f       	mov	r18, r24
    66b4:	30 e0       	ldi	r19, 0x00	; 0
    66b6:	8d 81       	ldd	r24, Y+5	; 0x05
    66b8:	9e 81       	ldd	r25, Y+6	; 0x06
    66ba:	fc 01       	movw	r30, r24
    66bc:	e2 0f       	add	r30, r18
    66be:	f3 1f       	adc	r31, r19
    66c0:	80 81       	ld	r24, Z
    66c2:	88 23       	and	r24, r24
    66c4:	39 f7       	brne	.-50     	; 0x6694 <UART_SendString_CheckSum+0x66>
	{
		UART_Send(str[j]);
	}
	UART_Send((u8)sum);
    66c6:	89 81       	ldd	r24, Y+1	; 0x01
    66c8:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
	UART_Send((u8)sum>>8);
    66cc:	89 81       	ldd	r24, Y+1	; 0x01
    66ce:	88 2f       	mov	r24, r24
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	89 2f       	mov	r24, r25
    66d4:	99 0f       	add	r25, r25
    66d6:	99 0b       	sbc	r25, r25
    66d8:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <UART_Send>
	
}
    66dc:	26 96       	adiw	r28, 0x06	; 6
    66de:	0f b6       	in	r0, 0x3f	; 63
    66e0:	f8 94       	cli
    66e2:	de bf       	out	0x3e, r29	; 62
    66e4:	0f be       	out	0x3f, r0	; 63
    66e6:	cd bf       	out	0x3d, r28	; 61
    66e8:	cf 91       	pop	r28
    66ea:	df 91       	pop	r29
    66ec:	08 95       	ret

000066ee <UART_ReceiveString_CheckSum>:
u8 UART_ReceiveString_CheckSum(u8*str)
{
    66ee:	af 92       	push	r10
    66f0:	bf 92       	push	r11
    66f2:	cf 92       	push	r12
    66f4:	df 92       	push	r13
    66f6:	ef 92       	push	r14
    66f8:	ff 92       	push	r15
    66fa:	0f 93       	push	r16
    66fc:	1f 93       	push	r17
    66fe:	df 93       	push	r29
    6700:	cf 93       	push	r28
    6702:	cd b7       	in	r28, 0x3d	; 61
    6704:	de b7       	in	r29, 0x3e	; 62
    6706:	2b 97       	sbiw	r28, 0x0b	; 11
    6708:	0f b6       	in	r0, 0x3f	; 63
    670a:	f8 94       	cli
    670c:	de bf       	out	0x3e, r29	; 62
    670e:	0f be       	out	0x3f, r0	; 63
    6710:	cd bf       	out	0x3d, r28	; 61
    6712:	9a 87       	std	Y+10, r25	; 0x0a
    6714:	89 87       	std	Y+9, r24	; 0x09
	u8 i,b1,b2,lens=UART_Receive();
    6716:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    671a:	8d 83       	std	Y+5, r24	; 0x05
	u16 sum_calc=0,sum_rece;
    671c:	1c 82       	std	Y+4, r1	; 0x04
    671e:	1b 82       	std	Y+3, r1	; 0x03
	for (i=0;i<lens;i++)
    6720:	18 86       	std	Y+8, r1	; 0x08
    6722:	20 c0       	rjmp	.+64     	; 0x6764 <UART_ReceiveString_CheckSum+0x76>
	{
		str[i]=UART_Receive();
    6724:	88 85       	ldd	r24, Y+8	; 0x08
    6726:	28 2f       	mov	r18, r24
    6728:	30 e0       	ldi	r19, 0x00	; 0
    672a:	89 85       	ldd	r24, Y+9	; 0x09
    672c:	9a 85       	ldd	r25, Y+10	; 0x0a
    672e:	8c 01       	movw	r16, r24
    6730:	02 0f       	add	r16, r18
    6732:	13 1f       	adc	r17, r19
    6734:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    6738:	f8 01       	movw	r30, r16
    673a:	80 83       	st	Z, r24
		sum_calc+=str[i];
    673c:	88 85       	ldd	r24, Y+8	; 0x08
    673e:	28 2f       	mov	r18, r24
    6740:	30 e0       	ldi	r19, 0x00	; 0
    6742:	89 85       	ldd	r24, Y+9	; 0x09
    6744:	9a 85       	ldd	r25, Y+10	; 0x0a
    6746:	fc 01       	movw	r30, r24
    6748:	e2 0f       	add	r30, r18
    674a:	f3 1f       	adc	r31, r19
    674c:	80 81       	ld	r24, Z
    674e:	28 2f       	mov	r18, r24
    6750:	30 e0       	ldi	r19, 0x00	; 0
    6752:	8b 81       	ldd	r24, Y+3	; 0x03
    6754:	9c 81       	ldd	r25, Y+4	; 0x04
    6756:	82 0f       	add	r24, r18
    6758:	93 1f       	adc	r25, r19
    675a:	9c 83       	std	Y+4, r25	; 0x04
    675c:	8b 83       	std	Y+3, r24	; 0x03
}
u8 UART_ReceiveString_CheckSum(u8*str)
{
	u8 i,b1,b2,lens=UART_Receive();
	u16 sum_calc=0,sum_rece;
	for (i=0;i<lens;i++)
    675e:	88 85       	ldd	r24, Y+8	; 0x08
    6760:	8f 5f       	subi	r24, 0xFF	; 255
    6762:	88 87       	std	Y+8, r24	; 0x08
    6764:	98 85       	ldd	r25, Y+8	; 0x08
    6766:	8d 81       	ldd	r24, Y+5	; 0x05
    6768:	98 17       	cp	r25, r24
    676a:	e0 f2       	brcs	.-72     	; 0x6724 <UART_ReceiveString_CheckSum+0x36>
	{
		str[i]=UART_Receive();
		sum_calc+=str[i];
	}
	str[i]=0;
    676c:	88 85       	ldd	r24, Y+8	; 0x08
    676e:	28 2f       	mov	r18, r24
    6770:	30 e0       	ldi	r19, 0x00	; 0
    6772:	89 85       	ldd	r24, Y+9	; 0x09
    6774:	9a 85       	ldd	r25, Y+10	; 0x0a
    6776:	fc 01       	movw	r30, r24
    6778:	e2 0f       	add	r30, r18
    677a:	f3 1f       	adc	r31, r19
    677c:	10 82       	st	Z, r1
	b1=UART_Receive();
    677e:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    6782:	8f 83       	std	Y+7, r24	; 0x07
	b2=UART_Receive();
    6784:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <UART_Receive>
    6788:	8e 83       	std	Y+6, r24	; 0x06
	sum_rece=(u16)b1|(((u16)b2)<<8);
    678a:	8f 81       	ldd	r24, Y+7	; 0x07
    678c:	28 2f       	mov	r18, r24
    678e:	30 e0       	ldi	r19, 0x00	; 0
    6790:	8e 81       	ldd	r24, Y+6	; 0x06
    6792:	88 2f       	mov	r24, r24
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	98 2f       	mov	r25, r24
    6798:	88 27       	eor	r24, r24
    679a:	82 2b       	or	r24, r18
    679c:	93 2b       	or	r25, r19
    679e:	9a 83       	std	Y+2, r25	; 0x02
    67a0:	89 83       	std	Y+1, r24	; 0x01
	/*************************************/
	LCD_GoTo(0,4);
    67a2:	80 e0       	ldi	r24, 0x00	; 0
    67a4:	64 e0       	ldi	r22, 0x04	; 4
    67a6:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <LCD_GoTo>
	LCD_WriteNumber(lens);
    67aa:	8d 81       	ldd	r24, Y+5	; 0x05
    67ac:	a8 2e       	mov	r10, r24
    67ae:	bb 24       	eor	r11, r11
    67b0:	cc 24       	eor	r12, r12
    67b2:	dd 24       	eor	r13, r13
    67b4:	ee 24       	eor	r14, r14
    67b6:	ff 24       	eor	r15, r15
    67b8:	87 01       	movw	r16, r14
    67ba:	2a 2d       	mov	r18, r10
    67bc:	3b 2d       	mov	r19, r11
    67be:	4c 2d       	mov	r20, r12
    67c0:	5d 2d       	mov	r21, r13
    67c2:	6e 2d       	mov	r22, r14
    67c4:	7f 2d       	mov	r23, r15
    67c6:	80 2f       	mov	r24, r16
    67c8:	91 2f       	mov	r25, r17
    67ca:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <LCD_WriteNumber>
	LCD_WriteChar('-');
    67ce:	8d e2       	ldi	r24, 0x2D	; 45
    67d0:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_WriteChar>
	LCD_WriteNumber(sum_calc);
    67d4:	8b 81       	ldd	r24, Y+3	; 0x03
    67d6:	9c 81       	ldd	r25, Y+4	; 0x04
    67d8:	5c 01       	movw	r10, r24
    67da:	cc 24       	eor	r12, r12
    67dc:	dd 24       	eor	r13, r13
    67de:	ee 24       	eor	r14, r14
    67e0:	ff 24       	eor	r15, r15
    67e2:	87 01       	movw	r16, r14
    67e4:	2a 2d       	mov	r18, r10
    67e6:	3b 2d       	mov	r19, r11
    67e8:	4c 2d       	mov	r20, r12
    67ea:	5d 2d       	mov	r21, r13
    67ec:	6e 2d       	mov	r22, r14
    67ee:	7f 2d       	mov	r23, r15
    67f0:	80 2f       	mov	r24, r16
    67f2:	91 2f       	mov	r25, r17
    67f4:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <LCD_WriteNumber>
	LCD_WriteChar('-');
    67f8:	8d e2       	ldi	r24, 0x2D	; 45
    67fa:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <LCD_WriteChar>
	LCD_WriteNumber(sum_rece);
    67fe:	89 81       	ldd	r24, Y+1	; 0x01
    6800:	9a 81       	ldd	r25, Y+2	; 0x02
    6802:	5c 01       	movw	r10, r24
    6804:	cc 24       	eor	r12, r12
    6806:	dd 24       	eor	r13, r13
    6808:	ee 24       	eor	r14, r14
    680a:	ff 24       	eor	r15, r15
    680c:	87 01       	movw	r16, r14
    680e:	2a 2d       	mov	r18, r10
    6810:	3b 2d       	mov	r19, r11
    6812:	4c 2d       	mov	r20, r12
    6814:	5d 2d       	mov	r21, r13
    6816:	6e 2d       	mov	r22, r14
    6818:	7f 2d       	mov	r23, r15
    681a:	80 2f       	mov	r24, r16
    681c:	91 2f       	mov	r25, r17
    681e:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <LCD_WriteNumber>
	if (sum_calc==sum_rece)
    6822:	2b 81       	ldd	r18, Y+3	; 0x03
    6824:	3c 81       	ldd	r19, Y+4	; 0x04
    6826:	89 81       	ldd	r24, Y+1	; 0x01
    6828:	9a 81       	ldd	r25, Y+2	; 0x02
    682a:	28 17       	cp	r18, r24
    682c:	39 07       	cpc	r19, r25
    682e:	19 f4       	brne	.+6      	; 0x6836 <UART_ReceiveString_CheckSum+0x148>
	{
		return 1;
    6830:	f1 e0       	ldi	r31, 0x01	; 1
    6832:	fb 87       	std	Y+11, r31	; 0x0b
    6834:	04 c0       	rjmp	.+8      	; 0x683e <UART_ReceiveString_CheckSum+0x150>
	}
	else
	{
		str[0]=0;
    6836:	e9 85       	ldd	r30, Y+9	; 0x09
    6838:	fa 85       	ldd	r31, Y+10	; 0x0a
    683a:	10 82       	st	Z, r1
		return 0;
    683c:	1b 86       	std	Y+11, r1	; 0x0b
    683e:	8b 85       	ldd	r24, Y+11	; 0x0b
	}
	
}
    6840:	2b 96       	adiw	r28, 0x0b	; 11
    6842:	0f b6       	in	r0, 0x3f	; 63
    6844:	f8 94       	cli
    6846:	de bf       	out	0x3e, r29	; 62
    6848:	0f be       	out	0x3f, r0	; 63
    684a:	cd bf       	out	0x3d, r28	; 61
    684c:	cf 91       	pop	r28
    684e:	df 91       	pop	r29
    6850:	1f 91       	pop	r17
    6852:	0f 91       	pop	r16
    6854:	ff 90       	pop	r15
    6856:	ef 90       	pop	r14
    6858:	df 90       	pop	r13
    685a:	cf 90       	pop	r12
    685c:	bf 90       	pop	r11
    685e:	af 90       	pop	r10
    6860:	08 95       	ret

00006862 <UART_SendString_Asynch>:
static u8* RX_Str;
static void TX_Func(void);
static void RX_Func(void);
static u8 TX_Flag=1;
void UART_SendString_Asynch(u8*str)
{
    6862:	df 93       	push	r29
    6864:	cf 93       	push	r28
    6866:	00 d0       	rcall	.+0      	; 0x6868 <UART_SendString_Asynch+0x6>
    6868:	cd b7       	in	r28, 0x3d	; 61
    686a:	de b7       	in	r29, 0x3e	; 62
    686c:	9a 83       	std	Y+2, r25	; 0x02
    686e:	89 83       	std	Y+1, r24	; 0x01
	if (TX_Flag==1)
    6870:	80 91 72 01 	lds	r24, 0x0172
    6874:	81 30       	cpi	r24, 0x01	; 1
    6876:	99 f4       	brne	.+38     	; 0x689e <UART_SendString_Asynch+0x3c>
	{
	TX_Flag=0;
    6878:	10 92 72 01 	sts	0x0172, r1
		UART_TX_SetCallBack(TX_Func);
    687c:	84 e5       	ldi	r24, 0x54	; 84
    687e:	94 e3       	ldi	r25, 0x34	; 52
    6880:	0e 94 91 2e 	call	0x5d22	; 0x5d22 <UART_TX_SetCallBack>
		UART_TX_InterruptEnable();
    6884:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <UART_TX_InterruptEnable>
		UART_SendNoBlock(str[0]);
    6888:	e9 81       	ldd	r30, Y+1	; 0x01
    688a:	fa 81       	ldd	r31, Y+2	; 0x02
    688c:	80 81       	ld	r24, Z
    688e:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <UART_SendNoBlock>
		TX_Str=str;
    6892:	89 81       	ldd	r24, Y+1	; 0x01
    6894:	9a 81       	ldd	r25, Y+2	; 0x02
    6896:	90 93 ac 01 	sts	0x01AC, r25
    689a:	80 93 ab 01 	sts	0x01AB, r24
		
	
	}
	
}
    689e:	0f 90       	pop	r0
    68a0:	0f 90       	pop	r0
    68a2:	cf 91       	pop	r28
    68a4:	df 91       	pop	r29
    68a6:	08 95       	ret

000068a8 <TX_Func>:

static void TX_Func(void)
{
    68a8:	df 93       	push	r29
    68aa:	cf 93       	push	r28
    68ac:	cd b7       	in	r28, 0x3d	; 61
    68ae:	de b7       	in	r29, 0x3e	; 62
	static u8 i=1;
	if (TX_Str[i]!=0)
    68b0:	20 91 ab 01 	lds	r18, 0x01AB
    68b4:	30 91 ac 01 	lds	r19, 0x01AC
    68b8:	80 91 73 01 	lds	r24, 0x0173
    68bc:	88 2f       	mov	r24, r24
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	f9 01       	movw	r30, r18
    68c2:	e8 0f       	add	r30, r24
    68c4:	f9 1f       	adc	r31, r25
    68c6:	80 81       	ld	r24, Z
    68c8:	88 23       	and	r24, r24
    68ca:	a1 f0       	breq	.+40     	; 0x68f4 <TX_Func+0x4c>
	{
		UART_SendNoBlock(TX_Str[i]);
    68cc:	20 91 ab 01 	lds	r18, 0x01AB
    68d0:	30 91 ac 01 	lds	r19, 0x01AC
    68d4:	80 91 73 01 	lds	r24, 0x0173
    68d8:	88 2f       	mov	r24, r24
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	f9 01       	movw	r30, r18
    68de:	e8 0f       	add	r30, r24
    68e0:	f9 1f       	adc	r31, r25
    68e2:	80 81       	ld	r24, Z
    68e4:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <UART_SendNoBlock>
		i++;
    68e8:	80 91 73 01 	lds	r24, 0x0173
    68ec:	8f 5f       	subi	r24, 0xFF	; 255
    68ee:	80 93 73 01 	sts	0x0173, r24
    68f2:	06 c0       	rjmp	.+12     	; 0x6900 <TX_Func+0x58>
	}
	else
	{
		i=1;
    68f4:	81 e0       	ldi	r24, 0x01	; 1
    68f6:	80 93 73 01 	sts	0x0173, r24
		
		TX_Flag=1;
    68fa:	81 e0       	ldi	r24, 0x01	; 1
    68fc:	80 93 72 01 	sts	0x0172, r24
	}
	
}
    6900:	cf 91       	pop	r28
    6902:	df 91       	pop	r29
    6904:	08 95       	ret

00006906 <UART_ReceiveString_Asynch>:

void UART_ReceiveString_Asynch(u8*str)
{
    6906:	df 93       	push	r29
    6908:	cf 93       	push	r28
    690a:	00 d0       	rcall	.+0      	; 0x690c <UART_ReceiveString_Asynch+0x6>
    690c:	cd b7       	in	r28, 0x3d	; 61
    690e:	de b7       	in	r29, 0x3e	; 62
    6910:	9a 83       	std	Y+2, r25	; 0x02
    6912:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_InterruptEnable();
    6914:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(RX_Func);
    6918:	8b e9       	ldi	r24, 0x9B	; 155
    691a:	94 e3       	ldi	r25, 0x34	; 52
    691c:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <UART_RX_SetCallBack>
	RX_Str=str;
    6920:	89 81       	ldd	r24, Y+1	; 0x01
    6922:	9a 81       	ldd	r25, Y+2	; 0x02
    6924:	90 93 ae 01 	sts	0x01AE, r25
    6928:	80 93 ad 01 	sts	0x01AD, r24
}
    692c:	0f 90       	pop	r0
    692e:	0f 90       	pop	r0
    6930:	cf 91       	pop	r28
    6932:	df 91       	pop	r29
    6934:	08 95       	ret

00006936 <RX_Func>:

static void RX_Func(void)
{
    6936:	0f 93       	push	r16
    6938:	1f 93       	push	r17
    693a:	df 93       	push	r29
    693c:	cf 93       	push	r28
    693e:	cd b7       	in	r28, 0x3d	; 61
    6940:	de b7       	in	r29, 0x3e	; 62
	static u8 i=0;
	RX_Str[i]=UART_ReceiveNoBlock();
    6942:	20 91 ad 01 	lds	r18, 0x01AD
    6946:	30 91 ae 01 	lds	r19, 0x01AE
    694a:	80 91 aa 01 	lds	r24, 0x01AA
    694e:	88 2f       	mov	r24, r24
    6950:	90 e0       	ldi	r25, 0x00	; 0
    6952:	89 01       	movw	r16, r18
    6954:	08 0f       	add	r16, r24
    6956:	19 1f       	adc	r17, r25
    6958:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <UART_ReceiveNoBlock>
    695c:	f8 01       	movw	r30, r16
    695e:	80 83       	st	Z, r24
	i++;
    6960:	80 91 aa 01 	lds	r24, 0x01AA
    6964:	8f 5f       	subi	r24, 0xFF	; 255
    6966:	80 93 aa 01 	sts	0x01AA, r24
    696a:	cf 91       	pop	r28
    696c:	df 91       	pop	r29
    696e:	1f 91       	pop	r17
    6970:	0f 91       	pop	r16
    6972:	08 95       	ret

00006974 <func>:
	Y = 0b1011 ,		//11		-.--
	Z = 0b1100			//12		--..
}Morse_t;

void func (void)
{
    6974:	df 93       	push	r29
    6976:	cf 93       	push	r28
    6978:	cd b7       	in	r28, 0x3d	; 61
    697a:	de b7       	in	r29, 0x3e	; 62
	;
}
    697c:	cf 91       	pop	r28
    697e:	df 91       	pop	r29
    6980:	08 95       	ret

00006982 <main>:


int main(void)
{
    6982:	df 93       	push	r29
    6984:	cf 93       	push	r28
    6986:	00 d0       	rcall	.+0      	; 0x6988 <main+0x6>
    6988:	0f 92       	push	r0
    698a:	cd b7       	in	r28, 0x3d	; 61
    698c:	de b7       	in	r29, 0x3e	; 62
	DIO_Init() ;
    698e:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_Init>
	LCD_Init() ;
    6992:	0e 94 0b 20 	call	0x4016	; 0x4016 <LCD_Init>
	UART_Init() ;
    6996:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <UART_Init>
	sei() ;
    699a:	78 94       	sei
	SPI_MasterInit();
    699c:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <SPI_MasterInit>


    while (1) 
    {

		UART_ReceiveString(strzeros) ;				//receiving the array that contain the number of zeros for each element
    69a0:	84 e1       	ldi	r24, 0x14	; 20
    69a2:	92 e0       	ldi	r25, 0x02	; 2
    69a4:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <UART_ReceiveString>
		UART_ReceiveString(strones)  ;				//receiving the array that contain the number of ones for each element
    69a8:	86 e4       	ldi	r24, 0x46	; 70
    69aa:	92 e0       	ldi	r25, 0x02	; 2
    69ac:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <UART_ReceiveString>
		//check if the sending and receiving are done well
		if(!UART_ReceiveString_CheckSum(STR))		//receiving the array of the elements each one is a signal that represents a character
    69b0:	8f ea       	ldi	r24, 0xAF	; 175
    69b2:	91 e0       	ldi	r25, 0x01	; 1
    69b4:	0e 94 77 33 	call	0x66ee	; 0x66ee <UART_ReceiveString_CheckSum>
    69b8:	88 23       	and	r24, r24
    69ba:	49 f4       	brne	.+18     	; 0x69ce <main+0x4c>
		{
			//if they are not done well the LCD will print "wrong !!"
			LCD_GoTo(1 ,0) ; 
    69bc:	81 e0       	ldi	r24, 0x01	; 1
    69be:	60 e0       	ldi	r22, 0x00	; 0
    69c0:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <LCD_GoTo>
			LCD_WriteString((u8*)"wrong !!") ;
    69c4:	80 e6       	ldi	r24, 0x60	; 96
    69c6:	90 e0       	ldi	r25, 0x00	; 0
    69c8:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <LCD_WriteString>
    69cc:	15 c3       	rjmp	.+1578   	; 0x6ff8 <main+0x676>

    	/*UART_u8RecAsynch(func ,strzeros);
    	UART_u8RecAsynch(func ,strones);
    	UART_u8RecAsynch(func ,STR);*/
			//if they are done well the for loop will iterate on every element in the array
			for(u8 i= 0 ; STR[i] ; ++i)
    69ce:	19 82       	std	Y+1, r1	; 0x01
    69d0:	09 c3       	rjmp	.+1554   	; 0x6fe4 <main+0x662>
			{
				//we will represent every signal with its own character
				switch(STR[i])
    69d2:	89 81       	ldd	r24, Y+1	; 0x01
    69d4:	88 2f       	mov	r24, r24
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	fc 01       	movw	r30, r24
    69da:	e1 55       	subi	r30, 0x51	; 81
    69dc:	fe 4f       	sbci	r31, 0xFE	; 254
    69de:	80 81       	ld	r24, Z
    69e0:	28 2f       	mov	r18, r24
    69e2:	30 e0       	ldi	r19, 0x00	; 0
    69e4:	3b 83       	std	Y+3, r19	; 0x03
    69e6:	2a 83       	std	Y+2, r18	; 0x02
    69e8:	8a 81       	ldd	r24, Y+2	; 0x02
    69ea:	9b 81       	ldd	r25, Y+3	; 0x03
    69ec:	87 30       	cpi	r24, 0x07	; 7
    69ee:	91 05       	cpc	r25, r1
    69f0:	09 f4       	brne	.+2      	; 0x69f4 <main+0x72>
    69f2:	36 c2       	rjmp	.+1132   	; 0x6e60 <main+0x4de>
    69f4:	2a 81       	ldd	r18, Y+2	; 0x02
    69f6:	3b 81       	ldd	r19, Y+3	; 0x03
    69f8:	28 30       	cpi	r18, 0x08	; 8
    69fa:	31 05       	cpc	r19, r1
    69fc:	2c f5       	brge	.+74     	; 0x6a48 <main+0xc6>
    69fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6a00:	9b 81       	ldd	r25, Y+3	; 0x03
    6a02:	83 30       	cpi	r24, 0x03	; 3
    6a04:	91 05       	cpc	r25, r1
    6a06:	09 f4       	brne	.+2      	; 0x6a0a <main+0x88>
    6a08:	71 c2       	rjmp	.+1250   	; 0x6eec <main+0x56a>
    6a0a:	2a 81       	ldd	r18, Y+2	; 0x02
    6a0c:	3b 81       	ldd	r19, Y+3	; 0x03
    6a0e:	24 30       	cpi	r18, 0x04	; 4
    6a10:	31 05       	cpc	r19, r1
    6a12:	6c f4       	brge	.+26     	; 0x6a2e <main+0xac>
    6a14:	8a 81       	ldd	r24, Y+2	; 0x02
    6a16:	9b 81       	ldd	r25, Y+3	; 0x03
    6a18:	81 30       	cpi	r24, 0x01	; 1
    6a1a:	91 05       	cpc	r25, r1
    6a1c:	09 f4       	brne	.+2      	; 0x6a20 <main+0x9e>
    6a1e:	3f c0       	rjmp	.+126    	; 0x6a9e <main+0x11c>
    6a20:	2a 81       	ldd	r18, Y+2	; 0x02
    6a22:	3b 81       	ldd	r19, Y+3	; 0x03
    6a24:	22 30       	cpi	r18, 0x02	; 2
    6a26:	31 05       	cpc	r19, r1
    6a28:	09 f4       	brne	.+2      	; 0x6a2c <main+0xaa>
    6a2a:	76 c1       	rjmp	.+748    	; 0x6d18 <main+0x396>
    6a2c:	d8 c2       	rjmp	.+1456   	; 0x6fde <main+0x65c>
    6a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a30:	9b 81       	ldd	r25, Y+3	; 0x03
    6a32:	85 30       	cpi	r24, 0x05	; 5
    6a34:	91 05       	cpc	r25, r1
    6a36:	09 f4       	brne	.+2      	; 0x6a3a <main+0xb8>
    6a38:	4b c2       	rjmp	.+1174   	; 0x6ed0 <main+0x54e>
    6a3a:	2a 81       	ldd	r18, Y+2	; 0x02
    6a3c:	3b 81       	ldd	r19, Y+3	; 0x03
    6a3e:	26 30       	cpi	r18, 0x06	; 6
    6a40:	31 05       	cpc	r19, r1
    6a42:	0c f0       	brlt	.+2      	; 0x6a46 <main+0xc4>
    6a44:	cb c1       	rjmp	.+918    	; 0x6ddc <main+0x45a>
    6a46:	c9 c0       	rjmp	.+402    	; 0x6bda <main+0x258>
    6a48:	8a 81       	ldd	r24, Y+2	; 0x02
    6a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a4c:	8b 30       	cpi	r24, 0x0B	; 11
    6a4e:	91 05       	cpc	r25, r1
    6a50:	09 f4       	brne	.+2      	; 0x6a54 <main+0xd2>
    6a52:	aa c2       	rjmp	.+1364   	; 0x6fa8 <main+0x626>
    6a54:	2a 81       	ldd	r18, Y+2	; 0x02
    6a56:	3b 81       	ldd	r19, Y+3	; 0x03
    6a58:	2c 30       	cpi	r18, 0x0C	; 12
    6a5a:	31 05       	cpc	r19, r1
    6a5c:	6c f4       	brge	.+26     	; 0x6a78 <main+0xf6>
    6a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a60:	9b 81       	ldd	r25, Y+3	; 0x03
    6a62:	89 30       	cpi	r24, 0x09	; 9
    6a64:	91 05       	cpc	r25, r1
    6a66:	09 f4       	brne	.+2      	; 0x6a6a <main+0xe8>
    6a68:	91 c2       	rjmp	.+1314   	; 0x6f8c <main+0x60a>
    6a6a:	2a 81       	ldd	r18, Y+2	; 0x02
    6a6c:	3b 81       	ldd	r19, Y+3	; 0x03
    6a6e:	2a 30       	cpi	r18, 0x0A	; 10
    6a70:	31 05       	cpc	r19, r1
    6a72:	0c f0       	brlt	.+2      	; 0x6a76 <main+0xf4>
    6a74:	a4 c0       	rjmp	.+328    	; 0x6bbe <main+0x23c>
    6a76:	95 c0       	rjmp	.+298    	; 0x6ba2 <main+0x220>
    6a78:	8a 81       	ldd	r24, Y+2	; 0x02
    6a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a7c:	8d 30       	cpi	r24, 0x0D	; 13
    6a7e:	91 05       	cpc	r25, r1
    6a80:	09 f4       	brne	.+2      	; 0x6a84 <main+0x102>
    6a82:	76 c2       	rjmp	.+1260   	; 0x6f70 <main+0x5ee>
    6a84:	2a 81       	ldd	r18, Y+2	; 0x02
    6a86:	3b 81       	ldd	r19, Y+3	; 0x03
    6a88:	2d 30       	cpi	r18, 0x0D	; 13
    6a8a:	31 05       	cpc	r19, r1
    6a8c:	0c f4       	brge	.+2      	; 0x6a90 <main+0x10e>
    6a8e:	9a c2       	rjmp	.+1332   	; 0x6fc4 <main+0x642>
    6a90:	8a 81       	ldd	r24, Y+2	; 0x02
    6a92:	9b 81       	ldd	r25, Y+3	; 0x03
    6a94:	81 32       	cpi	r24, 0x21	; 33
    6a96:	91 05       	cpc	r25, r1
    6a98:	09 f4       	brne	.+2      	; 0x6a9c <main+0x11a>
    6a9a:	e1 c0       	rjmp	.+450    	; 0x6c5e <main+0x2dc>
    6a9c:	a0 c2       	rjmp	.+1344   	; 0x6fde <main+0x65c>
				{
				//some signals has the same values of others so we will check at these cases the number of dots and dashes
					case 1 :		//A, T, U, V
						if((strones[i] == 1) && (strzeros[i] == 1))
    6a9e:	89 81       	ldd	r24, Y+1	; 0x01
    6aa0:	88 2f       	mov	r24, r24
    6aa2:	90 e0       	ldi	r25, 0x00	; 0
    6aa4:	fc 01       	movw	r30, r24
    6aa6:	ea 5b       	subi	r30, 0xBA	; 186
    6aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    6aaa:	80 81       	ld	r24, Z
    6aac:	81 30       	cpi	r24, 0x01	; 1
    6aae:	b9 f4       	brne	.+46     	; 0x6ade <main+0x15c>
    6ab0:	89 81       	ldd	r24, Y+1	; 0x01
    6ab2:	88 2f       	mov	r24, r24
    6ab4:	90 e0       	ldi	r25, 0x00	; 0
    6ab6:	fc 01       	movw	r30, r24
    6ab8:	ec 5e       	subi	r30, 0xEC	; 236
    6aba:	fd 4f       	sbci	r31, 0xFD	; 253
    6abc:	80 81       	ld	r24, Z
    6abe:	81 30       	cpi	r24, 0x01	; 1
    6ac0:	71 f4       	brne	.+28     	; 0x6ade <main+0x15c>
						{
							newstr[ss_counter++] ='A' ;
    6ac2:	20 91 13 02 	lds	r18, 0x0213
    6ac6:	82 2f       	mov	r24, r18
    6ac8:	90 e0       	ldi	r25, 0x00	; 0
    6aca:	fc 01       	movw	r30, r24
    6acc:	ef 51       	subi	r30, 0x1F	; 31
    6ace:	fe 4f       	sbci	r31, 0xFE	; 254
    6ad0:	81 e4       	ldi	r24, 0x41	; 65
    6ad2:	80 83       	st	Z, r24
    6ad4:	82 2f       	mov	r24, r18
    6ad6:	8f 5f       	subi	r24, 0xFF	; 255
    6ad8:	80 93 13 02 	sts	0x0213, r24
    6adc:	80 c2       	rjmp	.+1280   	; 0x6fde <main+0x65c>
						} 
						else if((strones[i] == 1) && (strzeros[i] == '!' ))
    6ade:	89 81       	ldd	r24, Y+1	; 0x01
    6ae0:	88 2f       	mov	r24, r24
    6ae2:	90 e0       	ldi	r25, 0x00	; 0
    6ae4:	fc 01       	movw	r30, r24
    6ae6:	ea 5b       	subi	r30, 0xBA	; 186
    6ae8:	fd 4f       	sbci	r31, 0xFD	; 253
    6aea:	80 81       	ld	r24, Z
    6aec:	81 30       	cpi	r24, 0x01	; 1
    6aee:	b9 f4       	brne	.+46     	; 0x6b1e <main+0x19c>
    6af0:	89 81       	ldd	r24, Y+1	; 0x01
    6af2:	88 2f       	mov	r24, r24
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	fc 01       	movw	r30, r24
    6af8:	ec 5e       	subi	r30, 0xEC	; 236
    6afa:	fd 4f       	sbci	r31, 0xFD	; 253
    6afc:	80 81       	ld	r24, Z
    6afe:	81 32       	cpi	r24, 0x21	; 33
    6b00:	71 f4       	brne	.+28     	; 0x6b1e <main+0x19c>
						{
							newstr[ss_counter++] ='T' ;
    6b02:	20 91 13 02 	lds	r18, 0x0213
    6b06:	82 2f       	mov	r24, r18
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	ef 51       	subi	r30, 0x1F	; 31
    6b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    6b10:	84 e5       	ldi	r24, 0x54	; 84
    6b12:	80 83       	st	Z, r24
    6b14:	82 2f       	mov	r24, r18
    6b16:	8f 5f       	subi	r24, 0xFF	; 255
    6b18:	80 93 13 02 	sts	0x0213, r24
    6b1c:	60 c2       	rjmp	.+1216   	; 0x6fde <main+0x65c>
						}
						else if((strones[i] == 1) && (strzeros[i] == 2))
    6b1e:	89 81       	ldd	r24, Y+1	; 0x01
    6b20:	88 2f       	mov	r24, r24
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	fc 01       	movw	r30, r24
    6b26:	ea 5b       	subi	r30, 0xBA	; 186
    6b28:	fd 4f       	sbci	r31, 0xFD	; 253
    6b2a:	80 81       	ld	r24, Z
    6b2c:	81 30       	cpi	r24, 0x01	; 1
    6b2e:	b9 f4       	brne	.+46     	; 0x6b5e <main+0x1dc>
    6b30:	89 81       	ldd	r24, Y+1	; 0x01
    6b32:	88 2f       	mov	r24, r24
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	fc 01       	movw	r30, r24
    6b38:	ec 5e       	subi	r30, 0xEC	; 236
    6b3a:	fd 4f       	sbci	r31, 0xFD	; 253
    6b3c:	80 81       	ld	r24, Z
    6b3e:	82 30       	cpi	r24, 0x02	; 2
    6b40:	71 f4       	brne	.+28     	; 0x6b5e <main+0x1dc>
						{
							newstr[ss_counter++] ='U' ;
    6b42:	20 91 13 02 	lds	r18, 0x0213
    6b46:	82 2f       	mov	r24, r18
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	fc 01       	movw	r30, r24
    6b4c:	ef 51       	subi	r30, 0x1F	; 31
    6b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    6b50:	85 e5       	ldi	r24, 0x55	; 85
    6b52:	80 83       	st	Z, r24
    6b54:	82 2f       	mov	r24, r18
    6b56:	8f 5f       	subi	r24, 0xFF	; 255
    6b58:	80 93 13 02 	sts	0x0213, r24
    6b5c:	40 c2       	rjmp	.+1152   	; 0x6fde <main+0x65c>
						}
						else if((strones[i] ==1 ) && (strzeros[i] ==3 ))
    6b5e:	89 81       	ldd	r24, Y+1	; 0x01
    6b60:	88 2f       	mov	r24, r24
    6b62:	90 e0       	ldi	r25, 0x00	; 0
    6b64:	fc 01       	movw	r30, r24
    6b66:	ea 5b       	subi	r30, 0xBA	; 186
    6b68:	fd 4f       	sbci	r31, 0xFD	; 253
    6b6a:	80 81       	ld	r24, Z
    6b6c:	81 30       	cpi	r24, 0x01	; 1
    6b6e:	09 f0       	breq	.+2      	; 0x6b72 <main+0x1f0>
    6b70:	36 c2       	rjmp	.+1132   	; 0x6fde <main+0x65c>
    6b72:	89 81       	ldd	r24, Y+1	; 0x01
    6b74:	88 2f       	mov	r24, r24
    6b76:	90 e0       	ldi	r25, 0x00	; 0
    6b78:	fc 01       	movw	r30, r24
    6b7a:	ec 5e       	subi	r30, 0xEC	; 236
    6b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    6b7e:	80 81       	ld	r24, Z
    6b80:	83 30       	cpi	r24, 0x03	; 3
    6b82:	09 f0       	breq	.+2      	; 0x6b86 <main+0x204>
    6b84:	2c c2       	rjmp	.+1112   	; 0x6fde <main+0x65c>
						{
							newstr[ss_counter++] ='V' ;
    6b86:	20 91 13 02 	lds	r18, 0x0213
    6b8a:	82 2f       	mov	r24, r18
    6b8c:	90 e0       	ldi	r25, 0x00	; 0
    6b8e:	fc 01       	movw	r30, r24
    6b90:	ef 51       	subi	r30, 0x1F	; 31
    6b92:	fe 4f       	sbci	r31, 0xFE	; 254
    6b94:	86 e5       	ldi	r24, 0x56	; 86
    6b96:	80 83       	st	Z, r24
    6b98:	82 2f       	mov	r24, r18
    6b9a:	8f 5f       	subi	r24, 0xFF	; 255
    6b9c:	80 93 13 02 	sts	0x0213, r24
    6ba0:	1e c2       	rjmp	.+1084   	; 0x6fde <main+0x65c>
						}
						break ;
					 
					case B :
						newstr[ss_counter++] ='B' ;
    6ba2:	20 91 13 02 	lds	r18, 0x0213
    6ba6:	82 2f       	mov	r24, r18
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	fc 01       	movw	r30, r24
    6bac:	ef 51       	subi	r30, 0x1F	; 31
    6bae:	fe 4f       	sbci	r31, 0xFE	; 254
    6bb0:	82 e4       	ldi	r24, 0x42	; 66
    6bb2:	80 83       	st	Z, r24
    6bb4:	82 2f       	mov	r24, r18
    6bb6:	8f 5f       	subi	r24, 0xFF	; 255
    6bb8:	80 93 13 02 	sts	0x0213, r24
    6bbc:	10 c2       	rjmp	.+1056   	; 0x6fde <main+0x65c>
						break ;
					
					case C :
						newstr[ss_counter++] ='C' ;
    6bbe:	20 91 13 02 	lds	r18, 0x0213
    6bc2:	82 2f       	mov	r24, r18
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	fc 01       	movw	r30, r24
    6bc8:	ef 51       	subi	r30, 0x1F	; 31
    6bca:	fe 4f       	sbci	r31, 0xFE	; 254
    6bcc:	83 e4       	ldi	r24, 0x43	; 67
    6bce:	80 83       	st	Z, r24
    6bd0:	82 2f       	mov	r24, r18
    6bd2:	8f 5f       	subi	r24, 0xFF	; 255
    6bd4:	80 93 13 02 	sts	0x0213, r24
    6bd8:	02 c2       	rjmp	.+1028   	; 0x6fde <main+0x65c>
						break ;
					
					case 4 :		//D, L
						if((strones[i] == 1) && (strzeros[i] == 2))
    6bda:	89 81       	ldd	r24, Y+1	; 0x01
    6bdc:	88 2f       	mov	r24, r24
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	fc 01       	movw	r30, r24
    6be2:	ea 5b       	subi	r30, 0xBA	; 186
    6be4:	fd 4f       	sbci	r31, 0xFD	; 253
    6be6:	80 81       	ld	r24, Z
    6be8:	81 30       	cpi	r24, 0x01	; 1
    6bea:	b9 f4       	brne	.+46     	; 0x6c1a <main+0x298>
    6bec:	89 81       	ldd	r24, Y+1	; 0x01
    6bee:	88 2f       	mov	r24, r24
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	fc 01       	movw	r30, r24
    6bf4:	ec 5e       	subi	r30, 0xEC	; 236
    6bf6:	fd 4f       	sbci	r31, 0xFD	; 253
    6bf8:	80 81       	ld	r24, Z
    6bfa:	82 30       	cpi	r24, 0x02	; 2
    6bfc:	71 f4       	brne	.+28     	; 0x6c1a <main+0x298>
						{
							newstr[ss_counter++] ='D' ;
    6bfe:	20 91 13 02 	lds	r18, 0x0213
    6c02:	82 2f       	mov	r24, r18
    6c04:	90 e0       	ldi	r25, 0x00	; 0
    6c06:	fc 01       	movw	r30, r24
    6c08:	ef 51       	subi	r30, 0x1F	; 31
    6c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    6c0c:	84 e4       	ldi	r24, 0x44	; 68
    6c0e:	80 83       	st	Z, r24
    6c10:	82 2f       	mov	r24, r18
    6c12:	8f 5f       	subi	r24, 0xFF	; 255
    6c14:	80 93 13 02 	sts	0x0213, r24
    6c18:	e2 c1       	rjmp	.+964    	; 0x6fde <main+0x65c>
						}
						else if((strones[i] == 1) && (strzeros[i] ==3 ))
    6c1a:	89 81       	ldd	r24, Y+1	; 0x01
    6c1c:	88 2f       	mov	r24, r24
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	fc 01       	movw	r30, r24
    6c22:	ea 5b       	subi	r30, 0xBA	; 186
    6c24:	fd 4f       	sbci	r31, 0xFD	; 253
    6c26:	80 81       	ld	r24, Z
    6c28:	81 30       	cpi	r24, 0x01	; 1
    6c2a:	09 f0       	breq	.+2      	; 0x6c2e <main+0x2ac>
    6c2c:	d8 c1       	rjmp	.+944    	; 0x6fde <main+0x65c>
    6c2e:	89 81       	ldd	r24, Y+1	; 0x01
    6c30:	88 2f       	mov	r24, r24
    6c32:	90 e0       	ldi	r25, 0x00	; 0
    6c34:	fc 01       	movw	r30, r24
    6c36:	ec 5e       	subi	r30, 0xEC	; 236
    6c38:	fd 4f       	sbci	r31, 0xFD	; 253
    6c3a:	80 81       	ld	r24, Z
    6c3c:	83 30       	cpi	r24, 0x03	; 3
    6c3e:	09 f0       	breq	.+2      	; 0x6c42 <main+0x2c0>
    6c40:	ce c1       	rjmp	.+924    	; 0x6fde <main+0x65c>
						{
							newstr[ss_counter++] ='L' ;
    6c42:	20 91 13 02 	lds	r18, 0x0213
    6c46:	82 2f       	mov	r24, r18
    6c48:	90 e0       	ldi	r25, 0x00	; 0
    6c4a:	fc 01       	movw	r30, r24
    6c4c:	ef 51       	subi	r30, 0x1F	; 31
    6c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    6c50:	8c e4       	ldi	r24, 0x4C	; 76
    6c52:	80 83       	st	Z, r24
    6c54:	82 2f       	mov	r24, r18
    6c56:	8f 5f       	subi	r24, 0xFF	; 255
    6c58:	80 93 13 02 	sts	0x0213, r24
    6c5c:	c0 c1       	rjmp	.+896    	; 0x6fde <main+0x65c>
						}
						break ;
					
						//here we used '!' to represent 0 in sending because 0 will stop the array (null character)
					case '!' :		//E, H, I, S
						if((strzeros[i] == 1))
    6c5e:	89 81       	ldd	r24, Y+1	; 0x01
    6c60:	88 2f       	mov	r24, r24
    6c62:	90 e0       	ldi	r25, 0x00	; 0
    6c64:	fc 01       	movw	r30, r24
    6c66:	ec 5e       	subi	r30, 0xEC	; 236
    6c68:	fd 4f       	sbci	r31, 0xFD	; 253
    6c6a:	80 81       	ld	r24, Z
    6c6c:	81 30       	cpi	r24, 0x01	; 1
    6c6e:	71 f4       	brne	.+28     	; 0x6c8c <main+0x30a>
						{
							newstr[ss_counter++] ='E' ;
    6c70:	20 91 13 02 	lds	r18, 0x0213
    6c74:	82 2f       	mov	r24, r18
    6c76:	90 e0       	ldi	r25, 0x00	; 0
    6c78:	fc 01       	movw	r30, r24
    6c7a:	ef 51       	subi	r30, 0x1F	; 31
    6c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c7e:	85 e4       	ldi	r24, 0x45	; 69
    6c80:	80 83       	st	Z, r24
    6c82:	82 2f       	mov	r24, r18
    6c84:	8f 5f       	subi	r24, 0xFF	; 255
    6c86:	80 93 13 02 	sts	0x0213, r24
    6c8a:	a9 c1       	rjmp	.+850    	; 0x6fde <main+0x65c>
						}
						else if( (strzeros[i] == 4 ))
    6c8c:	89 81       	ldd	r24, Y+1	; 0x01
    6c8e:	88 2f       	mov	r24, r24
    6c90:	90 e0       	ldi	r25, 0x00	; 0
    6c92:	fc 01       	movw	r30, r24
    6c94:	ec 5e       	subi	r30, 0xEC	; 236
    6c96:	fd 4f       	sbci	r31, 0xFD	; 253
    6c98:	80 81       	ld	r24, Z
    6c9a:	84 30       	cpi	r24, 0x04	; 4
    6c9c:	71 f4       	brne	.+28     	; 0x6cba <main+0x338>
						{
							newstr[ss_counter++] ='H' ;
    6c9e:	20 91 13 02 	lds	r18, 0x0213
    6ca2:	82 2f       	mov	r24, r18
    6ca4:	90 e0       	ldi	r25, 0x00	; 0
    6ca6:	fc 01       	movw	r30, r24
    6ca8:	ef 51       	subi	r30, 0x1F	; 31
    6caa:	fe 4f       	sbci	r31, 0xFE	; 254
    6cac:	88 e4       	ldi	r24, 0x48	; 72
    6cae:	80 83       	st	Z, r24
    6cb0:	82 2f       	mov	r24, r18
    6cb2:	8f 5f       	subi	r24, 0xFF	; 255
    6cb4:	80 93 13 02 	sts	0x0213, r24
    6cb8:	92 c1       	rjmp	.+804    	; 0x6fde <main+0x65c>
						}
						else if((strzeros[i] == 2))
    6cba:	89 81       	ldd	r24, Y+1	; 0x01
    6cbc:	88 2f       	mov	r24, r24
    6cbe:	90 e0       	ldi	r25, 0x00	; 0
    6cc0:	fc 01       	movw	r30, r24
    6cc2:	ec 5e       	subi	r30, 0xEC	; 236
    6cc4:	fd 4f       	sbci	r31, 0xFD	; 253
    6cc6:	80 81       	ld	r24, Z
    6cc8:	82 30       	cpi	r24, 0x02	; 2
    6cca:	71 f4       	brne	.+28     	; 0x6ce8 <main+0x366>
						{
							newstr[ss_counter++] ='I' ;
    6ccc:	20 91 13 02 	lds	r18, 0x0213
    6cd0:	82 2f       	mov	r24, r18
    6cd2:	90 e0       	ldi	r25, 0x00	; 0
    6cd4:	fc 01       	movw	r30, r24
    6cd6:	ef 51       	subi	r30, 0x1F	; 31
    6cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    6cda:	89 e4       	ldi	r24, 0x49	; 73
    6cdc:	80 83       	st	Z, r24
    6cde:	82 2f       	mov	r24, r18
    6ce0:	8f 5f       	subi	r24, 0xFF	; 255
    6ce2:	80 93 13 02 	sts	0x0213, r24
    6ce6:	7b c1       	rjmp	.+758    	; 0x6fde <main+0x65c>
						}
						else if(  (strzeros[i] ==3 ))
    6ce8:	89 81       	ldd	r24, Y+1	; 0x01
    6cea:	88 2f       	mov	r24, r24
    6cec:	90 e0       	ldi	r25, 0x00	; 0
    6cee:	fc 01       	movw	r30, r24
    6cf0:	ec 5e       	subi	r30, 0xEC	; 236
    6cf2:	fd 4f       	sbci	r31, 0xFD	; 253
    6cf4:	80 81       	ld	r24, Z
    6cf6:	83 30       	cpi	r24, 0x03	; 3
    6cf8:	09 f0       	breq	.+2      	; 0x6cfc <main+0x37a>
    6cfa:	71 c1       	rjmp	.+738    	; 0x6fde <main+0x65c>
						{
							newstr[ss_counter++] ='S' ;
    6cfc:	20 91 13 02 	lds	r18, 0x0213
    6d00:	82 2f       	mov	r24, r18
    6d02:	90 e0       	ldi	r25, 0x00	; 0
    6d04:	fc 01       	movw	r30, r24
    6d06:	ef 51       	subi	r30, 0x1F	; 31
    6d08:	fe 4f       	sbci	r31, 0xFE	; 254
    6d0a:	83 e5       	ldi	r24, 0x53	; 83
    6d0c:	80 83       	st	Z, r24
    6d0e:	82 2f       	mov	r24, r18
    6d10:	8f 5f       	subi	r24, 0xFF	; 255
    6d12:	80 93 13 02 	sts	0x0213, r24
    6d16:	63 c1       	rjmp	.+710    	; 0x6fde <main+0x65c>
						}
					
						break ;
					
					case 2 :		//F, N, R
						if((strones[i] == 1) && (strzeros[i] == 3))
    6d18:	89 81       	ldd	r24, Y+1	; 0x01
    6d1a:	88 2f       	mov	r24, r24
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	fc 01       	movw	r30, r24
    6d20:	ea 5b       	subi	r30, 0xBA	; 186
    6d22:	fd 4f       	sbci	r31, 0xFD	; 253
    6d24:	80 81       	ld	r24, Z
    6d26:	81 30       	cpi	r24, 0x01	; 1
    6d28:	b9 f4       	brne	.+46     	; 0x6d58 <main+0x3d6>
    6d2a:	89 81       	ldd	r24, Y+1	; 0x01
    6d2c:	88 2f       	mov	r24, r24
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	fc 01       	movw	r30, r24
    6d32:	ec 5e       	subi	r30, 0xEC	; 236
    6d34:	fd 4f       	sbci	r31, 0xFD	; 253
    6d36:	80 81       	ld	r24, Z
    6d38:	83 30       	cpi	r24, 0x03	; 3
    6d3a:	71 f4       	brne	.+28     	; 0x6d58 <main+0x3d6>
						{
							newstr[ss_counter++] ='F' ;
    6d3c:	20 91 13 02 	lds	r18, 0x0213
    6d40:	82 2f       	mov	r24, r18
    6d42:	90 e0       	ldi	r25, 0x00	; 0
    6d44:	fc 01       	movw	r30, r24
    6d46:	ef 51       	subi	r30, 0x1F	; 31
    6d48:	fe 4f       	sbci	r31, 0xFE	; 254
    6d4a:	86 e4       	ldi	r24, 0x46	; 70
    6d4c:	80 83       	st	Z, r24
    6d4e:	82 2f       	mov	r24, r18
    6d50:	8f 5f       	subi	r24, 0xFF	; 255
    6d52:	80 93 13 02 	sts	0x0213, r24
    6d56:	43 c1       	rjmp	.+646    	; 0x6fde <main+0x65c>
						}
						else if((strones[i] == 1) && (strzeros[i] == 1))
    6d58:	89 81       	ldd	r24, Y+1	; 0x01
    6d5a:	88 2f       	mov	r24, r24
    6d5c:	90 e0       	ldi	r25, 0x00	; 0
    6d5e:	fc 01       	movw	r30, r24
    6d60:	ea 5b       	subi	r30, 0xBA	; 186
    6d62:	fd 4f       	sbci	r31, 0xFD	; 253
    6d64:	80 81       	ld	r24, Z
    6d66:	81 30       	cpi	r24, 0x01	; 1
    6d68:	b9 f4       	brne	.+46     	; 0x6d98 <main+0x416>
    6d6a:	89 81       	ldd	r24, Y+1	; 0x01
    6d6c:	88 2f       	mov	r24, r24
    6d6e:	90 e0       	ldi	r25, 0x00	; 0
    6d70:	fc 01       	movw	r30, r24
    6d72:	ec 5e       	subi	r30, 0xEC	; 236
    6d74:	fd 4f       	sbci	r31, 0xFD	; 253
    6d76:	80 81       	ld	r24, Z
    6d78:	81 30       	cpi	r24, 0x01	; 1
    6d7a:	71 f4       	brne	.+28     	; 0x6d98 <main+0x416>
						{
							newstr[ss_counter++] ='N' ;
    6d7c:	20 91 13 02 	lds	r18, 0x0213
    6d80:	82 2f       	mov	r24, r18
    6d82:	90 e0       	ldi	r25, 0x00	; 0
    6d84:	fc 01       	movw	r30, r24
    6d86:	ef 51       	subi	r30, 0x1F	; 31
    6d88:	fe 4f       	sbci	r31, 0xFE	; 254
    6d8a:	8e e4       	ldi	r24, 0x4E	; 78
    6d8c:	80 83       	st	Z, r24
    6d8e:	82 2f       	mov	r24, r18
    6d90:	8f 5f       	subi	r24, 0xFF	; 255
    6d92:	80 93 13 02 	sts	0x0213, r24
    6d96:	23 c1       	rjmp	.+582    	; 0x6fde <main+0x65c>
						}
						else if((strones[i] == 1) && (strzeros[i] == 2))
    6d98:	89 81       	ldd	r24, Y+1	; 0x01
    6d9a:	88 2f       	mov	r24, r24
    6d9c:	90 e0       	ldi	r25, 0x00	; 0
    6d9e:	fc 01       	movw	r30, r24
    6da0:	ea 5b       	subi	r30, 0xBA	; 186
    6da2:	fd 4f       	sbci	r31, 0xFD	; 253
    6da4:	80 81       	ld	r24, Z
    6da6:	81 30       	cpi	r24, 0x01	; 1
    6da8:	09 f0       	breq	.+2      	; 0x6dac <main+0x42a>
    6daa:	19 c1       	rjmp	.+562    	; 0x6fde <main+0x65c>
    6dac:	89 81       	ldd	r24, Y+1	; 0x01
    6dae:	88 2f       	mov	r24, r24
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	fc 01       	movw	r30, r24
    6db4:	ec 5e       	subi	r30, 0xEC	; 236
    6db6:	fd 4f       	sbci	r31, 0xFD	; 253
    6db8:	80 81       	ld	r24, Z
    6dba:	82 30       	cpi	r24, 0x02	; 2
    6dbc:	09 f0       	breq	.+2      	; 0x6dc0 <main+0x43e>
    6dbe:	0f c1       	rjmp	.+542    	; 0x6fde <main+0x65c>
						{
							newstr[ss_counter++] ='R' ;
    6dc0:	20 91 13 02 	lds	r18, 0x0213
    6dc4:	82 2f       	mov	r24, r18
    6dc6:	90 e0       	ldi	r25, 0x00	; 0
    6dc8:	fc 01       	movw	r30, r24
    6dca:	ef 51       	subi	r30, 0x1F	; 31
    6dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    6dce:	82 e5       	ldi	r24, 0x52	; 82
    6dd0:	80 83       	st	Z, r24
    6dd2:	82 2f       	mov	r24, r18
    6dd4:	8f 5f       	subi	r24, 0xFF	; 255
    6dd6:	80 93 13 02 	sts	0x0213, r24
    6dda:	01 c1       	rjmp	.+514    	; 0x6fde <main+0x65c>
						}
						break ;
					
					case 6 :		//G, P
						if((strones[i] == 2) && (strzeros[i] == 1))
    6ddc:	89 81       	ldd	r24, Y+1	; 0x01
    6dde:	88 2f       	mov	r24, r24
    6de0:	90 e0       	ldi	r25, 0x00	; 0
    6de2:	fc 01       	movw	r30, r24
    6de4:	ea 5b       	subi	r30, 0xBA	; 186
    6de6:	fd 4f       	sbci	r31, 0xFD	; 253
    6de8:	80 81       	ld	r24, Z
    6dea:	82 30       	cpi	r24, 0x02	; 2
    6dec:	b9 f4       	brne	.+46     	; 0x6e1c <main+0x49a>
    6dee:	89 81       	ldd	r24, Y+1	; 0x01
    6df0:	88 2f       	mov	r24, r24
    6df2:	90 e0       	ldi	r25, 0x00	; 0
    6df4:	fc 01       	movw	r30, r24
    6df6:	ec 5e       	subi	r30, 0xEC	; 236
    6df8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dfa:	80 81       	ld	r24, Z
    6dfc:	81 30       	cpi	r24, 0x01	; 1
    6dfe:	71 f4       	brne	.+28     	; 0x6e1c <main+0x49a>
						{
							newstr[ss_counter++] ='G' ;
    6e00:	20 91 13 02 	lds	r18, 0x0213
    6e04:	82 2f       	mov	r24, r18
    6e06:	90 e0       	ldi	r25, 0x00	; 0
    6e08:	fc 01       	movw	r30, r24
    6e0a:	ef 51       	subi	r30, 0x1F	; 31
    6e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    6e0e:	87 e4       	ldi	r24, 0x47	; 71
    6e10:	80 83       	st	Z, r24
    6e12:	82 2f       	mov	r24, r18
    6e14:	8f 5f       	subi	r24, 0xFF	; 255
    6e16:	80 93 13 02 	sts	0x0213, r24
    6e1a:	e1 c0       	rjmp	.+450    	; 0x6fde <main+0x65c>
						}
						else if((strones[i] == 2) && (strzeros[i] == 2))
    6e1c:	89 81       	ldd	r24, Y+1	; 0x01
    6e1e:	88 2f       	mov	r24, r24
    6e20:	90 e0       	ldi	r25, 0x00	; 0
    6e22:	fc 01       	movw	r30, r24
    6e24:	ea 5b       	subi	r30, 0xBA	; 186
    6e26:	fd 4f       	sbci	r31, 0xFD	; 253
    6e28:	80 81       	ld	r24, Z
    6e2a:	82 30       	cpi	r24, 0x02	; 2
    6e2c:	09 f0       	breq	.+2      	; 0x6e30 <main+0x4ae>
    6e2e:	d7 c0       	rjmp	.+430    	; 0x6fde <main+0x65c>
    6e30:	89 81       	ldd	r24, Y+1	; 0x01
    6e32:	88 2f       	mov	r24, r24
    6e34:	90 e0       	ldi	r25, 0x00	; 0
    6e36:	fc 01       	movw	r30, r24
    6e38:	ec 5e       	subi	r30, 0xEC	; 236
    6e3a:	fd 4f       	sbci	r31, 0xFD	; 253
    6e3c:	80 81       	ld	r24, Z
    6e3e:	82 30       	cpi	r24, 0x02	; 2
    6e40:	09 f0       	breq	.+2      	; 0x6e44 <main+0x4c2>
    6e42:	cd c0       	rjmp	.+410    	; 0x6fde <main+0x65c>
						{
							newstr[ss_counter++] ='P' ;
    6e44:	20 91 13 02 	lds	r18, 0x0213
    6e48:	82 2f       	mov	r24, r18
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	fc 01       	movw	r30, r24
    6e4e:	ef 51       	subi	r30, 0x1F	; 31
    6e50:	fe 4f       	sbci	r31, 0xFE	; 254
    6e52:	80 e5       	ldi	r24, 0x50	; 80
    6e54:	80 83       	st	Z, r24
    6e56:	82 2f       	mov	r24, r18
    6e58:	8f 5f       	subi	r24, 0xFF	; 255
    6e5a:	80 93 13 02 	sts	0x0213, r24
    6e5e:	bf c0       	rjmp	.+382    	; 0x6fde <main+0x65c>
						}
						break ;
					
						case 7 :		//J, O
						if((strones[i] == 3) && (strzeros[i] == 1))
    6e60:	89 81       	ldd	r24, Y+1	; 0x01
    6e62:	88 2f       	mov	r24, r24
    6e64:	90 e0       	ldi	r25, 0x00	; 0
    6e66:	fc 01       	movw	r30, r24
    6e68:	ea 5b       	subi	r30, 0xBA	; 186
    6e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    6e6c:	80 81       	ld	r24, Z
    6e6e:	83 30       	cpi	r24, 0x03	; 3
    6e70:	b9 f4       	brne	.+46     	; 0x6ea0 <main+0x51e>
    6e72:	89 81       	ldd	r24, Y+1	; 0x01
    6e74:	88 2f       	mov	r24, r24
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	fc 01       	movw	r30, r24
    6e7a:	ec 5e       	subi	r30, 0xEC	; 236
    6e7c:	fd 4f       	sbci	r31, 0xFD	; 253
    6e7e:	80 81       	ld	r24, Z
    6e80:	81 30       	cpi	r24, 0x01	; 1
    6e82:	71 f4       	brne	.+28     	; 0x6ea0 <main+0x51e>
						{
							newstr[ss_counter++] ='J' ;
    6e84:	20 91 13 02 	lds	r18, 0x0213
    6e88:	82 2f       	mov	r24, r18
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	fc 01       	movw	r30, r24
    6e8e:	ef 51       	subi	r30, 0x1F	; 31
    6e90:	fe 4f       	sbci	r31, 0xFE	; 254
    6e92:	8a e4       	ldi	r24, 0x4A	; 74
    6e94:	80 83       	st	Z, r24
    6e96:	82 2f       	mov	r24, r18
    6e98:	8f 5f       	subi	r24, 0xFF	; 255
    6e9a:	80 93 13 02 	sts	0x0213, r24
    6e9e:	9f c0       	rjmp	.+318    	; 0x6fde <main+0x65c>
						}
						else if( (strzeros[i] == '!'))
    6ea0:	89 81       	ldd	r24, Y+1	; 0x01
    6ea2:	88 2f       	mov	r24, r24
    6ea4:	90 e0       	ldi	r25, 0x00	; 0
    6ea6:	fc 01       	movw	r30, r24
    6ea8:	ec 5e       	subi	r30, 0xEC	; 236
    6eaa:	fd 4f       	sbci	r31, 0xFD	; 253
    6eac:	80 81       	ld	r24, Z
    6eae:	81 32       	cpi	r24, 0x21	; 33
    6eb0:	09 f0       	breq	.+2      	; 0x6eb4 <main+0x532>
    6eb2:	95 c0       	rjmp	.+298    	; 0x6fde <main+0x65c>
						{
							newstr[ss_counter++] ='O' ;
    6eb4:	20 91 13 02 	lds	r18, 0x0213
    6eb8:	82 2f       	mov	r24, r18
    6eba:	90 e0       	ldi	r25, 0x00	; 0
    6ebc:	fc 01       	movw	r30, r24
    6ebe:	ef 51       	subi	r30, 0x1F	; 31
    6ec0:	fe 4f       	sbci	r31, 0xFE	; 254
    6ec2:	8f e4       	ldi	r24, 0x4F	; 79
    6ec4:	80 83       	st	Z, r24
    6ec6:	82 2f       	mov	r24, r18
    6ec8:	8f 5f       	subi	r24, 0xFF	; 255
    6eca:	80 93 13 02 	sts	0x0213, r24
    6ece:	87 c0       	rjmp	.+270    	; 0x6fde <main+0x65c>
						}
						break;
					
					case K :
						newstr[ss_counter++] ='K' ;
    6ed0:	20 91 13 02 	lds	r18, 0x0213
    6ed4:	82 2f       	mov	r24, r18
    6ed6:	90 e0       	ldi	r25, 0x00	; 0
    6ed8:	fc 01       	movw	r30, r24
    6eda:	ef 51       	subi	r30, 0x1F	; 31
    6edc:	fe 4f       	sbci	r31, 0xFE	; 254
    6ede:	8b e4       	ldi	r24, 0x4B	; 75
    6ee0:	80 83       	st	Z, r24
    6ee2:	82 2f       	mov	r24, r18
    6ee4:	8f 5f       	subi	r24, 0xFF	; 255
    6ee6:	80 93 13 02 	sts	0x0213, r24
    6eea:	79 c0       	rjmp	.+242    	; 0x6fde <main+0x65c>
						break ;
					
					case 3 :		//M, W
						if((strones[i] == 2) && (strzeros[i] == '!'))
    6eec:	89 81       	ldd	r24, Y+1	; 0x01
    6eee:	88 2f       	mov	r24, r24
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	fc 01       	movw	r30, r24
    6ef4:	ea 5b       	subi	r30, 0xBA	; 186
    6ef6:	fd 4f       	sbci	r31, 0xFD	; 253
    6ef8:	80 81       	ld	r24, Z
    6efa:	82 30       	cpi	r24, 0x02	; 2
    6efc:	b9 f4       	brne	.+46     	; 0x6f2c <main+0x5aa>
    6efe:	89 81       	ldd	r24, Y+1	; 0x01
    6f00:	88 2f       	mov	r24, r24
    6f02:	90 e0       	ldi	r25, 0x00	; 0
    6f04:	fc 01       	movw	r30, r24
    6f06:	ec 5e       	subi	r30, 0xEC	; 236
    6f08:	fd 4f       	sbci	r31, 0xFD	; 253
    6f0a:	80 81       	ld	r24, Z
    6f0c:	81 32       	cpi	r24, 0x21	; 33
    6f0e:	71 f4       	brne	.+28     	; 0x6f2c <main+0x5aa>
						{
							newstr[ss_counter++] ='M' ;
    6f10:	20 91 13 02 	lds	r18, 0x0213
    6f14:	82 2f       	mov	r24, r18
    6f16:	90 e0       	ldi	r25, 0x00	; 0
    6f18:	fc 01       	movw	r30, r24
    6f1a:	ef 51       	subi	r30, 0x1F	; 31
    6f1c:	fe 4f       	sbci	r31, 0xFE	; 254
    6f1e:	8d e4       	ldi	r24, 0x4D	; 77
    6f20:	80 83       	st	Z, r24
    6f22:	82 2f       	mov	r24, r18
    6f24:	8f 5f       	subi	r24, 0xFF	; 255
    6f26:	80 93 13 02 	sts	0x0213, r24
    6f2a:	59 c0       	rjmp	.+178    	; 0x6fde <main+0x65c>
						}	
						else if((strones[i] == 2) && (strzeros[i] == 1))
    6f2c:	89 81       	ldd	r24, Y+1	; 0x01
    6f2e:	88 2f       	mov	r24, r24
    6f30:	90 e0       	ldi	r25, 0x00	; 0
    6f32:	fc 01       	movw	r30, r24
    6f34:	ea 5b       	subi	r30, 0xBA	; 186
    6f36:	fd 4f       	sbci	r31, 0xFD	; 253
    6f38:	80 81       	ld	r24, Z
    6f3a:	82 30       	cpi	r24, 0x02	; 2
    6f3c:	09 f0       	breq	.+2      	; 0x6f40 <main+0x5be>
    6f3e:	4f c0       	rjmp	.+158    	; 0x6fde <main+0x65c>
    6f40:	89 81       	ldd	r24, Y+1	; 0x01
    6f42:	88 2f       	mov	r24, r24
    6f44:	90 e0       	ldi	r25, 0x00	; 0
    6f46:	fc 01       	movw	r30, r24
    6f48:	ec 5e       	subi	r30, 0xEC	; 236
    6f4a:	fd 4f       	sbci	r31, 0xFD	; 253
    6f4c:	80 81       	ld	r24, Z
    6f4e:	81 30       	cpi	r24, 0x01	; 1
    6f50:	09 f0       	breq	.+2      	; 0x6f54 <main+0x5d2>
    6f52:	45 c0       	rjmp	.+138    	; 0x6fde <main+0x65c>
						{
							newstr[ss_counter++] ='W' ;
    6f54:	20 91 13 02 	lds	r18, 0x0213
    6f58:	82 2f       	mov	r24, r18
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	fc 01       	movw	r30, r24
    6f5e:	ef 51       	subi	r30, 0x1F	; 31
    6f60:	fe 4f       	sbci	r31, 0xFE	; 254
    6f62:	87 e5       	ldi	r24, 0x57	; 87
    6f64:	80 83       	st	Z, r24
    6f66:	82 2f       	mov	r24, r18
    6f68:	8f 5f       	subi	r24, 0xFF	; 255
    6f6a:	80 93 13 02 	sts	0x0213, r24
    6f6e:	37 c0       	rjmp	.+110    	; 0x6fde <main+0x65c>
						}
						break ;
					
					case Q :
						newstr[ss_counter++] ='Q' ;
    6f70:	20 91 13 02 	lds	r18, 0x0213
    6f74:	82 2f       	mov	r24, r18
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	fc 01       	movw	r30, r24
    6f7a:	ef 51       	subi	r30, 0x1F	; 31
    6f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    6f7e:	81 e5       	ldi	r24, 0x51	; 81
    6f80:	80 83       	st	Z, r24
    6f82:	82 2f       	mov	r24, r18
    6f84:	8f 5f       	subi	r24, 0xFF	; 255
    6f86:	80 93 13 02 	sts	0x0213, r24
    6f8a:	29 c0       	rjmp	.+82     	; 0x6fde <main+0x65c>
						break ;
			
					case X :
						newstr[ss_counter++] ='X' ;
    6f8c:	20 91 13 02 	lds	r18, 0x0213
    6f90:	82 2f       	mov	r24, r18
    6f92:	90 e0       	ldi	r25, 0x00	; 0
    6f94:	fc 01       	movw	r30, r24
    6f96:	ef 51       	subi	r30, 0x1F	; 31
    6f98:	fe 4f       	sbci	r31, 0xFE	; 254
    6f9a:	88 e5       	ldi	r24, 0x58	; 88
    6f9c:	80 83       	st	Z, r24
    6f9e:	82 2f       	mov	r24, r18
    6fa0:	8f 5f       	subi	r24, 0xFF	; 255
    6fa2:	80 93 13 02 	sts	0x0213, r24
    6fa6:	1b c0       	rjmp	.+54     	; 0x6fde <main+0x65c>
						break ;
					
					case Y :
						newstr[ss_counter++] ='Y' ;
    6fa8:	20 91 13 02 	lds	r18, 0x0213
    6fac:	82 2f       	mov	r24, r18
    6fae:	90 e0       	ldi	r25, 0x00	; 0
    6fb0:	fc 01       	movw	r30, r24
    6fb2:	ef 51       	subi	r30, 0x1F	; 31
    6fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    6fb6:	89 e5       	ldi	r24, 0x59	; 89
    6fb8:	80 83       	st	Z, r24
    6fba:	82 2f       	mov	r24, r18
    6fbc:	8f 5f       	subi	r24, 0xFF	; 255
    6fbe:	80 93 13 02 	sts	0x0213, r24
    6fc2:	0d c0       	rjmp	.+26     	; 0x6fde <main+0x65c>
						break ;
					
					case Z :
						newstr[ss_counter++] ='Z' ;
    6fc4:	20 91 13 02 	lds	r18, 0x0213
    6fc8:	82 2f       	mov	r24, r18
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	fc 01       	movw	r30, r24
    6fce:	ef 51       	subi	r30, 0x1F	; 31
    6fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    6fd2:	8a e5       	ldi	r24, 0x5A	; 90
    6fd4:	80 83       	st	Z, r24
    6fd6:	82 2f       	mov	r24, r18
    6fd8:	8f 5f       	subi	r24, 0xFF	; 255
    6fda:	80 93 13 02 	sts	0x0213, r24

    	/*UART_u8RecAsynch(func ,strzeros);
    	UART_u8RecAsynch(func ,strones);
    	UART_u8RecAsynch(func ,STR);*/
			//if they are done well the for loop will iterate on every element in the array
			for(u8 i= 0 ; STR[i] ; ++i)
    6fde:	89 81       	ldd	r24, Y+1	; 0x01
    6fe0:	8f 5f       	subi	r24, 0xFF	; 255
    6fe2:	89 83       	std	Y+1, r24	; 0x01
    6fe4:	89 81       	ldd	r24, Y+1	; 0x01
    6fe6:	88 2f       	mov	r24, r24
    6fe8:	90 e0       	ldi	r25, 0x00	; 0
    6fea:	fc 01       	movw	r30, r24
    6fec:	e1 55       	subi	r30, 0x51	; 81
    6fee:	fe 4f       	sbci	r31, 0xFE	; 254
    6ff0:	80 81       	ld	r24, Z
    6ff2:	88 23       	and	r24, r24
    6ff4:	09 f0       	breq	.+2      	; 0x6ff8 <main+0x676>
    6ff6:	ed cc       	rjmp	.-1574   	; 0x69d2 <main+0x50>
			


		}
		//print the array after mapping
		LCD_GoTo(1,0) ;
    6ff8:	81 e0       	ldi	r24, 0x01	; 1
    6ffa:	60 e0       	ldi	r22, 0x00	; 0
    6ffc:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <LCD_GoTo>
		LCD_WriteString(newstr) ;
    7000:	81 ee       	ldi	r24, 0xE1	; 225
    7002:	91 e0       	ldi	r25, 0x01	; 1
    7004:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <LCD_WriteString>
		if(!DIO_ReadPIN(PIND7))
    7008:	8f e1       	ldi	r24, 0x1F	; 31
    700a:	0e 94 34 1a 	call	0x3468	; 0x3468 <DIO_ReadPIN>
    700e:	88 23       	and	r24, r24
    7010:	09 f0       	breq	.+2      	; 0x7014 <main+0x692>
    7012:	c6 cc       	rjmp	.-1652   	; 0x69a0 <main+0x1e>
		{
			SPI_SendString(newstr) ;
    7014:	81 ee       	ldi	r24, 0xE1	; 225
    7016:	91 e0       	ldi	r25, 0x01	; 1
    7018:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <SPI_SendString>
    701c:	c1 cc       	rjmp	.-1662   	; 0x69a0 <main+0x1e>

0000701e <__mulsi3>:
    701e:	62 9f       	mul	r22, r18
    7020:	d0 01       	movw	r26, r0
    7022:	73 9f       	mul	r23, r19
    7024:	f0 01       	movw	r30, r0
    7026:	82 9f       	mul	r24, r18
    7028:	e0 0d       	add	r30, r0
    702a:	f1 1d       	adc	r31, r1
    702c:	64 9f       	mul	r22, r20
    702e:	e0 0d       	add	r30, r0
    7030:	f1 1d       	adc	r31, r1
    7032:	92 9f       	mul	r25, r18
    7034:	f0 0d       	add	r31, r0
    7036:	83 9f       	mul	r24, r19
    7038:	f0 0d       	add	r31, r0
    703a:	74 9f       	mul	r23, r20
    703c:	f0 0d       	add	r31, r0
    703e:	65 9f       	mul	r22, r21
    7040:	f0 0d       	add	r31, r0
    7042:	99 27       	eor	r25, r25
    7044:	72 9f       	mul	r23, r18
    7046:	b0 0d       	add	r27, r0
    7048:	e1 1d       	adc	r30, r1
    704a:	f9 1f       	adc	r31, r25
    704c:	63 9f       	mul	r22, r19
    704e:	b0 0d       	add	r27, r0
    7050:	e1 1d       	adc	r30, r1
    7052:	f9 1f       	adc	r31, r25
    7054:	bd 01       	movw	r22, r26
    7056:	cf 01       	movw	r24, r30
    7058:	11 24       	eor	r1, r1
    705a:	08 95       	ret

0000705c <__udivmodhi4>:
    705c:	aa 1b       	sub	r26, r26
    705e:	bb 1b       	sub	r27, r27
    7060:	51 e1       	ldi	r21, 0x11	; 17
    7062:	07 c0       	rjmp	.+14     	; 0x7072 <__udivmodhi4_ep>

00007064 <__udivmodhi4_loop>:
    7064:	aa 1f       	adc	r26, r26
    7066:	bb 1f       	adc	r27, r27
    7068:	a6 17       	cp	r26, r22
    706a:	b7 07       	cpc	r27, r23
    706c:	10 f0       	brcs	.+4      	; 0x7072 <__udivmodhi4_ep>
    706e:	a6 1b       	sub	r26, r22
    7070:	b7 0b       	sbc	r27, r23

00007072 <__udivmodhi4_ep>:
    7072:	88 1f       	adc	r24, r24
    7074:	99 1f       	adc	r25, r25
    7076:	5a 95       	dec	r21
    7078:	a9 f7       	brne	.-22     	; 0x7064 <__udivmodhi4_loop>
    707a:	80 95       	com	r24
    707c:	90 95       	com	r25
    707e:	bc 01       	movw	r22, r24
    7080:	cd 01       	movw	r24, r26
    7082:	08 95       	ret

00007084 <__udivmodsi4>:
    7084:	a1 e2       	ldi	r26, 0x21	; 33
    7086:	1a 2e       	mov	r1, r26
    7088:	aa 1b       	sub	r26, r26
    708a:	bb 1b       	sub	r27, r27
    708c:	fd 01       	movw	r30, r26
    708e:	0d c0       	rjmp	.+26     	; 0x70aa <__udivmodsi4_ep>

00007090 <__udivmodsi4_loop>:
    7090:	aa 1f       	adc	r26, r26
    7092:	bb 1f       	adc	r27, r27
    7094:	ee 1f       	adc	r30, r30
    7096:	ff 1f       	adc	r31, r31
    7098:	a2 17       	cp	r26, r18
    709a:	b3 07       	cpc	r27, r19
    709c:	e4 07       	cpc	r30, r20
    709e:	f5 07       	cpc	r31, r21
    70a0:	20 f0       	brcs	.+8      	; 0x70aa <__udivmodsi4_ep>
    70a2:	a2 1b       	sub	r26, r18
    70a4:	b3 0b       	sbc	r27, r19
    70a6:	e4 0b       	sbc	r30, r20
    70a8:	f5 0b       	sbc	r31, r21

000070aa <__udivmodsi4_ep>:
    70aa:	66 1f       	adc	r22, r22
    70ac:	77 1f       	adc	r23, r23
    70ae:	88 1f       	adc	r24, r24
    70b0:	99 1f       	adc	r25, r25
    70b2:	1a 94       	dec	r1
    70b4:	69 f7       	brne	.-38     	; 0x7090 <__udivmodsi4_loop>
    70b6:	60 95       	com	r22
    70b8:	70 95       	com	r23
    70ba:	80 95       	com	r24
    70bc:	90 95       	com	r25
    70be:	9b 01       	movw	r18, r22
    70c0:	ac 01       	movw	r20, r24
    70c2:	bd 01       	movw	r22, r26
    70c4:	cf 01       	movw	r24, r30
    70c6:	08 95       	ret

000070c8 <__prologue_saves__>:
    70c8:	2f 92       	push	r2
    70ca:	3f 92       	push	r3
    70cc:	4f 92       	push	r4
    70ce:	5f 92       	push	r5
    70d0:	6f 92       	push	r6
    70d2:	7f 92       	push	r7
    70d4:	8f 92       	push	r8
    70d6:	9f 92       	push	r9
    70d8:	af 92       	push	r10
    70da:	bf 92       	push	r11
    70dc:	cf 92       	push	r12
    70de:	df 92       	push	r13
    70e0:	ef 92       	push	r14
    70e2:	ff 92       	push	r15
    70e4:	0f 93       	push	r16
    70e6:	1f 93       	push	r17
    70e8:	cf 93       	push	r28
    70ea:	df 93       	push	r29
    70ec:	cd b7       	in	r28, 0x3d	; 61
    70ee:	de b7       	in	r29, 0x3e	; 62
    70f0:	ca 1b       	sub	r28, r26
    70f2:	db 0b       	sbc	r29, r27
    70f4:	0f b6       	in	r0, 0x3f	; 63
    70f6:	f8 94       	cli
    70f8:	de bf       	out	0x3e, r29	; 62
    70fa:	0f be       	out	0x3f, r0	; 63
    70fc:	cd bf       	out	0x3d, r28	; 61
    70fe:	09 94       	ijmp

00007100 <__epilogue_restores__>:
    7100:	2a 88       	ldd	r2, Y+18	; 0x12
    7102:	39 88       	ldd	r3, Y+17	; 0x11
    7104:	48 88       	ldd	r4, Y+16	; 0x10
    7106:	5f 84       	ldd	r5, Y+15	; 0x0f
    7108:	6e 84       	ldd	r6, Y+14	; 0x0e
    710a:	7d 84       	ldd	r7, Y+13	; 0x0d
    710c:	8c 84       	ldd	r8, Y+12	; 0x0c
    710e:	9b 84       	ldd	r9, Y+11	; 0x0b
    7110:	aa 84       	ldd	r10, Y+10	; 0x0a
    7112:	b9 84       	ldd	r11, Y+9	; 0x09
    7114:	c8 84       	ldd	r12, Y+8	; 0x08
    7116:	df 80       	ldd	r13, Y+7	; 0x07
    7118:	ee 80       	ldd	r14, Y+6	; 0x06
    711a:	fd 80       	ldd	r15, Y+5	; 0x05
    711c:	0c 81       	ldd	r16, Y+4	; 0x04
    711e:	1b 81       	ldd	r17, Y+3	; 0x03
    7120:	aa 81       	ldd	r26, Y+2	; 0x02
    7122:	b9 81       	ldd	r27, Y+1	; 0x01
    7124:	ce 0f       	add	r28, r30
    7126:	d1 1d       	adc	r29, r1
    7128:	0f b6       	in	r0, 0x3f	; 63
    712a:	f8 94       	cli
    712c:	de bf       	out	0x3e, r29	; 62
    712e:	0f be       	out	0x3f, r0	; 63
    7130:	cd bf       	out	0x3d, r28	; 61
    7132:	ed 01       	movw	r28, r26
    7134:	08 95       	ret

00007136 <_exit>:
    7136:	f8 94       	cli

00007138 <__stop_program>:
    7138:	ff cf       	rjmp	.-2      	; 0x7138 <__stop_program>
