
002-SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00006e42  00006ed6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008001ac  008001ac  00007022  2**0
                  ALLOC
  3 .stab         0000471c  00000000  00000000  00007024  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d65  00000000  00000000  0000b740  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000d4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ce  00000000  00000000  0000d625  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002bc9  00000000  00000000  0000d7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001293  00000000  00000000  000103bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012d1  00000000  00000000  0001164f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00012920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031b  00000000  00000000  00012ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021c0  00000000  00000000  00012ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00014f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <__vector_1>
       8:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <__vector_2>
       c:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f3 34 	jmp	0x69e6	; 0x69e6 <__vector_6>
      1c:	0c 94 8d 34 	jmp	0x691a	; 0x691a <__vector_7>
      20:	0c 94 c0 34 	jmp	0x6980	; 0x6980 <__vector_8>
      24:	0c 94 5a 34 	jmp	0x68b4	; 0x68b4 <__vector_9>
      28:	0c 94 7a 31 	jmp	0x62f4	; 0x62f4 <__vector_10>
      2c:	0c 94 bf 31 	jmp	0x637e	; 0x637e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	fe e6       	ldi	r31, 0x6E	; 110
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 35 	call	0x6ace	; 0x6ace <main>
      8a:	0c 94 1f 37 	jmp	0x6e3e	; 0x6e3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 ae 13 	call	0x275c	; 0x275c <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 26 12 	call	0x244c	; 0x244c <__subsf3>
      be:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__divdi3>:
      ea:	a2 e7       	ldi	r26, 0x72	; 114
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e8 36 	jmp	0x6dd0	; 0x6dd0 <__prologue_saves__>
      f6:	98 2e       	mov	r9, r24
      f8:	89 2e       	mov	r8, r25
      fa:	71 2e       	mov	r7, r17
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	fe 01       	movw	r30, r28
     100:	31 96       	adiw	r30, 0x01	; 1
     102:	df 01       	movw	r26, r30
     104:	68 2e       	mov	r6, r24
     106:	1d 92       	st	X+, r1
     108:	6a 94       	dec	r6
     10a:	e9 f7       	brne	.-6      	; 0x106 <__divdi3+0x1c>
     10c:	29 83       	std	Y+1, r18	; 0x01
     10e:	3a 83       	std	Y+2, r19	; 0x02
     110:	4b 83       	std	Y+3, r20	; 0x03
     112:	5c 83       	std	Y+4, r21	; 0x04
     114:	6d 83       	std	Y+5, r22	; 0x05
     116:	7e 83       	std	Y+6, r23	; 0x06
     118:	9f 82       	std	Y+7, r9	; 0x07
     11a:	98 87       	std	Y+8, r25	; 0x08
     11c:	fe 01       	movw	r30, r28
     11e:	39 96       	adiw	r30, 0x09	; 9
     120:	df 01       	movw	r26, r30
     122:	1d 92       	st	X+, r1
     124:	8a 95       	dec	r24
     126:	e9 f7       	brne	.-6      	; 0x122 <__divdi3+0x38>
     128:	a9 86       	std	Y+9, r10	; 0x09
     12a:	ba 86       	std	Y+10, r11	; 0x0a
     12c:	cb 86       	std	Y+11, r12	; 0x0b
     12e:	dc 86       	std	Y+12, r13	; 0x0c
     130:	ed 86       	std	Y+13, r14	; 0x0d
     132:	fe 86       	std	Y+14, r15	; 0x0e
     134:	0f 87       	std	Y+15, r16	; 0x0f
     136:	18 8b       	std	Y+16, r17	; 0x10
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	9e 81       	ldd	r25, Y+6	; 0x06
     13c:	af 81       	ldd	r26, Y+7	; 0x07
     13e:	b8 85       	ldd	r27, Y+8	; 0x08
     140:	b7 fd       	sbrc	r27, 7
     142:	07 c0       	rjmp	.+14     	; 0x152 <__divdi3+0x68>
     144:	e1 96       	adiw	r28, 0x31	; 49
     146:	1c ae       	std	Y+60, r1	; 0x3c
     148:	1d ae       	std	Y+61, r1	; 0x3d
     14a:	1e ae       	std	Y+62, r1	; 0x3e
     14c:	1f ae       	std	Y+63, r1	; 0x3f
     14e:	e1 97       	sbiw	r28, 0x31	; 49
     150:	64 c0       	rjmp	.+200    	; 0x21a <__divdi3+0x130>
     152:	21 95       	neg	r18
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	12 16       	cp	r1, r18
     158:	08 f0       	brcs	.+2      	; 0x15c <__divdi3+0x72>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	31 95       	neg	r19
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	13 16       	cp	r1, r19
     162:	08 f0       	brcs	.+2      	; 0x166 <__divdi3+0x7c>
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	b3 2f       	mov	r27, r19
     168:	b8 1b       	sub	r27, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	3b 17       	cp	r19, r27
     16e:	08 f0       	brcs	.+2      	; 0x172 <__divdi3+0x88>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	98 2b       	or	r25, r24
     174:	41 95       	neg	r20
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	14 16       	cp	r1, r20
     17a:	08 f0       	brcs	.+2      	; 0x17e <__divdi3+0x94>
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a4 2f       	mov	r26, r20
     180:	a9 1b       	sub	r26, r25
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	4a 17       	cp	r20, r26
     186:	08 f0       	brcs	.+2      	; 0x18a <__divdi3+0xa0>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	38 2b       	or	r19, r24
     18c:	51 95       	neg	r21
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	15 16       	cp	r1, r21
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0xac>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	f5 2f       	mov	r31, r21
     198:	f3 1b       	sub	r31, r19
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	5f 17       	cp	r21, r31
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__divdi3+0xb8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	98 2b       	or	r25, r24
     1a4:	61 95       	neg	r22
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	16 16       	cp	r1, r22
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <__divdi3+0xc4>
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	e6 2f       	mov	r30, r22
     1b0:	e9 1b       	sub	r30, r25
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	6e 17       	cp	r22, r30
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <__divdi3+0xd0>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	38 2b       	or	r19, r24
     1bc:	71 95       	neg	r23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	17 16       	cp	r1, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__divdi3+0xdc>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	57 2f       	mov	r21, r23
     1c8:	53 1b       	sub	r21, r19
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	75 17       	cp	r23, r21
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__divdi3+0xe8>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	48 2b       	or	r20, r24
     1d4:	89 2d       	mov	r24, r9
     1d6:	81 95       	neg	r24
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	18 16       	cp	r1, r24
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__divdi3+0xf6>
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 2e       	mov	r6, r24
     1e2:	64 1a       	sub	r6, r20
     1e4:	46 2d       	mov	r20, r6
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	86 15       	cp	r24, r6
     1ea:	08 f0       	brcs	.+2      	; 0x1ee <__divdi3+0x104>
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	93 2b       	or	r25, r19
     1f0:	88 2d       	mov	r24, r8
     1f2:	81 95       	neg	r24
     1f4:	89 1b       	sub	r24, r25
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	ba 83       	std	Y+2, r27	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	fc 83       	std	Y+4, r31	; 0x04
     1fe:	ed 83       	std	Y+5, r30	; 0x05
     200:	5e 83       	std	Y+6, r21	; 0x06
     202:	4f 83       	std	Y+7, r20	; 0x07
     204:	88 87       	std	Y+8, r24	; 0x08
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	2c af       	std	Y+60, r18	; 0x3c
     212:	3d af       	std	Y+61, r19	; 0x3d
     214:	4e af       	std	Y+62, r20	; 0x3e
     216:	5f af       	std	Y+63, r21	; 0x3f
     218:	e1 97       	sbiw	r28, 0x31	; 49
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	af 85       	ldd	r26, Y+15	; 0x0f
     220:	b8 89       	ldd	r27, Y+16	; 0x10
     222:	b7 ff       	sbrs	r27, 7
     224:	6a c0       	rjmp	.+212    	; 0x2fa <__divdi3+0x210>
     226:	e1 96       	adiw	r28, 0x31	; 49
     228:	4c ad       	ldd	r20, Y+60	; 0x3c
     22a:	5d ad       	ldd	r21, Y+61	; 0x3d
     22c:	6e ad       	ldd	r22, Y+62	; 0x3e
     22e:	7f ad       	ldd	r23, Y+63	; 0x3f
     230:	e1 97       	sbiw	r28, 0x31	; 49
     232:	40 95       	com	r20
     234:	50 95       	com	r21
     236:	60 95       	com	r22
     238:	70 95       	com	r23
     23a:	e1 96       	adiw	r28, 0x31	; 49
     23c:	4c af       	std	Y+60, r20	; 0x3c
     23e:	5d af       	std	Y+61, r21	; 0x3d
     240:	6e af       	std	Y+62, r22	; 0x3e
     242:	7f af       	std	Y+63, r23	; 0x3f
     244:	e1 97       	sbiw	r28, 0x31	; 49
     246:	a1 94       	neg	r10
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	1a 14       	cp	r1, r10
     24c:	08 f0       	brcs	.+2      	; 0x250 <__divdi3+0x166>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	b1 94       	neg	r11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	1b 14       	cp	r1, r11
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x170>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b 2d       	mov	r22, r11
     25c:	68 1b       	sub	r22, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	b6 16       	cp	r11, r22
     262:	08 f0       	brcs	.+2      	; 0x266 <__divdi3+0x17c>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	98 2b       	or	r25, r24
     268:	c1 94       	neg	r12
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	1c 14       	cp	r1, r12
     26e:	08 f0       	brcs	.+2      	; 0x272 <__divdi3+0x188>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	5c 2d       	mov	r21, r12
     274:	59 1b       	sub	r21, r25
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	c5 16       	cp	r12, r21
     27a:	08 f0       	brcs	.+2      	; 0x27e <__divdi3+0x194>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	28 2b       	or	r18, r24
     280:	d1 94       	neg	r13
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	1d 14       	cp	r1, r13
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1a0>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	4d 2d       	mov	r20, r13
     28c:	42 1b       	sub	r20, r18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	d4 16       	cp	r13, r20
     292:	08 f0       	brcs	.+2      	; 0x296 <__divdi3+0x1ac>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	98 2b       	or	r25, r24
     298:	e1 94       	neg	r14
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	1e 14       	cp	r1, r14
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <__divdi3+0x1b8>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	3e 2d       	mov	r19, r14
     2a4:	39 1b       	sub	r19, r25
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	e3 16       	cp	r14, r19
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__divdi3+0x1c4>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	28 2b       	or	r18, r24
     2b0:	f1 94       	neg	r15
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	1f 14       	cp	r1, r15
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__divdi3+0x1d0>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	7f 2d       	mov	r23, r15
     2bc:	72 1b       	sub	r23, r18
     2be:	27 2f       	mov	r18, r23
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	f7 16       	cp	r15, r23
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__divdi3+0x1de>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	98 2b       	or	r25, r24
     2ca:	01 95       	neg	r16
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	10 16       	cp	r1, r16
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__divdi3+0x1ea>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	80 2f       	mov	r24, r16
     2d6:	89 1b       	sub	r24, r25
     2d8:	98 2f       	mov	r25, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	09 17       	cp	r16, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__divdi3+0x1f8>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	18 2b       	or	r17, r24
     2e4:	87 2d       	mov	r24, r7
     2e6:	81 95       	neg	r24
     2e8:	81 1b       	sub	r24, r17
     2ea:	a9 86       	std	Y+9, r10	; 0x09
     2ec:	6a 87       	std	Y+10, r22	; 0x0a
     2ee:	5b 87       	std	Y+11, r21	; 0x0b
     2f0:	4c 87       	std	Y+12, r20	; 0x0c
     2f2:	3d 87       	std	Y+13, r19	; 0x0d
     2f4:	2e 87       	std	Y+14, r18	; 0x0e
     2f6:	9f 87       	std	Y+15, r25	; 0x0f
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	4c 81       	ldd	r20, Y+4	; 0x04
     302:	5d 81       	ldd	r21, Y+5	; 0x05
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	a8 85       	ldd	r26, Y+8	; 0x08
     30a:	b9 85       	ldd	r27, Y+9	; 0x09
     30c:	1a 85       	ldd	r17, Y+10	; 0x0a
     30e:	0b 85       	ldd	r16, Y+11	; 0x0b
     310:	fc 84       	ldd	r15, Y+12	; 0x0c
     312:	ed 84       	ldd	r14, Y+13	; 0x0d
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	cf 84       	ldd	r12, Y+15	; 0x0f
     318:	b8 88       	ldd	r11, Y+16	; 0x10
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	e1 e1       	ldi	r30, 0x11	; 17
     31e:	8e 2e       	mov	r8, r30
     320:	91 2c       	mov	r9, r1
     322:	8c 0e       	add	r8, r28
     324:	9d 1e       	adc	r9, r29
     326:	f4 01       	movw	r30, r8
     328:	68 2e       	mov	r6, r24
     32a:	11 92       	st	Z+, r1
     32c:	6a 94       	dec	r6
     32e:	e9 f7       	brne	.-6      	; 0x32a <__divdi3+0x240>
     330:	99 8b       	std	Y+17, r25	; 0x11
     332:	2a 8b       	std	Y+18, r18	; 0x12
     334:	3b 8b       	std	Y+19, r19	; 0x13
     336:	4c 8b       	std	Y+20, r20	; 0x14
     338:	5d 8b       	std	Y+21, r21	; 0x15
     33a:	6e 8b       	std	Y+22, r22	; 0x16
     33c:	7f 8b       	std	Y+23, r23	; 0x17
     33e:	a8 8f       	std	Y+24, r26	; 0x18
     340:	9e 01       	movw	r18, r28
     342:	27 5e       	subi	r18, 0xE7	; 231
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	11 92       	st	Z+, r1
     34a:	8a 95       	dec	r24
     34c:	e9 f7       	brne	.-6      	; 0x348 <__divdi3+0x25e>
     34e:	b9 8f       	std	Y+25, r27	; 0x19
     350:	1a 8f       	std	Y+26, r17	; 0x1a
     352:	0b 8f       	std	Y+27, r16	; 0x1b
     354:	fc 8e       	std	Y+28, r15	; 0x1c
     356:	ed 8e       	std	Y+29, r14	; 0x1d
     358:	de 8e       	std	Y+30, r13	; 0x1e
     35a:	cf 8e       	std	Y+31, r12	; 0x1f
     35c:	b8 a2       	std	Y+32, r11	; 0x20
     35e:	29 8c       	ldd	r2, Y+25	; 0x19
     360:	3a 8c       	ldd	r3, Y+26	; 0x1a
     362:	4b 8c       	ldd	r4, Y+27	; 0x1b
     364:	5c 8c       	ldd	r5, Y+28	; 0x1c
     366:	ed 8c       	ldd	r14, Y+29	; 0x1d
     368:	fe 8c       	ldd	r15, Y+30	; 0x1e
     36a:	0f 8d       	ldd	r16, Y+31	; 0x1f
     36c:	18 a1       	ldd	r17, Y+32	; 0x20
     36e:	69 88       	ldd	r6, Y+17	; 0x11
     370:	7a 88       	ldd	r7, Y+18	; 0x12
     372:	8b 88       	ldd	r8, Y+19	; 0x13
     374:	9c 88       	ldd	r9, Y+20	; 0x14
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	6c ae       	std	Y+60, r6	; 0x3c
     37a:	7d ae       	std	Y+61, r7	; 0x3d
     37c:	8e ae       	std	Y+62, r8	; 0x3e
     37e:	9f ae       	std	Y+63, r9	; 0x3f
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	6d 88       	ldd	r6, Y+21	; 0x15
     384:	7e 88       	ldd	r7, Y+22	; 0x16
     386:	8f 88       	ldd	r8, Y+23	; 0x17
     388:	98 8c       	ldd	r9, Y+24	; 0x18
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__divdi3+0x2ac>
     394:	d9 c3       	rjmp	.+1970   	; 0xb48 <__stack+0x2e9>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__divdi3+0x2b8>
     3a0:	57 c1       	rjmp	.+686    	; 0x650 <__divdi3+0x566>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__divdi3+0x2ec>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__divdi3+0x2e4>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__divdi3+0x2e4>
     3c2:	48 e0       	ldi	r20, 0x08	; 8
     3c4:	e4 2e       	mov	r14, r20
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__divdi3+0x314>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__divdi3+0x314>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	22 16       	cp	r2, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	32 06       	cpc	r3, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	42 06       	cpc	r4, r18
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	52 06       	cpc	r5, r18
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__divdi3+0x30a>
     3e8:	38 e1       	ldi	r19, 0x18	; 24
     3ea:	e3 2e       	mov	r14, r19
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__divdi3+0x314>
     3f4:	20 e1       	ldi	r18, 0x10	; 16
     3f6:	e2 2e       	mov	r14, r18
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__divdi3+0x324>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__divdi3+0x31c>
     412:	86 58       	subi	r24, 0x86	; 134
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	7c 01       	movw	r14, r24
     42c:	8d 01       	movw	r16, r26
     42e:	e2 1a       	sub	r14, r18
     430:	f1 08       	sbc	r15, r1
     432:	01 09       	sbc	r16, r1
     434:	11 09       	sbc	r17, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	01 05       	cpc	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <__divdi3+0x3ca>
     440:	0e 2c       	mov	r0, r14
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x362>
     444:	22 0c       	add	r2, r2
     446:	33 1c       	adc	r3, r3
     448:	44 1c       	adc	r4, r4
     44a:	55 1c       	adc	r5, r5
     44c:	0a 94       	dec	r0
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x35a>
     450:	a4 01       	movw	r20, r8
     452:	93 01       	movw	r18, r6
     454:	0e 2c       	mov	r0, r14
     456:	04 c0       	rjmp	.+8      	; 0x460 <__divdi3+0x376>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	44 1f       	adc	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <__divdi3+0x36e>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8e 19       	sub	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	6c ac       	ldd	r6, Y+60	; 0x3c
     470:	7d ac       	ldd	r7, Y+61	; 0x3d
     472:	8e ac       	ldd	r8, Y+62	; 0x3e
     474:	9f ac       	ldd	r9, Y+63	; 0x3f
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	04 c0       	rjmp	.+8      	; 0x482 <__divdi3+0x398>
     47a:	96 94       	lsr	r9
     47c:	87 94       	ror	r8
     47e:	77 94       	ror	r7
     480:	67 94       	ror	r6
     482:	8a 95       	dec	r24
     484:	d2 f7       	brpl	.-12     	; 0x47a <__divdi3+0x390>
     486:	62 2a       	or	r6, r18
     488:	73 2a       	or	r7, r19
     48a:	84 2a       	or	r8, r20
     48c:	95 2a       	or	r9, r21
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	ac ac       	ldd	r10, Y+60	; 0x3c
     492:	bd ac       	ldd	r11, Y+61	; 0x3d
     494:	ce ac       	ldd	r12, Y+62	; 0x3e
     496:	df ac       	ldd	r13, Y+63	; 0x3f
     498:	21 97       	sbiw	r28, 0x01	; 1
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__divdi3+0x3ba>
     49c:	aa 0c       	add	r10, r10
     49e:	bb 1c       	adc	r11, r11
     4a0:	cc 1c       	adc	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ea 94       	dec	r14
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <__divdi3+0x3b2>
     4a8:	21 96       	adiw	r28, 0x01	; 1
     4aa:	ac ae       	std	Y+60, r10	; 0x3c
     4ac:	bd ae       	std	Y+61, r11	; 0x3d
     4ae:	ce ae       	std	Y+62, r12	; 0x3e
     4b0:	df ae       	std	Y+63, r13	; 0x3f
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	62 01       	movw	r12, r4
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	29 96       	adiw	r28, 0x09	; 9
     4bc:	cc ae       	std	Y+60, r12	; 0x3c
     4be:	dd ae       	std	Y+61, r13	; 0x3d
     4c0:	ee ae       	std	Y+62, r14	; 0x3e
     4c2:	ff ae       	std	Y+63, r15	; 0x3f
     4c4:	29 97       	sbiw	r28, 0x09	; 9
     4c6:	92 01       	movw	r18, r4
     4c8:	81 01       	movw	r16, r2
     4ca:	20 70       	andi	r18, 0x00	; 0
     4cc:	30 70       	andi	r19, 0x00	; 0
     4ce:	2d 96       	adiw	r28, 0x0d	; 13
     4d0:	0c af       	std	Y+60, r16	; 0x3c
     4d2:	1d af       	std	Y+61, r17	; 0x3d
     4d4:	2e af       	std	Y+62, r18	; 0x3e
     4d6:	3f af       	std	Y+63, r19	; 0x3f
     4d8:	2d 97       	sbiw	r28, 0x0d	; 13
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     4e6:	7b 01       	movw	r14, r22
     4e8:	8c 01       	movw	r16, r24
     4ea:	c4 01       	movw	r24, r8
     4ec:	b3 01       	movw	r22, r6
     4ee:	29 96       	adiw	r28, 0x09	; 9
     4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
     4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
     4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     4f8:	29 97       	sbiw	r28, 0x09	; 9
     4fa:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     4fe:	c9 01       	movw	r24, r18
     500:	da 01       	movw	r26, r20
     502:	3c 01       	movw	r6, r24
     504:	4d 01       	movw	r8, r26
     506:	c4 01       	movw	r24, r8
     508:	b3 01       	movw	r22, r6
     50a:	2d 96       	adiw	r28, 0x0d	; 13
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	2d 97       	sbiw	r28, 0x0d	; 13
     516:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	ac ac       	ldd	r10, Y+60	; 0x3c
     528:	bd ac       	ldd	r11, Y+61	; 0x3d
     52a:	ce ac       	ldd	r12, Y+62	; 0x3e
     52c:	df ac       	ldd	r13, Y+63	; 0x3f
     52e:	21 97       	sbiw	r28, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	aa 27       	eor	r26, r26
     534:	bb 27       	eor	r27, r27
     536:	57 01       	movw	r10, r14
     538:	68 01       	movw	r12, r16
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	a2 16       	cp	r10, r18
     544:	b3 06       	cpc	r11, r19
     546:	c4 06       	cpc	r12, r20
     548:	d5 06       	cpc	r13, r21
     54a:	e0 f4       	brcc	.+56     	; 0x584 <__divdi3+0x49a>
     54c:	08 94       	sec
     54e:	61 08       	sbc	r6, r1
     550:	71 08       	sbc	r7, r1
     552:	81 08       	sbc	r8, r1
     554:	91 08       	sbc	r9, r1
     556:	a2 0c       	add	r10, r2
     558:	b3 1c       	adc	r11, r3
     55a:	c4 1c       	adc	r12, r4
     55c:	d5 1c       	adc	r13, r5
     55e:	a2 14       	cp	r10, r2
     560:	b3 04       	cpc	r11, r3
     562:	c4 04       	cpc	r12, r4
     564:	d5 04       	cpc	r13, r5
     566:	70 f0       	brcs	.+28     	; 0x584 <__divdi3+0x49a>
     568:	a2 16       	cp	r10, r18
     56a:	b3 06       	cpc	r11, r19
     56c:	c4 06       	cpc	r12, r20
     56e:	d5 06       	cpc	r13, r21
     570:	48 f4       	brcc	.+18     	; 0x584 <__divdi3+0x49a>
     572:	08 94       	sec
     574:	61 08       	sbc	r6, r1
     576:	71 08       	sbc	r7, r1
     578:	81 08       	sbc	r8, r1
     57a:	91 08       	sbc	r9, r1
     57c:	a2 0c       	add	r10, r2
     57e:	b3 1c       	adc	r11, r3
     580:	c4 1c       	adc	r12, r4
     582:	d5 1c       	adc	r13, r5
     584:	a2 1a       	sub	r10, r18
     586:	b3 0a       	sbc	r11, r19
     588:	c4 0a       	sbc	r12, r20
     58a:	d5 0a       	sbc	r13, r21
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	29 96       	adiw	r28, 0x09	; 9
     592:	2c ad       	ldd	r18, Y+60	; 0x3c
     594:	3d ad       	ldd	r19, Y+61	; 0x3d
     596:	4e ad       	ldd	r20, Y+62	; 0x3e
     598:	5f ad       	ldd	r21, Y+63	; 0x3f
     59a:	29 97       	sbiw	r28, 0x09	; 9
     59c:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
     5a4:	c6 01       	movw	r24, r12
     5a6:	b5 01       	movw	r22, r10
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	2c ad       	ldd	r18, Y+60	; 0x3c
     5ac:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ae:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5b2:	29 97       	sbiw	r28, 0x09	; 9
     5b4:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     5b8:	c9 01       	movw	r24, r18
     5ba:	da 01       	movw	r26, r20
     5bc:	5c 01       	movw	r10, r24
     5be:	6d 01       	movw	r12, r26
     5c0:	c6 01       	movw	r24, r12
     5c2:	b5 01       	movw	r22, r10
     5c4:	2d 96       	adiw	r28, 0x0d	; 13
     5c6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     5cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ce:	2d 97       	sbiw	r28, 0x0d	; 13
     5d0:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	87 01       	movw	r16, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	ee 24       	eor	r14, r14
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e2:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e4:	ae ad       	ldd	r26, Y+62	; 0x3e
     5e6:	bf ad       	ldd	r27, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	e8 2a       	or	r14, r24
     5f0:	f9 2a       	or	r15, r25
     5f2:	0a 2b       	or	r16, r26
     5f4:	1b 2b       	or	r17, r27
     5f6:	e2 16       	cp	r14, r18
     5f8:	f3 06       	cpc	r15, r19
     5fa:	04 07       	cpc	r16, r20
     5fc:	15 07       	cpc	r17, r21
     5fe:	c0 f4       	brcc	.+48     	; 0x630 <__divdi3+0x546>
     600:	08 94       	sec
     602:	a1 08       	sbc	r10, r1
     604:	b1 08       	sbc	r11, r1
     606:	c1 08       	sbc	r12, r1
     608:	d1 08       	sbc	r13, r1
     60a:	e2 0c       	add	r14, r2
     60c:	f3 1c       	adc	r15, r3
     60e:	04 1d       	adc	r16, r4
     610:	15 1d       	adc	r17, r5
     612:	e2 14       	cp	r14, r2
     614:	f3 04       	cpc	r15, r3
     616:	04 05       	cpc	r16, r4
     618:	15 05       	cpc	r17, r5
     61a:	50 f0       	brcs	.+20     	; 0x630 <__divdi3+0x546>
     61c:	e2 16       	cp	r14, r18
     61e:	f3 06       	cpc	r15, r19
     620:	04 07       	cpc	r16, r20
     622:	15 07       	cpc	r17, r21
     624:	28 f4       	brcc	.+10     	; 0x630 <__divdi3+0x546>
     626:	08 94       	sec
     628:	a1 08       	sbc	r10, r1
     62a:	b1 08       	sbc	r11, r1
     62c:	c1 08       	sbc	r12, r1
     62e:	d1 08       	sbc	r13, r1
     630:	d3 01       	movw	r26, r6
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	86 01       	movw	r16, r12
     638:	75 01       	movw	r14, r10
     63a:	e8 2a       	or	r14, r24
     63c:	f9 2a       	or	r15, r25
     63e:	0a 2b       	or	r16, r26
     640:	1b 2b       	or	r17, r27
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	ec ae       	std	Y+60, r14	; 0x3c
     646:	fd ae       	std	Y+61, r15	; 0x3d
     648:	0e af       	std	Y+62, r16	; 0x3e
     64a:	1f af       	std	Y+63, r17	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	eb c4       	rjmp	.+2518   	; 0x1026 <__stack+0x7c7>
     650:	21 14       	cp	r2, r1
     652:	31 04       	cpc	r3, r1
     654:	41 04       	cpc	r4, r1
     656:	51 04       	cpc	r5, r1
     658:	71 f4       	brne	.+28     	; 0x676 <__divdi3+0x58c>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	1c 01       	movw	r2, r24
     674:	2d 01       	movw	r4, r26
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	20 16       	cp	r2, r16
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	30 06       	cpc	r3, r16
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	40 06       	cpc	r4, r16
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	50 06       	cpc	r5, r16
     686:	88 f4       	brcc	.+34     	; 0x6aa <__divdi3+0x5c0>
     688:	1f ef       	ldi	r17, 0xFF	; 255
     68a:	21 16       	cp	r2, r17
     68c:	31 04       	cpc	r3, r1
     68e:	41 04       	cpc	r4, r1
     690:	51 04       	cpc	r5, r1
     692:	31 f0       	breq	.+12     	; 0x6a0 <__divdi3+0x5b6>
     694:	28 f0       	brcs	.+10     	; 0x6a0 <__divdi3+0x5b6>
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <__divdi3+0x5e4>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__divdi3+0x5e4>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	22 16       	cp	r2, r18
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	32 06       	cpc	r3, r18
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	42 06       	cpc	r4, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	52 06       	cpc	r5, r18
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <__divdi3+0x5dc>
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divdi3+0x5e4>
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	d2 01       	movw	r26, r4
     6d0:	c1 01       	movw	r24, r2
     6d2:	04 2e       	mov	r0, r20
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__divdi3+0x5f4>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__divdi3+0x5ec>
     6e2:	86 58       	subi	r24, 0x86	; 134
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	dc 01       	movw	r26, r24
     6e8:	2c 91       	ld	r18, X
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	ee 2e       	mov	r14, r30
     6ee:	f1 2c       	mov	r15, r1
     6f0:	01 2d       	mov	r16, r1
     6f2:	11 2d       	mov	r17, r1
     6f4:	d8 01       	movw	r26, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	84 1b       	sub	r24, r20
     6fa:	95 0b       	sbc	r25, r21
     6fc:	a6 0b       	sbc	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	82 1b       	sub	r24, r18
     702:	91 09       	sbc	r25, r1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	61 f4       	brne	.+24     	; 0x728 <__divdi3+0x63e>
     710:	64 01       	movw	r12, r8
     712:	53 01       	movw	r10, r6
     714:	a2 18       	sub	r10, r2
     716:	b3 08       	sbc	r11, r3
     718:	c4 08       	sbc	r12, r4
     71a:	d5 08       	sbc	r13, r5
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	63 2e       	mov	r6, r19
     720:	71 2c       	mov	r7, r1
     722:	81 2c       	mov	r8, r1
     724:	91 2c       	mov	r9, r1
     726:	24 c1       	rjmp	.+584    	; 0x970 <__stack+0x111>
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	08 2e       	mov	r0, r24
     730:	04 c0       	rjmp	.+8      	; 0x73a <__divdi3+0x650>
     732:	22 0c       	add	r2, r2
     734:	33 1c       	adc	r3, r3
     736:	44 1c       	adc	r4, r4
     738:	55 1c       	adc	r5, r5
     73a:	0a 94       	dec	r0
     73c:	d2 f7       	brpl	.-12     	; 0x732 <__divdi3+0x648>
     73e:	ee 2d       	mov	r30, r14
     740:	e8 1b       	sub	r30, r24
     742:	64 01       	movw	r12, r8
     744:	53 01       	movw	r10, r6
     746:	0e 2e       	mov	r0, r30
     748:	04 c0       	rjmp	.+8      	; 0x752 <__divdi3+0x668>
     74a:	d6 94       	lsr	r13
     74c:	c7 94       	ror	r12
     74e:	b7 94       	ror	r11
     750:	a7 94       	ror	r10
     752:	0a 94       	dec	r0
     754:	d2 f7       	brpl	.-12     	; 0x74a <__divdi3+0x660>
     756:	a4 01       	movw	r20, r8
     758:	93 01       	movw	r18, r6
     75a:	e3 96       	adiw	r28, 0x33	; 51
     75c:	0f ac       	ldd	r0, Y+63	; 0x3f
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	04 c0       	rjmp	.+8      	; 0x76a <__divdi3+0x680>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__divdi3+0x678>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	6c ac       	ldd	r6, Y+60	; 0x3c
     772:	7d ac       	ldd	r7, Y+61	; 0x3d
     774:	8e ac       	ldd	r8, Y+62	; 0x3e
     776:	9f ac       	ldd	r9, Y+63	; 0x3f
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	0e 2e       	mov	r0, r30
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__divdi3+0x69c>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <__divdi3+0x694>
     78a:	84 01       	movw	r16, r8
     78c:	73 01       	movw	r14, r6
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	04 2b       	or	r16, r20
     794:	15 2b       	or	r17, r21
     796:	e9 ae       	std	Y+57, r14	; 0x39
     798:	fa ae       	std	Y+58, r15	; 0x3a
     79a:	0b af       	std	Y+59, r16	; 0x3b
     79c:	1c af       	std	Y+60, r17	; 0x3c
     79e:	32 01       	movw	r6, r4
     7a0:	88 24       	eor	r8, r8
     7a2:	99 24       	eor	r9, r9
     7a4:	92 01       	movw	r18, r4
     7a6:	81 01       	movw	r16, r2
     7a8:	20 70       	andi	r18, 0x00	; 0
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	61 96       	adiw	r28, 0x11	; 17
     7ae:	0c af       	std	Y+60, r16	; 0x3c
     7b0:	1d af       	std	Y+61, r17	; 0x3d
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	3f af       	std	Y+63, r19	; 0x3f
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	a4 01       	movw	r20, r8
     7be:	93 01       	movw	r18, r6
     7c0:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	c6 01       	movw	r24, r12
     7ca:	b5 01       	movw	r22, r10
     7cc:	a4 01       	movw	r20, r8
     7ce:	93 01       	movw	r18, r6
     7d0:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	8c af       	std	Y+60, r24	; 0x3c
     7dc:	9d af       	std	Y+61, r25	; 0x3d
     7de:	ae af       	std	Y+62, r26	; 0x3e
     7e0:	bf af       	std	Y+63, r27	; 0x3f
     7e2:	65 97       	sbiw	r28, 0x15	; 21
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	61 96       	adiw	r28, 0x11	; 17
     7ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f2:	61 97       	sbiw	r28, 0x11	; 17
     7f4:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	87 01       	movw	r16, r14
     7fe:	ff 24       	eor	r15, r15
     800:	ee 24       	eor	r14, r14
     802:	a9 ac       	ldd	r10, Y+57	; 0x39
     804:	ba ac       	ldd	r11, Y+58	; 0x3a
     806:	cb ac       	ldd	r12, Y+59	; 0x3b
     808:	dc ac       	ldd	r13, Y+60	; 0x3c
     80a:	c6 01       	movw	r24, r12
     80c:	aa 27       	eor	r26, r26
     80e:	bb 27       	eor	r27, r27
     810:	5c 01       	movw	r10, r24
     812:	6d 01       	movw	r12, r26
     814:	ae 28       	or	r10, r14
     816:	bf 28       	or	r11, r15
     818:	c0 2a       	or	r12, r16
     81a:	d1 2a       	or	r13, r17
     81c:	a2 16       	cp	r10, r18
     81e:	b3 06       	cpc	r11, r19
     820:	c4 06       	cpc	r12, r20
     822:	d5 06       	cpc	r13, r21
     824:	60 f5       	brcc	.+88     	; 0x87e <__stack+0x1f>
     826:	65 96       	adiw	r28, 0x15	; 21
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	65 97       	sbiw	r28, 0x15	; 21
     832:	61 50       	subi	r22, 0x01	; 1
     834:	70 40       	sbci	r23, 0x00	; 0
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	65 96       	adiw	r28, 0x15	; 21
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	65 97       	sbiw	r28, 0x15	; 21
     846:	a2 0c       	add	r10, r2
     848:	b3 1c       	adc	r11, r3
     84a:	c4 1c       	adc	r12, r4
     84c:	d5 1c       	adc	r13, r5
     84e:	a2 14       	cp	r10, r2
     850:	b3 04       	cpc	r11, r3
     852:	c4 04       	cpc	r12, r4
     854:	d5 04       	cpc	r13, r5
     856:	98 f0       	brcs	.+38     	; 0x87e <__stack+0x1f>
     858:	a2 16       	cp	r10, r18
     85a:	b3 06       	cpc	r11, r19
     85c:	c4 06       	cpc	r12, r20
     85e:	d5 06       	cpc	r13, r21
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
     862:	61 50       	subi	r22, 0x01	; 1
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	65 96       	adiw	r28, 0x15	; 21
     86c:	6c af       	std	Y+60, r22	; 0x3c
     86e:	7d af       	std	Y+61, r23	; 0x3d
     870:	8e af       	std	Y+62, r24	; 0x3e
     872:	9f af       	std	Y+63, r25	; 0x3f
     874:	65 97       	sbiw	r28, 0x15	; 21
     876:	a2 0c       	add	r10, r2
     878:	b3 1c       	adc	r11, r3
     87a:	c4 1c       	adc	r12, r4
     87c:	d5 1c       	adc	r13, r5
     87e:	a2 1a       	sub	r10, r18
     880:	b3 0a       	sbc	r11, r19
     882:	c4 0a       	sbc	r12, r20
     884:	d5 0a       	sbc	r13, r21
     886:	c6 01       	movw	r24, r12
     888:	b5 01       	movw	r22, r10
     88a:	a4 01       	movw	r20, r8
     88c:	93 01       	movw	r18, r6
     88e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     892:	7b 01       	movw	r14, r22
     894:	8c 01       	movw	r16, r24
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	a4 01       	movw	r20, r8
     89c:	93 01       	movw	r18, r6
     89e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	da 01       	movw	r26, r20
     8a6:	3c 01       	movw	r6, r24
     8a8:	4d 01       	movw	r8, r26
     8aa:	c4 01       	movw	r24, r8
     8ac:	b3 01       	movw	r22, r6
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b2:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     8b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     8b8:	61 97       	sbiw	r28, 0x11	; 17
     8ba:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	87 01       	movw	r16, r14
     8c4:	ff 24       	eor	r15, r15
     8c6:	ee 24       	eor	r14, r14
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     8cc:	ab ad       	ldd	r26, Y+59	; 0x3b
     8ce:	bc ad       	ldd	r27, Y+60	; 0x3c
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	57 01       	movw	r10, r14
     8d6:	68 01       	movw	r12, r16
     8d8:	a8 2a       	or	r10, r24
     8da:	b9 2a       	or	r11, r25
     8dc:	ca 2a       	or	r12, r26
     8de:	db 2a       	or	r13, r27
     8e0:	a2 16       	cp	r10, r18
     8e2:	b3 06       	cpc	r11, r19
     8e4:	c4 06       	cpc	r12, r20
     8e6:	d5 06       	cpc	r13, r21
     8e8:	e0 f4       	brcc	.+56     	; 0x922 <__stack+0xc3>
     8ea:	08 94       	sec
     8ec:	61 08       	sbc	r6, r1
     8ee:	71 08       	sbc	r7, r1
     8f0:	81 08       	sbc	r8, r1
     8f2:	91 08       	sbc	r9, r1
     8f4:	a2 0c       	add	r10, r2
     8f6:	b3 1c       	adc	r11, r3
     8f8:	c4 1c       	adc	r12, r4
     8fa:	d5 1c       	adc	r13, r5
     8fc:	a2 14       	cp	r10, r2
     8fe:	b3 04       	cpc	r11, r3
     900:	c4 04       	cpc	r12, r4
     902:	d5 04       	cpc	r13, r5
     904:	70 f0       	brcs	.+28     	; 0x922 <__stack+0xc3>
     906:	a2 16       	cp	r10, r18
     908:	b3 06       	cpc	r11, r19
     90a:	c4 06       	cpc	r12, r20
     90c:	d5 06       	cpc	r13, r21
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0xc3>
     910:	08 94       	sec
     912:	61 08       	sbc	r6, r1
     914:	71 08       	sbc	r7, r1
     916:	81 08       	sbc	r8, r1
     918:	91 08       	sbc	r9, r1
     91a:	a2 0c       	add	r10, r2
     91c:	b3 1c       	adc	r11, r3
     91e:	c4 1c       	adc	r12, r4
     920:	d5 1c       	adc	r13, r5
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	8c ad       	ldd	r24, Y+60	; 0x3c
     926:	9d ad       	ldd	r25, Y+61	; 0x3d
     928:	ae ad       	ldd	r26, Y+62	; 0x3e
     92a:	bf ad       	ldd	r27, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	e3 96       	adiw	r28, 0x33	; 51
     930:	0f ac       	ldd	r0, Y+63	; 0x3f
     932:	e3 97       	sbiw	r28, 0x33	; 51
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0xdf>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	aa 1f       	adc	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <__stack+0xd7>
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	8c af       	std	Y+60, r24	; 0x3c
     946:	9d af       	std	Y+61, r25	; 0x3d
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	bf af       	std	Y+63, r27	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	a2 1a       	sub	r10, r18
     950:	b3 0a       	sbc	r11, r19
     952:	c4 0a       	sbc	r12, r20
     954:	d5 0a       	sbc	r13, r21
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	ec ac       	ldd	r14, Y+60	; 0x3c
     95a:	fd ac       	ldd	r15, Y+61	; 0x3d
     95c:	0e ad       	ldd	r16, Y+62	; 0x3e
     95e:	1f ad       	ldd	r17, Y+63	; 0x3f
     960:	65 97       	sbiw	r28, 0x15	; 21
     962:	d7 01       	movw	r26, r14
     964:	99 27       	eor	r25, r25
     966:	88 27       	eor	r24, r24
     968:	68 2a       	or	r6, r24
     96a:	79 2a       	or	r7, r25
     96c:	8a 2a       	or	r8, r26
     96e:	9b 2a       	or	r9, r27
     970:	82 01       	movw	r16, r4
     972:	22 27       	eor	r18, r18
     974:	33 27       	eor	r19, r19
     976:	69 96       	adiw	r28, 0x19	; 25
     978:	0c af       	std	Y+60, r16	; 0x3c
     97a:	1d af       	std	Y+61, r17	; 0x3d
     97c:	2e af       	std	Y+62, r18	; 0x3e
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	69 97       	sbiw	r28, 0x19	; 25
     982:	a2 01       	movw	r20, r4
     984:	91 01       	movw	r18, r2
     986:	40 70       	andi	r20, 0x00	; 0
     988:	50 70       	andi	r21, 0x00	; 0
     98a:	6d 96       	adiw	r28, 0x1d	; 29
     98c:	2c af       	std	Y+60, r18	; 0x3c
     98e:	3d af       	std	Y+61, r19	; 0x3d
     990:	4e af       	std	Y+62, r20	; 0x3e
     992:	5f af       	std	Y+63, r21	; 0x3f
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	c6 01       	movw	r24, r12
     998:	b5 01       	movw	r22, r10
     99a:	69 96       	adiw	r28, 0x19	; 25
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	69 97       	sbiw	r28, 0x19	; 25
     9a6:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	69 96       	adiw	r28, 0x19	; 25
     9b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     9bc:	69 97       	sbiw	r28, 0x19	; 25
     9be:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     9c2:	c9 01       	movw	r24, r18
     9c4:	da 01       	movw	r26, r20
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	8c af       	std	Y+60, r24	; 0x3c
     9ca:	9d af       	std	Y+61, r25	; 0x3d
     9cc:	ae af       	std	Y+62, r26	; 0x3e
     9ce:	bf af       	std	Y+63, r27	; 0x3f
     9d0:	a1 97       	sbiw	r28, 0x21	; 33
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	6d 96       	adiw	r28, 0x1d	; 29
     9d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     9da:	3d ad       	ldd	r19, Y+61	; 0x3d
     9dc:	4e ad       	ldd	r20, Y+62	; 0x3e
     9de:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e0:	6d 97       	sbiw	r28, 0x1d	; 29
     9e2:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	87 01       	movw	r16, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	ee 24       	eor	r14, r14
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ac ac       	ldd	r10, Y+60	; 0x3c
     9f4:	bd ac       	ldd	r11, Y+61	; 0x3d
     9f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     9f8:	df ac       	ldd	r13, Y+63	; 0x3f
     9fa:	21 97       	sbiw	r28, 0x01	; 1
     9fc:	c6 01       	movw	r24, r12
     9fe:	aa 27       	eor	r26, r26
     a00:	bb 27       	eor	r27, r27
     a02:	57 01       	movw	r10, r14
     a04:	68 01       	movw	r12, r16
     a06:	a8 2a       	or	r10, r24
     a08:	b9 2a       	or	r11, r25
     a0a:	ca 2a       	or	r12, r26
     a0c:	db 2a       	or	r13, r27
     a0e:	a2 16       	cp	r10, r18
     a10:	b3 06       	cpc	r11, r19
     a12:	c4 06       	cpc	r12, r20
     a14:	d5 06       	cpc	r13, r21
     a16:	60 f5       	brcc	.+88     	; 0xa70 <__stack+0x211>
     a18:	a1 96       	adiw	r28, 0x21	; 33
     a1a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a1c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a20:	9f ad       	ldd	r25, Y+63	; 0x3f
     a22:	a1 97       	sbiw	r28, 0x21	; 33
     a24:	61 50       	subi	r22, 0x01	; 1
     a26:	70 40       	sbci	r23, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a1 96       	adiw	r28, 0x21	; 33
     a2e:	6c af       	std	Y+60, r22	; 0x3c
     a30:	7d af       	std	Y+61, r23	; 0x3d
     a32:	8e af       	std	Y+62, r24	; 0x3e
     a34:	9f af       	std	Y+63, r25	; 0x3f
     a36:	a1 97       	sbiw	r28, 0x21	; 33
     a38:	a2 0c       	add	r10, r2
     a3a:	b3 1c       	adc	r11, r3
     a3c:	c4 1c       	adc	r12, r4
     a3e:	d5 1c       	adc	r13, r5
     a40:	a2 14       	cp	r10, r2
     a42:	b3 04       	cpc	r11, r3
     a44:	c4 04       	cpc	r12, r4
     a46:	d5 04       	cpc	r13, r5
     a48:	98 f0       	brcs	.+38     	; 0xa70 <__stack+0x211>
     a4a:	a2 16       	cp	r10, r18
     a4c:	b3 06       	cpc	r11, r19
     a4e:	c4 06       	cpc	r12, r20
     a50:	d5 06       	cpc	r13, r21
     a52:	70 f4       	brcc	.+28     	; 0xa70 <__stack+0x211>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	70 40       	sbci	r23, 0x00	; 0
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a1 96       	adiw	r28, 0x21	; 33
     a5e:	6c af       	std	Y+60, r22	; 0x3c
     a60:	7d af       	std	Y+61, r23	; 0x3d
     a62:	8e af       	std	Y+62, r24	; 0x3e
     a64:	9f af       	std	Y+63, r25	; 0x3f
     a66:	a1 97       	sbiw	r28, 0x21	; 33
     a68:	a2 0c       	add	r10, r2
     a6a:	b3 1c       	adc	r11, r3
     a6c:	c4 1c       	adc	r12, r4
     a6e:	d5 1c       	adc	r13, r5
     a70:	a2 1a       	sub	r10, r18
     a72:	b3 0a       	sbc	r11, r19
     a74:	c4 0a       	sbc	r12, r20
     a76:	d5 0a       	sbc	r13, r21
     a78:	c6 01       	movw	r24, r12
     a7a:	b5 01       	movw	r22, r10
     a7c:	69 96       	adiw	r28, 0x19	; 25
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	69 97       	sbiw	r28, 0x19	; 25
     a88:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     a8c:	7b 01       	movw	r14, r22
     a8e:	8c 01       	movw	r16, r24
     a90:	c6 01       	movw	r24, r12
     a92:	b5 01       	movw	r22, r10
     a94:	69 96       	adiw	r28, 0x19	; 25
     a96:	2c ad       	ldd	r18, Y+60	; 0x3c
     a98:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a9e:	69 97       	sbiw	r28, 0x19	; 25
     aa0:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     aa4:	c9 01       	movw	r24, r18
     aa6:	da 01       	movw	r26, r20
     aa8:	5c 01       	movw	r10, r24
     aaa:	6d 01       	movw	r12, r26
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	6d 96       	adiw	r28, 0x1d	; 29
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	6d 97       	sbiw	r28, 0x1d	; 29
     abc:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	87 01       	movw	r16, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	ee 24       	eor	r14, r14
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8c ad       	ldd	r24, Y+60	; 0x3c
     ace:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	21 97       	sbiw	r28, 0x01	; 1
     ad6:	a0 70       	andi	r26, 0x00	; 0
     ad8:	b0 70       	andi	r27, 0x00	; 0
     ada:	e8 2a       	or	r14, r24
     adc:	f9 2a       	or	r15, r25
     ade:	0a 2b       	or	r16, r26
     ae0:	1b 2b       	or	r17, r27
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	c0 f4       	brcc	.+48     	; 0xb1c <__stack+0x2bd>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	e2 0c       	add	r14, r2
     af8:	f3 1c       	adc	r15, r3
     afa:	04 1d       	adc	r16, r4
     afc:	15 1d       	adc	r17, r5
     afe:	e2 14       	cp	r14, r2
     b00:	f3 04       	cpc	r15, r3
     b02:	04 05       	cpc	r16, r4
     b04:	15 05       	cpc	r17, r5
     b06:	50 f0       	brcs	.+20     	; 0xb1c <__stack+0x2bd>
     b08:	e2 16       	cp	r14, r18
     b0a:	f3 06       	cpc	r15, r19
     b0c:	04 07       	cpc	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	28 f4       	brcc	.+10     	; 0xb1c <__stack+0x2bd>
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
     b18:	c1 08       	sbc	r12, r1
     b1a:	d1 08       	sbc	r13, r1
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b20:	fd ac       	ldd	r15, Y+61	; 0x3d
     b22:	0e ad       	ldd	r16, Y+62	; 0x3e
     b24:	1f ad       	ldd	r17, Y+63	; 0x3f
     b26:	a1 97       	sbiw	r28, 0x21	; 33
     b28:	d7 01       	movw	r26, r14
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	96 01       	movw	r18, r12
     b30:	85 01       	movw	r16, r10
     b32:	08 2b       	or	r16, r24
     b34:	19 2b       	or	r17, r25
     b36:	2a 2b       	or	r18, r26
     b38:	3b 2b       	or	r19, r27
     b3a:	25 96       	adiw	r28, 0x05	; 5
     b3c:	0c af       	std	Y+60, r16	; 0x3c
     b3e:	1d af       	std	Y+61, r17	; 0x3d
     b40:	2e af       	std	Y+62, r18	; 0x3e
     b42:	3f af       	std	Y+63, r19	; 0x3f
     b44:	25 97       	sbiw	r28, 0x05	; 5
     b46:	72 c2       	rjmp	.+1252   	; 0x102c <__stack+0x7cd>
     b48:	6e 14       	cp	r6, r14
     b4a:	7f 04       	cpc	r7, r15
     b4c:	80 06       	cpc	r8, r16
     b4e:	91 06       	cpc	r9, r17
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	5f c2       	rjmp	.+1214   	; 0x1012 <__stack+0x7b3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	e2 16       	cp	r14, r18
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	f2 06       	cpc	r15, r18
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	02 07       	cpc	r16, r18
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	12 07       	cpc	r17, r18
     b64:	88 f4       	brcc	.+34     	; 0xb88 <__stack+0x329>
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	e3 16       	cp	r14, r19
     b6a:	f1 04       	cpc	r15, r1
     b6c:	01 05       	cpc	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	31 f0       	breq	.+12     	; 0xb7e <__stack+0x31f>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <__stack+0x31f>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x34d>
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	12 c0       	rjmp	.+36     	; 0xbac <__stack+0x34d>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	e4 16       	cp	r14, r20
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	f4 06       	cpc	r15, r20
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	04 07       	cpc	r16, r20
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	14 07       	cpc	r17, r20
     b98:	28 f0       	brcs	.+10     	; 0xba4 <__stack+0x345>
     b9a:	48 e1       	ldi	r20, 0x18	; 24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__stack+0x34d>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	d8 01       	movw	r26, r16
     bae:	c7 01       	movw	r24, r14
     bb0:	04 2e       	mov	r0, r20
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	b6 95       	lsr	r27
     bb6:	a7 95       	ror	r26
     bb8:	97 95       	ror	r25
     bba:	87 95       	ror	r24
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__stack+0x355>
     bc0:	86 58       	subi	r24, 0x86	; 134
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	dc 01       	movw	r26, r24
     bc6:	2c 91       	ld	r18, X
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	a3 2e       	mov	r10, r19
     bcc:	b1 2c       	mov	r11, r1
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	d6 01       	movw	r26, r12
     bd4:	c5 01       	movw	r24, r10
     bd6:	84 1b       	sub	r24, r20
     bd8:	95 0b       	sbc	r25, r21
     bda:	a6 0b       	sbc	r26, r22
     bdc:	b7 0b       	sbc	r27, r23
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	99 f4       	brne	.+38     	; 0xc14 <__stack+0x3b5>
     bee:	e6 14       	cp	r14, r6
     bf0:	f7 04       	cpc	r15, r7
     bf2:	08 05       	cpc	r16, r8
     bf4:	19 05       	cpc	r17, r9
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	fe c1       	rjmp	.+1020   	; 0xff6 <__stack+0x797>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	6c ac       	ldd	r6, Y+60	; 0x3c
     bfe:	7d ac       	ldd	r7, Y+61	; 0x3d
     c00:	8e ac       	ldd	r8, Y+62	; 0x3e
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	21 97       	sbiw	r28, 0x01	; 1
     c06:	62 14       	cp	r6, r2
     c08:	73 04       	cpc	r7, r3
     c0a:	84 04       	cpc	r8, r4
     c0c:	95 04       	cpc	r9, r5
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x3b3>
     c10:	f2 c1       	rjmp	.+996    	; 0xff6 <__stack+0x797>
     c12:	ff c1       	rjmp	.+1022   	; 0x1012 <__stack+0x7b3>
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	8f af       	std	Y+63, r24	; 0x3f
     c18:	e2 97       	sbiw	r28, 0x32	; 50
     c1a:	08 2e       	mov	r0, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__stack+0x3c7>
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	00 1f       	adc	r16, r16
     c24:	11 1f       	adc	r17, r17
     c26:	0a 94       	dec	r0
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <__stack+0x3bf>
     c2a:	6a 2d       	mov	r22, r10
     c2c:	68 1b       	sub	r22, r24
     c2e:	d2 01       	movw	r26, r4
     c30:	c1 01       	movw	r24, r2
     c32:	06 2e       	mov	r0, r22
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__stack+0x3df>
     c36:	b6 95       	lsr	r27
     c38:	a7 95       	ror	r26
     c3a:	97 95       	ror	r25
     c3c:	87 95       	ror	r24
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__stack+0x3d7>
     c42:	5c 01       	movw	r10, r24
     c44:	6d 01       	movw	r12, r26
     c46:	ae 28       	or	r10, r14
     c48:	bf 28       	or	r11, r15
     c4a:	c0 2a       	or	r12, r16
     c4c:	d1 2a       	or	r13, r17
     c4e:	ad aa       	std	Y+53, r10	; 0x35
     c50:	be aa       	std	Y+54, r11	; 0x36
     c52:	cf aa       	std	Y+55, r12	; 0x37
     c54:	d8 ae       	std	Y+56, r13	; 0x38
     c56:	72 01       	movw	r14, r4
     c58:	61 01       	movw	r12, r2
     c5a:	e2 96       	adiw	r28, 0x32	; 50
     c5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c5e:	e2 97       	sbiw	r28, 0x32	; 50
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x40b>
     c62:	cc 0c       	add	r12, r12
     c64:	dd 1c       	adc	r13, r13
     c66:	ee 1c       	adc	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	0a 94       	dec	r0
     c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__stack+0x403>
     c6e:	c9 aa       	std	Y+49, r12	; 0x31
     c70:	da aa       	std	Y+50, r13	; 0x32
     c72:	eb aa       	std	Y+51, r14	; 0x33
     c74:	fc aa       	std	Y+52, r15	; 0x34
     c76:	64 01       	movw	r12, r8
     c78:	53 01       	movw	r10, r6
     c7a:	06 2e       	mov	r0, r22
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	d6 94       	lsr	r13
     c80:	c7 94       	ror	r12
     c82:	b7 94       	ror	r11
     c84:	a7 94       	ror	r10
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	d4 01       	movw	r26, r8
     c8c:	c3 01       	movw	r24, r6
     c8e:	e2 96       	adiw	r28, 0x32	; 50
     c90:	0f ac       	ldd	r0, Y+63	; 0x3f
     c92:	e2 97       	sbiw	r28, 0x32	; 50
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	ec ac       	ldd	r14, Y+60	; 0x3c
     ca6:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca8:	0e ad       	ldd	r16, Y+62	; 0x3e
     caa:	1f ad       	ldd	r17, Y+63	; 0x3f
     cac:	21 97       	sbiw	r28, 0x01	; 1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__stack+0x459>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	6a 95       	dec	r22
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__stack+0x451>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	68 2a       	or	r6, r24
     cc2:	79 2a       	or	r7, r25
     cc4:	8a 2a       	or	r8, r26
     cc6:	9b 2a       	or	r9, r27
     cc8:	6d a6       	std	Y+45, r6	; 0x2d
     cca:	7e a6       	std	Y+46, r7	; 0x2e
     ccc:	8f a6       	std	Y+47, r8	; 0x2f
     cce:	98 aa       	std	Y+48, r9	; 0x30
     cd0:	ed a8       	ldd	r14, Y+53	; 0x35
     cd2:	fe a8       	ldd	r15, Y+54	; 0x36
     cd4:	0f a9       	ldd	r16, Y+55	; 0x37
     cd6:	18 ad       	ldd	r17, Y+56	; 0x38
     cd8:	38 01       	movw	r6, r16
     cda:	88 24       	eor	r8, r8
     cdc:	99 24       	eor	r9, r9
     cde:	98 01       	movw	r18, r16
     ce0:	87 01       	movw	r16, r14
     ce2:	20 70       	andi	r18, 0x00	; 0
     ce4:	30 70       	andi	r19, 0x00	; 0
     ce6:	a5 96       	adiw	r28, 0x25	; 37
     ce8:	0c af       	std	Y+60, r16	; 0x3c
     cea:	1d af       	std	Y+61, r17	; 0x3d
     cec:	2e af       	std	Y+62, r18	; 0x3e
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	a5 97       	sbiw	r28, 0x25	; 37
     cf2:	c6 01       	movw	r24, r12
     cf4:	b5 01       	movw	r22, r10
     cf6:	a4 01       	movw	r20, r8
     cf8:	93 01       	movw	r18, r6
     cfa:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	c6 01       	movw	r24, r12
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	93 01       	movw	r18, r6
     d0a:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     d0e:	c9 01       	movw	r24, r18
     d10:	da 01       	movw	r26, r20
     d12:	1c 01       	movw	r2, r24
     d14:	2d 01       	movw	r4, r26
     d16:	c2 01       	movw	r24, r4
     d18:	b1 01       	movw	r22, r2
     d1a:	a5 96       	adiw	r28, 0x25	; 37
     d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d20:	4e ad       	ldd	r20, Y+62	; 0x3e
     d22:	5f ad       	ldd	r21, Y+63	; 0x3f
     d24:	a5 97       	sbiw	r28, 0x25	; 37
     d26:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	87 01       	movw	r16, r14
     d30:	ff 24       	eor	r15, r15
     d32:	ee 24       	eor	r14, r14
     d34:	ad a4       	ldd	r10, Y+45	; 0x2d
     d36:	be a4       	ldd	r11, Y+46	; 0x2e
     d38:	cf a4       	ldd	r12, Y+47	; 0x2f
     d3a:	d8 a8       	ldd	r13, Y+48	; 0x30
     d3c:	c6 01       	movw	r24, r12
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	57 01       	movw	r10, r14
     d44:	68 01       	movw	r12, r16
     d46:	a8 2a       	or	r10, r24
     d48:	b9 2a       	or	r11, r25
     d4a:	ca 2a       	or	r12, r26
     d4c:	db 2a       	or	r13, r27
     d4e:	a2 16       	cp	r10, r18
     d50:	b3 06       	cpc	r11, r19
     d52:	c4 06       	cpc	r12, r20
     d54:	d5 06       	cpc	r13, r21
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__stack+0x539>
     d58:	08 94       	sec
     d5a:	21 08       	sbc	r2, r1
     d5c:	31 08       	sbc	r3, r1
     d5e:	41 08       	sbc	r4, r1
     d60:	51 08       	sbc	r5, r1
     d62:	ed a8       	ldd	r14, Y+53	; 0x35
     d64:	fe a8       	ldd	r15, Y+54	; 0x36
     d66:	0f a9       	ldd	r16, Y+55	; 0x37
     d68:	18 ad       	ldd	r17, Y+56	; 0x38
     d6a:	ae 0c       	add	r10, r14
     d6c:	bf 1c       	adc	r11, r15
     d6e:	c0 1e       	adc	r12, r16
     d70:	d1 1e       	adc	r13, r17
     d72:	ae 14       	cp	r10, r14
     d74:	bf 04       	cpc	r11, r15
     d76:	c0 06       	cpc	r12, r16
     d78:	d1 06       	cpc	r13, r17
     d7a:	70 f0       	brcs	.+28     	; 0xd98 <__stack+0x539>
     d7c:	a2 16       	cp	r10, r18
     d7e:	b3 06       	cpc	r11, r19
     d80:	c4 06       	cpc	r12, r20
     d82:	d5 06       	cpc	r13, r21
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x539>
     d86:	08 94       	sec
     d88:	21 08       	sbc	r2, r1
     d8a:	31 08       	sbc	r3, r1
     d8c:	41 08       	sbc	r4, r1
     d8e:	51 08       	sbc	r5, r1
     d90:	ae 0c       	add	r10, r14
     d92:	bf 1c       	adc	r11, r15
     d94:	c0 1e       	adc	r12, r16
     d96:	d1 1e       	adc	r13, r17
     d98:	a2 1a       	sub	r10, r18
     d9a:	b3 0a       	sbc	r11, r19
     d9c:	c4 0a       	sbc	r12, r20
     d9e:	d5 0a       	sbc	r13, r21
     da0:	c6 01       	movw	r24, r12
     da2:	b5 01       	movw	r22, r10
     da4:	a4 01       	movw	r20, r8
     da6:	93 01       	movw	r18, r6
     da8:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     dac:	7b 01       	movw	r14, r22
     dae:	8c 01       	movw	r16, r24
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	a4 01       	movw	r20, r8
     db6:	93 01       	movw	r18, r6
     db8:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
     dbc:	c9 01       	movw	r24, r18
     dbe:	da 01       	movw	r26, r20
     dc0:	3c 01       	movw	r6, r24
     dc2:	4d 01       	movw	r8, r26
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	a5 96       	adiw	r28, 0x25	; 37
     dca:	2c ad       	ldd	r18, Y+60	; 0x3c
     dcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dce:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd2:	a5 97       	sbiw	r28, 0x25	; 37
     dd4:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	87 01       	movw	r16, r14
     dde:	ff 24       	eor	r15, r15
     de0:	ee 24       	eor	r14, r14
     de2:	8d a5       	ldd	r24, Y+45	; 0x2d
     de4:	9e a5       	ldd	r25, Y+46	; 0x2e
     de6:	af a5       	ldd	r26, Y+47	; 0x2f
     de8:	b8 a9       	ldd	r27, Y+48	; 0x30
     dea:	a0 70       	andi	r26, 0x00	; 0
     dec:	b0 70       	andi	r27, 0x00	; 0
     dee:	57 01       	movw	r10, r14
     df0:	68 01       	movw	r12, r16
     df2:	a8 2a       	or	r10, r24
     df4:	b9 2a       	or	r11, r25
     df6:	ca 2a       	or	r12, r26
     df8:	db 2a       	or	r13, r27
     dfa:	a2 16       	cp	r10, r18
     dfc:	b3 06       	cpc	r11, r19
     dfe:	c4 06       	cpc	r12, r20
     e00:	d5 06       	cpc	r13, r21
     e02:	00 f5       	brcc	.+64     	; 0xe44 <__stack+0x5e5>
     e04:	08 94       	sec
     e06:	61 08       	sbc	r6, r1
     e08:	71 08       	sbc	r7, r1
     e0a:	81 08       	sbc	r8, r1
     e0c:	91 08       	sbc	r9, r1
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	a6 0e       	add	r10, r22
     e18:	b7 1e       	adc	r11, r23
     e1a:	c8 1e       	adc	r12, r24
     e1c:	d9 1e       	adc	r13, r25
     e1e:	a6 16       	cp	r10, r22
     e20:	b7 06       	cpc	r11, r23
     e22:	c8 06       	cpc	r12, r24
     e24:	d9 06       	cpc	r13, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <__stack+0x5e5>
     e28:	a2 16       	cp	r10, r18
     e2a:	b3 06       	cpc	r11, r19
     e2c:	c4 06       	cpc	r12, r20
     e2e:	d5 06       	cpc	r13, r21
     e30:	48 f4       	brcc	.+18     	; 0xe44 <__stack+0x5e5>
     e32:	08 94       	sec
     e34:	61 08       	sbc	r6, r1
     e36:	71 08       	sbc	r7, r1
     e38:	81 08       	sbc	r8, r1
     e3a:	91 08       	sbc	r9, r1
     e3c:	a6 0e       	add	r10, r22
     e3e:	b7 1e       	adc	r11, r23
     e40:	c8 1e       	adc	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d6 01       	movw	r26, r12
     e46:	c5 01       	movw	r24, r10
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	a4 0b       	sbc	r26, r20
     e4e:	b5 0b       	sbc	r27, r21
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	9a a7       	std	Y+42, r25	; 0x2a
     e54:	ab a7       	std	Y+43, r26	; 0x2b
     e56:	bc a7       	std	Y+44, r27	; 0x2c
     e58:	d1 01       	movw	r26, r2
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	64 01       	movw	r12, r8
     e60:	53 01       	movw	r10, r6
     e62:	a8 2a       	or	r10, r24
     e64:	b9 2a       	or	r11, r25
     e66:	ca 2a       	or	r12, r26
     e68:	db 2a       	or	r13, r27
     e6a:	25 96       	adiw	r28, 0x05	; 5
     e6c:	ac ae       	std	Y+60, r10	; 0x3c
     e6e:	bd ae       	std	Y+61, r11	; 0x3d
     e70:	ce ae       	std	Y+62, r12	; 0x3e
     e72:	df ae       	std	Y+63, r13	; 0x3f
     e74:	25 97       	sbiw	r28, 0x05	; 5
     e76:	86 01       	movw	r16, r12
     e78:	75 01       	movw	r14, r10
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	e2 22       	and	r14, r18
     e84:	f3 22       	and	r15, r19
     e86:	04 23       	and	r16, r20
     e88:	15 23       	and	r17, r21
     e8a:	a6 01       	movw	r20, r12
     e8c:	66 27       	eor	r22, r22
     e8e:	77 27       	eor	r23, r23
     e90:	ad 96       	adiw	r28, 0x2d	; 45
     e92:	4c af       	std	Y+60, r20	; 0x3c
     e94:	5d af       	std	Y+61, r21	; 0x3d
     e96:	6e af       	std	Y+62, r22	; 0x3e
     e98:	7f af       	std	Y+63, r23	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	a9 a8       	ldd	r10, Y+49	; 0x31
     e9e:	ba a8       	ldd	r11, Y+50	; 0x32
     ea0:	cb a8       	ldd	r12, Y+51	; 0x33
     ea2:	dc a8       	ldd	r13, Y+52	; 0x34
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a6 22       	and	r10, r22
     eae:	b7 22       	and	r11, r23
     eb0:	c8 22       	and	r12, r24
     eb2:	d9 22       	and	r13, r25
     eb4:	89 a9       	ldd	r24, Y+49	; 0x31
     eb6:	9a a9       	ldd	r25, Y+50	; 0x32
     eb8:	ab a9       	ldd	r26, Y+51	; 0x33
     eba:	bc a9       	ldd	r27, Y+52	; 0x34
     ebc:	1d 01       	movw	r2, r26
     ebe:	44 24       	eor	r4, r4
     ec0:	55 24       	eor	r5, r5
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	a6 01       	movw	r20, r12
     ec8:	95 01       	movw	r18, r10
     eca:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c af       	std	Y+60, r22	; 0x3c
     ed2:	7d af       	std	Y+61, r23	; 0x3d
     ed4:	8e af       	std	Y+62, r24	; 0x3e
     ed6:	9f af       	std	Y+63, r25	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a2 01       	movw	r20, r4
     ee0:	91 01       	movw	r18, r2
     ee2:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     ee6:	3b 01       	movw	r6, r22
     ee8:	4c 01       	movw	r8, r24
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	6c ad       	ldd	r22, Y+60	; 0x3c
     eee:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef4:	ad 97       	sbiw	r28, 0x2d	; 45
     ef6:	a6 01       	movw	r20, r12
     ef8:	95 01       	movw	r18, r10
     efa:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     efe:	7b 01       	movw	r14, r22
     f00:	8c 01       	movw	r16, r24
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	ad 97       	sbiw	r28, 0x2d	; 45
     f0e:	a2 01       	movw	r20, r4
     f10:	91 01       	movw	r18, r2
     f12:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
     f16:	5b 01       	movw	r10, r22
     f18:	6c 01       	movw	r12, r24
     f1a:	a8 01       	movw	r20, r16
     f1c:	97 01       	movw	r18, r14
     f1e:	26 0d       	add	r18, r6
     f20:	37 1d       	adc	r19, r7
     f22:	48 1d       	adc	r20, r8
     f24:	59 1d       	adc	r21, r9
     f26:	a9 96       	adiw	r28, 0x29	; 41
     f28:	6c ac       	ldd	r6, Y+60	; 0x3c
     f2a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f2c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f2e:	9f ac       	ldd	r9, Y+63	; 0x3f
     f30:	a9 97       	sbiw	r28, 0x29	; 41
     f32:	c4 01       	movw	r24, r8
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	4a 1f       	adc	r20, r26
     f3e:	5b 1f       	adc	r21, r27
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	40 07       	cpc	r20, r16
     f46:	51 07       	cpc	r21, r17
     f48:	48 f4       	brcc	.+18     	; 0xf5c <__stack+0x6fd>
     f4a:	e1 2c       	mov	r14, r1
     f4c:	f1 2c       	mov	r15, r1
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	06 2f       	mov	r16, r22
     f52:	11 2d       	mov	r17, r1
     f54:	ae 0c       	add	r10, r14
     f56:	bf 1c       	adc	r11, r15
     f58:	c0 1e       	adc	r12, r16
     f5a:	d1 1e       	adc	r13, r17
     f5c:	ca 01       	movw	r24, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	bb 27       	eor	r27, r27
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	6a 0d       	add	r22, r10
     f68:	7b 1d       	adc	r23, r11
     f6a:	8c 1d       	adc	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	69 a4       	ldd	r6, Y+41	; 0x29
     f70:	7a a4       	ldd	r7, Y+42	; 0x2a
     f72:	8b a4       	ldd	r8, Y+43	; 0x2b
     f74:	9c a4       	ldd	r9, Y+44	; 0x2c
     f76:	66 16       	cp	r6, r22
     f78:	77 06       	cpc	r7, r23
     f7a:	88 06       	cpc	r8, r24
     f7c:	99 06       	cpc	r9, r25
     f7e:	50 f1       	brcs	.+84     	; 0xfd4 <__stack+0x775>
     f80:	66 15       	cp	r22, r6
     f82:	77 05       	cpc	r23, r7
     f84:	88 05       	cpc	r24, r8
     f86:	99 05       	cpc	r25, r9
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0x72d>
     f8a:	4d c0       	rjmp	.+154    	; 0x1026 <__stack+0x7c7>
     f8c:	d9 01       	movw	r26, r18
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2c ad       	ldd	r18, Y+60	; 0x3c
     f96:	3d ad       	ldd	r19, Y+61	; 0x3d
     f98:	4e ad       	ldd	r20, Y+62	; 0x3e
     f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f9c:	a9 97       	sbiw	r28, 0x29	; 41
     f9e:	40 70       	andi	r20, 0x00	; 0
     fa0:	50 70       	andi	r21, 0x00	; 0
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a4 1f       	adc	r26, r20
     fa8:	b5 1f       	adc	r27, r21
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	e2 96       	adiw	r28, 0x32	; 50
     fb8:	0f ac       	ldd	r0, Y+63	; 0x3f
     fba:	e2 97       	sbiw	r28, 0x32	; 50
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <__stack+0x767>
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <__stack+0x75f>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	4a 07       	cpc	r20, r26
     fd0:	5b 07       	cpc	r21, r27
     fd2:	48 f5       	brcc	.+82     	; 0x1026 <__stack+0x7c7>
     fd4:	25 96       	adiw	r28, 0x05	; 5
     fd6:	0c ad       	ldd	r16, Y+60	; 0x3c
     fd8:	1d ad       	ldd	r17, Y+61	; 0x3d
     fda:	2e ad       	ldd	r18, Y+62	; 0x3e
     fdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     fde:	25 97       	sbiw	r28, 0x05	; 5
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	10 40       	sbci	r17, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	0c af       	std	Y+60, r16	; 0x3c
     fec:	1d af       	std	Y+61, r17	; 0x3d
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	3f af       	std	Y+63, r19	; 0x3f
     ff2:	25 97       	sbiw	r28, 0x05	; 5
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__stack+0x7c7>
     ff6:	66 24       	eor	r6, r6
     ff8:	77 24       	eor	r7, r7
     ffa:	43 01       	movw	r8, r6
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	25 96       	adiw	r28, 0x05	; 5
    1006:	2c af       	std	Y+60, r18	; 0x3c
    1008:	3d af       	std	Y+61, r19	; 0x3d
    100a:	4e af       	std	Y+62, r20	; 0x3e
    100c:	5f af       	std	Y+63, r21	; 0x3f
    100e:	25 97       	sbiw	r28, 0x05	; 5
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__stack+0x7cd>
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
    1016:	43 01       	movw	r8, r6
    1018:	25 96       	adiw	r28, 0x05	; 5
    101a:	1c ae       	std	Y+60, r1	; 0x3c
    101c:	1d ae       	std	Y+61, r1	; 0x3d
    101e:	1e ae       	std	Y+62, r1	; 0x3e
    1020:	1f ae       	std	Y+63, r1	; 0x3f
    1022:	25 97       	sbiw	r28, 0x05	; 5
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__stack+0x7cd>
    1026:	66 24       	eor	r6, r6
    1028:	77 24       	eor	r7, r7
    102a:	43 01       	movw	r8, r6
    102c:	fe 01       	movw	r30, r28
    102e:	b1 96       	adiw	r30, 0x21	; 33
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <__stack+0x7d5>
    103a:	25 96       	adiw	r28, 0x05	; 5
    103c:	ac ac       	ldd	r10, Y+60	; 0x3c
    103e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1040:	ce ac       	ldd	r12, Y+62	; 0x3e
    1042:	df ac       	ldd	r13, Y+63	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	a9 a2       	std	Y+33, r10	; 0x21
    1048:	ba a2       	std	Y+34, r11	; 0x22
    104a:	cb a2       	std	Y+35, r12	; 0x23
    104c:	dc a2       	std	Y+36, r13	; 0x24
    104e:	6d a2       	std	Y+37, r6	; 0x25
    1050:	7e a2       	std	Y+38, r7	; 0x26
    1052:	8f a2       	std	Y+39, r8	; 0x27
    1054:	98 a6       	std	Y+40, r9	; 0x28
    1056:	22 96       	adiw	r28, 0x02	; 2
    1058:	2f ad       	ldd	r18, Y+63	; 0x3f
    105a:	22 97       	sbiw	r28, 0x02	; 2
    105c:	3a a1       	ldd	r19, Y+34	; 0x22
    105e:	4b a1       	ldd	r20, Y+35	; 0x23
    1060:	5c a1       	ldd	r21, Y+36	; 0x24
    1062:	66 2d       	mov	r22, r6
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	df a0       	ldd	r13, Y+39	; 0x27
    1068:	98 a5       	ldd	r25, Y+40	; 0x28
    106a:	e1 96       	adiw	r28, 0x31	; 49
    106c:	ec ac       	ldd	r14, Y+60	; 0x3c
    106e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1070:	0e ad       	ldd	r16, Y+62	; 0x3e
    1072:	1f ad       	ldd	r17, Y+63	; 0x3f
    1074:	e1 97       	sbiw	r28, 0x31	; 49
    1076:	e1 14       	cp	r14, r1
    1078:	f1 04       	cpc	r15, r1
    107a:	01 05       	cpc	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0x823>
    1080:	56 c0       	rjmp	.+172    	; 0x112e <__stack+0x8cf>
    1082:	21 95       	neg	r18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	12 16       	cp	r1, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <__stack+0x82d>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	31 95       	neg	r19
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	13 16       	cp	r1, r19
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__stack+0x837>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	93 2e       	mov	r9, r19
    1098:	98 1a       	sub	r9, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	39 15       	cp	r19, r9
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__stack+0x843>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e8 2b       	or	r30, r24
    10a4:	41 95       	neg	r20
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	14 16       	cp	r1, r20
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__stack+0x84f>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	a4 2e       	mov	r10, r20
    10b0:	ae 1a       	sub	r10, r30
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	4a 15       	cp	r20, r10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__stack+0x85b>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	f8 2b       	or	r31, r24
    10bc:	51 95       	neg	r21
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	15 16       	cp	r1, r21
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__stack+0x867>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	b5 2e       	mov	r11, r21
    10c8:	bf 1a       	sub	r11, r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	5b 15       	cp	r21, r11
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__stack+0x873>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	e8 2b       	or	r30, r24
    10d4:	61 95       	neg	r22
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	16 16       	cp	r1, r22
    10da:	08 f0       	brcs	.+2      	; 0x10de <__stack+0x87f>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	a6 2f       	mov	r26, r22
    10e0:	ae 1b       	sub	r26, r30
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	6a 17       	cp	r22, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__stack+0x88b>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f8 2b       	or	r31, r24
    10ec:	71 95       	neg	r23
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	17 16       	cp	r1, r23
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0x897>
    10f4:	e0 e0       	ldi	r30, 0x00	; 0
    10f6:	c7 2e       	mov	r12, r23
    10f8:	cf 1a       	sub	r12, r31
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	7c 15       	cp	r23, r12
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x8a3>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	e8 2b       	or	r30, r24
    1104:	8d 2d       	mov	r24, r13
    1106:	81 95       	neg	r24
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	18 16       	cp	r1, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0x8b1>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	d8 2e       	mov	r13, r24
    1112:	de 1a       	sub	r13, r30
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	8d 15       	cp	r24, r13
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0x8bd>
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	fe 2b       	or	r31, r30
    111e:	89 2f       	mov	r24, r25
    1120:	81 95       	neg	r24
    1122:	39 2d       	mov	r19, r9
    1124:	a5 01       	movw	r20, r10
    1126:	6a 2f       	mov	r22, r26
    1128:	7c 2d       	mov	r23, r12
    112a:	98 2f       	mov	r25, r24
    112c:	9f 1b       	sub	r25, r31
    112e:	8d 2d       	mov	r24, r13
    1130:	ce 58       	subi	r28, 0x8E	; 142
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	e2 e1       	ldi	r30, 0x12	; 18
    1136:	0c 94 04 37 	jmp	0x6e08	; 0x6e08 <__epilogue_restores__>

0000113a <__moddi3>:
    113a:	a7 e7       	ldi	r26, 0x77	; 119
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 e8 36 	jmp	0x6dd0	; 0x6dd0 <__prologue_saves__>
    1146:	98 2e       	mov	r9, r24
    1148:	89 2e       	mov	r8, r25
    114a:	71 2e       	mov	r7, r17
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	fe 01       	movw	r30, r28
    1150:	31 96       	adiw	r30, 0x01	; 1
    1152:	df 01       	movw	r26, r30
    1154:	68 2e       	mov	r6, r24
    1156:	1d 92       	st	X+, r1
    1158:	6a 94       	dec	r6
    115a:	e9 f7       	brne	.-6      	; 0x1156 <__moddi3+0x1c>
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	3a 83       	std	Y+2, r19	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	6d 83       	std	Y+5, r22	; 0x05
    1166:	7e 83       	std	Y+6, r23	; 0x06
    1168:	9f 82       	std	Y+7, r9	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	fe 01       	movw	r30, r28
    116e:	39 96       	adiw	r30, 0x09	; 9
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <__moddi3+0x38>
    1178:	a9 86       	std	Y+9, r10	; 0x09
    117a:	ba 86       	std	Y+10, r11	; 0x0a
    117c:	cb 86       	std	Y+11, r12	; 0x0b
    117e:	dc 86       	std	Y+12, r13	; 0x0c
    1180:	ed 86       	std	Y+13, r14	; 0x0d
    1182:	fe 86       	std	Y+14, r15	; 0x0e
    1184:	0f 87       	std	Y+15, r16	; 0x0f
    1186:	18 8b       	std	Y+16, r17	; 0x10
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	af 81       	ldd	r26, Y+7	; 0x07
    118e:	b8 85       	ldd	r27, Y+8	; 0x08
    1190:	b7 fd       	sbrc	r27, 7
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__moddi3+0x68>
    1194:	e1 96       	adiw	r28, 0x31	; 49
    1196:	1c ae       	std	Y+60, r1	; 0x3c
    1198:	1d ae       	std	Y+61, r1	; 0x3d
    119a:	1e ae       	std	Y+62, r1	; 0x3e
    119c:	1f ae       	std	Y+63, r1	; 0x3f
    119e:	e1 97       	sbiw	r28, 0x31	; 49
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <__moddi3+0x130>
    11a2:	21 95       	neg	r18
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	12 16       	cp	r1, r18
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__moddi3+0x72>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	31 95       	neg	r19
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	13 16       	cp	r1, r19
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__moddi3+0x7c>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b3 2f       	mov	r27, r19
    11b8:	b8 1b       	sub	r27, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	3b 17       	cp	r19, r27
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__moddi3+0x88>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	98 2b       	or	r25, r24
    11c4:	41 95       	neg	r20
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	14 16       	cp	r1, r20
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__moddi3+0x94>
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a4 2f       	mov	r26, r20
    11d0:	a9 1b       	sub	r26, r25
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	4a 17       	cp	r20, r26
    11d6:	08 f0       	brcs	.+2      	; 0x11da <__moddi3+0xa0>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	38 2b       	or	r19, r24
    11dc:	51 95       	neg	r21
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	15 16       	cp	r1, r21
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__moddi3+0xac>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	f5 2f       	mov	r31, r21
    11e8:	f3 1b       	sub	r31, r19
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	5f 17       	cp	r21, r31
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__moddi3+0xb8>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	98 2b       	or	r25, r24
    11f4:	61 95       	neg	r22
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	16 16       	cp	r1, r22
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__moddi3+0xc4>
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	e6 2f       	mov	r30, r22
    1200:	e9 1b       	sub	r30, r25
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	6e 17       	cp	r22, r30
    1206:	08 f0       	brcs	.+2      	; 0x120a <__moddi3+0xd0>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	38 2b       	or	r19, r24
    120c:	71 95       	neg	r23
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	17 16       	cp	r1, r23
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__moddi3+0xdc>
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	57 2f       	mov	r21, r23
    1218:	53 1b       	sub	r21, r19
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	75 17       	cp	r23, r21
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__moddi3+0xe8>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	48 2b       	or	r20, r24
    1224:	89 2d       	mov	r24, r9
    1226:	81 95       	neg	r24
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	18 16       	cp	r1, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__moddi3+0xf6>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	68 2e       	mov	r6, r24
    1232:	64 1a       	sub	r6, r20
    1234:	46 2d       	mov	r20, r6
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	86 15       	cp	r24, r6
    123a:	08 f0       	brcs	.+2      	; 0x123e <__moddi3+0x104>
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	93 2b       	or	r25, r19
    1240:	88 2d       	mov	r24, r8
    1242:	81 95       	neg	r24
    1244:	89 1b       	sub	r24, r25
    1246:	29 83       	std	Y+1, r18	; 0x01
    1248:	ba 83       	std	Y+2, r27	; 0x02
    124a:	ab 83       	std	Y+3, r26	; 0x03
    124c:	fc 83       	std	Y+4, r31	; 0x04
    124e:	ed 83       	std	Y+5, r30	; 0x05
    1250:	5e 83       	std	Y+6, r21	; 0x06
    1252:	4f 83       	std	Y+7, r20	; 0x07
    1254:	88 87       	std	Y+8, r24	; 0x08
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f ef       	ldi	r20, 0xFF	; 255
    125c:	5f ef       	ldi	r21, 0xFF	; 255
    125e:	e1 96       	adiw	r28, 0x31	; 49
    1260:	2c af       	std	Y+60, r18	; 0x3c
    1262:	3d af       	std	Y+61, r19	; 0x3d
    1264:	4e af       	std	Y+62, r20	; 0x3e
    1266:	5f af       	std	Y+63, r21	; 0x3f
    1268:	e1 97       	sbiw	r28, 0x31	; 49
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	af 85       	ldd	r26, Y+15	; 0x0f
    1270:	b8 89       	ldd	r27, Y+16	; 0x10
    1272:	b7 ff       	sbrs	r27, 7
    1274:	5a c0       	rjmp	.+180    	; 0x132a <__moddi3+0x1f0>
    1276:	a1 94       	neg	r10
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	1a 14       	cp	r1, r10
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0x146>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	b1 94       	neg	r11
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	1b 14       	cp	r1, r11
    1286:	08 f0       	brcs	.+2      	; 0x128a <__moddi3+0x150>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	6b 2d       	mov	r22, r11
    128c:	68 1b       	sub	r22, r24
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	b6 16       	cp	r11, r22
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__moddi3+0x15c>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	98 2b       	or	r25, r24
    1298:	c1 94       	neg	r12
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	1c 14       	cp	r1, r12
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__moddi3+0x168>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	5c 2d       	mov	r21, r12
    12a4:	59 1b       	sub	r21, r25
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	c5 16       	cp	r12, r21
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__moddi3+0x174>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	28 2b       	or	r18, r24
    12b0:	d1 94       	neg	r13
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	1d 14       	cp	r1, r13
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__moddi3+0x180>
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	4d 2d       	mov	r20, r13
    12bc:	42 1b       	sub	r20, r18
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	d4 16       	cp	r13, r20
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__moddi3+0x18c>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	98 2b       	or	r25, r24
    12c8:	e1 94       	neg	r14
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	1e 14       	cp	r1, r14
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__moddi3+0x198>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3e 2d       	mov	r19, r14
    12d4:	39 1b       	sub	r19, r25
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	e3 16       	cp	r14, r19
    12da:	08 f0       	brcs	.+2      	; 0x12de <__moddi3+0x1a4>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	28 2b       	or	r18, r24
    12e0:	f1 94       	neg	r15
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	1f 14       	cp	r1, r15
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__moddi3+0x1b0>
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	7f 2d       	mov	r23, r15
    12ec:	72 1b       	sub	r23, r18
    12ee:	27 2f       	mov	r18, r23
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	f7 16       	cp	r15, r23
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__moddi3+0x1be>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	98 2b       	or	r25, r24
    12fa:	01 95       	neg	r16
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	10 16       	cp	r1, r16
    1300:	08 f0       	brcs	.+2      	; 0x1304 <__moddi3+0x1ca>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	80 2f       	mov	r24, r16
    1306:	89 1b       	sub	r24, r25
    1308:	98 2f       	mov	r25, r24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	09 17       	cp	r16, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__moddi3+0x1d8>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	18 2b       	or	r17, r24
    1314:	87 2d       	mov	r24, r7
    1316:	81 95       	neg	r24
    1318:	81 1b       	sub	r24, r17
    131a:	a9 86       	std	Y+9, r10	; 0x09
    131c:	6a 87       	std	Y+10, r22	; 0x0a
    131e:	5b 87       	std	Y+11, r21	; 0x0b
    1320:	4c 87       	std	Y+12, r20	; 0x0c
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2e 87       	std	Y+14, r18	; 0x0e
    1326:	9f 87       	std	Y+15, r25	; 0x0f
    1328:	88 8b       	std	Y+16, r24	; 0x10
    132a:	99 81       	ldd	r25, Y+1	; 0x01
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	6e 81       	ldd	r22, Y+6	; 0x06
    1336:	7f 81       	ldd	r23, Y+7	; 0x07
    1338:	a8 85       	ldd	r26, Y+8	; 0x08
    133a:	b9 85       	ldd	r27, Y+9	; 0x09
    133c:	1a 85       	ldd	r17, Y+10	; 0x0a
    133e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1340:	fc 84       	ldd	r15, Y+12	; 0x0c
    1342:	ed 84       	ldd	r14, Y+13	; 0x0d
    1344:	de 84       	ldd	r13, Y+14	; 0x0e
    1346:	cf 84       	ldd	r12, Y+15	; 0x0f
    1348:	b8 88       	ldd	r11, Y+16	; 0x10
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	e9 e1       	ldi	r30, 0x19	; 25
    134e:	8e 2e       	mov	r8, r30
    1350:	91 2c       	mov	r9, r1
    1352:	8c 0e       	add	r8, r28
    1354:	9d 1e       	adc	r9, r29
    1356:	f4 01       	movw	r30, r8
    1358:	68 2e       	mov	r6, r24
    135a:	11 92       	st	Z+, r1
    135c:	6a 94       	dec	r6
    135e:	e9 f7       	brne	.-6      	; 0x135a <__moddi3+0x220>
    1360:	99 8f       	std	Y+25, r25	; 0x19
    1362:	2a 8f       	std	Y+26, r18	; 0x1a
    1364:	3b 8f       	std	Y+27, r19	; 0x1b
    1366:	4c 8f       	std	Y+28, r20	; 0x1c
    1368:	5d 8f       	std	Y+29, r21	; 0x1d
    136a:	6e 8f       	std	Y+30, r22	; 0x1e
    136c:	7f 8f       	std	Y+31, r23	; 0x1f
    136e:	a8 a3       	std	Y+32, r26	; 0x20
    1370:	9e 01       	movw	r18, r28
    1372:	2f 5d       	subi	r18, 0xDF	; 223
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	f9 01       	movw	r30, r18
    1378:	11 92       	st	Z+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <__moddi3+0x23e>
    137e:	b9 a3       	std	Y+33, r27	; 0x21
    1380:	1a a3       	std	Y+34, r17	; 0x22
    1382:	0b a3       	std	Y+35, r16	; 0x23
    1384:	fc a2       	std	Y+36, r15	; 0x24
    1386:	ed a2       	std	Y+37, r14	; 0x25
    1388:	de a2       	std	Y+38, r13	; 0x26
    138a:	cf a2       	std	Y+39, r12	; 0x27
    138c:	b8 a6       	std	Y+40, r11	; 0x28
    138e:	29 a0       	ldd	r2, Y+33	; 0x21
    1390:	3a a0       	ldd	r3, Y+34	; 0x22
    1392:	4b a0       	ldd	r4, Y+35	; 0x23
    1394:	5c a0       	ldd	r5, Y+36	; 0x24
    1396:	ad a0       	ldd	r10, Y+37	; 0x25
    1398:	be a0       	ldd	r11, Y+38	; 0x26
    139a:	cf a0       	ldd	r12, Y+39	; 0x27
    139c:	d8 a4       	ldd	r13, Y+40	; 0x28
    139e:	49 8d       	ldd	r20, Y+25	; 0x19
    13a0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    13a6:	e5 96       	adiw	r28, 0x35	; 53
    13a8:	4f af       	std	Y+63, r20	; 0x3f
    13aa:	e5 97       	sbiw	r28, 0x35	; 53
    13ac:	e6 96       	adiw	r28, 0x36	; 54
    13ae:	5f af       	std	Y+63, r21	; 0x3f
    13b0:	e6 97       	sbiw	r28, 0x36	; 54
    13b2:	e7 96       	adiw	r28, 0x37	; 55
    13b4:	6f af       	std	Y+63, r22	; 0x3f
    13b6:	e7 97       	sbiw	r28, 0x37	; 55
    13b8:	e8 96       	adiw	r28, 0x38	; 56
    13ba:	7f af       	std	Y+63, r23	; 0x3f
    13bc:	e8 97       	sbiw	r28, 0x38	; 56
    13be:	e8 96       	adiw	r28, 0x38	; 56
    13c0:	6c ac       	ldd	r6, Y+60	; 0x3c
    13c2:	7d ac       	ldd	r7, Y+61	; 0x3d
    13c4:	8e ac       	ldd	r8, Y+62	; 0x3e
    13c6:	9f ac       	ldd	r9, Y+63	; 0x3f
    13c8:	e8 97       	sbiw	r28, 0x38	; 56
    13ca:	2d 96       	adiw	r28, 0x0d	; 13
    13cc:	6c ae       	std	Y+60, r6	; 0x3c
    13ce:	7d ae       	std	Y+61, r7	; 0x3d
    13d0:	8e ae       	std	Y+62, r8	; 0x3e
    13d2:	9f ae       	std	Y+63, r9	; 0x3f
    13d4:	2d 97       	sbiw	r28, 0x0d	; 13
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13da:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13dc:	38 a1       	ldd	r19, Y+32	; 0x20
    13de:	3c 01       	movw	r6, r24
    13e0:	49 01       	movw	r8, r18
    13e2:	61 96       	adiw	r28, 0x11	; 17
    13e4:	6c ae       	std	Y+60, r6	; 0x3c
    13e6:	7d ae       	std	Y+61, r7	; 0x3d
    13e8:	8e ae       	std	Y+62, r8	; 0x3e
    13ea:	9f ae       	std	Y+63, r9	; 0x3f
    13ec:	61 97       	sbiw	r28, 0x11	; 17
    13ee:	a1 14       	cp	r10, r1
    13f0:	b1 04       	cpc	r11, r1
    13f2:	c1 04       	cpc	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__moddi3+0x2c0>
    13f8:	28 c3       	rjmp	.+1616   	; 0x1a4a <__moddi3+0x910>
    13fa:	62 14       	cp	r6, r2
    13fc:	73 04       	cpc	r7, r3
    13fe:	84 04       	cpc	r8, r4
    1400:	95 04       	cpc	r9, r5
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__moddi3+0x2cc>
    1404:	0e c1       	rjmp	.+540    	; 0x1622 <__moddi3+0x4e8>
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	20 16       	cp	r2, r16
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	30 06       	cpc	r3, r16
    140e:	01 e0       	ldi	r16, 0x01	; 1
    1410:	40 06       	cpc	r4, r16
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	50 06       	cpc	r5, r16
    1416:	88 f4       	brcc	.+34     	; 0x143a <__moddi3+0x300>
    1418:	1f ef       	ldi	r17, 0xFF	; 255
    141a:	21 16       	cp	r2, r17
    141c:	31 04       	cpc	r3, r1
    141e:	41 04       	cpc	r4, r1
    1420:	51 04       	cpc	r5, r1
    1422:	39 f0       	breq	.+14     	; 0x1432 <__moddi3+0x2f8>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__moddi3+0x2f8>
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	e8 2e       	mov	r14, r24
    142a:	f1 2c       	mov	r15, r1
    142c:	01 2d       	mov	r16, r1
    142e:	11 2d       	mov	r17, r1
    1430:	18 c0       	rjmp	.+48     	; 0x1462 <__moddi3+0x328>
    1432:	ee 24       	eor	r14, r14
    1434:	ff 24       	eor	r15, r15
    1436:	87 01       	movw	r16, r14
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__moddi3+0x328>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	22 16       	cp	r2, r18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	32 06       	cpc	r3, r18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	42 06       	cpc	r4, r18
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	52 06       	cpc	r5, r18
    144a:	30 f0       	brcs	.+12     	; 0x1458 <__moddi3+0x31e>
    144c:	b8 e1       	ldi	r27, 0x18	; 24
    144e:	eb 2e       	mov	r14, r27
    1450:	f1 2c       	mov	r15, r1
    1452:	01 2d       	mov	r16, r1
    1454:	11 2d       	mov	r17, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__moddi3+0x328>
    1458:	a0 e1       	ldi	r26, 0x10	; 16
    145a:	ea 2e       	mov	r14, r26
    145c:	f1 2c       	mov	r15, r1
    145e:	01 2d       	mov	r16, r1
    1460:	11 2d       	mov	r17, r1
    1462:	d2 01       	movw	r26, r4
    1464:	c1 01       	movw	r24, r2
    1466:	0e 2c       	mov	r0, r14
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__moddi3+0x338>
    146a:	b6 95       	lsr	r27
    146c:	a7 95       	ror	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	0a 94       	dec	r0
    1474:	d2 f7       	brpl	.-12     	; 0x146a <__moddi3+0x330>
    1476:	86 58       	subi	r24, 0x86	; 134
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	dc 01       	movw	r26, r24
    147c:	2c 91       	ld	r18, X
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8e 19       	sub	r24, r14
    1488:	9f 09       	sbc	r25, r15
    148a:	a0 0b       	sbc	r26, r16
    148c:	b1 0b       	sbc	r27, r17
    148e:	5c 01       	movw	r10, r24
    1490:	6d 01       	movw	r12, r26
    1492:	a2 1a       	sub	r10, r18
    1494:	b1 08       	sbc	r11, r1
    1496:	c1 08       	sbc	r12, r1
    1498:	d1 08       	sbc	r13, r1
    149a:	65 96       	adiw	r28, 0x15	; 21
    149c:	ac ae       	std	Y+60, r10	; 0x3c
    149e:	bd ae       	std	Y+61, r11	; 0x3d
    14a0:	ce ae       	std	Y+62, r12	; 0x3e
    14a2:	df ae       	std	Y+63, r13	; 0x3f
    14a4:	65 97       	sbiw	r28, 0x15	; 21
    14a6:	a1 14       	cp	r10, r1
    14a8:	b1 04       	cpc	r11, r1
    14aa:	c1 04       	cpc	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__moddi3+0x378>
    14b0:	45 c0       	rjmp	.+138    	; 0x153c <__moddi3+0x402>
    14b2:	62 96       	adiw	r28, 0x12	; 18
    14b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    14b6:	62 97       	sbiw	r28, 0x12	; 18
    14b8:	06 2e       	mov	r0, r22
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <__moddi3+0x38a>
    14bc:	22 0c       	add	r2, r2
    14be:	33 1c       	adc	r3, r3
    14c0:	44 1c       	adc	r4, r4
    14c2:	55 1c       	adc	r5, r5
    14c4:	0a 94       	dec	r0
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <__moddi3+0x382>
    14c8:	a4 01       	movw	r20, r8
    14ca:	93 01       	movw	r18, r6
    14cc:	06 2e       	mov	r0, r22
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__moddi3+0x39e>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <__moddi3+0x396>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	8a 19       	sub	r24, r10
    14e2:	9b 09       	sbc	r25, r11
    14e4:	e8 96       	adiw	r28, 0x38	; 56
    14e6:	cc ac       	ldd	r12, Y+60	; 0x3c
    14e8:	dd ac       	ldd	r13, Y+61	; 0x3d
    14ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    14ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    14ee:	e8 97       	sbiw	r28, 0x38	; 56
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__moddi3+0x3c0>
    14f2:	f6 94       	lsr	r15
    14f4:	e7 94       	ror	r14
    14f6:	d7 94       	ror	r13
    14f8:	c7 94       	ror	r12
    14fa:	8a 95       	dec	r24
    14fc:	d2 f7       	brpl	.-12     	; 0x14f2 <__moddi3+0x3b8>
    14fe:	87 01       	movw	r16, r14
    1500:	76 01       	movw	r14, r12
    1502:	e2 2a       	or	r14, r18
    1504:	f3 2a       	or	r15, r19
    1506:	04 2b       	or	r16, r20
    1508:	15 2b       	or	r17, r21
    150a:	61 96       	adiw	r28, 0x11	; 17
    150c:	ec ae       	std	Y+60, r14	; 0x3c
    150e:	fd ae       	std	Y+61, r15	; 0x3d
    1510:	0e af       	std	Y+62, r16	; 0x3e
    1512:	1f af       	std	Y+63, r17	; 0x3f
    1514:	61 97       	sbiw	r28, 0x11	; 17
    1516:	e8 96       	adiw	r28, 0x38	; 56
    1518:	0c ad       	ldd	r16, Y+60	; 0x3c
    151a:	1d ad       	ldd	r17, Y+61	; 0x3d
    151c:	2e ad       	ldd	r18, Y+62	; 0x3e
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	e8 97       	sbiw	r28, 0x38	; 56
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__moddi3+0x3f2>
    1524:	00 0f       	add	r16, r16
    1526:	11 1f       	adc	r17, r17
    1528:	22 1f       	adc	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	6a 95       	dec	r22
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__moddi3+0x3ea>
    1530:	2d 96       	adiw	r28, 0x0d	; 13
    1532:	0c af       	std	Y+60, r16	; 0x3c
    1534:	1d af       	std	Y+61, r17	; 0x3d
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	3f af       	std	Y+63, r19	; 0x3f
    153a:	2d 97       	sbiw	r28, 0x0d	; 13
    153c:	32 01       	movw	r6, r4
    153e:	88 24       	eor	r8, r8
    1540:	99 24       	eor	r9, r9
    1542:	a2 01       	movw	r20, r4
    1544:	91 01       	movw	r18, r2
    1546:	40 70       	andi	r20, 0x00	; 0
    1548:	50 70       	andi	r21, 0x00	; 0
    154a:	69 96       	adiw	r28, 0x19	; 25
    154c:	2c af       	std	Y+60, r18	; 0x3c
    154e:	3d af       	std	Y+61, r19	; 0x3d
    1550:	4e af       	std	Y+62, r20	; 0x3e
    1552:	5f af       	std	Y+63, r21	; 0x3f
    1554:	69 97       	sbiw	r28, 0x19	; 25
    1556:	61 96       	adiw	r28, 0x11	; 17
    1558:	6c ad       	ldd	r22, Y+60	; 0x3c
    155a:	7d ad       	ldd	r23, Y+61	; 0x3d
    155c:	8e ad       	ldd	r24, Y+62	; 0x3e
    155e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1560:	61 97       	sbiw	r28, 0x11	; 17
    1562:	a4 01       	movw	r20, r8
    1564:	93 01       	movw	r18, r6
    1566:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    156a:	7b 01       	movw	r14, r22
    156c:	8c 01       	movw	r16, r24
    156e:	61 96       	adiw	r28, 0x11	; 17
    1570:	6c ad       	ldd	r22, Y+60	; 0x3c
    1572:	7d ad       	ldd	r23, Y+61	; 0x3d
    1574:	8e ad       	ldd	r24, Y+62	; 0x3e
    1576:	9f ad       	ldd	r25, Y+63	; 0x3f
    1578:	61 97       	sbiw	r28, 0x11	; 17
    157a:	a4 01       	movw	r20, r8
    157c:	93 01       	movw	r18, r6
    157e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1582:	ca 01       	movw	r24, r20
    1584:	b9 01       	movw	r22, r18
    1586:	69 96       	adiw	r28, 0x19	; 25
    1588:	2c ad       	ldd	r18, Y+60	; 0x3c
    158a:	3d ad       	ldd	r19, Y+61	; 0x3d
    158c:	4e ad       	ldd	r20, Y+62	; 0x3e
    158e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1590:	69 97       	sbiw	r28, 0x19	; 25
    1592:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	87 01       	movw	r16, r14
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	2d 96       	adiw	r28, 0x0d	; 13
    15a2:	ac ac       	ldd	r10, Y+60	; 0x3c
    15a4:	bd ac       	ldd	r11, Y+61	; 0x3d
    15a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    15a8:	df ac       	ldd	r13, Y+63	; 0x3f
    15aa:	2d 97       	sbiw	r28, 0x0d	; 13
    15ac:	c6 01       	movw	r24, r12
    15ae:	aa 27       	eor	r26, r26
    15b0:	bb 27       	eor	r27, r27
    15b2:	57 01       	movw	r10, r14
    15b4:	68 01       	movw	r12, r16
    15b6:	a8 2a       	or	r10, r24
    15b8:	b9 2a       	or	r11, r25
    15ba:	ca 2a       	or	r12, r26
    15bc:	db 2a       	or	r13, r27
    15be:	a2 16       	cp	r10, r18
    15c0:	b3 06       	cpc	r11, r19
    15c2:	c4 06       	cpc	r12, r20
    15c4:	d5 06       	cpc	r13, r21
    15c6:	90 f4       	brcc	.+36     	; 0x15ec <__moddi3+0x4b2>
    15c8:	a2 0c       	add	r10, r2
    15ca:	b3 1c       	adc	r11, r3
    15cc:	c4 1c       	adc	r12, r4
    15ce:	d5 1c       	adc	r13, r5
    15d0:	a2 14       	cp	r10, r2
    15d2:	b3 04       	cpc	r11, r3
    15d4:	c4 04       	cpc	r12, r4
    15d6:	d5 04       	cpc	r13, r5
    15d8:	48 f0       	brcs	.+18     	; 0x15ec <__moddi3+0x4b2>
    15da:	a2 16       	cp	r10, r18
    15dc:	b3 06       	cpc	r11, r19
    15de:	c4 06       	cpc	r12, r20
    15e0:	d5 06       	cpc	r13, r21
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <__moddi3+0x4b2>
    15e4:	a2 0c       	add	r10, r2
    15e6:	b3 1c       	adc	r11, r3
    15e8:	c4 1c       	adc	r12, r4
    15ea:	d5 1c       	adc	r13, r5
    15ec:	a2 1a       	sub	r10, r18
    15ee:	b3 0a       	sbc	r11, r19
    15f0:	c4 0a       	sbc	r12, r20
    15f2:	d5 0a       	sbc	r13, r21
    15f4:	c6 01       	movw	r24, r12
    15f6:	b5 01       	movw	r22, r10
    15f8:	a4 01       	movw	r20, r8
    15fa:	93 01       	movw	r18, r6
    15fc:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1600:	7b 01       	movw	r14, r22
    1602:	8c 01       	movw	r16, r24
    1604:	c6 01       	movw	r24, r12
    1606:	b5 01       	movw	r22, r10
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1610:	ca 01       	movw	r24, r20
    1612:	b9 01       	movw	r22, r18
    1614:	69 96       	adiw	r28, 0x19	; 25
    1616:	2c ad       	ldd	r18, Y+60	; 0x3c
    1618:	3d ad       	ldd	r19, Y+61	; 0x3d
    161a:	4e ad       	ldd	r20, Y+62	; 0x3e
    161c:	5f ad       	ldd	r21, Y+63	; 0x3f
    161e:	69 97       	sbiw	r28, 0x19	; 25
    1620:	c8 c1       	rjmp	.+912    	; 0x19b2 <__moddi3+0x878>
    1622:	21 14       	cp	r2, r1
    1624:	31 04       	cpc	r3, r1
    1626:	41 04       	cpc	r4, r1
    1628:	51 04       	cpc	r5, r1
    162a:	71 f4       	brne	.+28     	; 0x1648 <__moddi3+0x50e>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1640:	c9 01       	movw	r24, r18
    1642:	da 01       	movw	r26, r20
    1644:	1c 01       	movw	r2, r24
    1646:	2d 01       	movw	r4, r26
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	20 16       	cp	r2, r16
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	30 06       	cpc	r3, r16
    1650:	01 e0       	ldi	r16, 0x01	; 1
    1652:	40 06       	cpc	r4, r16
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	50 06       	cpc	r5, r16
    1658:	88 f4       	brcc	.+34     	; 0x167c <__moddi3+0x542>
    165a:	1f ef       	ldi	r17, 0xFF	; 255
    165c:	21 16       	cp	r2, r17
    165e:	31 04       	cpc	r3, r1
    1660:	41 04       	cpc	r4, r1
    1662:	51 04       	cpc	r5, r1
    1664:	39 f0       	breq	.+14     	; 0x1674 <__moddi3+0x53a>
    1666:	30 f0       	brcs	.+12     	; 0x1674 <__moddi3+0x53a>
    1668:	68 e0       	ldi	r22, 0x08	; 8
    166a:	e6 2e       	mov	r14, r22
    166c:	f1 2c       	mov	r15, r1
    166e:	01 2d       	mov	r16, r1
    1670:	11 2d       	mov	r17, r1
    1672:	18 c0       	rjmp	.+48     	; 0x16a4 <__moddi3+0x56a>
    1674:	ee 24       	eor	r14, r14
    1676:	ff 24       	eor	r15, r15
    1678:	87 01       	movw	r16, r14
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <__moddi3+0x56a>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	22 16       	cp	r2, r18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	32 06       	cpc	r3, r18
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	42 06       	cpc	r4, r18
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	52 06       	cpc	r5, r18
    168c:	30 f0       	brcs	.+12     	; 0x169a <__moddi3+0x560>
    168e:	58 e1       	ldi	r21, 0x18	; 24
    1690:	e5 2e       	mov	r14, r21
    1692:	f1 2c       	mov	r15, r1
    1694:	01 2d       	mov	r16, r1
    1696:	11 2d       	mov	r17, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__moddi3+0x56a>
    169a:	40 e1       	ldi	r20, 0x10	; 16
    169c:	e4 2e       	mov	r14, r20
    169e:	f1 2c       	mov	r15, r1
    16a0:	01 2d       	mov	r16, r1
    16a2:	11 2d       	mov	r17, r1
    16a4:	d2 01       	movw	r26, r4
    16a6:	c1 01       	movw	r24, r2
    16a8:	0e 2c       	mov	r0, r14
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <__moddi3+0x57a>
    16ac:	b6 95       	lsr	r27
    16ae:	a7 95       	ror	r26
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	0a 94       	dec	r0
    16b6:	d2 f7       	brpl	.-12     	; 0x16ac <__moddi3+0x572>
    16b8:	86 58       	subi	r24, 0x86	; 134
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	dc 01       	movw	r26, r24
    16be:	2c 91       	ld	r18, X
    16c0:	30 e2       	ldi	r19, 0x20	; 32
    16c2:	a3 2e       	mov	r10, r19
    16c4:	b1 2c       	mov	r11, r1
    16c6:	c1 2c       	mov	r12, r1
    16c8:	d1 2c       	mov	r13, r1
    16ca:	d6 01       	movw	r26, r12
    16cc:	c5 01       	movw	r24, r10
    16ce:	8e 19       	sub	r24, r14
    16d0:	9f 09       	sbc	r25, r15
    16d2:	a0 0b       	sbc	r26, r16
    16d4:	b1 0b       	sbc	r27, r17
    16d6:	7c 01       	movw	r14, r24
    16d8:	8d 01       	movw	r16, r26
    16da:	e2 1a       	sub	r14, r18
    16dc:	f1 08       	sbc	r15, r1
    16de:	01 09       	sbc	r16, r1
    16e0:	11 09       	sbc	r17, r1
    16e2:	65 96       	adiw	r28, 0x15	; 21
    16e4:	ec ae       	std	Y+60, r14	; 0x3c
    16e6:	fd ae       	std	Y+61, r15	; 0x3d
    16e8:	0e af       	std	Y+62, r16	; 0x3e
    16ea:	1f af       	std	Y+63, r17	; 0x3f
    16ec:	65 97       	sbiw	r28, 0x15	; 21
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__moddi3+0x5cc>
    16f8:	64 01       	movw	r12, r8
    16fa:	53 01       	movw	r10, r6
    16fc:	a2 18       	sub	r10, r2
    16fe:	b3 08       	sbc	r11, r3
    1700:	c4 08       	sbc	r12, r4
    1702:	d5 08       	sbc	r13, r5
    1704:	ec c0       	rjmp	.+472    	; 0x18de <__moddi3+0x7a4>
    1706:	62 96       	adiw	r28, 0x12	; 18
    1708:	ff ac       	ldd	r15, Y+63	; 0x3f
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	e4 96       	adiw	r28, 0x34	; 52
    170e:	ff ae       	std	Y+63, r15	; 0x3f
    1710:	e4 97       	sbiw	r28, 0x34	; 52
    1712:	0f 2c       	mov	r0, r15
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__moddi3+0x5e4>
    1716:	22 0c       	add	r2, r2
    1718:	33 1c       	adc	r3, r3
    171a:	44 1c       	adc	r4, r4
    171c:	55 1c       	adc	r5, r5
    171e:	0a 94       	dec	r0
    1720:	d2 f7       	brpl	.-12     	; 0x1716 <__moddi3+0x5dc>
    1722:	8a 2d       	mov	r24, r10
    1724:	8f 19       	sub	r24, r15
    1726:	64 01       	movw	r12, r8
    1728:	53 01       	movw	r10, r6
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__moddi3+0x5fc>
    172e:	d6 94       	lsr	r13
    1730:	c7 94       	ror	r12
    1732:	b7 94       	ror	r11
    1734:	a7 94       	ror	r10
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__moddi3+0x5f4>
    173a:	a4 01       	movw	r20, r8
    173c:	93 01       	movw	r18, r6
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__moddi3+0x60e>
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	44 1f       	adc	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	fa 94       	dec	r15
    174a:	d2 f7       	brpl	.-12     	; 0x1740 <__moddi3+0x606>
    174c:	e8 96       	adiw	r28, 0x38	; 56
    174e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1750:	7d ac       	ldd	r7, Y+61	; 0x3d
    1752:	8e ac       	ldd	r8, Y+62	; 0x3e
    1754:	9f ac       	ldd	r9, Y+63	; 0x3f
    1756:	e8 97       	sbiw	r28, 0x38	; 56
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__moddi3+0x628>
    175a:	96 94       	lsr	r9
    175c:	87 94       	ror	r8
    175e:	77 94       	ror	r7
    1760:	67 94       	ror	r6
    1762:	8a 95       	dec	r24
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__moddi3+0x620>
    1766:	84 01       	movw	r16, r8
    1768:	73 01       	movw	r14, r6
    176a:	e2 2a       	or	r14, r18
    176c:	f3 2a       	or	r15, r19
    176e:	04 2b       	or	r16, r20
    1770:	15 2b       	or	r17, r21
    1772:	29 96       	adiw	r28, 0x09	; 9
    1774:	ec ae       	std	Y+60, r14	; 0x3c
    1776:	fd ae       	std	Y+61, r15	; 0x3d
    1778:	0e af       	std	Y+62, r16	; 0x3e
    177a:	1f af       	std	Y+63, r17	; 0x3f
    177c:	29 97       	sbiw	r28, 0x09	; 9
    177e:	32 01       	movw	r6, r4
    1780:	88 24       	eor	r8, r8
    1782:	99 24       	eor	r9, r9
    1784:	92 01       	movw	r18, r4
    1786:	81 01       	movw	r16, r2
    1788:	20 70       	andi	r18, 0x00	; 0
    178a:	30 70       	andi	r19, 0x00	; 0
    178c:	6d 96       	adiw	r28, 0x1d	; 29
    178e:	0c af       	std	Y+60, r16	; 0x3c
    1790:	1d af       	std	Y+61, r17	; 0x3d
    1792:	2e af       	std	Y+62, r18	; 0x3e
    1794:	3f af       	std	Y+63, r19	; 0x3f
    1796:	6d 97       	sbiw	r28, 0x1d	; 29
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	a4 01       	movw	r20, r8
    179e:	93 01       	movw	r18, r6
    17a0:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    17a4:	7b 01       	movw	r14, r22
    17a6:	8c 01       	movw	r16, r24
    17a8:	c6 01       	movw	r24, r12
    17aa:	b5 01       	movw	r22, r10
    17ac:	a4 01       	movw	r20, r8
    17ae:	93 01       	movw	r18, r6
    17b0:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    17b4:	ca 01       	movw	r24, r20
    17b6:	b9 01       	movw	r22, r18
    17b8:	6d 96       	adiw	r28, 0x1d	; 29
    17ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    17bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17be:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c2:	6d 97       	sbiw	r28, 0x1d	; 29
    17c4:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	87 01       	movw	r16, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	ee 24       	eor	r14, r14
    17d2:	29 96       	adiw	r28, 0x09	; 9
    17d4:	ac ac       	ldd	r10, Y+60	; 0x3c
    17d6:	bd ac       	ldd	r11, Y+61	; 0x3d
    17d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    17da:	df ac       	ldd	r13, Y+63	; 0x3f
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	c6 01       	movw	r24, r12
    17e0:	aa 27       	eor	r26, r26
    17e2:	bb 27       	eor	r27, r27
    17e4:	5c 01       	movw	r10, r24
    17e6:	6d 01       	movw	r12, r26
    17e8:	ae 28       	or	r10, r14
    17ea:	bf 28       	or	r11, r15
    17ec:	c0 2a       	or	r12, r16
    17ee:	d1 2a       	or	r13, r17
    17f0:	a2 16       	cp	r10, r18
    17f2:	b3 06       	cpc	r11, r19
    17f4:	c4 06       	cpc	r12, r20
    17f6:	d5 06       	cpc	r13, r21
    17f8:	90 f4       	brcc	.+36     	; 0x181e <__moddi3+0x6e4>
    17fa:	a2 0c       	add	r10, r2
    17fc:	b3 1c       	adc	r11, r3
    17fe:	c4 1c       	adc	r12, r4
    1800:	d5 1c       	adc	r13, r5
    1802:	a2 14       	cp	r10, r2
    1804:	b3 04       	cpc	r11, r3
    1806:	c4 04       	cpc	r12, r4
    1808:	d5 04       	cpc	r13, r5
    180a:	48 f0       	brcs	.+18     	; 0x181e <__moddi3+0x6e4>
    180c:	a2 16       	cp	r10, r18
    180e:	b3 06       	cpc	r11, r19
    1810:	c4 06       	cpc	r12, r20
    1812:	d5 06       	cpc	r13, r21
    1814:	20 f4       	brcc	.+8      	; 0x181e <__moddi3+0x6e4>
    1816:	a2 0c       	add	r10, r2
    1818:	b3 1c       	adc	r11, r3
    181a:	c4 1c       	adc	r12, r4
    181c:	d5 1c       	adc	r13, r5
    181e:	a2 1a       	sub	r10, r18
    1820:	b3 0a       	sbc	r11, r19
    1822:	c4 0a       	sbc	r12, r20
    1824:	d5 0a       	sbc	r13, r21
    1826:	c6 01       	movw	r24, r12
    1828:	b5 01       	movw	r22, r10
    182a:	a4 01       	movw	r20, r8
    182c:	93 01       	movw	r18, r6
    182e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1842:	ca 01       	movw	r24, r20
    1844:	b9 01       	movw	r22, r18
    1846:	6d 96       	adiw	r28, 0x1d	; 29
    1848:	2c ad       	ldd	r18, Y+60	; 0x3c
    184a:	3d ad       	ldd	r19, Y+61	; 0x3d
    184c:	4e ad       	ldd	r20, Y+62	; 0x3e
    184e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1850:	6d 97       	sbiw	r28, 0x1d	; 29
    1852:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	87 01       	movw	r16, r14
    185c:	ff 24       	eor	r15, r15
    185e:	ee 24       	eor	r14, r14
    1860:	29 96       	adiw	r28, 0x09	; 9
    1862:	8c ad       	ldd	r24, Y+60	; 0x3c
    1864:	9d ad       	ldd	r25, Y+61	; 0x3d
    1866:	ae ad       	ldd	r26, Y+62	; 0x3e
    1868:	bf ad       	ldd	r27, Y+63	; 0x3f
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	a0 70       	andi	r26, 0x00	; 0
    186e:	b0 70       	andi	r27, 0x00	; 0
    1870:	57 01       	movw	r10, r14
    1872:	68 01       	movw	r12, r16
    1874:	a8 2a       	or	r10, r24
    1876:	b9 2a       	or	r11, r25
    1878:	ca 2a       	or	r12, r26
    187a:	db 2a       	or	r13, r27
    187c:	a2 16       	cp	r10, r18
    187e:	b3 06       	cpc	r11, r19
    1880:	c4 06       	cpc	r12, r20
    1882:	d5 06       	cpc	r13, r21
    1884:	90 f4       	brcc	.+36     	; 0x18aa <__moddi3+0x770>
    1886:	a2 0c       	add	r10, r2
    1888:	b3 1c       	adc	r11, r3
    188a:	c4 1c       	adc	r12, r4
    188c:	d5 1c       	adc	r13, r5
    188e:	a2 14       	cp	r10, r2
    1890:	b3 04       	cpc	r11, r3
    1892:	c4 04       	cpc	r12, r4
    1894:	d5 04       	cpc	r13, r5
    1896:	48 f0       	brcs	.+18     	; 0x18aa <__moddi3+0x770>
    1898:	a2 16       	cp	r10, r18
    189a:	b3 06       	cpc	r11, r19
    189c:	c4 06       	cpc	r12, r20
    189e:	d5 06       	cpc	r13, r21
    18a0:	20 f4       	brcc	.+8      	; 0x18aa <__moddi3+0x770>
    18a2:	a2 0c       	add	r10, r2
    18a4:	b3 1c       	adc	r11, r3
    18a6:	c4 1c       	adc	r12, r4
    18a8:	d5 1c       	adc	r13, r5
    18aa:	e8 96       	adiw	r28, 0x38	; 56
    18ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    18ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    18b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    18b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    18b4:	e8 97       	sbiw	r28, 0x38	; 56
    18b6:	e4 96       	adiw	r28, 0x34	; 52
    18b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ba:	e4 97       	sbiw	r28, 0x34	; 52
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__moddi3+0x78c>
    18be:	ee 0c       	add	r14, r14
    18c0:	ff 1c       	adc	r15, r15
    18c2:	00 1f       	adc	r16, r16
    18c4:	11 1f       	adc	r17, r17
    18c6:	0a 94       	dec	r0
    18c8:	d2 f7       	brpl	.-12     	; 0x18be <__moddi3+0x784>
    18ca:	2d 96       	adiw	r28, 0x0d	; 13
    18cc:	ec ae       	std	Y+60, r14	; 0x3c
    18ce:	fd ae       	std	Y+61, r15	; 0x3d
    18d0:	0e af       	std	Y+62, r16	; 0x3e
    18d2:	1f af       	std	Y+63, r17	; 0x3f
    18d4:	2d 97       	sbiw	r28, 0x0d	; 13
    18d6:	a2 1a       	sub	r10, r18
    18d8:	b3 0a       	sbc	r11, r19
    18da:	c4 0a       	sbc	r12, r20
    18dc:	d5 0a       	sbc	r13, r21
    18de:	32 01       	movw	r6, r4
    18e0:	88 24       	eor	r8, r8
    18e2:	99 24       	eor	r9, r9
    18e4:	92 01       	movw	r18, r4
    18e6:	81 01       	movw	r16, r2
    18e8:	20 70       	andi	r18, 0x00	; 0
    18ea:	30 70       	andi	r19, 0x00	; 0
    18ec:	a1 96       	adiw	r28, 0x21	; 33
    18ee:	0c af       	std	Y+60, r16	; 0x3c
    18f0:	1d af       	std	Y+61, r17	; 0x3d
    18f2:	2e af       	std	Y+62, r18	; 0x3e
    18f4:	3f af       	std	Y+63, r19	; 0x3f
    18f6:	a1 97       	sbiw	r28, 0x21	; 33
    18f8:	c6 01       	movw	r24, r12
    18fa:	b5 01       	movw	r22, r10
    18fc:	a4 01       	movw	r20, r8
    18fe:	93 01       	movw	r18, r6
    1900:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1904:	7b 01       	movw	r14, r22
    1906:	8c 01       	movw	r16, r24
    1908:	c6 01       	movw	r24, r12
    190a:	b5 01       	movw	r22, r10
    190c:	a4 01       	movw	r20, r8
    190e:	93 01       	movw	r18, r6
    1910:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1914:	ca 01       	movw	r24, r20
    1916:	b9 01       	movw	r22, r18
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	2c ad       	ldd	r18, Y+60	; 0x3c
    191c:	3d ad       	ldd	r19, Y+61	; 0x3d
    191e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1920:	5f ad       	ldd	r21, Y+63	; 0x3f
    1922:	a1 97       	sbiw	r28, 0x21	; 33
    1924:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	87 01       	movw	r16, r14
    192e:	ff 24       	eor	r15, r15
    1930:	ee 24       	eor	r14, r14
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	ac ac       	ldd	r10, Y+60	; 0x3c
    1936:	bd ac       	ldd	r11, Y+61	; 0x3d
    1938:	ce ac       	ldd	r12, Y+62	; 0x3e
    193a:	df ac       	ldd	r13, Y+63	; 0x3f
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	c6 01       	movw	r24, r12
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	57 01       	movw	r10, r14
    1946:	68 01       	movw	r12, r16
    1948:	a8 2a       	or	r10, r24
    194a:	b9 2a       	or	r11, r25
    194c:	ca 2a       	or	r12, r26
    194e:	db 2a       	or	r13, r27
    1950:	a2 16       	cp	r10, r18
    1952:	b3 06       	cpc	r11, r19
    1954:	c4 06       	cpc	r12, r20
    1956:	d5 06       	cpc	r13, r21
    1958:	90 f4       	brcc	.+36     	; 0x197e <__moddi3+0x844>
    195a:	a2 0c       	add	r10, r2
    195c:	b3 1c       	adc	r11, r3
    195e:	c4 1c       	adc	r12, r4
    1960:	d5 1c       	adc	r13, r5
    1962:	a2 14       	cp	r10, r2
    1964:	b3 04       	cpc	r11, r3
    1966:	c4 04       	cpc	r12, r4
    1968:	d5 04       	cpc	r13, r5
    196a:	48 f0       	brcs	.+18     	; 0x197e <__moddi3+0x844>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	20 f4       	brcc	.+8      	; 0x197e <__moddi3+0x844>
    1976:	a2 0c       	add	r10, r2
    1978:	b3 1c       	adc	r11, r3
    197a:	c4 1c       	adc	r12, r4
    197c:	d5 1c       	adc	r13, r5
    197e:	a2 1a       	sub	r10, r18
    1980:	b3 0a       	sbc	r11, r19
    1982:	c4 0a       	sbc	r12, r20
    1984:	d5 0a       	sbc	r13, r21
    1986:	c6 01       	movw	r24, r12
    1988:	b5 01       	movw	r22, r10
    198a:	a4 01       	movw	r20, r8
    198c:	93 01       	movw	r18, r6
    198e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1992:	7b 01       	movw	r14, r22
    1994:	8c 01       	movw	r16, r24
    1996:	c6 01       	movw	r24, r12
    1998:	b5 01       	movw	r22, r10
    199a:	a4 01       	movw	r20, r8
    199c:	93 01       	movw	r18, r6
    199e:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    19a2:	ca 01       	movw	r24, r20
    19a4:	b9 01       	movw	r22, r18
    19a6:	a1 96       	adiw	r28, 0x21	; 33
    19a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b0:	a1 97       	sbiw	r28, 0x21	; 33
    19b2:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	87 01       	movw	r16, r14
    19bc:	ff 24       	eor	r15, r15
    19be:	ee 24       	eor	r14, r14
    19c0:	2d 96       	adiw	r28, 0x0d	; 13
    19c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    19c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    19ca:	2d 97       	sbiw	r28, 0x0d	; 13
    19cc:	a0 70       	andi	r26, 0x00	; 0
    19ce:	b0 70       	andi	r27, 0x00	; 0
    19d0:	e8 2a       	or	r14, r24
    19d2:	f9 2a       	or	r15, r25
    19d4:	0a 2b       	or	r16, r26
    19d6:	1b 2b       	or	r17, r27
    19d8:	e2 16       	cp	r14, r18
    19da:	f3 06       	cpc	r15, r19
    19dc:	04 07       	cpc	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	90 f4       	brcc	.+36     	; 0x1a06 <__moddi3+0x8cc>
    19e2:	e2 0c       	add	r14, r2
    19e4:	f3 1c       	adc	r15, r3
    19e6:	04 1d       	adc	r16, r4
    19e8:	15 1d       	adc	r17, r5
    19ea:	e2 14       	cp	r14, r2
    19ec:	f3 04       	cpc	r15, r3
    19ee:	04 05       	cpc	r16, r4
    19f0:	15 05       	cpc	r17, r5
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <__moddi3+0x8cc>
    19f4:	e2 16       	cp	r14, r18
    19f6:	f3 06       	cpc	r15, r19
    19f8:	04 07       	cpc	r16, r20
    19fa:	15 07       	cpc	r17, r21
    19fc:	20 f4       	brcc	.+8      	; 0x1a06 <__moddi3+0x8cc>
    19fe:	e2 0c       	add	r14, r2
    1a00:	f3 1c       	adc	r15, r3
    1a02:	04 1d       	adc	r16, r4
    1a04:	15 1d       	adc	r17, r5
    1a06:	e2 1a       	sub	r14, r18
    1a08:	f3 0a       	sbc	r15, r19
    1a0a:	04 0b       	sbc	r16, r20
    1a0c:	15 0b       	sbc	r17, r21
    1a0e:	d8 01       	movw	r26, r16
    1a10:	c7 01       	movw	r24, r14
    1a12:	62 96       	adiw	r28, 0x12	; 18
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	62 97       	sbiw	r28, 0x12	; 18
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__moddi3+0x8e8>
    1a1a:	b6 95       	lsr	r27
    1a1c:	a7 95       	ror	r26
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__moddi3+0x8e0>
    1a26:	89 a7       	std	Y+41, r24	; 0x29
    1a28:	9a a7       	std	Y+42, r25	; 0x2a
    1a2a:	ab a7       	std	Y+43, r26	; 0x2b
    1a2c:	bc a7       	std	Y+44, r27	; 0x2c
    1a2e:	1d a6       	std	Y+45, r1	; 0x2d
    1a30:	1e a6       	std	Y+46, r1	; 0x2e
    1a32:	1f a6       	std	Y+47, r1	; 0x2f
    1a34:	18 aa       	std	Y+48, r1	; 0x30
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3a:	8a 8b       	std	Y+18, r24	; 0x12
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a42:	8c 8b       	std	Y+20, r24	; 0x14
    1a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	2f c3       	rjmp	.+1630   	; 0x20a8 <__moddi3+0xf6e>
    1a4a:	6a 14       	cp	r6, r10
    1a4c:	7b 04       	cpc	r7, r11
    1a4e:	8c 04       	cpc	r8, r12
    1a50:	9d 04       	cpc	r9, r13
    1a52:	48 f4       	brcc	.+18     	; 0x1a66 <__moddi3+0x92c>
    1a54:	49 8b       	std	Y+17, r20	; 0x11
    1a56:	5a 8b       	std	Y+18, r21	; 0x12
    1a58:	6b 8b       	std	Y+19, r22	; 0x13
    1a5a:	7c 8b       	std	Y+20, r23	; 0x14
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	2f 8b       	std	Y+23, r18	; 0x17
    1a62:	38 8f       	std	Y+24, r19	; 0x18
    1a64:	27 c3       	rjmp	.+1614   	; 0x20b4 <__moddi3+0xf7a>
    1a66:	00 e0       	ldi	r16, 0x00	; 0
    1a68:	a0 16       	cp	r10, r16
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	b0 06       	cpc	r11, r16
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	c0 06       	cpc	r12, r16
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	d0 06       	cpc	r13, r16
    1a76:	88 f4       	brcc	.+34     	; 0x1a9a <__moddi3+0x960>
    1a78:	1f ef       	ldi	r17, 0xFF	; 255
    1a7a:	a1 16       	cp	r10, r17
    1a7c:	b1 04       	cpc	r11, r1
    1a7e:	c1 04       	cpc	r12, r1
    1a80:	d1 04       	cpc	r13, r1
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__moddi3+0x958>
    1a84:	30 f0       	brcs	.+12     	; 0x1a92 <__moddi3+0x958>
    1a86:	28 e0       	ldi	r18, 0x08	; 8
    1a88:	e2 2e       	mov	r14, r18
    1a8a:	f1 2c       	mov	r15, r1
    1a8c:	01 2d       	mov	r16, r1
    1a8e:	11 2d       	mov	r17, r1
    1a90:	18 c0       	rjmp	.+48     	; 0x1ac2 <__moddi3+0x988>
    1a92:	ee 24       	eor	r14, r14
    1a94:	ff 24       	eor	r15, r15
    1a96:	87 01       	movw	r16, r14
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <__moddi3+0x988>
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	a2 16       	cp	r10, r18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	b2 06       	cpc	r11, r18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	c2 06       	cpc	r12, r18
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	d2 06       	cpc	r13, r18
    1aaa:	30 f0       	brcs	.+12     	; 0x1ab8 <__moddi3+0x97e>
    1aac:	98 e1       	ldi	r25, 0x18	; 24
    1aae:	e9 2e       	mov	r14, r25
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	01 2d       	mov	r16, r1
    1ab4:	11 2d       	mov	r17, r1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <__moddi3+0x988>
    1ab8:	80 e1       	ldi	r24, 0x10	; 16
    1aba:	e8 2e       	mov	r14, r24
    1abc:	f1 2c       	mov	r15, r1
    1abe:	01 2d       	mov	r16, r1
    1ac0:	11 2d       	mov	r17, r1
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 2c       	mov	r0, r14
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__moddi3+0x998>
    1aca:	b6 95       	lsr	r27
    1acc:	a7 95       	ror	r26
    1ace:	97 95       	ror	r25
    1ad0:	87 95       	ror	r24
    1ad2:	0a 94       	dec	r0
    1ad4:	d2 f7       	brpl	.-12     	; 0x1aca <__moddi3+0x990>
    1ad6:	86 58       	subi	r24, 0x86	; 134
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	dc 01       	movw	r26, r24
    1adc:	2c 91       	ld	r18, X
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	8e 19       	sub	r24, r14
    1ae8:	9f 09       	sbc	r25, r15
    1aea:	a0 0b       	sbc	r26, r16
    1aec:	b1 0b       	sbc	r27, r17
    1aee:	82 1b       	sub	r24, r18
    1af0:	91 09       	sbc	r25, r1
    1af2:	a1 09       	sbc	r26, r1
    1af4:	b1 09       	sbc	r27, r1
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__moddi3+0x9c6>
    1afe:	59 c0       	rjmp	.+178    	; 0x1bb2 <__moddi3+0xa78>
    1b00:	a6 14       	cp	r10, r6
    1b02:	b7 04       	cpc	r11, r7
    1b04:	c8 04       	cpc	r12, r8
    1b06:	d9 04       	cpc	r13, r9
    1b08:	70 f0       	brcs	.+28     	; 0x1b26 <__moddi3+0x9ec>
    1b0a:	e8 96       	adiw	r28, 0x38	; 56
    1b0c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b0e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b10:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b12:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b14:	e8 97       	sbiw	r28, 0x38	; 56
    1b16:	e2 14       	cp	r14, r2
    1b18:	f3 04       	cpc	r15, r3
    1b1a:	04 05       	cpc	r16, r4
    1b1c:	15 05       	cpc	r17, r5
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <__moddi3+0x9ec>
    1b20:	d8 01       	movw	r26, r16
    1b22:	c7 01       	movw	r24, r14
    1b24:	2f c0       	rjmp	.+94     	; 0x1b84 <__moddi3+0xa4a>
    1b26:	e8 96       	adiw	r28, 0x38	; 56
    1b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b30:	e8 97       	sbiw	r28, 0x38	; 56
    1b32:	82 19       	sub	r24, r2
    1b34:	93 09       	sbc	r25, r3
    1b36:	a4 09       	sbc	r26, r4
    1b38:	b5 09       	sbc	r27, r5
    1b3a:	a4 01       	movw	r20, r8
    1b3c:	93 01       	movw	r18, r6
    1b3e:	2a 19       	sub	r18, r10
    1b40:	3b 09       	sbc	r19, r11
    1b42:	4c 09       	sbc	r20, r12
    1b44:	5d 09       	sbc	r21, r13
    1b46:	aa 24       	eor	r10, r10
    1b48:	bb 24       	eor	r11, r11
    1b4a:	65 01       	movw	r12, r10
    1b4c:	e8 96       	adiw	r28, 0x38	; 56
    1b4e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b50:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b52:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b54:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b56:	e8 97       	sbiw	r28, 0x38	; 56
    1b58:	68 16       	cp	r6, r24
    1b5a:	79 06       	cpc	r7, r25
    1b5c:	8a 06       	cpc	r8, r26
    1b5e:	9b 06       	cpc	r9, r27
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <__moddi3+0xa32>
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	a1 2e       	mov	r10, r17
    1b66:	b1 2c       	mov	r11, r1
    1b68:	c1 2c       	mov	r12, r1
    1b6a:	d1 2c       	mov	r13, r1
    1b6c:	79 01       	movw	r14, r18
    1b6e:	8a 01       	movw	r16, r20
    1b70:	ea 18       	sub	r14, r10
    1b72:	fb 08       	sbc	r15, r11
    1b74:	0c 09       	sbc	r16, r12
    1b76:	1d 09       	sbc	r17, r13
    1b78:	61 96       	adiw	r28, 0x11	; 17
    1b7a:	ec ae       	std	Y+60, r14	; 0x3c
    1b7c:	fd ae       	std	Y+61, r15	; 0x3d
    1b7e:	0e af       	std	Y+62, r16	; 0x3e
    1b80:	1f af       	std	Y+63, r17	; 0x3f
    1b82:	61 97       	sbiw	r28, 0x11	; 17
    1b84:	89 a7       	std	Y+41, r24	; 0x29
    1b86:	9a a7       	std	Y+42, r25	; 0x2a
    1b88:	ab a7       	std	Y+43, r26	; 0x2b
    1b8a:	bc a7       	std	Y+44, r27	; 0x2c
    1b8c:	61 96       	adiw	r28, 0x11	; 17
    1b8e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1b90:	1d ad       	ldd	r17, Y+61	; 0x3d
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	61 97       	sbiw	r28, 0x11	; 17
    1b98:	0d a7       	std	Y+45, r16	; 0x2d
    1b9a:	1e a7       	std	Y+46, r17	; 0x2e
    1b9c:	2f a7       	std	Y+47, r18	; 0x2f
    1b9e:	38 ab       	std	Y+48, r19	; 0x30
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
    1ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba4:	8a 8b       	std	Y+18, r24	; 0x12
    1ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	0d 8b       	std	Y+21, r16	; 0x15
    1bb0:	7b c2       	rjmp	.+1270   	; 0x20a8 <__moddi3+0xf6e>
    1bb2:	e3 96       	adiw	r28, 0x33	; 51
    1bb4:	8f af       	std	Y+63, r24	; 0x3f
    1bb6:	e3 97       	sbiw	r28, 0x33	; 51
    1bb8:	a6 01       	movw	r20, r12
    1bba:	95 01       	movw	r18, r10
    1bbc:	08 2e       	mov	r0, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <__moddi3+0xa8e>
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	0a 94       	dec	r0
    1bca:	d2 f7       	brpl	.-12     	; 0x1bc0 <__moddi3+0xa86>
    1bcc:	10 e2       	ldi	r17, 0x20	; 32
    1bce:	18 1b       	sub	r17, r24
    1bd0:	e2 96       	adiw	r28, 0x32	; 50
    1bd2:	1f af       	std	Y+63, r17	; 0x3f
    1bd4:	e2 97       	sbiw	r28, 0x32	; 50
    1bd6:	d2 01       	movw	r26, r4
    1bd8:	c1 01       	movw	r24, r2
    1bda:	01 2e       	mov	r0, r17
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__moddi3+0xaac>
    1bde:	b6 95       	lsr	r27
    1be0:	a7 95       	ror	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <__moddi3+0xaa4>
    1bea:	5c 01       	movw	r10, r24
    1bec:	6d 01       	movw	r12, r26
    1bee:	a2 2a       	or	r10, r18
    1bf0:	b3 2a       	or	r11, r19
    1bf2:	c4 2a       	or	r12, r20
    1bf4:	d5 2a       	or	r13, r21
    1bf6:	25 96       	adiw	r28, 0x05	; 5
    1bf8:	ac ae       	std	Y+60, r10	; 0x3c
    1bfa:	bd ae       	std	Y+61, r11	; 0x3d
    1bfc:	ce ae       	std	Y+62, r12	; 0x3e
    1bfe:	df ae       	std	Y+63, r13	; 0x3f
    1c00:	25 97       	sbiw	r28, 0x05	; 5
    1c02:	72 01       	movw	r14, r4
    1c04:	61 01       	movw	r12, r2
    1c06:	e3 96       	adiw	r28, 0x33	; 51
    1c08:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c0a:	e3 97       	sbiw	r28, 0x33	; 51
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__moddi3+0xadc>
    1c0e:	cc 0c       	add	r12, r12
    1c10:	dd 1c       	adc	r13, r13
    1c12:	ee 1c       	adc	r14, r14
    1c14:	ff 1c       	adc	r15, r15
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <__moddi3+0xad4>
    1c1a:	21 96       	adiw	r28, 0x01	; 1
    1c1c:	cc ae       	std	Y+60, r12	; 0x3c
    1c1e:	dd ae       	std	Y+61, r13	; 0x3d
    1c20:	ee ae       	std	Y+62, r14	; 0x3e
    1c22:	ff ae       	std	Y+63, r15	; 0x3f
    1c24:	21 97       	sbiw	r28, 0x01	; 1
    1c26:	64 01       	movw	r12, r8
    1c28:	53 01       	movw	r10, r6
    1c2a:	01 2e       	mov	r0, r17
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0xafc>
    1c2e:	d6 94       	lsr	r13
    1c30:	c7 94       	ror	r12
    1c32:	b7 94       	ror	r11
    1c34:	a7 94       	ror	r10
    1c36:	0a 94       	dec	r0
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0xaf4>
    1c3a:	a4 01       	movw	r20, r8
    1c3c:	93 01       	movw	r18, r6
    1c3e:	e3 96       	adiw	r28, 0x33	; 51
    1c40:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c42:	e3 97       	sbiw	r28, 0x33	; 51
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__moddi3+0xb14>
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	44 1f       	adc	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	0a 94       	dec	r0
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <__moddi3+0xb0c>
    1c52:	e8 96       	adiw	r28, 0x38	; 56
    1c54:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c56:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c5c:	e8 97       	sbiw	r28, 0x38	; 56
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <__moddi3+0xb2e>
    1c60:	b6 95       	lsr	r27
    1c62:	a7 95       	ror	r26
    1c64:	97 95       	ror	r25
    1c66:	87 95       	ror	r24
    1c68:	1a 95       	dec	r17
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <__moddi3+0xb26>
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	8d 01       	movw	r16, r26
    1c70:	e2 2a       	or	r14, r18
    1c72:	f3 2a       	or	r15, r19
    1c74:	04 2b       	or	r16, r20
    1c76:	15 2b       	or	r17, r21
    1c78:	e9 ae       	std	Y+57, r14	; 0x39
    1c7a:	fa ae       	std	Y+58, r15	; 0x3a
    1c7c:	0b af       	std	Y+59, r16	; 0x3b
    1c7e:	1c af       	std	Y+60, r17	; 0x3c
    1c80:	e8 96       	adiw	r28, 0x38	; 56
    1c82:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c84:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c86:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c88:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c8a:	e8 97       	sbiw	r28, 0x38	; 56
    1c8c:	e3 96       	adiw	r28, 0x33	; 51
    1c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c90:	e3 97       	sbiw	r28, 0x33	; 51
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <__moddi3+0xb62>
    1c94:	00 0f       	add	r16, r16
    1c96:	11 1f       	adc	r17, r17
    1c98:	22 1f       	adc	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	0a 94       	dec	r0
    1c9e:	d2 f7       	brpl	.-12     	; 0x1c94 <__moddi3+0xb5a>
    1ca0:	0d ab       	std	Y+53, r16	; 0x35
    1ca2:	1e ab       	std	Y+54, r17	; 0x36
    1ca4:	2f ab       	std	Y+55, r18	; 0x37
    1ca6:	38 af       	std	Y+56, r19	; 0x38
    1ca8:	25 96       	adiw	r28, 0x05	; 5
    1caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb2:	25 97       	sbiw	r28, 0x05	; 5
    1cb4:	3a 01       	movw	r6, r20
    1cb6:	88 24       	eor	r8, r8
    1cb8:	99 24       	eor	r9, r9
    1cba:	40 70       	andi	r20, 0x00	; 0
    1cbc:	50 70       	andi	r21, 0x00	; 0
    1cbe:	a5 96       	adiw	r28, 0x25	; 37
    1cc0:	2c af       	std	Y+60, r18	; 0x3c
    1cc2:	3d af       	std	Y+61, r19	; 0x3d
    1cc4:	4e af       	std	Y+62, r20	; 0x3e
    1cc6:	5f af       	std	Y+63, r21	; 0x3f
    1cc8:	a5 97       	sbiw	r28, 0x25	; 37
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	a4 01       	movw	r20, r8
    1cd0:	93 01       	movw	r18, r6
    1cd2:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8c 01       	movw	r16, r24
    1cda:	c6 01       	movw	r24, r12
    1cdc:	b5 01       	movw	r22, r10
    1cde:	a4 01       	movw	r20, r8
    1ce0:	93 01       	movw	r18, r6
    1ce2:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	da 01       	movw	r26, r20
    1cea:	1c 01       	movw	r2, r24
    1cec:	2d 01       	movw	r4, r26
    1cee:	c2 01       	movw	r24, r4
    1cf0:	b1 01       	movw	r22, r2
    1cf2:	a5 96       	adiw	r28, 0x25	; 37
    1cf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cfc:	a5 97       	sbiw	r28, 0x25	; 37
    1cfe:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	87 01       	movw	r16, r14
    1d08:	ff 24       	eor	r15, r15
    1d0a:	ee 24       	eor	r14, r14
    1d0c:	a9 ac       	ldd	r10, Y+57	; 0x39
    1d0e:	ba ac       	ldd	r11, Y+58	; 0x3a
    1d10:	cb ac       	ldd	r12, Y+59	; 0x3b
    1d12:	dc ac       	ldd	r13, Y+60	; 0x3c
    1d14:	c6 01       	movw	r24, r12
    1d16:	aa 27       	eor	r26, r26
    1d18:	bb 27       	eor	r27, r27
    1d1a:	57 01       	movw	r10, r14
    1d1c:	68 01       	movw	r12, r16
    1d1e:	a8 2a       	or	r10, r24
    1d20:	b9 2a       	or	r11, r25
    1d22:	ca 2a       	or	r12, r26
    1d24:	db 2a       	or	r13, r27
    1d26:	a2 16       	cp	r10, r18
    1d28:	b3 06       	cpc	r11, r19
    1d2a:	c4 06       	cpc	r12, r20
    1d2c:	d5 06       	cpc	r13, r21
    1d2e:	10 f5       	brcc	.+68     	; 0x1d74 <__moddi3+0xc3a>
    1d30:	08 94       	sec
    1d32:	21 08       	sbc	r2, r1
    1d34:	31 08       	sbc	r3, r1
    1d36:	41 08       	sbc	r4, r1
    1d38:	51 08       	sbc	r5, r1
    1d3a:	25 96       	adiw	r28, 0x05	; 5
    1d3c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d3e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d40:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d42:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d44:	25 97       	sbiw	r28, 0x05	; 5
    1d46:	ae 0c       	add	r10, r14
    1d48:	bf 1c       	adc	r11, r15
    1d4a:	c0 1e       	adc	r12, r16
    1d4c:	d1 1e       	adc	r13, r17
    1d4e:	ae 14       	cp	r10, r14
    1d50:	bf 04       	cpc	r11, r15
    1d52:	c0 06       	cpc	r12, r16
    1d54:	d1 06       	cpc	r13, r17
    1d56:	70 f0       	brcs	.+28     	; 0x1d74 <__moddi3+0xc3a>
    1d58:	a2 16       	cp	r10, r18
    1d5a:	b3 06       	cpc	r11, r19
    1d5c:	c4 06       	cpc	r12, r20
    1d5e:	d5 06       	cpc	r13, r21
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__moddi3+0xc3a>
    1d62:	08 94       	sec
    1d64:	21 08       	sbc	r2, r1
    1d66:	31 08       	sbc	r3, r1
    1d68:	41 08       	sbc	r4, r1
    1d6a:	51 08       	sbc	r5, r1
    1d6c:	ae 0c       	add	r10, r14
    1d6e:	bf 1c       	adc	r11, r15
    1d70:	c0 1e       	adc	r12, r16
    1d72:	d1 1e       	adc	r13, r17
    1d74:	a2 1a       	sub	r10, r18
    1d76:	b3 0a       	sbc	r11, r19
    1d78:	c4 0a       	sbc	r12, r20
    1d7a:	d5 0a       	sbc	r13, r21
    1d7c:	c6 01       	movw	r24, r12
    1d7e:	b5 01       	movw	r22, r10
    1d80:	a4 01       	movw	r20, r8
    1d82:	93 01       	movw	r18, r6
    1d84:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	c6 01       	movw	r24, r12
    1d8e:	b5 01       	movw	r22, r10
    1d90:	a4 01       	movw	r20, r8
    1d92:	93 01       	movw	r18, r6
    1d94:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    1d98:	c9 01       	movw	r24, r18
    1d9a:	da 01       	movw	r26, r20
    1d9c:	3c 01       	movw	r6, r24
    1d9e:	4d 01       	movw	r8, r26
    1da0:	c4 01       	movw	r24, r8
    1da2:	b3 01       	movw	r22, r6
    1da4:	a5 96       	adiw	r28, 0x25	; 37
    1da6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1da8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1daa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dae:	a5 97       	sbiw	r28, 0x25	; 37
    1db0:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	87 01       	movw	r16, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	ee 24       	eor	r14, r14
    1dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dc2:	ab ad       	ldd	r26, Y+59	; 0x3b
    1dc4:	bc ad       	ldd	r27, Y+60	; 0x3c
    1dc6:	a0 70       	andi	r26, 0x00	; 0
    1dc8:	b0 70       	andi	r27, 0x00	; 0
    1dca:	57 01       	movw	r10, r14
    1dcc:	68 01       	movw	r12, r16
    1dce:	a8 2a       	or	r10, r24
    1dd0:	b9 2a       	or	r11, r25
    1dd2:	ca 2a       	or	r12, r26
    1dd4:	db 2a       	or	r13, r27
    1dd6:	a2 16       	cp	r10, r18
    1dd8:	b3 06       	cpc	r11, r19
    1dda:	c4 06       	cpc	r12, r20
    1ddc:	d5 06       	cpc	r13, r21
    1dde:	10 f5       	brcc	.+68     	; 0x1e24 <__moddi3+0xcea>
    1de0:	08 94       	sec
    1de2:	61 08       	sbc	r6, r1
    1de4:	71 08       	sbc	r7, r1
    1de6:	81 08       	sbc	r8, r1
    1de8:	91 08       	sbc	r9, r1
    1dea:	25 96       	adiw	r28, 0x05	; 5
    1dec:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dee:	7d ad       	ldd	r23, Y+61	; 0x3d
    1df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df4:	25 97       	sbiw	r28, 0x05	; 5
    1df6:	a6 0e       	add	r10, r22
    1df8:	b7 1e       	adc	r11, r23
    1dfa:	c8 1e       	adc	r12, r24
    1dfc:	d9 1e       	adc	r13, r25
    1dfe:	a6 16       	cp	r10, r22
    1e00:	b7 06       	cpc	r11, r23
    1e02:	c8 06       	cpc	r12, r24
    1e04:	d9 06       	cpc	r13, r25
    1e06:	70 f0       	brcs	.+28     	; 0x1e24 <__moddi3+0xcea>
    1e08:	a2 16       	cp	r10, r18
    1e0a:	b3 06       	cpc	r11, r19
    1e0c:	c4 06       	cpc	r12, r20
    1e0e:	d5 06       	cpc	r13, r21
    1e10:	48 f4       	brcc	.+18     	; 0x1e24 <__moddi3+0xcea>
    1e12:	08 94       	sec
    1e14:	61 08       	sbc	r6, r1
    1e16:	71 08       	sbc	r7, r1
    1e18:	81 08       	sbc	r8, r1
    1e1a:	91 08       	sbc	r9, r1
    1e1c:	a6 0e       	add	r10, r22
    1e1e:	b7 1e       	adc	r11, r23
    1e20:	c8 1e       	adc	r12, r24
    1e22:	d9 1e       	adc	r13, r25
    1e24:	d6 01       	movw	r26, r12
    1e26:	c5 01       	movw	r24, r10
    1e28:	82 1b       	sub	r24, r18
    1e2a:	93 0b       	sbc	r25, r19
    1e2c:	a4 0b       	sbc	r26, r20
    1e2e:	b5 0b       	sbc	r27, r21
    1e30:	89 ab       	std	Y+49, r24	; 0x31
    1e32:	9a ab       	std	Y+50, r25	; 0x32
    1e34:	ab ab       	std	Y+51, r26	; 0x33
    1e36:	bc ab       	std	Y+52, r27	; 0x34
    1e38:	d1 01       	movw	r26, r2
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	84 01       	movw	r16, r8
    1e40:	73 01       	movw	r14, r6
    1e42:	e8 2a       	or	r14, r24
    1e44:	f9 2a       	or	r15, r25
    1e46:	0a 2b       	or	r16, r26
    1e48:	1b 2b       	or	r17, r27
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	a8 2e       	mov	r10, r24
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	b8 2e       	mov	r11, r24
    1e52:	c1 2c       	mov	r12, r1
    1e54:	d1 2c       	mov	r13, r1
    1e56:	ae 20       	and	r10, r14
    1e58:	bf 20       	and	r11, r15
    1e5a:	c0 22       	and	r12, r16
    1e5c:	d1 22       	and	r13, r17
    1e5e:	78 01       	movw	r14, r16
    1e60:	00 27       	eor	r16, r16
    1e62:	11 27       	eor	r17, r17
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	6c ac       	ldd	r6, Y+60	; 0x3c
    1e68:	7d ac       	ldd	r7, Y+61	; 0x3d
    1e6a:	8e ac       	ldd	r8, Y+62	; 0x3e
    1e6c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1e6e:	21 97       	sbiw	r28, 0x01	; 1
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	62 22       	and	r6, r18
    1e7a:	73 22       	and	r7, r19
    1e7c:	84 22       	and	r8, r20
    1e7e:	95 22       	and	r9, r21
    1e80:	21 96       	adiw	r28, 0x01	; 1
    1e82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e8a:	21 97       	sbiw	r28, 0x01	; 1
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	66 27       	eor	r22, r22
    1e90:	77 27       	eor	r23, r23
    1e92:	ad 96       	adiw	r28, 0x2d	; 45
    1e94:	4c af       	std	Y+60, r20	; 0x3c
    1e96:	5d af       	std	Y+61, r21	; 0x3d
    1e98:	6e af       	std	Y+62, r22	; 0x3e
    1e9a:	7f af       	std	Y+63, r23	; 0x3f
    1e9c:	ad 97       	sbiw	r28, 0x2d	; 45
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	b5 01       	movw	r22, r10
    1ea2:	a4 01       	movw	r20, r8
    1ea4:	93 01       	movw	r18, r6
    1ea6:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1eaa:	a9 96       	adiw	r28, 0x29	; 41
    1eac:	6c af       	std	Y+60, r22	; 0x3c
    1eae:	7d af       	std	Y+61, r23	; 0x3d
    1eb0:	8e af       	std	Y+62, r24	; 0x3e
    1eb2:	9f af       	std	Y+63, r25	; 0x3f
    1eb4:	a9 97       	sbiw	r28, 0x29	; 41
    1eb6:	c6 01       	movw	r24, r12
    1eb8:	b5 01       	movw	r22, r10
    1eba:	ad 96       	adiw	r28, 0x2d	; 45
    1ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ec0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ec4:	ad 97       	sbiw	r28, 0x2d	; 45
    1ec6:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1eca:	1b 01       	movw	r2, r22
    1ecc:	2c 01       	movw	r4, r24
    1ece:	c8 01       	movw	r24, r16
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	a4 01       	movw	r20, r8
    1ed4:	93 01       	movw	r18, r6
    1ed6:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1eda:	5b 01       	movw	r10, r22
    1edc:	6c 01       	movw	r12, r24
    1ede:	c8 01       	movw	r24, r16
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	ad 96       	adiw	r28, 0x2d	; 45
    1ee4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ee8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eec:	ad 97       	sbiw	r28, 0x2d	; 45
    1eee:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    1ef2:	7b 01       	movw	r14, r22
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	a6 01       	movw	r20, r12
    1ef8:	95 01       	movw	r18, r10
    1efa:	22 0d       	add	r18, r2
    1efc:	33 1d       	adc	r19, r3
    1efe:	44 1d       	adc	r20, r4
    1f00:	55 1d       	adc	r21, r5
    1f02:	a9 96       	adiw	r28, 0x29	; 41
    1f04:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f06:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f08:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f0a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f0c:	a9 97       	sbiw	r28, 0x29	; 41
    1f0e:	c4 01       	movw	r24, r8
    1f10:	aa 27       	eor	r26, r26
    1f12:	bb 27       	eor	r27, r27
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	4a 1f       	adc	r20, r26
    1f1a:	5b 1f       	adc	r21, r27
    1f1c:	2a 15       	cp	r18, r10
    1f1e:	3b 05       	cpc	r19, r11
    1f20:	4c 05       	cpc	r20, r12
    1f22:	5d 05       	cpc	r21, r13
    1f24:	48 f4       	brcc	.+18     	; 0x1f38 <__moddi3+0xdfe>
    1f26:	81 2c       	mov	r8, r1
    1f28:	91 2c       	mov	r9, r1
    1f2a:	e1 e0       	ldi	r30, 0x01	; 1
    1f2c:	ae 2e       	mov	r10, r30
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	e8 0c       	add	r14, r8
    1f32:	f9 1c       	adc	r15, r9
    1f34:	0a 1d       	adc	r16, r10
    1f36:	1b 1d       	adc	r17, r11
    1f38:	ca 01       	movw	r24, r20
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	57 01       	movw	r10, r14
    1f40:	68 01       	movw	r12, r16
    1f42:	a8 0e       	add	r10, r24
    1f44:	b9 1e       	adc	r11, r25
    1f46:	ca 1e       	adc	r12, r26
    1f48:	db 1e       	adc	r13, r27
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	33 27       	eor	r19, r19
    1f4e:	22 27       	eor	r18, r18
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	a0 70       	andi	r26, 0x00	; 0
    1f5e:	b0 70       	andi	r27, 0x00	; 0
    1f60:	28 0f       	add	r18, r24
    1f62:	39 1f       	adc	r19, r25
    1f64:	4a 1f       	adc	r20, r26
    1f66:	5b 1f       	adc	r21, r27
    1f68:	e9 a8       	ldd	r14, Y+49	; 0x31
    1f6a:	fa a8       	ldd	r15, Y+50	; 0x32
    1f6c:	0b a9       	ldd	r16, Y+51	; 0x33
    1f6e:	1c a9       	ldd	r17, Y+52	; 0x34
    1f70:	ea 14       	cp	r14, r10
    1f72:	fb 04       	cpc	r15, r11
    1f74:	0c 05       	cpc	r16, r12
    1f76:	1d 05       	cpc	r17, r13
    1f78:	70 f0       	brcs	.+28     	; 0x1f96 <__moddi3+0xe5c>
    1f7a:	ae 14       	cp	r10, r14
    1f7c:	bf 04       	cpc	r11, r15
    1f7e:	c0 06       	cpc	r12, r16
    1f80:	d1 06       	cpc	r13, r17
    1f82:	89 f5       	brne	.+98     	; 0x1fe6 <__moddi3+0xeac>
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	84 07       	cpc	r24, r20
    1f92:	95 07       	cpc	r25, r21
    1f94:	40 f5       	brcc	.+80     	; 0x1fe6 <__moddi3+0xeac>
    1f96:	da 01       	movw	r26, r20
    1f98:	c9 01       	movw	r24, r18
    1f9a:	21 96       	adiw	r28, 0x01	; 1
    1f9c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f9e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fa0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fa2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fa4:	21 97       	sbiw	r28, 0x01	; 1
    1fa6:	86 19       	sub	r24, r6
    1fa8:	97 09       	sbc	r25, r7
    1faa:	a8 09       	sbc	r26, r8
    1fac:	b9 09       	sbc	r27, r9
    1fae:	25 96       	adiw	r28, 0x05	; 5
    1fb0:	ec ac       	ldd	r14, Y+60	; 0x3c
    1fb2:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb8:	25 97       	sbiw	r28, 0x05	; 5
    1fba:	ae 18       	sub	r10, r14
    1fbc:	bf 08       	sbc	r11, r15
    1fbe:	c0 0a       	sbc	r12, r16
    1fc0:	d1 0a       	sbc	r13, r17
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	4a 07       	cpc	r20, r26
    1fce:	5b 07       	cpc	r21, r27
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__moddi3+0xea2>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	e2 2e       	mov	r14, r18
    1fd6:	f1 2c       	mov	r15, r1
    1fd8:	01 2d       	mov	r16, r1
    1fda:	11 2d       	mov	r17, r1
    1fdc:	ae 18       	sub	r10, r14
    1fde:	bf 08       	sbc	r11, r15
    1fe0:	c0 0a       	sbc	r12, r16
    1fe2:	d1 0a       	sbc	r13, r17
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <__moddi3+0xeb0>
    1fe6:	da 01       	movw	r26, r20
    1fe8:	c9 01       	movw	r24, r18
    1fea:	6d a8       	ldd	r6, Y+53	; 0x35
    1fec:	7e a8       	ldd	r7, Y+54	; 0x36
    1fee:	8f a8       	ldd	r8, Y+55	; 0x37
    1ff0:	98 ac       	ldd	r9, Y+56	; 0x38
    1ff2:	68 1a       	sub	r6, r24
    1ff4:	79 0a       	sbc	r7, r25
    1ff6:	8a 0a       	sbc	r8, r26
    1ff8:	9b 0a       	sbc	r9, r27
    1ffa:	09 a9       	ldd	r16, Y+49	; 0x31
    1ffc:	1a a9       	ldd	r17, Y+50	; 0x32
    1ffe:	2b a9       	ldd	r18, Y+51	; 0x33
    2000:	3c a9       	ldd	r19, Y+52	; 0x34
    2002:	0a 19       	sub	r16, r10
    2004:	1b 09       	sbc	r17, r11
    2006:	2c 09       	sbc	r18, r12
    2008:	3d 09       	sbc	r19, r13
    200a:	58 01       	movw	r10, r16
    200c:	69 01       	movw	r12, r18
    200e:	22 24       	eor	r2, r2
    2010:	33 24       	eor	r3, r3
    2012:	21 01       	movw	r4, r2
    2014:	2d a9       	ldd	r18, Y+53	; 0x35
    2016:	3e a9       	ldd	r19, Y+54	; 0x36
    2018:	4f a9       	ldd	r20, Y+55	; 0x37
    201a:	58 ad       	ldd	r21, Y+56	; 0x38
    201c:	26 15       	cp	r18, r6
    201e:	37 05       	cpc	r19, r7
    2020:	48 05       	cpc	r20, r8
    2022:	59 05       	cpc	r21, r9
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__moddi3+0xef6>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	28 2e       	mov	r2, r24
    202a:	31 2c       	mov	r3, r1
    202c:	41 2c       	mov	r4, r1
    202e:	51 2c       	mov	r5, r1
    2030:	86 01       	movw	r16, r12
    2032:	75 01       	movw	r14, r10
    2034:	e2 18       	sub	r14, r2
    2036:	f3 08       	sbc	r15, r3
    2038:	04 09       	sbc	r16, r4
    203a:	15 09       	sbc	r17, r5
    203c:	a8 01       	movw	r20, r16
    203e:	97 01       	movw	r18, r14
    2040:	e2 96       	adiw	r28, 0x32	; 50
    2042:	0f ac       	ldd	r0, Y+63	; 0x3f
    2044:	e2 97       	sbiw	r28, 0x32	; 50
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__moddi3+0xf16>
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	44 1f       	adc	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	0a 94       	dec	r0
    2052:	d2 f7       	brpl	.-12     	; 0x2048 <__moddi3+0xf0e>
    2054:	d4 01       	movw	r26, r8
    2056:	c3 01       	movw	r24, r6
    2058:	e3 96       	adiw	r28, 0x33	; 51
    205a:	0f ac       	ldd	r0, Y+63	; 0x3f
    205c:	e3 97       	sbiw	r28, 0x33	; 51
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__moddi3+0xf2e>
    2060:	b6 95       	lsr	r27
    2062:	a7 95       	ror	r26
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	0a 94       	dec	r0
    206a:	d2 f7       	brpl	.-12     	; 0x2060 <__moddi3+0xf26>
    206c:	28 2b       	or	r18, r24
    206e:	39 2b       	or	r19, r25
    2070:	4a 2b       	or	r20, r26
    2072:	5b 2b       	or	r21, r27
    2074:	29 a7       	std	Y+41, r18	; 0x29
    2076:	3a a7       	std	Y+42, r19	; 0x2a
    2078:	4b a7       	std	Y+43, r20	; 0x2b
    207a:	5c a7       	std	Y+44, r21	; 0x2c
    207c:	e3 96       	adiw	r28, 0x33	; 51
    207e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2080:	e3 97       	sbiw	r28, 0x33	; 51
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__moddi3+0xf52>
    2084:	16 95       	lsr	r17
    2086:	07 95       	ror	r16
    2088:	f7 94       	ror	r15
    208a:	e7 94       	ror	r14
    208c:	0a 94       	dec	r0
    208e:	d2 f7       	brpl	.-12     	; 0x2084 <__moddi3+0xf4a>
    2090:	ed a6       	std	Y+45, r14	; 0x2d
    2092:	fe a6       	std	Y+46, r15	; 0x2e
    2094:	0f a7       	std	Y+47, r16	; 0x2f
    2096:	18 ab       	std	Y+48, r17	; 0x30
    2098:	29 8b       	std	Y+17, r18	; 0x11
    209a:	8a a5       	ldd	r24, Y+42	; 0x2a
    209c:	8a 8b       	std	Y+18, r24	; 0x12
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a4:	8c 8b       	std	Y+20, r24	; 0x14
    20a6:	ed 8a       	std	Y+21, r14	; 0x15
    20a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    20aa:	8e 8b       	std	Y+22, r24	; 0x16
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	8f 8b       	std	Y+23, r24	; 0x17
    20b0:	88 a9       	ldd	r24, Y+48	; 0x30
    20b2:	88 8f       	std	Y+24, r24	; 0x18
    20b4:	e1 96       	adiw	r28, 0x31	; 49
    20b6:	4c ad       	ldd	r20, Y+60	; 0x3c
    20b8:	5d ad       	ldd	r21, Y+61	; 0x3d
    20ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    20bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    20be:	e1 97       	sbiw	r28, 0x31	; 49
    20c0:	41 15       	cp	r20, r1
    20c2:	51 05       	cpc	r21, r1
    20c4:	61 05       	cpc	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__moddi3+0xf92>
    20ca:	67 c0       	rjmp	.+206    	; 0x219a <__moddi3+0x1060>
    20cc:	89 89       	ldd	r24, Y+17	; 0x11
    20ce:	2a 89       	ldd	r18, Y+18	; 0x12
    20d0:	3b 89       	ldd	r19, Y+19	; 0x13
    20d2:	4c 89       	ldd	r20, Y+20	; 0x14
    20d4:	5d 89       	ldd	r21, Y+21	; 0x15
    20d6:	ae 89       	ldd	r26, Y+22	; 0x16
    20d8:	bf 89       	ldd	r27, Y+23	; 0x17
    20da:	18 8d       	ldd	r17, Y+24	; 0x18
    20dc:	f8 2f       	mov	r31, r24
    20de:	f1 95       	neg	r31
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	1f 16       	cp	r1, r31
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <__moddi3+0xfae>
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 2f       	mov	r24, r18
    20ea:	81 95       	neg	r24
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	18 16       	cp	r1, r24
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__moddi3+0xfba>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	e8 2f       	mov	r30, r24
    20f6:	e9 1b       	sub	r30, r25
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	8e 17       	cp	r24, r30
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__moddi3+0xfc6>
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	29 2b       	or	r18, r25
    2102:	83 2f       	mov	r24, r19
    2104:	81 95       	neg	r24
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	18 16       	cp	r1, r24
    210a:	08 f0       	brcs	.+2      	; 0x210e <__moddi3+0xfd4>
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	78 2f       	mov	r23, r24
    2110:	72 1b       	sub	r23, r18
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	87 17       	cp	r24, r23
    2116:	08 f0       	brcs	.+2      	; 0x211a <__moddi3+0xfe0>
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	39 2b       	or	r19, r25
    211c:	84 2f       	mov	r24, r20
    211e:	81 95       	neg	r24
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	18 16       	cp	r1, r24
    2124:	08 f0       	brcs	.+2      	; 0x2128 <__moddi3+0xfee>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	68 2f       	mov	r22, r24
    212a:	63 1b       	sub	r22, r19
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	86 17       	cp	r24, r22
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__moddi3+0xffa>
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	29 2b       	or	r18, r25
    2136:	85 2f       	mov	r24, r21
    2138:	81 95       	neg	r24
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	18 16       	cp	r1, r24
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__moddi3+0x1008>
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	58 2f       	mov	r21, r24
    2144:	52 1b       	sub	r21, r18
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	85 17       	cp	r24, r21
    214a:	08 f0       	brcs	.+2      	; 0x214e <__moddi3+0x1014>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	39 2b       	or	r19, r25
    2150:	8a 2f       	mov	r24, r26
    2152:	81 95       	neg	r24
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	18 16       	cp	r1, r24
    2158:	08 f0       	brcs	.+2      	; 0x215c <__moddi3+0x1022>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	48 2f       	mov	r20, r24
    215e:	43 1b       	sub	r20, r19
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	84 17       	cp	r24, r20
    2164:	08 f0       	brcs	.+2      	; 0x2168 <__moddi3+0x102e>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	29 2b       	or	r18, r25
    216a:	8b 2f       	mov	r24, r27
    216c:	81 95       	neg	r24
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	18 16       	cp	r1, r24
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__moddi3+0x103c>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	38 2f       	mov	r19, r24
    2178:	32 1b       	sub	r19, r18
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	83 17       	cp	r24, r19
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__moddi3+0x1048>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	92 2b       	or	r25, r18
    2184:	81 2f       	mov	r24, r17
    2186:	81 95       	neg	r24
    2188:	89 1b       	sub	r24, r25
    218a:	f9 8b       	std	Y+17, r31	; 0x11
    218c:	ea 8b       	std	Y+18, r30	; 0x12
    218e:	7b 8b       	std	Y+19, r23	; 0x13
    2190:	6c 8b       	std	Y+20, r22	; 0x14
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4e 8b       	std	Y+22, r20	; 0x16
    2196:	3f 8b       	std	Y+23, r19	; 0x17
    2198:	88 8f       	std	Y+24, r24	; 0x18
    219a:	29 89       	ldd	r18, Y+17	; 0x11
    219c:	3a 89       	ldd	r19, Y+18	; 0x12
    219e:	4b 89       	ldd	r20, Y+19	; 0x13
    21a0:	5c 89       	ldd	r21, Y+20	; 0x14
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	c9 58       	subi	r28, 0x89	; 137
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	e2 e1       	ldi	r30, 0x12	; 18
    21b0:	0c 94 04 37 	jmp	0x6e08	; 0x6e08 <__epilogue_restores__>

000021b4 <_fpadd_parts>:
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 e8 36 	jmp	0x6dd0	; 0x6dd0 <__prologue_saves__>
    21c0:	dc 01       	movw	r26, r24
    21c2:	2b 01       	movw	r4, r22
    21c4:	fa 01       	movw	r30, r20
    21c6:	9c 91       	ld	r25, X
    21c8:	92 30       	cpi	r25, 0x02	; 2
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <_fpadd_parts+0x1a>
    21cc:	39 c1       	rjmp	.+626    	; 0x2440 <_fpadd_parts+0x28c>
    21ce:	eb 01       	movw	r28, r22
    21d0:	88 81       	ld	r24, Y
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <_fpadd_parts+0x24>
    21d6:	33 c1       	rjmp	.+614    	; 0x243e <_fpadd_parts+0x28a>
    21d8:	94 30       	cpi	r25, 0x04	; 4
    21da:	69 f4       	brne	.+26     	; 0x21f6 <_fpadd_parts+0x42>
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <_fpadd_parts+0x2e>
    21e0:	2f c1       	rjmp	.+606    	; 0x2440 <_fpadd_parts+0x28c>
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 91       	ld	r25, X
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	98 17       	cp	r25, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <_fpadd_parts+0x3c>
    21ee:	28 c1       	rjmp	.+592    	; 0x2440 <_fpadd_parts+0x28c>
    21f0:	a2 e7       	ldi	r26, 0x72	; 114
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	25 c1       	rjmp	.+586    	; 0x2440 <_fpadd_parts+0x28c>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	09 f4       	brne	.+2      	; 0x21fc <_fpadd_parts+0x48>
    21fa:	21 c1       	rjmp	.+578    	; 0x243e <_fpadd_parts+0x28a>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	a9 f4       	brne	.+42     	; 0x222a <_fpadd_parts+0x76>
    2200:	92 30       	cpi	r25, 0x02	; 2
    2202:	09 f0       	breq	.+2      	; 0x2206 <_fpadd_parts+0x52>
    2204:	1d c1       	rjmp	.+570    	; 0x2440 <_fpadd_parts+0x28c>
    2206:	9a 01       	movw	r18, r20
    2208:	ad 01       	movw	r20, r26
    220a:	88 e0       	ldi	r24, 0x08	; 8
    220c:	ea 01       	movw	r28, r20
    220e:	09 90       	ld	r0, Y+
    2210:	ae 01       	movw	r20, r28
    2212:	e9 01       	movw	r28, r18
    2214:	09 92       	st	Y+, r0
    2216:	9e 01       	movw	r18, r28
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	c1 f7       	brne	.-16     	; 0x220c <_fpadd_parts+0x58>
    221c:	e2 01       	movw	r28, r4
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 91       	ld	r25, X
    2224:	89 23       	and	r24, r25
    2226:	81 83       	std	Z+1, r24	; 0x01
    2228:	08 c1       	rjmp	.+528    	; 0x243a <_fpadd_parts+0x286>
    222a:	92 30       	cpi	r25, 0x02	; 2
    222c:	09 f4       	brne	.+2      	; 0x2230 <_fpadd_parts+0x7c>
    222e:	07 c1       	rjmp	.+526    	; 0x243e <_fpadd_parts+0x28a>
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	2d 90       	ld	r2, X+
    2234:	3c 90       	ld	r3, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	eb 01       	movw	r28, r22
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	ad 90       	ld	r10, X+
    2242:	bd 90       	ld	r11, X+
    2244:	cd 90       	ld	r12, X+
    2246:	dc 90       	ld	r13, X
    2248:	17 97       	sbiw	r26, 0x07	; 7
    224a:	ec 80       	ldd	r14, Y+4	; 0x04
    224c:	fd 80       	ldd	r15, Y+5	; 0x05
    224e:	0e 81       	ldd	r16, Y+6	; 0x06
    2250:	1f 81       	ldd	r17, Y+7	; 0x07
    2252:	91 01       	movw	r18, r2
    2254:	28 1b       	sub	r18, r24
    2256:	39 0b       	sbc	r19, r25
    2258:	b9 01       	movw	r22, r18
    225a:	37 ff       	sbrs	r19, 7
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <_fpadd_parts+0xb2>
    225e:	66 27       	eor	r22, r22
    2260:	77 27       	eor	r23, r23
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	60 32       	cpi	r22, 0x20	; 32
    2268:	71 05       	cpc	r23, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <_fpadd_parts+0xba>
    226c:	61 c0       	rjmp	.+194    	; 0x2330 <_fpadd_parts+0x17c>
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	6c f5       	brge	.+90     	; 0x22ce <_fpadd_parts+0x11a>
    2274:	37 01       	movw	r6, r14
    2276:	48 01       	movw	r8, r16
    2278:	06 2e       	mov	r0, r22
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <_fpadd_parts+0xd0>
    227c:	96 94       	lsr	r9
    227e:	87 94       	ror	r8
    2280:	77 94       	ror	r7
    2282:	67 94       	ror	r6
    2284:	0a 94       	dec	r0
    2286:	d2 f7       	brpl	.-12     	; 0x227c <_fpadd_parts+0xc8>
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <_fpadd_parts+0xe6>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	44 1f       	adc	r20, r20
    2298:	55 1f       	adc	r21, r21
    229a:	6a 95       	dec	r22
    229c:	d2 f7       	brpl	.-12     	; 0x2292 <_fpadd_parts+0xde>
    229e:	21 50       	subi	r18, 0x01	; 1
    22a0:	30 40       	sbci	r19, 0x00	; 0
    22a2:	40 40       	sbci	r20, 0x00	; 0
    22a4:	50 40       	sbci	r21, 0x00	; 0
    22a6:	2e 21       	and	r18, r14
    22a8:	3f 21       	and	r19, r15
    22aa:	40 23       	and	r20, r16
    22ac:	51 23       	and	r21, r17
    22ae:	21 15       	cp	r18, r1
    22b0:	31 05       	cpc	r19, r1
    22b2:	41 05       	cpc	r20, r1
    22b4:	51 05       	cpc	r21, r1
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <_fpadd_parts+0x10c>
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	79 01       	movw	r14, r18
    22c2:	8a 01       	movw	r16, r20
    22c4:	e6 28       	or	r14, r6
    22c6:	f7 28       	or	r15, r7
    22c8:	08 29       	or	r16, r8
    22ca:	19 29       	or	r17, r9
    22cc:	3c c0       	rjmp	.+120    	; 0x2346 <_fpadd_parts+0x192>
    22ce:	23 2b       	or	r18, r19
    22d0:	d1 f1       	breq	.+116    	; 0x2346 <_fpadd_parts+0x192>
    22d2:	26 0e       	add	r2, r22
    22d4:	37 1e       	adc	r3, r23
    22d6:	35 01       	movw	r6, r10
    22d8:	46 01       	movw	r8, r12
    22da:	06 2e       	mov	r0, r22
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <_fpadd_parts+0x132>
    22de:	96 94       	lsr	r9
    22e0:	87 94       	ror	r8
    22e2:	77 94       	ror	r7
    22e4:	67 94       	ror	r6
    22e6:	0a 94       	dec	r0
    22e8:	d2 f7       	brpl	.-12     	; 0x22de <_fpadd_parts+0x12a>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <_fpadd_parts+0x148>
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	44 1f       	adc	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	6a 95       	dec	r22
    22fe:	d2 f7       	brpl	.-12     	; 0x22f4 <_fpadd_parts+0x140>
    2300:	21 50       	subi	r18, 0x01	; 1
    2302:	30 40       	sbci	r19, 0x00	; 0
    2304:	40 40       	sbci	r20, 0x00	; 0
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	2a 21       	and	r18, r10
    230a:	3b 21       	and	r19, r11
    230c:	4c 21       	and	r20, r12
    230e:	5d 21       	and	r21, r13
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	41 05       	cpc	r20, r1
    2316:	51 05       	cpc	r21, r1
    2318:	21 f0       	breq	.+8      	; 0x2322 <_fpadd_parts+0x16e>
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	59 01       	movw	r10, r18
    2324:	6a 01       	movw	r12, r20
    2326:	a6 28       	or	r10, r6
    2328:	b7 28       	or	r11, r7
    232a:	c8 28       	or	r12, r8
    232c:	d9 28       	or	r13, r9
    232e:	0b c0       	rjmp	.+22     	; 0x2346 <_fpadd_parts+0x192>
    2330:	82 15       	cp	r24, r2
    2332:	93 05       	cpc	r25, r3
    2334:	2c f0       	brlt	.+10     	; 0x2340 <_fpadd_parts+0x18c>
    2336:	1c 01       	movw	r2, r24
    2338:	aa 24       	eor	r10, r10
    233a:	bb 24       	eor	r11, r11
    233c:	65 01       	movw	r12, r10
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <_fpadd_parts+0x192>
    2340:	ee 24       	eor	r14, r14
    2342:	ff 24       	eor	r15, r15
    2344:	87 01       	movw	r16, r14
    2346:	11 96       	adiw	r26, 0x01	; 1
    2348:	9c 91       	ld	r25, X
    234a:	d2 01       	movw	r26, r4
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	8c 91       	ld	r24, X
    2350:	98 17       	cp	r25, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <_fpadd_parts+0x1a2>
    2354:	45 c0       	rjmp	.+138    	; 0x23e0 <_fpadd_parts+0x22c>
    2356:	99 23       	and	r25, r25
    2358:	39 f0       	breq	.+14     	; 0x2368 <_fpadd_parts+0x1b4>
    235a:	a8 01       	movw	r20, r16
    235c:	97 01       	movw	r18, r14
    235e:	2a 19       	sub	r18, r10
    2360:	3b 09       	sbc	r19, r11
    2362:	4c 09       	sbc	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <_fpadd_parts+0x1c0>
    2368:	a6 01       	movw	r20, r12
    236a:	95 01       	movw	r18, r10
    236c:	2e 19       	sub	r18, r14
    236e:	3f 09       	sbc	r19, r15
    2370:	40 0b       	sbc	r20, r16
    2372:	51 0b       	sbc	r21, r17
    2374:	57 fd       	sbrc	r21, 7
    2376:	08 c0       	rjmp	.+16     	; 0x2388 <_fpadd_parts+0x1d4>
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	33 82       	std	Z+3, r3	; 0x03
    237c:	22 82       	std	Z+2, r2	; 0x02
    237e:	24 83       	std	Z+4, r18	; 0x04
    2380:	35 83       	std	Z+5, r19	; 0x05
    2382:	46 83       	std	Z+6, r20	; 0x06
    2384:	57 83       	std	Z+7, r21	; 0x07
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <_fpadd_parts+0x20e>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	81 83       	std	Z+1, r24	; 0x01
    238c:	33 82       	std	Z+3, r3	; 0x03
    238e:	22 82       	std	Z+2, r2	; 0x02
    2390:	88 27       	eor	r24, r24
    2392:	99 27       	eor	r25, r25
    2394:	dc 01       	movw	r26, r24
    2396:	82 1b       	sub	r24, r18
    2398:	93 0b       	sbc	r25, r19
    239a:	a4 0b       	sbc	r26, r20
    239c:	b5 0b       	sbc	r27, r21
    239e:	84 83       	std	Z+4, r24	; 0x04
    23a0:	95 83       	std	Z+5, r25	; 0x05
    23a2:	a6 83       	std	Z+6, r26	; 0x06
    23a4:	b7 83       	std	Z+7, r27	; 0x07
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <_fpadd_parts+0x20e>
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	44 1f       	adc	r20, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	24 83       	std	Z+4, r18	; 0x04
    23b2:	35 83       	std	Z+5, r19	; 0x05
    23b4:	46 83       	std	Z+6, r20	; 0x06
    23b6:	57 83       	std	Z+7, r21	; 0x07
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	24 81       	ldd	r18, Z+4	; 0x04
    23c4:	35 81       	ldd	r19, Z+5	; 0x05
    23c6:	46 81       	ldd	r20, Z+6	; 0x06
    23c8:	57 81       	ldd	r21, Z+7	; 0x07
    23ca:	da 01       	movw	r26, r20
    23cc:	c9 01       	movw	r24, r18
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	a1 09       	sbc	r26, r1
    23d2:	b1 09       	sbc	r27, r1
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	af 4f       	sbci	r26, 0xFF	; 255
    23da:	bf 43       	sbci	r27, 0x3F	; 63
    23dc:	28 f3       	brcs	.-54     	; 0x23a8 <_fpadd_parts+0x1f4>
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <_fpadd_parts+0x242>
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	33 82       	std	Z+3, r3	; 0x03
    23e4:	22 82       	std	Z+2, r2	; 0x02
    23e6:	ea 0c       	add	r14, r10
    23e8:	fb 1c       	adc	r15, r11
    23ea:	0c 1d       	adc	r16, r12
    23ec:	1d 1d       	adc	r17, r13
    23ee:	e4 82       	std	Z+4, r14	; 0x04
    23f0:	f5 82       	std	Z+5, r15	; 0x05
    23f2:	06 83       	std	Z+6, r16	; 0x06
    23f4:	17 83       	std	Z+7, r17	; 0x07
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	80 83       	st	Z, r24
    23fa:	24 81       	ldd	r18, Z+4	; 0x04
    23fc:	35 81       	ldd	r19, Z+5	; 0x05
    23fe:	46 81       	ldd	r20, Z+6	; 0x06
    2400:	57 81       	ldd	r21, Z+7	; 0x07
    2402:	57 ff       	sbrs	r21, 7
    2404:	1a c0       	rjmp	.+52     	; 0x243a <_fpadd_parts+0x286>
    2406:	c9 01       	movw	r24, r18
    2408:	aa 27       	eor	r26, r26
    240a:	97 fd       	sbrc	r25, 7
    240c:	a0 95       	com	r26
    240e:	ba 2f       	mov	r27, r26
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	a0 70       	andi	r26, 0x00	; 0
    2416:	b0 70       	andi	r27, 0x00	; 0
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	82 2b       	or	r24, r18
    2422:	93 2b       	or	r25, r19
    2424:	a4 2b       	or	r26, r20
    2426:	b5 2b       	or	r27, r21
    2428:	84 83       	std	Z+4, r24	; 0x04
    242a:	95 83       	std	Z+5, r25	; 0x05
    242c:	a6 83       	std	Z+6, r26	; 0x06
    242e:	b7 83       	std	Z+7, r27	; 0x07
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	df 01       	movw	r26, r30
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_fpadd_parts+0x28c>
    243e:	d2 01       	movw	r26, r4
    2440:	cd 01       	movw	r24, r26
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	e2 e1       	ldi	r30, 0x12	; 18
    2448:	0c 94 04 37 	jmp	0x6e08	; 0x6e08 <__epilogue_restores__>

0000244c <__subsf3>:
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ec e2       	ldi	r30, 0x2C	; 44
    2452:	f2 e1       	ldi	r31, 0x12	; 18
    2454:	0c 94 f4 36 	jmp	0x6de8	; 0x6de8 <__prologue_saves__+0x18>
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	7a 83       	std	Y+2, r23	; 0x02
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	2d 83       	std	Y+5, r18	; 0x05
    2462:	3e 83       	std	Y+6, r19	; 0x06
    2464:	4f 83       	std	Y+7, r20	; 0x07
    2466:	58 87       	std	Y+8, r21	; 0x08
    2468:	e9 e0       	ldi	r30, 0x09	; 9
    246a:	ee 2e       	mov	r14, r30
    246c:	f1 2c       	mov	r15, r1
    246e:	ec 0e       	add	r14, r28
    2470:	fd 1e       	adc	r15, r29
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    247c:	8e 01       	movw	r16, r28
    247e:	0f 5e       	subi	r16, 0xEF	; 239
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	ce 01       	movw	r24, r28
    2484:	05 96       	adiw	r24, 0x05	; 5
    2486:	b8 01       	movw	r22, r16
    2488:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    248c:	8a 89       	ldd	r24, Y+18	; 0x12
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	89 27       	eor	r24, r25
    2492:	8a 8b       	std	Y+18, r24	; 0x12
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	ae 01       	movw	r20, r28
    249a:	47 5e       	subi	r20, 0xE7	; 231
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24a2:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	e6 e0       	ldi	r30, 0x06	; 6
    24aa:	0c 94 10 37 	jmp	0x6e20	; 0x6e20 <__epilogue_restores__+0x18>

000024ae <__addsf3>:
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 f4 36 	jmp	0x6de8	; 0x6de8 <__prologue_saves__+0x18>
    24ba:	69 83       	std	Y+1, r22	; 0x01
    24bc:	7a 83       	std	Y+2, r23	; 0x02
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08
    24ca:	f9 e0       	ldi	r31, 0x09	; 9
    24cc:	ef 2e       	mov	r14, r31
    24ce:	f1 2c       	mov	r15, r1
    24d0:	ec 0e       	add	r14, r28
    24d2:	fd 1e       	adc	r15, r29
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24de:	8e 01       	movw	r16, r28
    24e0:	0f 5e       	subi	r16, 0xEF	; 239
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	ce 01       	movw	r24, r28
    24e6:	05 96       	adiw	r24, 0x05	; 5
    24e8:	b8 01       	movw	r22, r16
    24ea:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24ee:	c7 01       	movw	r24, r14
    24f0:	b8 01       	movw	r22, r16
    24f2:	ae 01       	movw	r20, r28
    24f4:	47 5e       	subi	r20, 0xE7	; 231
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24fc:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    2500:	a0 96       	adiw	r28, 0x20	; 32
    2502:	e6 e0       	ldi	r30, 0x06	; 6
    2504:	0c 94 10 37 	jmp	0x6e20	; 0x6e20 <__epilogue_restores__+0x18>

00002508 <__mulsf3>:
    2508:	a0 e2       	ldi	r26, 0x20	; 32
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 e8 36 	jmp	0x6dd0	; 0x6dd0 <__prologue_saves__>
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	4f 83       	std	Y+7, r20	; 0x07
    2522:	58 87       	std	Y+8, r21	; 0x08
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	be 01       	movw	r22, r28
    252a:	67 5f       	subi	r22, 0xF7	; 247
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2532:	ce 01       	movw	r24, r28
    2534:	05 96       	adiw	r24, 0x05	; 5
    2536:	be 01       	movw	r22, r28
    2538:	6f 5e       	subi	r22, 0xEF	; 239
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2540:	99 85       	ldd	r25, Y+9	; 0x09
    2542:	92 30       	cpi	r25, 0x02	; 2
    2544:	88 f0       	brcs	.+34     	; 0x2568 <__mulsf3+0x60>
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	c8 f0       	brcs	.+50     	; 0x257e <__mulsf3+0x76>
    254c:	94 30       	cpi	r25, 0x04	; 4
    254e:	19 f4       	brne	.+6      	; 0x2556 <__mulsf3+0x4e>
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	51 f4       	brne	.+20     	; 0x2568 <__mulsf3+0x60>
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__mulsf3+0x56>
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	29 f4       	brne	.+10     	; 0x2564 <__mulsf3+0x5c>
    255a:	92 30       	cpi	r25, 0x02	; 2
    255c:	81 f4       	brne	.+32     	; 0x257e <__mulsf3+0x76>
    255e:	82 e7       	ldi	r24, 0x72	; 114
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	c6 c0       	rjmp	.+396    	; 0x26f0 <__mulsf3+0x1e8>
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	49 f4       	brne	.+18     	; 0x257a <__mulsf3+0x72>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	8a 89       	ldd	r24, Y+18	; 0x12
    256e:	98 13       	cpse	r25, r24
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	2a 87       	std	Y+10, r18	; 0x0a
    2574:	ce 01       	movw	r24, r28
    2576:	09 96       	adiw	r24, 0x09	; 9
    2578:	bb c0       	rjmp	.+374    	; 0x26f0 <__mulsf3+0x1e8>
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	49 f4       	brne	.+18     	; 0x2590 <__mulsf3+0x88>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	98 13       	cpse	r25, r24
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	2a 8b       	std	Y+18, r18	; 0x12
    258a:	ce 01       	movw	r24, r28
    258c:	41 96       	adiw	r24, 0x11	; 17
    258e:	b0 c0       	rjmp	.+352    	; 0x26f0 <__mulsf3+0x1e8>
    2590:	2d 84       	ldd	r2, Y+13	; 0x0d
    2592:	3e 84       	ldd	r3, Y+14	; 0x0e
    2594:	4f 84       	ldd	r4, Y+15	; 0x0f
    2596:	58 88       	ldd	r5, Y+16	; 0x10
    2598:	6d 88       	ldd	r6, Y+21	; 0x15
    259a:	7e 88       	ldd	r7, Y+22	; 0x16
    259c:	8f 88       	ldd	r8, Y+23	; 0x17
    259e:	98 8c       	ldd	r9, Y+24	; 0x18
    25a0:	ee 24       	eor	r14, r14
    25a2:	ff 24       	eor	r15, r15
    25a4:	87 01       	movw	r16, r14
    25a6:	aa 24       	eor	r10, r10
    25a8:	bb 24       	eor	r11, r11
    25aa:	65 01       	movw	r12, r10
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	e0 e0       	ldi	r30, 0x00	; 0
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	c1 01       	movw	r24, r2
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	90 70       	andi	r25, 0x00	; 0
    25be:	89 2b       	or	r24, r25
    25c0:	e9 f0       	breq	.+58     	; 0x25fc <__mulsf3+0xf4>
    25c2:	e6 0c       	add	r14, r6
    25c4:	f7 1c       	adc	r15, r7
    25c6:	08 1d       	adc	r16, r8
    25c8:	19 1d       	adc	r17, r9
    25ca:	9a 01       	movw	r18, r20
    25cc:	ab 01       	movw	r20, r22
    25ce:	2a 0d       	add	r18, r10
    25d0:	3b 1d       	adc	r19, r11
    25d2:	4c 1d       	adc	r20, r12
    25d4:	5d 1d       	adc	r21, r13
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e6 14       	cp	r14, r6
    25e0:	f7 04       	cpc	r15, r7
    25e2:	08 05       	cpc	r16, r8
    25e4:	19 05       	cpc	r17, r9
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <__mulsf3+0xe8>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ba 01       	movw	r22, r20
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 0f       	add	r20, r24
    25f6:	59 1f       	adc	r21, r25
    25f8:	6a 1f       	adc	r22, r26
    25fa:	7b 1f       	adc	r23, r27
    25fc:	aa 0c       	add	r10, r10
    25fe:	bb 1c       	adc	r11, r11
    2600:	cc 1c       	adc	r12, r12
    2602:	dd 1c       	adc	r13, r13
    2604:	97 fe       	sbrs	r9, 7
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <__mulsf3+0x110>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	a8 2a       	or	r10, r24
    2612:	b9 2a       	or	r11, r25
    2614:	ca 2a       	or	r12, r26
    2616:	db 2a       	or	r13, r27
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	e0 32       	cpi	r30, 0x20	; 32
    261c:	f1 05       	cpc	r31, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <__mulsf3+0x12a>
    2620:	66 0c       	add	r6, r6
    2622:	77 1c       	adc	r7, r7
    2624:	88 1c       	adc	r8, r8
    2626:	99 1c       	adc	r9, r9
    2628:	56 94       	lsr	r5
    262a:	47 94       	ror	r4
    262c:	37 94       	ror	r3
    262e:	27 94       	ror	r2
    2630:	c3 cf       	rjmp	.-122    	; 0x25b8 <__mulsf3+0xb0>
    2632:	fa 85       	ldd	r31, Y+10	; 0x0a
    2634:	ea 89       	ldd	r30, Y+18	; 0x12
    2636:	2b 89       	ldd	r18, Y+19	; 0x13
    2638:	3c 89       	ldd	r19, Y+20	; 0x14
    263a:	8b 85       	ldd	r24, Y+11	; 0x0b
    263c:	9c 85       	ldd	r25, Y+12	; 0x0c
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	2e 5f       	subi	r18, 0xFE	; 254
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	17 c0       	rjmp	.+46     	; 0x2676 <__mulsf3+0x16e>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	89 2b       	or	r24, r25
    2650:	61 f0       	breq	.+24     	; 0x266a <__mulsf3+0x162>
    2652:	16 95       	lsr	r17
    2654:	07 95       	ror	r16
    2656:	f7 94       	ror	r15
    2658:	e7 94       	ror	r14
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e0       	ldi	r26, 0x00	; 0
    2660:	b0 e8       	ldi	r27, 0x80	; 128
    2662:	e8 2a       	or	r14, r24
    2664:	f9 2a       	or	r15, r25
    2666:	0a 2b       	or	r16, r26
    2668:	1b 2b       	or	r17, r27
    266a:	76 95       	lsr	r23
    266c:	67 95       	ror	r22
    266e:	57 95       	ror	r21
    2670:	47 95       	ror	r20
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	77 fd       	sbrc	r23, 7
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <__mulsf3+0x140>
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <__mulsf3+0x18c>
    267c:	44 0f       	add	r20, r20
    267e:	55 1f       	adc	r21, r21
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	17 fd       	sbrc	r17, 7
    2686:	41 60       	ori	r20, 0x01	; 1
    2688:	ee 0c       	add	r14, r14
    268a:	ff 1c       	adc	r15, r15
    268c:	00 1f       	adc	r16, r16
    268e:	11 1f       	adc	r17, r17
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	30 40       	sbci	r19, 0x00	; 0
    2694:	40 30       	cpi	r20, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	59 07       	cpc	r21, r25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	69 07       	cpc	r22, r25
    269e:	90 e4       	ldi	r25, 0x40	; 64
    26a0:	79 07       	cpc	r23, r25
    26a2:	60 f3       	brcs	.-40     	; 0x267c <__mulsf3+0x174>
    26a4:	2b 8f       	std	Y+27, r18	; 0x1b
    26a6:	3c 8f       	std	Y+28, r19	; 0x1c
    26a8:	db 01       	movw	r26, r22
    26aa:	ca 01       	movw	r24, r20
    26ac:	8f 77       	andi	r24, 0x7F	; 127
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	a0 70       	andi	r26, 0x00	; 0
    26b2:	b0 70       	andi	r27, 0x00	; 0
    26b4:	80 34       	cpi	r24, 0x40	; 64
    26b6:	91 05       	cpc	r25, r1
    26b8:	a1 05       	cpc	r26, r1
    26ba:	b1 05       	cpc	r27, r1
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <__mulsf3+0x1ce>
    26be:	47 fd       	sbrc	r20, 7
    26c0:	0a c0       	rjmp	.+20     	; 0x26d6 <__mulsf3+0x1ce>
    26c2:	e1 14       	cp	r14, r1
    26c4:	f1 04       	cpc	r15, r1
    26c6:	01 05       	cpc	r16, r1
    26c8:	11 05       	cpc	r17, r1
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <__mulsf3+0x1ce>
    26cc:	40 5c       	subi	r20, 0xC0	; 192
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	6f 4f       	sbci	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	40 78       	andi	r20, 0x80	; 128
    26d6:	1a 8e       	std	Y+26, r1	; 0x1a
    26d8:	fe 17       	cp	r31, r30
    26da:	11 f0       	breq	.+4      	; 0x26e0 <__mulsf3+0x1d8>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	8a 8f       	std	Y+26, r24	; 0x1a
    26e0:	4d 8f       	std	Y+29, r20	; 0x1d
    26e2:	5e 8f       	std	Y+30, r21	; 0x1e
    26e4:	6f 8f       	std	Y+31, r22	; 0x1f
    26e6:	78 a3       	std	Y+32, r23	; 0x20
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	ce 01       	movw	r24, r28
    26ee:	49 96       	adiw	r24, 0x19	; 25
    26f0:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    26f4:	a0 96       	adiw	r28, 0x20	; 32
    26f6:	e2 e1       	ldi	r30, 0x12	; 18
    26f8:	0c 94 04 37 	jmp	0x6e08	; 0x6e08 <__epilogue_restores__>

000026fc <__gtsf2>:
    26fc:	a8 e1       	ldi	r26, 0x18	; 24
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 f4 36 	jmp	0x6de8	; 0x6de8 <__prologue_saves__+0x18>
    2708:	69 83       	std	Y+1, r22	; 0x01
    270a:	7a 83       	std	Y+2, r23	; 0x02
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	2d 83       	std	Y+5, r18	; 0x05
    2712:	3e 83       	std	Y+6, r19	; 0x06
    2714:	4f 83       	std	Y+7, r20	; 0x07
    2716:	58 87       	std	Y+8, r21	; 0x08
    2718:	89 e0       	ldi	r24, 0x09	; 9
    271a:	e8 2e       	mov	r14, r24
    271c:	f1 2c       	mov	r15, r1
    271e:	ec 0e       	add	r14, r28
    2720:	fd 1e       	adc	r15, r29
    2722:	ce 01       	movw	r24, r28
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    272c:	8e 01       	movw	r16, r28
    272e:	0f 5e       	subi	r16, 0xEF	; 239
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	ce 01       	movw	r24, r28
    2734:	05 96       	adiw	r24, 0x05	; 5
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	82 30       	cpi	r24, 0x02	; 2
    2740:	40 f0       	brcs	.+16     	; 0x2752 <__gtsf2+0x56>
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	82 30       	cpi	r24, 0x02	; 2
    2746:	28 f0       	brcs	.+10     	; 0x2752 <__gtsf2+0x56>
    2748:	c7 01       	movw	r24, r14
    274a:	b8 01       	movw	r22, r16
    274c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <__gtsf2+0x58>
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	68 96       	adiw	r28, 0x18	; 24
    2756:	e6 e0       	ldi	r30, 0x06	; 6
    2758:	0c 94 10 37 	jmp	0x6e20	; 0x6e20 <__epilogue_restores__+0x18>

0000275c <__gesf2>:
    275c:	a8 e1       	ldi	r26, 0x18	; 24
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e4 eb       	ldi	r30, 0xB4	; 180
    2762:	f3 e1       	ldi	r31, 0x13	; 19
    2764:	0c 94 f4 36 	jmp	0x6de8	; 0x6de8 <__prologue_saves__+0x18>
    2768:	69 83       	std	Y+1, r22	; 0x01
    276a:	7a 83       	std	Y+2, r23	; 0x02
    276c:	8b 83       	std	Y+3, r24	; 0x03
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	2d 83       	std	Y+5, r18	; 0x05
    2772:	3e 83       	std	Y+6, r19	; 0x06
    2774:	4f 83       	std	Y+7, r20	; 0x07
    2776:	58 87       	std	Y+8, r21	; 0x08
    2778:	89 e0       	ldi	r24, 0x09	; 9
    277a:	e8 2e       	mov	r14, r24
    277c:	f1 2c       	mov	r15, r1
    277e:	ec 0e       	add	r14, r28
    2780:	fd 1e       	adc	r15, r29
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	b7 01       	movw	r22, r14
    2788:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    278c:	8e 01       	movw	r16, r28
    278e:	0f 5e       	subi	r16, 0xEF	; 239
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	ce 01       	movw	r24, r28
    2794:	05 96       	adiw	r24, 0x05	; 5
    2796:	b8 01       	movw	r22, r16
    2798:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	40 f0       	brcs	.+16     	; 0x27b2 <__gesf2+0x56>
    27a2:	89 89       	ldd	r24, Y+17	; 0x11
    27a4:	82 30       	cpi	r24, 0x02	; 2
    27a6:	28 f0       	brcs	.+10     	; 0x27b2 <__gesf2+0x56>
    27a8:	c7 01       	movw	r24, r14
    27aa:	b8 01       	movw	r22, r16
    27ac:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <__gesf2+0x58>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	68 96       	adiw	r28, 0x18	; 24
    27b6:	e6 e0       	ldi	r30, 0x06	; 6
    27b8:	0c 94 10 37 	jmp	0x6e20	; 0x6e20 <__epilogue_restores__+0x18>

000027bc <__ltsf2>:
    27bc:	a8 e1       	ldi	r26, 0x18	; 24
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e4 ee       	ldi	r30, 0xE4	; 228
    27c2:	f3 e1       	ldi	r31, 0x13	; 19
    27c4:	0c 94 f4 36 	jmp	0x6de8	; 0x6de8 <__prologue_saves__+0x18>
    27c8:	69 83       	std	Y+1, r22	; 0x01
    27ca:	7a 83       	std	Y+2, r23	; 0x02
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	2d 83       	std	Y+5, r18	; 0x05
    27d2:	3e 83       	std	Y+6, r19	; 0x06
    27d4:	4f 83       	std	Y+7, r20	; 0x07
    27d6:	58 87       	std	Y+8, r21	; 0x08
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	e8 2e       	mov	r14, r24
    27dc:	f1 2c       	mov	r15, r1
    27de:	ec 0e       	add	r14, r28
    27e0:	fd 1e       	adc	r15, r29
    27e2:	ce 01       	movw	r24, r28
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	b7 01       	movw	r22, r14
    27e8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 5e       	subi	r16, 0xEF	; 239
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	ce 01       	movw	r24, r28
    27f4:	05 96       	adiw	r24, 0x05	; 5
    27f6:	b8 01       	movw	r22, r16
    27f8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	40 f0       	brcs	.+16     	; 0x2812 <__ltsf2+0x56>
    2802:	89 89       	ldd	r24, Y+17	; 0x11
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	28 f0       	brcs	.+10     	; 0x2812 <__ltsf2+0x56>
    2808:	c7 01       	movw	r24, r14
    280a:	b8 01       	movw	r22, r16
    280c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <__ltsf2+0x58>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	68 96       	adiw	r28, 0x18	; 24
    2816:	e6 e0       	ldi	r30, 0x06	; 6
    2818:	0c 94 10 37 	jmp	0x6e20	; 0x6e20 <__epilogue_restores__+0x18>

0000281c <__fixsfsi>:
    281c:	ac e0       	ldi	r26, 0x0C	; 12
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e4 e1       	ldi	r30, 0x14	; 20
    2822:	f4 e1       	ldi	r31, 0x14	; 20
    2824:	0c 94 f8 36 	jmp	0x6df0	; 0x6df0 <__prologue_saves__+0x20>
    2828:	69 83       	std	Y+1, r22	; 0x01
    282a:	7a 83       	std	Y+2, r23	; 0x02
    282c:	8b 83       	std	Y+3, r24	; 0x03
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	be 01       	movw	r22, r28
    2836:	6b 5f       	subi	r22, 0xFB	; 251
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	61 f1       	breq	.+88     	; 0x289c <__fixsfsi+0x80>
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	50 f1       	brcs	.+84     	; 0x289c <__fixsfsi+0x80>
    2848:	84 30       	cpi	r24, 0x04	; 4
    284a:	21 f4       	brne	.+8      	; 0x2854 <__fixsfsi+0x38>
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	88 23       	and	r24, r24
    2850:	51 f1       	breq	.+84     	; 0x28a6 <__fixsfsi+0x8a>
    2852:	2e c0       	rjmp	.+92     	; 0x28b0 <__fixsfsi+0x94>
    2854:	2f 81       	ldd	r18, Y+7	; 0x07
    2856:	38 85       	ldd	r19, Y+8	; 0x08
    2858:	37 fd       	sbrc	r19, 7
    285a:	20 c0       	rjmp	.+64     	; 0x289c <__fixsfsi+0x80>
    285c:	6e 81       	ldd	r22, Y+6	; 0x06
    285e:	2f 31       	cpi	r18, 0x1F	; 31
    2860:	31 05       	cpc	r19, r1
    2862:	1c f0       	brlt	.+6      	; 0x286a <__fixsfsi+0x4e>
    2864:	66 23       	and	r22, r22
    2866:	f9 f0       	breq	.+62     	; 0x28a6 <__fixsfsi+0x8a>
    2868:	23 c0       	rjmp	.+70     	; 0x28b0 <__fixsfsi+0x94>
    286a:	8e e1       	ldi	r24, 0x1E	; 30
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	82 1b       	sub	r24, r18
    2870:	93 0b       	sbc	r25, r19
    2872:	29 85       	ldd	r18, Y+9	; 0x09
    2874:	3a 85       	ldd	r19, Y+10	; 0x0a
    2876:	4b 85       	ldd	r20, Y+11	; 0x0b
    2878:	5c 85       	ldd	r21, Y+12	; 0x0c
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <__fixsfsi+0x68>
    287c:	56 95       	lsr	r21
    287e:	47 95       	ror	r20
    2880:	37 95       	ror	r19
    2882:	27 95       	ror	r18
    2884:	8a 95       	dec	r24
    2886:	d2 f7       	brpl	.-12     	; 0x287c <__fixsfsi+0x60>
    2888:	66 23       	and	r22, r22
    288a:	b1 f0       	breq	.+44     	; 0x28b8 <__fixsfsi+0x9c>
    288c:	50 95       	com	r21
    288e:	40 95       	com	r20
    2890:	30 95       	com	r19
    2892:	21 95       	neg	r18
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	4f 4f       	sbci	r20, 0xFF	; 255
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	0e c0       	rjmp	.+28     	; 0x28b8 <__fixsfsi+0x9c>
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	09 c0       	rjmp	.+18     	; 0x28b8 <__fixsfsi+0x9c>
    28a6:	2f ef       	ldi	r18, 0xFF	; 255
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f ef       	ldi	r20, 0xFF	; 255
    28ac:	5f e7       	ldi	r21, 0x7F	; 127
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <__fixsfsi+0x9c>
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e8       	ldi	r21, 0x80	; 128
    28b8:	b9 01       	movw	r22, r18
    28ba:	ca 01       	movw	r24, r20
    28bc:	2c 96       	adiw	r28, 0x0c	; 12
    28be:	e2 e0       	ldi	r30, 0x02	; 2
    28c0:	0c 94 14 37 	jmp	0x6e28	; 0x6e28 <__epilogue_restores__+0x20>

000028c4 <__pack_f>:
    28c4:	df 92       	push	r13
    28c6:	ef 92       	push	r14
    28c8:	ff 92       	push	r15
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	fc 01       	movw	r30, r24
    28d0:	e4 80       	ldd	r14, Z+4	; 0x04
    28d2:	f5 80       	ldd	r15, Z+5	; 0x05
    28d4:	06 81       	ldd	r16, Z+6	; 0x06
    28d6:	17 81       	ldd	r17, Z+7	; 0x07
    28d8:	d1 80       	ldd	r13, Z+1	; 0x01
    28da:	80 81       	ld	r24, Z
    28dc:	82 30       	cpi	r24, 0x02	; 2
    28de:	48 f4       	brcc	.+18     	; 0x28f2 <__pack_f+0x2e>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e1       	ldi	r26, 0x10	; 16
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e8 2a       	or	r14, r24
    28ea:	f9 2a       	or	r15, r25
    28ec:	0a 2b       	or	r16, r26
    28ee:	1b 2b       	or	r17, r27
    28f0:	a5 c0       	rjmp	.+330    	; 0x2a3c <__pack_f+0x178>
    28f2:	84 30       	cpi	r24, 0x04	; 4
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__pack_f+0x34>
    28f6:	9f c0       	rjmp	.+318    	; 0x2a36 <__pack_f+0x172>
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	21 f4       	brne	.+8      	; 0x2904 <__pack_f+0x40>
    28fc:	ee 24       	eor	r14, r14
    28fe:	ff 24       	eor	r15, r15
    2900:	87 01       	movw	r16, r14
    2902:	05 c0       	rjmp	.+10     	; 0x290e <__pack_f+0x4a>
    2904:	e1 14       	cp	r14, r1
    2906:	f1 04       	cpc	r15, r1
    2908:	01 05       	cpc	r16, r1
    290a:	11 05       	cpc	r17, r1
    290c:	19 f4       	brne	.+6      	; 0x2914 <__pack_f+0x50>
    290e:	e0 e0       	ldi	r30, 0x00	; 0
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	96 c0       	rjmp	.+300    	; 0x2a40 <__pack_f+0x17c>
    2914:	62 81       	ldd	r22, Z+2	; 0x02
    2916:	73 81       	ldd	r23, Z+3	; 0x03
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	62 38       	cpi	r22, 0x82	; 130
    291c:	79 07       	cpc	r23, r25
    291e:	0c f0       	brlt	.+2      	; 0x2922 <__pack_f+0x5e>
    2920:	5b c0       	rjmp	.+182    	; 0x29d8 <__pack_f+0x114>
    2922:	22 e8       	ldi	r18, 0x82	; 130
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	26 1b       	sub	r18, r22
    2928:	37 0b       	sbc	r19, r23
    292a:	2a 31       	cpi	r18, 0x1A	; 26
    292c:	31 05       	cpc	r19, r1
    292e:	2c f0       	brlt	.+10     	; 0x293a <__pack_f+0x76>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	2a c0       	rjmp	.+84     	; 0x298e <__pack_f+0xca>
    293a:	b8 01       	movw	r22, r16
    293c:	a7 01       	movw	r20, r14
    293e:	02 2e       	mov	r0, r18
    2940:	04 c0       	rjmp	.+8      	; 0x294a <__pack_f+0x86>
    2942:	76 95       	lsr	r23
    2944:	67 95       	ror	r22
    2946:	57 95       	ror	r21
    2948:	47 95       	ror	r20
    294a:	0a 94       	dec	r0
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <__pack_f+0x7e>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <__pack_f+0x9c>
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	aa 1f       	adc	r26, r26
    295e:	bb 1f       	adc	r27, r27
    2960:	2a 95       	dec	r18
    2962:	d2 f7       	brpl	.-12     	; 0x2958 <__pack_f+0x94>
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	a1 09       	sbc	r26, r1
    2968:	b1 09       	sbc	r27, r1
    296a:	8e 21       	and	r24, r14
    296c:	9f 21       	and	r25, r15
    296e:	a0 23       	and	r26, r16
    2970:	b1 23       	and	r27, r17
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	a1 05       	cpc	r26, r1
    2976:	b1 05       	cpc	r27, r1
    2978:	21 f0       	breq	.+8      	; 0x2982 <__pack_f+0xbe>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	9a 01       	movw	r18, r20
    2984:	ab 01       	movw	r20, r22
    2986:	28 2b       	or	r18, r24
    2988:	39 2b       	or	r19, r25
    298a:	4a 2b       	or	r20, r26
    298c:	5b 2b       	or	r21, r27
    298e:	da 01       	movw	r26, r20
    2990:	c9 01       	movw	r24, r18
    2992:	8f 77       	andi	r24, 0x7F	; 127
    2994:	90 70       	andi	r25, 0x00	; 0
    2996:	a0 70       	andi	r26, 0x00	; 0
    2998:	b0 70       	andi	r27, 0x00	; 0
    299a:	80 34       	cpi	r24, 0x40	; 64
    299c:	91 05       	cpc	r25, r1
    299e:	a1 05       	cpc	r26, r1
    29a0:	b1 05       	cpc	r27, r1
    29a2:	39 f4       	brne	.+14     	; 0x29b2 <__pack_f+0xee>
    29a4:	27 ff       	sbrs	r18, 7
    29a6:	09 c0       	rjmp	.+18     	; 0x29ba <__pack_f+0xf6>
    29a8:	20 5c       	subi	r18, 0xC0	; 192
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	4f 4f       	sbci	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <__pack_f+0xf6>
    29b2:	21 5c       	subi	r18, 0xC1	; 193
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	4f 4f       	sbci	r20, 0xFF	; 255
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	e0 e0       	ldi	r30, 0x00	; 0
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	20 30       	cpi	r18, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	3a 07       	cpc	r19, r26
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	4a 07       	cpc	r20, r26
    29c8:	a0 e4       	ldi	r26, 0x40	; 64
    29ca:	5a 07       	cpc	r21, r26
    29cc:	10 f0       	brcs	.+4      	; 0x29d2 <__pack_f+0x10e>
    29ce:	e1 e0       	ldi	r30, 0x01	; 1
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	79 01       	movw	r14, r18
    29d4:	8a 01       	movw	r16, r20
    29d6:	27 c0       	rjmp	.+78     	; 0x2a26 <__pack_f+0x162>
    29d8:	60 38       	cpi	r22, 0x80	; 128
    29da:	71 05       	cpc	r23, r1
    29dc:	64 f5       	brge	.+88     	; 0x2a36 <__pack_f+0x172>
    29de:	fb 01       	movw	r30, r22
    29e0:	e1 58       	subi	r30, 0x81	; 129
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	d8 01       	movw	r26, r16
    29e6:	c7 01       	movw	r24, r14
    29e8:	8f 77       	andi	r24, 0x7F	; 127
    29ea:	90 70       	andi	r25, 0x00	; 0
    29ec:	a0 70       	andi	r26, 0x00	; 0
    29ee:	b0 70       	andi	r27, 0x00	; 0
    29f0:	80 34       	cpi	r24, 0x40	; 64
    29f2:	91 05       	cpc	r25, r1
    29f4:	a1 05       	cpc	r26, r1
    29f6:	b1 05       	cpc	r27, r1
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <__pack_f+0x144>
    29fa:	e7 fe       	sbrs	r14, 7
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <__pack_f+0x154>
    29fe:	80 e4       	ldi	r24, 0x40	; 64
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__pack_f+0x14c>
    2a08:	8f e3       	ldi	r24, 0x3F	; 63
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e8 0e       	add	r14, r24
    2a12:	f9 1e       	adc	r15, r25
    2a14:	0a 1f       	adc	r16, r26
    2a16:	1b 1f       	adc	r17, r27
    2a18:	17 ff       	sbrs	r17, 7
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__pack_f+0x162>
    2a1c:	16 95       	lsr	r17
    2a1e:	07 95       	ror	r16
    2a20:	f7 94       	ror	r15
    2a22:	e7 94       	ror	r14
    2a24:	31 96       	adiw	r30, 0x01	; 1
    2a26:	87 e0       	ldi	r24, 0x07	; 7
    2a28:	16 95       	lsr	r17
    2a2a:	07 95       	ror	r16
    2a2c:	f7 94       	ror	r15
    2a2e:	e7 94       	ror	r14
    2a30:	8a 95       	dec	r24
    2a32:	d1 f7       	brne	.-12     	; 0x2a28 <__pack_f+0x164>
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <__pack_f+0x17c>
    2a36:	ee 24       	eor	r14, r14
    2a38:	ff 24       	eor	r15, r15
    2a3a:	87 01       	movw	r16, r14
    2a3c:	ef ef       	ldi	r30, 0xFF	; 255
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	6e 2f       	mov	r22, r30
    2a42:	67 95       	ror	r22
    2a44:	66 27       	eor	r22, r22
    2a46:	67 95       	ror	r22
    2a48:	90 2f       	mov	r25, r16
    2a4a:	9f 77       	andi	r25, 0x7F	; 127
    2a4c:	d7 94       	ror	r13
    2a4e:	dd 24       	eor	r13, r13
    2a50:	d7 94       	ror	r13
    2a52:	8e 2f       	mov	r24, r30
    2a54:	86 95       	lsr	r24
    2a56:	49 2f       	mov	r20, r25
    2a58:	46 2b       	or	r20, r22
    2a5a:	58 2f       	mov	r21, r24
    2a5c:	5d 29       	or	r21, r13
    2a5e:	b7 01       	movw	r22, r14
    2a60:	ca 01       	movw	r24, r20
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	08 95       	ret

00002a6e <__unpack_f>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	db 01       	movw	r26, r22
    2a72:	40 81       	ld	r20, Z
    2a74:	51 81       	ldd	r21, Z+1	; 0x01
    2a76:	22 81       	ldd	r18, Z+2	; 0x02
    2a78:	62 2f       	mov	r22, r18
    2a7a:	6f 77       	andi	r22, 0x7F	; 127
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	22 1f       	adc	r18, r18
    2a80:	22 27       	eor	r18, r18
    2a82:	22 1f       	adc	r18, r18
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	89 2f       	mov	r24, r25
    2a88:	88 0f       	add	r24, r24
    2a8a:	82 2b       	or	r24, r18
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	99 1f       	adc	r25, r25
    2a92:	99 27       	eor	r25, r25
    2a94:	99 1f       	adc	r25, r25
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	9c 93       	st	X, r25
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
    2a9c:	21 15       	cp	r18, r1
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	a9 f5       	brne	.+106    	; 0x2b0c <__unpack_f+0x9e>
    2aa2:	41 15       	cp	r20, r1
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	61 05       	cpc	r22, r1
    2aa8:	71 05       	cpc	r23, r1
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <__unpack_f+0x42>
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	37 c0       	rjmp	.+110    	; 0x2b1e <__unpack_f+0xb0>
    2ab0:	82 e8       	ldi	r24, 0x82	; 130
    2ab2:	9f ef       	ldi	r25, 0xFF	; 255
    2ab4:	13 96       	adiw	r26, 0x03	; 3
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
    2aba:	12 97       	sbiw	r26, 0x02	; 2
    2abc:	9a 01       	movw	r18, r20
    2abe:	ab 01       	movw	r20, r22
    2ac0:	67 e0       	ldi	r22, 0x07	; 7
    2ac2:	22 0f       	add	r18, r18
    2ac4:	33 1f       	adc	r19, r19
    2ac6:	44 1f       	adc	r20, r20
    2ac8:	55 1f       	adc	r21, r21
    2aca:	6a 95       	dec	r22
    2acc:	d1 f7       	brne	.-12     	; 0x2ac2 <__unpack_f+0x54>
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	8c 93       	st	X, r24
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <__unpack_f+0x80>
    2ad4:	22 0f       	add	r18, r18
    2ad6:	33 1f       	adc	r19, r19
    2ad8:	44 1f       	adc	r20, r20
    2ada:	55 1f       	adc	r21, r21
    2adc:	12 96       	adiw	r26, 0x02	; 2
    2ade:	8d 91       	ld	r24, X+
    2ae0:	9c 91       	ld	r25, X
    2ae2:	13 97       	sbiw	r26, 0x03	; 3
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	13 96       	adiw	r26, 0x03	; 3
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
    2aec:	12 97       	sbiw	r26, 0x02	; 2
    2aee:	20 30       	cpi	r18, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	38 07       	cpc	r19, r24
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	48 07       	cpc	r20, r24
    2af8:	80 e4       	ldi	r24, 0x40	; 64
    2afa:	58 07       	cpc	r21, r24
    2afc:	58 f3       	brcs	.-42     	; 0x2ad4 <__unpack_f+0x66>
    2afe:	14 96       	adiw	r26, 0x04	; 4
    2b00:	2d 93       	st	X+, r18
    2b02:	3d 93       	st	X+, r19
    2b04:	4d 93       	st	X+, r20
    2b06:	5c 93       	st	X, r21
    2b08:	17 97       	sbiw	r26, 0x07	; 7
    2b0a:	08 95       	ret
    2b0c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b0e:	31 05       	cpc	r19, r1
    2b10:	79 f4       	brne	.+30     	; 0x2b30 <__unpack_f+0xc2>
    2b12:	41 15       	cp	r20, r1
    2b14:	51 05       	cpc	r21, r1
    2b16:	61 05       	cpc	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	19 f4       	brne	.+6      	; 0x2b22 <__unpack_f+0xb4>
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	8c 93       	st	X, r24
    2b20:	08 95       	ret
    2b22:	64 ff       	sbrs	r22, 4
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <__unpack_f+0xbe>
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	8c 93       	st	X, r24
    2b2a:	12 c0       	rjmp	.+36     	; 0x2b50 <__unpack_f+0xe2>
    2b2c:	1c 92       	st	X, r1
    2b2e:	10 c0       	rjmp	.+32     	; 0x2b50 <__unpack_f+0xe2>
    2b30:	2f 57       	subi	r18, 0x7F	; 127
    2b32:	30 40       	sbci	r19, 0x00	; 0
    2b34:	13 96       	adiw	r26, 0x03	; 3
    2b36:	3c 93       	st	X, r19
    2b38:	2e 93       	st	-X, r18
    2b3a:	12 97       	sbiw	r26, 0x02	; 2
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	8c 93       	st	X, r24
    2b40:	87 e0       	ldi	r24, 0x07	; 7
    2b42:	44 0f       	add	r20, r20
    2b44:	55 1f       	adc	r21, r21
    2b46:	66 1f       	adc	r22, r22
    2b48:	77 1f       	adc	r23, r23
    2b4a:	8a 95       	dec	r24
    2b4c:	d1 f7       	brne	.-12     	; 0x2b42 <__unpack_f+0xd4>
    2b4e:	70 64       	ori	r23, 0x40	; 64
    2b50:	14 96       	adiw	r26, 0x04	; 4
    2b52:	4d 93       	st	X+, r20
    2b54:	5d 93       	st	X+, r21
    2b56:	6d 93       	st	X+, r22
    2b58:	7c 93       	st	X, r23
    2b5a:	17 97       	sbiw	r26, 0x07	; 7
    2b5c:	08 95       	ret

00002b5e <__fpcmp_parts_f>:
    2b5e:	1f 93       	push	r17
    2b60:	dc 01       	movw	r26, r24
    2b62:	fb 01       	movw	r30, r22
    2b64:	9c 91       	ld	r25, X
    2b66:	92 30       	cpi	r25, 0x02	; 2
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <__fpcmp_parts_f+0xe>
    2b6a:	47 c0       	rjmp	.+142    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b6c:	80 81       	ld	r24, Z
    2b6e:	82 30       	cpi	r24, 0x02	; 2
    2b70:	08 f4       	brcc	.+2      	; 0x2b74 <__fpcmp_parts_f+0x16>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b74:	94 30       	cpi	r25, 0x04	; 4
    2b76:	51 f4       	brne	.+20     	; 0x2b8c <__fpcmp_parts_f+0x2e>
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	1c 91       	ld	r17, X
    2b7c:	84 30       	cpi	r24, 0x04	; 4
    2b7e:	99 f5       	brne	.+102    	; 0x2be6 <__fpcmp_parts_f+0x88>
    2b80:	81 81       	ldd	r24, Z+1	; 0x01
    2b82:	68 2f       	mov	r22, r24
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	61 1b       	sub	r22, r17
    2b88:	71 09       	sbc	r23, r1
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <__fpcmp_parts_f+0xac>
    2b8c:	84 30       	cpi	r24, 0x04	; 4
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <__fpcmp_parts_f+0x3a>
    2b90:	92 30       	cpi	r25, 0x02	; 2
    2b92:	31 f4       	brne	.+12     	; 0x2ba0 <__fpcmp_parts_f+0x42>
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	b9 f1       	breq	.+110    	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2b98:	81 81       	ldd	r24, Z+1	; 0x01
    2b9a:	88 23       	and	r24, r24
    2b9c:	89 f1       	breq	.+98     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2b9e:	2d c0       	rjmp	.+90     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2ba0:	11 96       	adiw	r26, 0x01	; 1
    2ba2:	1c 91       	ld	r17, X
    2ba4:	11 97       	sbiw	r26, 0x01	; 1
    2ba6:	82 30       	cpi	r24, 0x02	; 2
    2ba8:	f1 f0       	breq	.+60     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2baa:	81 81       	ldd	r24, Z+1	; 0x01
    2bac:	18 17       	cp	r17, r24
    2bae:	d9 f4       	brne	.+54     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bb0:	12 96       	adiw	r26, 0x02	; 2
    2bb2:	2d 91       	ld	r18, X+
    2bb4:	3c 91       	ld	r19, X
    2bb6:	13 97       	sbiw	r26, 0x03	; 3
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	82 17       	cp	r24, r18
    2bbe:	93 07       	cpc	r25, r19
    2bc0:	94 f0       	brlt	.+36     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bc2:	28 17       	cp	r18, r24
    2bc4:	39 07       	cpc	r19, r25
    2bc6:	bc f0       	brlt	.+46     	; 0x2bf6 <__fpcmp_parts_f+0x98>
    2bc8:	14 96       	adiw	r26, 0x04	; 4
    2bca:	8d 91       	ld	r24, X+
    2bcc:	9d 91       	ld	r25, X+
    2bce:	0d 90       	ld	r0, X+
    2bd0:	bc 91       	ld	r27, X
    2bd2:	a0 2d       	mov	r26, r0
    2bd4:	24 81       	ldd	r18, Z+4	; 0x04
    2bd6:	35 81       	ldd	r19, Z+5	; 0x05
    2bd8:	46 81       	ldd	r20, Z+6	; 0x06
    2bda:	57 81       	ldd	r21, Z+7	; 0x07
    2bdc:	28 17       	cp	r18, r24
    2bde:	39 07       	cpc	r19, r25
    2be0:	4a 07       	cpc	r20, r26
    2be2:	5b 07       	cpc	r21, r27
    2be4:	18 f4       	brcc	.+6      	; 0x2bec <__fpcmp_parts_f+0x8e>
    2be6:	11 23       	and	r17, r17
    2be8:	41 f0       	breq	.+16     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2bea:	0a c0       	rjmp	.+20     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bec:	82 17       	cp	r24, r18
    2bee:	93 07       	cpc	r25, r19
    2bf0:	a4 07       	cpc	r26, r20
    2bf2:	b5 07       	cpc	r27, r21
    2bf4:	40 f4       	brcc	.+16     	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2bf6:	11 23       	and	r17, r17
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	7f ef       	ldi	r23, 0xFF	; 255
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	1f 91       	pop	r17
    2c0e:	08 95       	ret

00002c10 <ADC_Init>:
#include "ADC.h"

static u8 Read_Flag = 1 ;

void ADC_Init(ADC_Vref_type vref ,ADC_Scaler_type scaler) 
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <ADC_Init+0x6>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <ADC_Init+0x8>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	6a 83       	std	Y+2, r22	; 0x02
	switch(vref)
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	3c 83       	std	Y+4, r19	; 0x04
    2c28:	2b 83       	std	Y+3, r18	; 0x03
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2e:	81 30       	cpi	r24, 0x01	; 1
    2c30:	91 05       	cpc	r25, r1
    2c32:	c1 f0       	breq	.+48     	; 0x2c64 <ADC_Init+0x54>
    2c34:	2b 81       	ldd	r18, Y+3	; 0x03
    2c36:	3c 81       	ldd	r19, Y+4	; 0x04
    2c38:	22 30       	cpi	r18, 0x02	; 2
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	11 f1       	breq	.+68     	; 0x2c82 <ADC_Init+0x72>
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	61 f5       	brne	.+88     	; 0x2c9e <ADC_Init+0x8e>
	{
		case VREF_AREF :
		CLEAR_BIT(ADMUX , REFS0) ;
    2c46:	a7 e2       	ldi	r26, 0x27	; 39
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e7 e2       	ldi	r30, 0x27	; 39
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8f 7b       	andi	r24, 0xBF	; 191
    2c52:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX , REFS1) ; 
    2c54:	a7 e2       	ldi	r26, 0x27	; 39
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e7 e2       	ldi	r30, 0x27	; 39
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	8f 77       	andi	r24, 0x7F	; 127
    2c60:	8c 93       	st	X, r24
    2c62:	1d c0       	rjmp	.+58     	; 0x2c9e <ADC_Init+0x8e>
		break ;
		case VREF_AVCC :
        SET_BIT(ADMUX , REFS0) ;
    2c64:	a7 e2       	ldi	r26, 0x27	; 39
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e7 e2       	ldi	r30, 0x27	; 39
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	80 64       	ori	r24, 0x40	; 64
    2c70:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX , REFS1) ;
    2c72:	a7 e2       	ldi	r26, 0x27	; 39
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e7 e2       	ldi	r30, 0x27	; 39
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
    2c7e:	8c 93       	st	X, r24
    2c80:	0e c0       	rjmp	.+28     	; 0x2c9e <ADC_Init+0x8e>
		break ;
		case VREF_256 :
		SET_BIT(ADMUX , REFS0) ;
    2c82:	a7 e2       	ldi	r26, 0x27	; 39
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e7 e2       	ldi	r30, 0x27	; 39
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 64       	ori	r24, 0x40	; 64
    2c8e:	8c 93       	st	X, r24
		SET_BIT(ADMUX , REFS1) ;
    2c90:	a7 e2       	ldi	r26, 0x27	; 39
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e7 e2       	ldi	r30, 0x27	; 39
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 68       	ori	r24, 0x80	; 128
    2c9c:	8c 93       	st	X, r24
		
	}
	// prescaler 
	/* if we use switch case we have 8 probablities  and every one take  3 instruction so make 24 instruction
	  we can replace it for  speed  */ 
	ADCSRA &= 0xf8 ; // here we clear first 3 bits that responsible for prescaler to avoid or with one 
    2c9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e6 e2       	ldi	r30, 0x26	; 38
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 7f       	andi	r24, 0xF8	; 248
    2caa:	8c 93       	st	X, r24
	ADCSRA |= scaler ;
    2cac:	a6 e2       	ldi	r26, 0x26	; 38
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e6 e2       	ldi	r30, 0x26	; 38
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	90 81       	ld	r25, Z
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	89 2b       	or	r24, r25
    2cba:	8c 93       	st	X, r24
	
	//READING ADJUST 
	CLEAR_BIT(ADMUX ,ADLAR) ;  // ordinary way
    2cbc:	a7 e2       	ldi	r26, 0x27	; 39
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e7 e2       	ldi	r30, 0x27	; 39
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 7d       	andi	r24, 0xDF	; 223
    2cc8:	8c 93       	st	X, r24
	//enable
	SET_BIT(ADCSRA , ADEN) ;
    2cca:	a6 e2       	ldi	r26, 0x26	; 38
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e6 e2       	ldi	r30, 0x26	; 38
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 68       	ori	r24, 0x80	; 128
    2cd6:	8c 93       	st	X, r24
	
	
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <ADC_Read>:

u16 ADC_Read(ADC_Channel_type channel ) 
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	//select channel 
	ADMUX &= 0xe0 ; //0b111
    2cf2:	a7 e2       	ldi	r26, 0x27	; 39
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e7 e2       	ldi	r30, 0x27	; 39
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 7e       	andi	r24, 0xE0	; 224
    2cfe:	8c 93       	st	X, r24
	ADMUX |= channel ;
    2d00:	a7 e2       	ldi	r26, 0x27	; 39
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e7 e2       	ldi	r30, 0x27	; 39
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	90 81       	ld	r25, Z
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	89 2b       	or	r24, r25
    2d0e:	8c 93       	st	X, r24
	// start conversion 
	SET_BIT(ADCSRA , ADSC) ;
    2d10:	a6 e2       	ldi	r26, 0x26	; 38
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e6 e2       	ldi	r30, 0x26	; 38
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	80 64       	ori	r24, 0x40	; 64
    2d1c:	8c 93       	st	X, r24
	while(READ_BIT(ADCSRA , ADSC)) ; //busy wait polling
    2d1e:	e6 e2       	ldi	r30, 0x26	; 38
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	82 95       	swap	r24
    2d26:	86 95       	lsr	r24
    2d28:	86 95       	lsr	r24
    2d2a:	83 70       	andi	r24, 0x03	; 3
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	81 70       	andi	r24, 0x01	; 1
    2d32:	90 70       	andi	r25, 0x00	; 0
    2d34:	88 23       	and	r24, r24
    2d36:	99 f7       	brne	.-26     	; 0x2d1e <ADC_Read+0x38>
	//reading 
	return ADC ;
    2d38:	e4 e2       	ldi	r30, 0x24	; 36
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <ADC_StartConversion>:

void ADC_StartConversion (ADC_Channel_type channel)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	0f 92       	push	r0
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	89 83       	std	Y+1, r24	; 0x01
	if(Read_Flag == 1)
    2d54:	80 91 7a 01 	lds	r24, 0x017A
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	c1 f4       	brne	.+48     	; 0x2d8c <ADC_StartConversion+0x44>
	{
		//select channel
		ADMUX &= 0xe0 ; //0b111
    2d5c:	a7 e2       	ldi	r26, 0x27	; 39
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	e7 e2       	ldi	r30, 0x27	; 39
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	80 81       	ld	r24, Z
    2d66:	80 7e       	andi	r24, 0xE0	; 224
    2d68:	8c 93       	st	X, r24
		ADMUX |= channel ;
    2d6a:	a7 e2       	ldi	r26, 0x27	; 39
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	e7 e2       	ldi	r30, 0x27	; 39
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	90 81       	ld	r25, Z
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	89 2b       	or	r24, r25
    2d78:	8c 93       	st	X, r24
		// start conversion
		SET_BIT(ADCSRA , ADSC) ;
    2d7a:	a6 e2       	ldi	r26, 0x26	; 38
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e6 e2       	ldi	r30, 0x26	; 38
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	80 64       	ori	r24, 0x40	; 64
    2d86:	8c 93       	st	X, r24
		Read_Flag = 0 ;
    2d88:	10 92 7a 01 	sts	0x017A, r1
	}
	
}  
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <ADC_GetRead>:
u16 ADC_GetRead (void)
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
	while(READ_BIT(ADCSRA ,ADSC)) ;
    2d9c:	e6 e2       	ldi	r30, 0x26	; 38
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	82 95       	swap	r24
    2da4:	86 95       	lsr	r24
    2da6:	86 95       	lsr	r24
    2da8:	83 70       	andi	r24, 0x03	; 3
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	81 70       	andi	r24, 0x01	; 1
    2db0:	90 70       	andi	r25, 0x00	; 0
    2db2:	88 23       	and	r24, r24
    2db4:	99 f7       	brne	.-26     	; 0x2d9c <ADC_GetRead+0x8>
	return ADC ;
    2db6:	e4 e2       	ldi	r30, 0x24	; 36
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	80 81       	ld	r24, Z
    2dbc:	91 81       	ldd	r25, Z+1	; 0x01
}
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <ADC_GetRead_NOBLOCK>:

u8 ADC_GetRead_NOBLOCK (u16 *pdata)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <ADC_GetRead_NOBLOCK+0x6>
    2dca:	0f 92       	push	r0
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	9b 83       	std	Y+3, r25	; 0x03
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
	u8 status = 0 ; 
    2dd4:	19 82       	std	Y+1, r1	; 0x01
	if(READ_BIT(ADCSRA ,ADSC)==0)
    2dd6:	e6 e2       	ldi	r30, 0x26	; 38
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	82 95       	swap	r24
    2dde:	86 95       	lsr	r24
    2de0:	86 95       	lsr	r24
    2de2:	83 70       	andi	r24, 0x03	; 3
    2de4:	88 2f       	mov	r24, r24
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	81 70       	andi	r24, 0x01	; 1
    2dea:	90 70       	andi	r25, 0x00	; 0
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	69 f4       	brne	.+26     	; 0x2e0a <ADC_GetRead_NOBLOCK+0x46>
	{
		*pdata = ADC ; 
    2df0:	e4 e2       	ldi	r30, 0x24	; 36
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	91 81       	ldd	r25, Z+1	; 0x01
    2df8:	ea 81       	ldd	r30, Y+2	; 0x02
    2dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    2dfc:	91 83       	std	Z+1, r25	; 0x01
    2dfe:	80 83       	st	Z, r24
		status = 1 ; 
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	89 83       	std	Y+1, r24	; 0x01
		Read_Flag = 1 ; //to repeat start conversion 
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	80 93 7a 01 	sts	0x017A, r24
	}
	return status ;
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	cf 91       	pop	r28
    2e14:	df 91       	pop	r29
    2e16:	08 95       	ret

00002e18 <DIO_InitPin>:
	
	
}*/

static void DIO_InitPin (DIO_Pin_type pin , DIO_Pin_Status_Type status)  
{
    2e18:	df 93       	push	r29
    2e1a:	cf 93       	push	r28
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	2c 97       	sbiw	r28, 0x0c	; 12
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
    2e2e:	6c 83       	std	Y+4, r22	; 0x04
	  void DIO_InitPin (DIO_Port_type port , u8 pnum , DIO_Pin_Status_Type status) to
	  void DIO_InitPin (DIO_Pin_type pin , DIO_Pin_Status_Type status)
	  without changing implementation   */


	u8 pnum = pin %8 ;
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	87 70       	andi	r24, 0x07	; 7
    2e34:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin /8 ;
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	86 95       	lsr	r24
    2e3a:	86 95       	lsr	r24
    2e3c:	86 95       	lsr	r24
    2e3e:	89 83       	std	Y+1, r24	; 0x01
	
	switch(status)
    2e40:	8c 81       	ldd	r24, Y+4	; 0x04
    2e42:	28 2f       	mov	r18, r24
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	3c 87       	std	Y+12, r19	; 0x0c
    2e48:	2b 87       	std	Y+11, r18	; 0x0b
    2e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e4e:	81 30       	cpi	r24, 0x01	; 1
    2e50:	91 05       	cpc	r25, r1
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <DIO_InitPin+0x3e>
    2e54:	7a c0       	rjmp	.+244    	; 0x2f4a <DIO_InitPin+0x132>
    2e56:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e58:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e5a:	22 30       	cpi	r18, 0x02	; 2
    2e5c:	31 05       	cpc	r19, r1
    2e5e:	09 f4       	brne	.+2      	; 0x2e62 <DIO_InitPin+0x4a>
    2e60:	36 c1       	rjmp	.+620    	; 0x30ce <DIO_InitPin+0x2b6>
    2e62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	09 f0       	breq	.+2      	; 0x2e6c <DIO_InitPin+0x54>
    2e6a:	ee c1       	rjmp	.+988    	; 0x3248 <DIO_InitPin+0x430>
	{
		case OUTPUT :
		switch(port)
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	3a 87       	std	Y+10, r19	; 0x0a
    2e74:	29 87       	std	Y+9, r18	; 0x09
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	81 30       	cpi	r24, 0x01	; 1
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	49 f1       	breq	.+82     	; 0x2ed2 <DIO_InitPin+0xba>
    2e80:	29 85       	ldd	r18, Y+9	; 0x09
    2e82:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e84:	22 30       	cpi	r18, 0x02	; 2
    2e86:	31 05       	cpc	r19, r1
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <DIO_InitPin+0x7c>
    2e8a:	89 85       	ldd	r24, Y+9	; 0x09
    2e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	61 f0       	breq	.+24     	; 0x2eaa <DIO_InitPin+0x92>
    2e92:	da c1       	rjmp	.+948    	; 0x3248 <DIO_InitPin+0x430>
    2e94:	29 85       	ldd	r18, Y+9	; 0x09
    2e96:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e98:	22 30       	cpi	r18, 0x02	; 2
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	71 f1       	breq	.+92     	; 0x2efa <DIO_InitPin+0xe2>
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	83 30       	cpi	r24, 0x03	; 3
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	e9 f1       	breq	.+122    	; 0x2f22 <DIO_InitPin+0x10a>
    2ea8:	cf c1       	rjmp	.+926    	; 0x3248 <DIO_InitPin+0x430>
		{
			case PA :
			SET_BIT(DDRA , pnum) ;
    2eaa:	aa e3       	ldi	r26, 0x3A	; 58
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	ea e3       	ldi	r30, 0x3A	; 58
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	48 2f       	mov	r20, r24
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	02 2e       	mov	r0, r18
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <DIO_InitPin+0xb0>
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	0a 94       	dec	r0
    2eca:	e2 f7       	brpl	.-8      	; 0x2ec4 <DIO_InitPin+0xac>
    2ecc:	84 2b       	or	r24, r20
    2ece:	8c 93       	st	X, r24
    2ed0:	bb c1       	rjmp	.+886    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PB :
			SET_BIT(DDRB , pnum) ;
    2ed2:	a7 e3       	ldi	r26, 0x37	; 55
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e7 e3       	ldi	r30, 0x37	; 55
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	48 2f       	mov	r20, r24
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	02 2e       	mov	r0, r18
    2eea:	02 c0       	rjmp	.+4      	; 0x2ef0 <DIO_InitPin+0xd8>
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	0a 94       	dec	r0
    2ef2:	e2 f7       	brpl	.-8      	; 0x2eec <DIO_InitPin+0xd4>
    2ef4:	84 2b       	or	r24, r20
    2ef6:	8c 93       	st	X, r24
    2ef8:	a7 c1       	rjmp	.+846    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PC :
			SET_BIT(DDRC , pnum) ;
    2efa:	a4 e3       	ldi	r26, 0x34	; 52
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e4 e3       	ldi	r30, 0x34	; 52
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	48 2f       	mov	r20, r24
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	28 2f       	mov	r18, r24
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	02 2e       	mov	r0, r18
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <DIO_InitPin+0x100>
    2f14:	88 0f       	add	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	0a 94       	dec	r0
    2f1a:	e2 f7       	brpl	.-8      	; 0x2f14 <DIO_InitPin+0xfc>
    2f1c:	84 2b       	or	r24, r20
    2f1e:	8c 93       	st	X, r24
    2f20:	93 c1       	rjmp	.+806    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PD :
			SET_BIT(DDRD , pnum) ;
    2f22:	a1 e3       	ldi	r26, 0x31	; 49
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e1 e3       	ldi	r30, 0x31	; 49
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	48 2f       	mov	r20, r24
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	02 2e       	mov	r0, r18
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <DIO_InitPin+0x128>
    2f3c:	88 0f       	add	r24, r24
    2f3e:	99 1f       	adc	r25, r25
    2f40:	0a 94       	dec	r0
    2f42:	e2 f7       	brpl	.-8      	; 0x2f3c <DIO_InitPin+0x124>
    2f44:	84 2b       	or	r24, r20
    2f46:	8c 93       	st	X, r24
    2f48:	7f c1       	rjmp	.+766    	; 0x3248 <DIO_InitPin+0x430>
			break ;
		}
		break ;
		
		case INFREE :
		switch(port)
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	38 87       	std	Y+8, r19	; 0x08
    2f52:	2f 83       	std	Y+7, r18	; 0x07
    2f54:	8f 81       	ldd	r24, Y+7	; 0x07
    2f56:	98 85       	ldd	r25, Y+8	; 0x08
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <DIO_InitPin+0x148>
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <DIO_InitPin+0x1c6>
    2f60:	2f 81       	ldd	r18, Y+7	; 0x07
    2f62:	38 85       	ldd	r19, Y+8	; 0x08
    2f64:	22 30       	cpi	r18, 0x02	; 2
    2f66:	31 05       	cpc	r19, r1
    2f68:	2c f4       	brge	.+10     	; 0x2f74 <DIO_InitPin+0x15c>
    2f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6c:	98 85       	ldd	r25, Y+8	; 0x08
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	71 f0       	breq	.+28     	; 0x2f8e <DIO_InitPin+0x176>
    2f72:	6a c1       	rjmp	.+724    	; 0x3248 <DIO_InitPin+0x430>
    2f74:	2f 81       	ldd	r18, Y+7	; 0x07
    2f76:	38 85       	ldd	r19, Y+8	; 0x08
    2f78:	22 30       	cpi	r18, 0x02	; 2
    2f7a:	31 05       	cpc	r19, r1
    2f7c:	09 f4       	brne	.+2      	; 0x2f80 <DIO_InitPin+0x168>
    2f7e:	57 c0       	rjmp	.+174    	; 0x302e <DIO_InitPin+0x216>
    2f80:	8f 81       	ldd	r24, Y+7	; 0x07
    2f82:	98 85       	ldd	r25, Y+8	; 0x08
    2f84:	83 30       	cpi	r24, 0x03	; 3
    2f86:	91 05       	cpc	r25, r1
    2f88:	09 f4       	brne	.+2      	; 0x2f8c <DIO_InitPin+0x174>
    2f8a:	79 c0       	rjmp	.+242    	; 0x307e <DIO_InitPin+0x266>
    2f8c:	5d c1       	rjmp	.+698    	; 0x3248 <DIO_InitPin+0x430>
		{
			case PA :
			CLEAR_BIT(DDRA , pnum) ;
    2f8e:	aa e3       	ldi	r26, 0x3A	; 58
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	ea e3       	ldi	r30, 0x3A	; 58
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	48 2f       	mov	r20, r24
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <DIO_InitPin+0x192>
    2fa6:	88 0f       	add	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	2a 95       	dec	r18
    2fac:	e2 f7       	brpl	.-8      	; 0x2fa6 <DIO_InitPin+0x18e>
    2fae:	80 95       	com	r24
    2fb0:	84 23       	and	r24, r20
    2fb2:	8c 93       	st	X, r24
			//i do not depend on initial status because may be changed in other place
			CLEAR_BIT(PORTA , pnum) ;
    2fb4:	ab e3       	ldi	r26, 0x3B	; 59
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	eb e3       	ldi	r30, 0x3B	; 59
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	28 2f       	mov	r18, r24
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	02 2e       	mov	r0, r18
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <DIO_InitPin+0x1ba>
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	0a 94       	dec	r0
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <DIO_InitPin+0x1b6>
    2fd6:	80 95       	com	r24
    2fd8:	84 23       	and	r24, r20
    2fda:	8c 93       	st	X, r24
    2fdc:	35 c1       	rjmp	.+618    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PB :
			CLEAR_BIT(DDRB , pnum) ;
    2fde:	a7 e3       	ldi	r26, 0x37	; 55
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	e7 e3       	ldi	r30, 0x37	; 55
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	48 2f       	mov	r20, r24
    2fea:	8a 81       	ldd	r24, Y+2	; 0x02
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <DIO_InitPin+0x1e2>
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	2a 95       	dec	r18
    2ffc:	e2 f7       	brpl	.-8      	; 0x2ff6 <DIO_InitPin+0x1de>
    2ffe:	80 95       	com	r24
    3000:	84 23       	and	r24, r20
    3002:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB , pnum) ;
    3004:	a8 e3       	ldi	r26, 0x38	; 56
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e8 e3       	ldi	r30, 0x38	; 56
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	48 2f       	mov	r20, r24
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	02 2e       	mov	r0, r18
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <DIO_InitPin+0x20a>
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	0a 94       	dec	r0
    3024:	e2 f7       	brpl	.-8      	; 0x301e <DIO_InitPin+0x206>
    3026:	80 95       	com	r24
    3028:	84 23       	and	r24, r20
    302a:	8c 93       	st	X, r24
    302c:	0d c1       	rjmp	.+538    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PC :
			CLEAR_BIT(DDRC , pnum) ;
    302e:	a4 e3       	ldi	r26, 0x34	; 52
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e4 e3       	ldi	r30, 0x34	; 52
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	48 2f       	mov	r20, r24
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	02 c0       	rjmp	.+4      	; 0x304a <DIO_InitPin+0x232>
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	2a 95       	dec	r18
    304c:	e2 f7       	brpl	.-8      	; 0x3046 <DIO_InitPin+0x22e>
    304e:	80 95       	com	r24
    3050:	84 23       	and	r24, r20
    3052:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC , pnum) ;
    3054:	a5 e3       	ldi	r26, 0x35	; 53
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e5 e3       	ldi	r30, 0x35	; 53
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	48 2f       	mov	r20, r24
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	28 2f       	mov	r18, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	02 2e       	mov	r0, r18
    306c:	02 c0       	rjmp	.+4      	; 0x3072 <DIO_InitPin+0x25a>
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	0a 94       	dec	r0
    3074:	e2 f7       	brpl	.-8      	; 0x306e <DIO_InitPin+0x256>
    3076:	80 95       	com	r24
    3078:	84 23       	and	r24, r20
    307a:	8c 93       	st	X, r24
    307c:	e5 c0       	rjmp	.+458    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PD :
	        CLEAR_BIT(DDRD , pnum) ;
    307e:	a1 e3       	ldi	r26, 0x31	; 49
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e1 e3       	ldi	r30, 0x31	; 49
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	48 2f       	mov	r20, r24
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	28 2f       	mov	r18, r24
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	02 c0       	rjmp	.+4      	; 0x309a <DIO_InitPin+0x282>
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	2a 95       	dec	r18
    309c:	e2 f7       	brpl	.-8      	; 0x3096 <DIO_InitPin+0x27e>
    309e:	80 95       	com	r24
    30a0:	84 23       	and	r24, r20
    30a2:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD , pnum) ;
    30a4:	a2 e3       	ldi	r26, 0x32	; 50
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	e2 e3       	ldi	r30, 0x32	; 50
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	48 2f       	mov	r20, r24
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	28 2f       	mov	r18, r24
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	02 2e       	mov	r0, r18
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <DIO_InitPin+0x2aa>
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	0a 94       	dec	r0
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <DIO_InitPin+0x2a6>
    30c6:	80 95       	com	r24
    30c8:	84 23       	and	r24, r20
    30ca:	8c 93       	st	X, r24
    30cc:	bd c0       	rjmp	.+378    	; 0x3248 <DIO_InitPin+0x430>
			break ;
		}
		break ;
		case INPULL :
		switch(port)
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	28 2f       	mov	r18, r24
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	3e 83       	std	Y+6, r19	; 0x06
    30d6:	2d 83       	std	Y+5, r18	; 0x05
    30d8:	8d 81       	ldd	r24, Y+5	; 0x05
    30da:	9e 81       	ldd	r25, Y+6	; 0x06
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	91 05       	cpc	r25, r1
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <DIO_InitPin+0x2cc>
    30e2:	3e c0       	rjmp	.+124    	; 0x3160 <DIO_InitPin+0x348>
    30e4:	2d 81       	ldd	r18, Y+5	; 0x05
    30e6:	3e 81       	ldd	r19, Y+6	; 0x06
    30e8:	22 30       	cpi	r18, 0x02	; 2
    30ea:	31 05       	cpc	r19, r1
    30ec:	2c f4       	brge	.+10     	; 0x30f8 <DIO_InitPin+0x2e0>
    30ee:	8d 81       	ldd	r24, Y+5	; 0x05
    30f0:	9e 81       	ldd	r25, Y+6	; 0x06
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	71 f0       	breq	.+28     	; 0x3112 <DIO_InitPin+0x2fa>
    30f6:	a8 c0       	rjmp	.+336    	; 0x3248 <DIO_InitPin+0x430>
    30f8:	2d 81       	ldd	r18, Y+5	; 0x05
    30fa:	3e 81       	ldd	r19, Y+6	; 0x06
    30fc:	22 30       	cpi	r18, 0x02	; 2
    30fe:	31 05       	cpc	r19, r1
    3100:	09 f4       	brne	.+2      	; 0x3104 <DIO_InitPin+0x2ec>
    3102:	55 c0       	rjmp	.+170    	; 0x31ae <DIO_InitPin+0x396>
    3104:	8d 81       	ldd	r24, Y+5	; 0x05
    3106:	9e 81       	ldd	r25, Y+6	; 0x06
    3108:	83 30       	cpi	r24, 0x03	; 3
    310a:	91 05       	cpc	r25, r1
    310c:	09 f4       	brne	.+2      	; 0x3110 <DIO_InitPin+0x2f8>
    310e:	76 c0       	rjmp	.+236    	; 0x31fc <DIO_InitPin+0x3e4>
    3110:	9b c0       	rjmp	.+310    	; 0x3248 <DIO_InitPin+0x430>
		{
			case PA :
			CLEAR_BIT(DDRA , pnum) ;
    3112:	aa e3       	ldi	r26, 0x3A	; 58
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	ea e3       	ldi	r30, 0x3A	; 58
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	48 2f       	mov	r20, r24
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	28 2f       	mov	r18, r24
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	02 c0       	rjmp	.+4      	; 0x312e <DIO_InitPin+0x316>
    312a:	88 0f       	add	r24, r24
    312c:	99 1f       	adc	r25, r25
    312e:	2a 95       	dec	r18
    3130:	e2 f7       	brpl	.-8      	; 0x312a <DIO_InitPin+0x312>
    3132:	80 95       	com	r24
    3134:	84 23       	and	r24, r20
    3136:	8c 93       	st	X, r24
			SET_BIT(PORTA , pnum) ;
    3138:	ab e3       	ldi	r26, 0x3B	; 59
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	eb e3       	ldi	r30, 0x3B	; 59
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	48 2f       	mov	r20, r24
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	28 2f       	mov	r18, r24
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	02 2e       	mov	r0, r18
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <DIO_InitPin+0x33e>
    3152:	88 0f       	add	r24, r24
    3154:	99 1f       	adc	r25, r25
    3156:	0a 94       	dec	r0
    3158:	e2 f7       	brpl	.-8      	; 0x3152 <DIO_InitPin+0x33a>
    315a:	84 2b       	or	r24, r20
    315c:	8c 93       	st	X, r24
    315e:	74 c0       	rjmp	.+232    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PB :
			CLEAR_BIT(DDRB , pnum) ;
    3160:	a7 e3       	ldi	r26, 0x37	; 55
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	e7 e3       	ldi	r30, 0x37	; 55
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	48 2f       	mov	r20, r24
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	02 c0       	rjmp	.+4      	; 0x317c <DIO_InitPin+0x364>
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	2a 95       	dec	r18
    317e:	e2 f7       	brpl	.-8      	; 0x3178 <DIO_InitPin+0x360>
    3180:	80 95       	com	r24
    3182:	84 23       	and	r24, r20
    3184:	8c 93       	st	X, r24
			SET_BIT(PORTB , pnum) ;
    3186:	a8 e3       	ldi	r26, 0x38	; 56
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e8 e3       	ldi	r30, 0x38	; 56
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	48 2f       	mov	r20, r24
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	02 2e       	mov	r0, r18
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <DIO_InitPin+0x38c>
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	0a 94       	dec	r0
    31a6:	e2 f7       	brpl	.-8      	; 0x31a0 <DIO_InitPin+0x388>
    31a8:	84 2b       	or	r24, r20
    31aa:	8c 93       	st	X, r24
    31ac:	4d c0       	rjmp	.+154    	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PC :
			CLEAR_BIT(DDRC , pnum) ;
    31ae:	a4 e3       	ldi	r26, 0x34	; 52
    31b0:	b0 e0       	ldi	r27, 0x00	; 0
    31b2:	e4 e3       	ldi	r30, 0x34	; 52
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	80 81       	ld	r24, Z
    31b8:	48 2f       	mov	r20, r24
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	02 c0       	rjmp	.+4      	; 0x31ca <DIO_InitPin+0x3b2>
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	2a 95       	dec	r18
    31cc:	e2 f7       	brpl	.-8      	; 0x31c6 <DIO_InitPin+0x3ae>
    31ce:	80 95       	com	r24
    31d0:	84 23       	and	r24, r20
    31d2:	8c 93       	st	X, r24
			SET_BIT(PORTC , pnum) ;
    31d4:	a5 e3       	ldi	r26, 0x35	; 53
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e5 e3       	ldi	r30, 0x35	; 53
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	48 2f       	mov	r20, r24
    31e0:	8a 81       	ldd	r24, Y+2	; 0x02
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	02 2e       	mov	r0, r18
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <DIO_InitPin+0x3da>
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	0a 94       	dec	r0
    31f4:	e2 f7       	brpl	.-8      	; 0x31ee <DIO_InitPin+0x3d6>
    31f6:	84 2b       	or	r24, r20
    31f8:	8c 93       	st	X, r24
    31fa:	26 c0       	rjmp	.+76     	; 0x3248 <DIO_InitPin+0x430>
			break ;
			case PD :
			CLEAR_BIT(DDRD , pnum) ;
    31fc:	a1 e3       	ldi	r26, 0x31	; 49
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	e1 e3       	ldi	r30, 0x31	; 49
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	48 2f       	mov	r20, r24
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	28 2f       	mov	r18, r24
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <DIO_InitPin+0x400>
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	2a 95       	dec	r18
    321a:	e2 f7       	brpl	.-8      	; 0x3214 <DIO_InitPin+0x3fc>
    321c:	80 95       	com	r24
    321e:	84 23       	and	r24, r20
    3220:	8c 93       	st	X, r24
			SET_BIT(PORTD , pnum) ;
    3222:	a2 e3       	ldi	r26, 0x32	; 50
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	e2 e3       	ldi	r30, 0x32	; 50
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	48 2f       	mov	r20, r24
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	02 2e       	mov	r0, r18
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <DIO_InitPin+0x428>
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	0a 94       	dec	r0
    3242:	e2 f7       	brpl	.-8      	; 0x323c <DIO_InitPin+0x424>
    3244:	84 2b       	or	r24, r20
    3246:	8c 93       	st	X, r24
	DIO_InitPin(PC,1,INPULL) ;
	DIO_InitPin(PD ,0,INPULL) ;
	old design.....       */
	
	
}
    3248:	2c 96       	adiw	r28, 0x0c	; 12
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <DIO_WritePIN>:




void DIO_WritePIN (DIO_Pin_type pin ,DIO_PinVoltage_type volt) 
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	28 97       	sbiw	r28, 0x08	; 8
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	8b 83       	std	Y+3, r24	; 0x03
    3270:	6c 83       	std	Y+4, r22	; 0x04
	  i only add these two lines to change design from 
      void DIO_WritePIN (DIO_Port_type port ,u8 pnum ,DIO_PinVoltage_type volt) to
      void DIO_WritePIN (DIO_Pin_type pin ,DIO_PinVoltage_type volt)
	  without changing implementation   */

	u8 pnum = pin %8 ;
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	87 70       	andi	r24, 0x07	; 7
    3276:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin/8 ;
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	86 95       	lsr	r24
    327c:	86 95       	lsr	r24
    327e:	86 95       	lsr	r24
    3280:	89 83       	std	Y+1, r24	; 0x01
	
	//when you using a pin you need a volt 
	// here i use to make volt to be a main checker because it has a less probablities and use if without switch because it has only 2 porabablitity
	if(volt == HIGH)
    3282:	8c 81       	ldd	r24, Y+4	; 0x04
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	09 f0       	breq	.+2      	; 0x328a <DIO_WritePIN+0x30>
    3288:	6f c0       	rjmp	.+222    	; 0x3368 <DIO_WritePIN+0x10e>
	{
		switch(port)
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	38 87       	std	Y+8, r19	; 0x08
    3292:	2f 83       	std	Y+7, r18	; 0x07
    3294:	8f 81       	ldd	r24, Y+7	; 0x07
    3296:	98 85       	ldd	r25, Y+8	; 0x08
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	91 05       	cpc	r25, r1
    329c:	49 f1       	breq	.+82     	; 0x32f0 <DIO_WritePIN+0x96>
    329e:	2f 81       	ldd	r18, Y+7	; 0x07
    32a0:	38 85       	ldd	r19, Y+8	; 0x08
    32a2:	22 30       	cpi	r18, 0x02	; 2
    32a4:	31 05       	cpc	r19, r1
    32a6:	2c f4       	brge	.+10     	; 0x32b2 <DIO_WritePIN+0x58>
    32a8:	8f 81       	ldd	r24, Y+7	; 0x07
    32aa:	98 85       	ldd	r25, Y+8	; 0x08
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	61 f0       	breq	.+24     	; 0x32c8 <DIO_WritePIN+0x6e>
    32b0:	d2 c0       	rjmp	.+420    	; 0x3456 <DIO_WritePIN+0x1fc>
    32b2:	2f 81       	ldd	r18, Y+7	; 0x07
    32b4:	38 85       	ldd	r19, Y+8	; 0x08
    32b6:	22 30       	cpi	r18, 0x02	; 2
    32b8:	31 05       	cpc	r19, r1
    32ba:	71 f1       	breq	.+92     	; 0x3318 <DIO_WritePIN+0xbe>
    32bc:	8f 81       	ldd	r24, Y+7	; 0x07
    32be:	98 85       	ldd	r25, Y+8	; 0x08
    32c0:	83 30       	cpi	r24, 0x03	; 3
    32c2:	91 05       	cpc	r25, r1
    32c4:	e9 f1       	breq	.+122    	; 0x3340 <DIO_WritePIN+0xe6>
    32c6:	c7 c0       	rjmp	.+398    	; 0x3456 <DIO_WritePIN+0x1fc>
		{
			case PA :
			SET_BIT(PORTA , pnum) ;
    32c8:	ab e3       	ldi	r26, 0x3B	; 59
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	eb e3       	ldi	r30, 0x3B	; 59
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	48 2f       	mov	r20, r24
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	02 2e       	mov	r0, r18
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <DIO_WritePIN+0x8c>
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	0a 94       	dec	r0
    32e8:	e2 f7       	brpl	.-8      	; 0x32e2 <DIO_WritePIN+0x88>
    32ea:	84 2b       	or	r24, r20
    32ec:	8c 93       	st	X, r24
    32ee:	b3 c0       	rjmp	.+358    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PB :
			SET_BIT(PORTB , pnum) ;
    32f0:	a8 e3       	ldi	r26, 0x38	; 56
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e8 e3       	ldi	r30, 0x38	; 56
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	48 2f       	mov	r20, r24
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	28 2f       	mov	r18, r24
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	02 2e       	mov	r0, r18
    3308:	02 c0       	rjmp	.+4      	; 0x330e <DIO_WritePIN+0xb4>
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	0a 94       	dec	r0
    3310:	e2 f7       	brpl	.-8      	; 0x330a <DIO_WritePIN+0xb0>
    3312:	84 2b       	or	r24, r20
    3314:	8c 93       	st	X, r24
    3316:	9f c0       	rjmp	.+318    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PC :
			SET_BIT(PORTC , pnum) ;
    3318:	a5 e3       	ldi	r26, 0x35	; 53
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e5 e3       	ldi	r30, 0x35	; 53
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	48 2f       	mov	r20, r24
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	28 2f       	mov	r18, r24
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	02 2e       	mov	r0, r18
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <DIO_WritePIN+0xdc>
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	0a 94       	dec	r0
    3338:	e2 f7       	brpl	.-8      	; 0x3332 <DIO_WritePIN+0xd8>
    333a:	84 2b       	or	r24, r20
    333c:	8c 93       	st	X, r24
    333e:	8b c0       	rjmp	.+278    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PD :
			SET_BIT(PORTD , pnum) ;
    3340:	a2 e3       	ldi	r26, 0x32	; 50
    3342:	b0 e0       	ldi	r27, 0x00	; 0
    3344:	e2 e3       	ldi	r30, 0x32	; 50
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	48 2f       	mov	r20, r24
    334c:	8a 81       	ldd	r24, Y+2	; 0x02
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	02 2e       	mov	r0, r18
    3358:	02 c0       	rjmp	.+4      	; 0x335e <DIO_WritePIN+0x104>
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	0a 94       	dec	r0
    3360:	e2 f7       	brpl	.-8      	; 0x335a <DIO_WritePIN+0x100>
    3362:	84 2b       	or	r24, r20
    3364:	8c 93       	st	X, r24
    3366:	77 c0       	rjmp	.+238    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
		}
	}
	else if (volt == LOW)
    3368:	8c 81       	ldd	r24, Y+4	; 0x04
    336a:	88 23       	and	r24, r24
    336c:	09 f0       	breq	.+2      	; 0x3370 <DIO_WritePIN+0x116>
    336e:	73 c0       	rjmp	.+230    	; 0x3456 <DIO_WritePIN+0x1fc>
	{
		switch(port)
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	3e 83       	std	Y+6, r19	; 0x06
    3378:	2d 83       	std	Y+5, r18	; 0x05
    337a:	8d 81       	ldd	r24, Y+5	; 0x05
    337c:	9e 81       	ldd	r25, Y+6	; 0x06
    337e:	81 30       	cpi	r24, 0x01	; 1
    3380:	91 05       	cpc	r25, r1
    3382:	59 f1       	breq	.+86     	; 0x33da <DIO_WritePIN+0x180>
    3384:	2d 81       	ldd	r18, Y+5	; 0x05
    3386:	3e 81       	ldd	r19, Y+6	; 0x06
    3388:	22 30       	cpi	r18, 0x02	; 2
    338a:	31 05       	cpc	r19, r1
    338c:	2c f4       	brge	.+10     	; 0x3398 <DIO_WritePIN+0x13e>
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
    3390:	9e 81       	ldd	r25, Y+6	; 0x06
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	69 f0       	breq	.+26     	; 0x33b0 <DIO_WritePIN+0x156>
    3396:	5f c0       	rjmp	.+190    	; 0x3456 <DIO_WritePIN+0x1fc>
    3398:	2d 81       	ldd	r18, Y+5	; 0x05
    339a:	3e 81       	ldd	r19, Y+6	; 0x06
    339c:	22 30       	cpi	r18, 0x02	; 2
    339e:	31 05       	cpc	r19, r1
    33a0:	89 f1       	breq	.+98     	; 0x3404 <DIO_WritePIN+0x1aa>
    33a2:	8d 81       	ldd	r24, Y+5	; 0x05
    33a4:	9e 81       	ldd	r25, Y+6	; 0x06
    33a6:	83 30       	cpi	r24, 0x03	; 3
    33a8:	91 05       	cpc	r25, r1
    33aa:	09 f4       	brne	.+2      	; 0x33ae <DIO_WritePIN+0x154>
    33ac:	40 c0       	rjmp	.+128    	; 0x342e <DIO_WritePIN+0x1d4>
    33ae:	53 c0       	rjmp	.+166    	; 0x3456 <DIO_WritePIN+0x1fc>
		{
			case PA :
			CLEAR_BIT(PORTA , pnum) ;
    33b0:	ab e3       	ldi	r26, 0x3B	; 59
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	eb e3       	ldi	r30, 0x3B	; 59
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	48 2f       	mov	r20, r24
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	02 2e       	mov	r0, r18
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <DIO_WritePIN+0x174>
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	0a 94       	dec	r0
    33d0:	e2 f7       	brpl	.-8      	; 0x33ca <DIO_WritePIN+0x170>
    33d2:	80 95       	com	r24
    33d4:	84 23       	and	r24, r20
    33d6:	8c 93       	st	X, r24
    33d8:	3e c0       	rjmp	.+124    	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PB :
			CLEAR_BIT(PORTB , pnum) ;
    33da:	a8 e3       	ldi	r26, 0x38	; 56
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e8 e3       	ldi	r30, 0x38	; 56
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	48 2f       	mov	r20, r24
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	02 2e       	mov	r0, r18
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <DIO_WritePIN+0x19e>
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	0a 94       	dec	r0
    33fa:	e2 f7       	brpl	.-8      	; 0x33f4 <DIO_WritePIN+0x19a>
    33fc:	80 95       	com	r24
    33fe:	84 23       	and	r24, r20
    3400:	8c 93       	st	X, r24
    3402:	29 c0       	rjmp	.+82     	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PC :
			CLEAR_BIT(PORTC , pnum) ;
    3404:	a5 e3       	ldi	r26, 0x35	; 53
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	e5 e3       	ldi	r30, 0x35	; 53
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	48 2f       	mov	r20, r24
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	28 2f       	mov	r18, r24
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	02 2e       	mov	r0, r18
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <DIO_WritePIN+0x1c8>
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	0a 94       	dec	r0
    3424:	e2 f7       	brpl	.-8      	; 0x341e <DIO_WritePIN+0x1c4>
    3426:	80 95       	com	r24
    3428:	84 23       	and	r24, r20
    342a:	8c 93       	st	X, r24
    342c:	14 c0       	rjmp	.+40     	; 0x3456 <DIO_WritePIN+0x1fc>
			break ;
			case PD :
			CLEAR_BIT(PORTD , pnum) ;
    342e:	a2 e3       	ldi	r26, 0x32	; 50
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	e2 e3       	ldi	r30, 0x32	; 50
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	48 2f       	mov	r20, r24
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	28 2f       	mov	r18, r24
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	02 2e       	mov	r0, r18
    3446:	02 c0       	rjmp	.+4      	; 0x344c <DIO_WritePIN+0x1f2>
    3448:	88 0f       	add	r24, r24
    344a:	99 1f       	adc	r25, r25
    344c:	0a 94       	dec	r0
    344e:	e2 f7       	brpl	.-8      	; 0x3448 <DIO_WritePIN+0x1ee>
    3450:	80 95       	com	r24
    3452:	84 23       	and	r24, r20
    3454:	8c 93       	st	X, r24
	/* in new design i need to define only one thing and api know port and pin 
	   #define  RED_LED PINA5 
	    DIO_WritePIN(RED_LED,HIGH) ; */

	
}
    3456:	28 96       	adiw	r28, 0x08	; 8
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <DIO_ReadPIN>:
DIO_PinVoltage_type DIO_ReadPIN (DIO_Pin_type pin) 
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <DIO_ReadPIN+0x6>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <DIO_ReadPIN+0x8>
    3470:	00 d0       	rcall	.+0      	; 0x3472 <DIO_ReadPIN+0xa>
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	8c 83       	std	Y+4, r24	; 0x04
	u8 pnum = pin %8 ;
    3478:	8c 81       	ldd	r24, Y+4	; 0x04
    347a:	87 70       	andi	r24, 0x07	; 7
    347c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin /8 ;
    347e:	8c 81       	ldd	r24, Y+4	; 0x04
    3480:	86 95       	lsr	r24
    3482:	86 95       	lsr	r24
    3484:	86 95       	lsr	r24
    3486:	8a 83       	std	Y+2, r24	; 0x02
	
	
	DIO_PinVoltage_type volt = LOW ; 
    3488:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	3e 83       	std	Y+6, r19	; 0x06
    3492:	2d 83       	std	Y+5, r18	; 0x05
    3494:	4d 81       	ldd	r20, Y+5	; 0x05
    3496:	5e 81       	ldd	r21, Y+6	; 0x06
    3498:	41 30       	cpi	r20, 0x01	; 1
    349a:	51 05       	cpc	r21, r1
    349c:	41 f1       	breq	.+80     	; 0x34ee <DIO_ReadPIN+0x86>
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	82 30       	cpi	r24, 0x02	; 2
    34a4:	91 05       	cpc	r25, r1
    34a6:	34 f4       	brge	.+12     	; 0x34b4 <DIO_ReadPIN+0x4c>
    34a8:	2d 81       	ldd	r18, Y+5	; 0x05
    34aa:	3e 81       	ldd	r19, Y+6	; 0x06
    34ac:	21 15       	cp	r18, r1
    34ae:	31 05       	cpc	r19, r1
    34b0:	61 f0       	breq	.+24     	; 0x34ca <DIO_ReadPIN+0x62>
    34b2:	52 c0       	rjmp	.+164    	; 0x3558 <DIO_ReadPIN+0xf0>
    34b4:	4d 81       	ldd	r20, Y+5	; 0x05
    34b6:	5e 81       	ldd	r21, Y+6	; 0x06
    34b8:	42 30       	cpi	r20, 0x02	; 2
    34ba:	51 05       	cpc	r21, r1
    34bc:	51 f1       	breq	.+84     	; 0x3512 <DIO_ReadPIN+0xaa>
    34be:	8d 81       	ldd	r24, Y+5	; 0x05
    34c0:	9e 81       	ldd	r25, Y+6	; 0x06
    34c2:	83 30       	cpi	r24, 0x03	; 3
    34c4:	91 05       	cpc	r25, r1
    34c6:	b9 f1       	breq	.+110    	; 0x3536 <DIO_ReadPIN+0xce>
    34c8:	47 c0       	rjmp	.+142    	; 0x3558 <DIO_ReadPIN+0xf0>
		/* we can return in each case 
		   return READ_BIT(PINA , pnum) ; 
		   but it is not suitable for misra rule that state to avoid logical error and provide portabality and readability 
		   here for readability and also if we do not write return below produce warning */
		    
		volt = READ_BIT(PINA , pnum) ;
    34ca:	e9 e3       	ldi	r30, 0x39	; 57
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	88 2f       	mov	r24, r24
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	a9 01       	movw	r20, r18
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <DIO_ReadPIN+0x7a>
    34de:	55 95       	asr	r21
    34e0:	47 95       	ror	r20
    34e2:	8a 95       	dec	r24
    34e4:	e2 f7       	brpl	.-8      	; 0x34de <DIO_ReadPIN+0x76>
    34e6:	ca 01       	movw	r24, r20
    34e8:	81 70       	andi	r24, 0x01	; 1
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	35 c0       	rjmp	.+106    	; 0x3558 <DIO_ReadPIN+0xf0>
		break ;
		case PB :
		volt = READ_BIT(PINB , pnum) ;
    34ee:	e6 e3       	ldi	r30, 0x36	; 54
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	28 2f       	mov	r18, r24
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	88 2f       	mov	r24, r24
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	a9 01       	movw	r20, r18
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <DIO_ReadPIN+0x9e>
    3502:	55 95       	asr	r21
    3504:	47 95       	ror	r20
    3506:	8a 95       	dec	r24
    3508:	e2 f7       	brpl	.-8      	; 0x3502 <DIO_ReadPIN+0x9a>
    350a:	ca 01       	movw	r24, r20
    350c:	81 70       	andi	r24, 0x01	; 1
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	23 c0       	rjmp	.+70     	; 0x3558 <DIO_ReadPIN+0xf0>
		break ;
		case PC :
		volt = READ_BIT(PINC , pnum) ;
    3512:	e3 e3       	ldi	r30, 0x33	; 51
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	28 2f       	mov	r18, r24
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	88 2f       	mov	r24, r24
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	a9 01       	movw	r20, r18
    3524:	02 c0       	rjmp	.+4      	; 0x352a <DIO_ReadPIN+0xc2>
    3526:	55 95       	asr	r21
    3528:	47 95       	ror	r20
    352a:	8a 95       	dec	r24
    352c:	e2 f7       	brpl	.-8      	; 0x3526 <DIO_ReadPIN+0xbe>
    352e:	ca 01       	movw	r24, r20
    3530:	81 70       	andi	r24, 0x01	; 1
    3532:	89 83       	std	Y+1, r24	; 0x01
    3534:	11 c0       	rjmp	.+34     	; 0x3558 <DIO_ReadPIN+0xf0>
		break ;
		case PD :
		volt = READ_BIT(PIND , pnum) ;
    3536:	e0 e3       	ldi	r30, 0x30	; 48
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	80 81       	ld	r24, Z
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	88 2f       	mov	r24, r24
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	a9 01       	movw	r20, r18
    3548:	02 c0       	rjmp	.+4      	; 0x354e <DIO_ReadPIN+0xe6>
    354a:	55 95       	asr	r21
    354c:	47 95       	ror	r20
    354e:	8a 95       	dec	r24
    3550:	e2 f7       	brpl	.-8      	; 0x354a <DIO_ReadPIN+0xe2>
    3552:	ca 01       	movw	r24, r20
    3554:	81 70       	andi	r24, 0x01	; 1
    3556:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}
	return volt ;
    3558:	89 81       	ldd	r24, Y+1	; 0x01
	   {}
	 */
	   
	
	
}
    355a:	26 96       	adiw	r28, 0x06	; 6
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	08 95       	ret

0000356c <DIO_Init>:

void DIO_Init (void)
{
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	0f 92       	push	r0
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
	/*
	  here i init all pin with only one function without calling 32 function
	  and if i want to change status of pin i only change in configuration file*/
	
	DIO_Pin_type i ;
	for(i = PINA0 ; i < TOTAL_PINS ; ++i)
    3576:	19 82       	std	Y+1, r1	; 0x01
    3578:	0e c0       	rjmp	.+28     	; 0x3596 <DIO_Init+0x2a>
	{
		DIO_InitPin(i,PinsStatusArray[i]) ;
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	88 2f       	mov	r24, r24
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	fc 01       	movw	r30, r24
    3582:	e5 58       	subi	r30, 0x85	; 133
    3584:	fe 4f       	sbci	r31, 0xFE	; 254
    3586:	90 81       	ld	r25, Z
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	69 2f       	mov	r22, r25
    358c:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <DIO_InitPin>
	/*
	  here i init all pin with only one function without calling 32 function
	  and if i want to change status of pin i only change in configuration file*/
	
	DIO_Pin_type i ;
	for(i = PINA0 ; i < TOTAL_PINS ; ++i)
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	8f 5f       	subi	r24, 0xFF	; 255
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	80 32       	cpi	r24, 0x20	; 32
    359a:	78 f3       	brcs	.-34     	; 0x357a <DIO_Init+0xe>
	{
		DIO_InitPin(i,PinsStatusArray[i]) ;
	}
	
}
    359c:	0f 90       	pop	r0
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <DIO_WritePort>:

void DIO_WritePort (DIO_Port_type port , u8 value) 
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <DIO_WritePort+0x6>
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <DIO_WritePort+0x8>
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	28 2f       	mov	r18, r24
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	3c 83       	std	Y+4, r19	; 0x04
    35bc:	2b 83       	std	Y+3, r18	; 0x03
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	9c 81       	ldd	r25, Y+4	; 0x04
    35c2:	81 30       	cpi	r24, 0x01	; 1
    35c4:	91 05       	cpc	r25, r1
    35c6:	d1 f0       	breq	.+52     	; 0x35fc <DIO_WritePort+0x58>
    35c8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ca:	3c 81       	ldd	r19, Y+4	; 0x04
    35cc:	22 30       	cpi	r18, 0x02	; 2
    35ce:	31 05       	cpc	r19, r1
    35d0:	2c f4       	brge	.+10     	; 0x35dc <DIO_WritePort+0x38>
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	9c 81       	ldd	r25, Y+4	; 0x04
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	61 f0       	breq	.+24     	; 0x35f2 <DIO_WritePort+0x4e>
    35da:	1e c0       	rjmp	.+60     	; 0x3618 <DIO_WritePort+0x74>
    35dc:	2b 81       	ldd	r18, Y+3	; 0x03
    35de:	3c 81       	ldd	r19, Y+4	; 0x04
    35e0:	22 30       	cpi	r18, 0x02	; 2
    35e2:	31 05       	cpc	r19, r1
    35e4:	81 f0       	breq	.+32     	; 0x3606 <DIO_WritePort+0x62>
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ea:	83 30       	cpi	r24, 0x03	; 3
    35ec:	91 05       	cpc	r25, r1
    35ee:	81 f0       	breq	.+32     	; 0x3610 <DIO_WritePort+0x6c>
    35f0:	13 c0       	rjmp	.+38     	; 0x3618 <DIO_WritePort+0x74>
	{
		case PA :
		PORTA = value ;
    35f2:	eb e3       	ldi	r30, 0x3B	; 59
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	8a 81       	ldd	r24, Y+2	; 0x02
    35f8:	80 83       	st	Z, r24
    35fa:	0e c0       	rjmp	.+28     	; 0x3618 <DIO_WritePort+0x74>
		break ;
		case PB :
		PORTB = value ;
    35fc:	e8 e3       	ldi	r30, 0x38	; 56
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	80 83       	st	Z, r24
    3604:	09 c0       	rjmp	.+18     	; 0x3618 <DIO_WritePort+0x74>
		break ;
		case PC :
		PORTC = value ;
    3606:	e5 e3       	ldi	r30, 0x35	; 53
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	80 83       	st	Z, r24
    360e:	04 c0       	rjmp	.+8      	; 0x3618 <DIO_WritePort+0x74>
		break ;
		case PD :
		PORTD = value ;
    3610:	e2 e3       	ldi	r30, 0x32	; 50
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	80 83       	st	Z, r24
		break ;
	}
}
    3618:	0f 90       	pop	r0
    361a:	0f 90       	pop	r0
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <DIO_TogglePIN>:


void DIO_TogglePIN (DIO_Pin_type pin) 
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	00 d0       	rcall	.+0      	; 0x362c <DIO_TogglePIN+0x6>
    362c:	00 d0       	rcall	.+0      	; 0x362e <DIO_TogglePIN+0x8>
    362e:	0f 92       	push	r0
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	8b 83       	std	Y+3, r24	; 0x03
	u8 pnum = pin %8 ;
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	87 70       	andi	r24, 0x07	; 7
    363a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin /8 ;
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	86 95       	lsr	r24
    3640:	86 95       	lsr	r24
    3642:	86 95       	lsr	r24
    3644:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	3d 83       	std	Y+5, r19	; 0x05
    364e:	2c 83       	std	Y+4, r18	; 0x04
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	81 30       	cpi	r24, 0x01	; 1
    3656:	91 05       	cpc	r25, r1
    3658:	49 f1       	breq	.+82     	; 0x36ac <DIO_TogglePIN+0x86>
    365a:	2c 81       	ldd	r18, Y+4	; 0x04
    365c:	3d 81       	ldd	r19, Y+5	; 0x05
    365e:	22 30       	cpi	r18, 0x02	; 2
    3660:	31 05       	cpc	r19, r1
    3662:	2c f4       	brge	.+10     	; 0x366e <DIO_TogglePIN+0x48>
    3664:	8c 81       	ldd	r24, Y+4	; 0x04
    3666:	9d 81       	ldd	r25, Y+5	; 0x05
    3668:	00 97       	sbiw	r24, 0x00	; 0
    366a:	61 f0       	breq	.+24     	; 0x3684 <DIO_TogglePIN+0x5e>
    366c:	5a c0       	rjmp	.+180    	; 0x3722 <DIO_TogglePIN+0xfc>
    366e:	2c 81       	ldd	r18, Y+4	; 0x04
    3670:	3d 81       	ldd	r19, Y+5	; 0x05
    3672:	22 30       	cpi	r18, 0x02	; 2
    3674:	31 05       	cpc	r19, r1
    3676:	71 f1       	breq	.+92     	; 0x36d4 <DIO_TogglePIN+0xae>
    3678:	8c 81       	ldd	r24, Y+4	; 0x04
    367a:	9d 81       	ldd	r25, Y+5	; 0x05
    367c:	83 30       	cpi	r24, 0x03	; 3
    367e:	91 05       	cpc	r25, r1
    3680:	e9 f1       	breq	.+122    	; 0x36fc <DIO_TogglePIN+0xd6>
    3682:	4f c0       	rjmp	.+158    	; 0x3722 <DIO_TogglePIN+0xfc>
	{
		case PA :
		TOGGLE_BIT(PORTA , pnum) ;
    3684:	ab e3       	ldi	r26, 0x3B	; 59
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	eb e3       	ldi	r30, 0x3B	; 59
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	48 2f       	mov	r20, r24
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	02 2e       	mov	r0, r18
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <DIO_TogglePIN+0x7c>
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	0a 94       	dec	r0
    36a4:	e2 f7       	brpl	.-8      	; 0x369e <DIO_TogglePIN+0x78>
    36a6:	84 27       	eor	r24, r20
    36a8:	8c 93       	st	X, r24
    36aa:	3b c0       	rjmp	.+118    	; 0x3722 <DIO_TogglePIN+0xfc>
		break ;
		case PB :
		TOGGLE_BIT(PORTB , pnum) ;
    36ac:	a8 e3       	ldi	r26, 0x38	; 56
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e8 e3       	ldi	r30, 0x38	; 56
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	48 2f       	mov	r20, r24
    36b8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	02 2e       	mov	r0, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <DIO_TogglePIN+0xa4>
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	0a 94       	dec	r0
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <DIO_TogglePIN+0xa0>
    36ce:	84 27       	eor	r24, r20
    36d0:	8c 93       	st	X, r24
    36d2:	27 c0       	rjmp	.+78     	; 0x3722 <DIO_TogglePIN+0xfc>
		break ;
		case PC :
	   TOGGLE_BIT(PORTC , pnum) ;
    36d4:	a5 e3       	ldi	r26, 0x35	; 53
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e5 e3       	ldi	r30, 0x35	; 53
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	48 2f       	mov	r20, r24
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	02 2e       	mov	r0, r18
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <DIO_TogglePIN+0xcc>
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	0a 94       	dec	r0
    36f4:	e2 f7       	brpl	.-8      	; 0x36ee <DIO_TogglePIN+0xc8>
    36f6:	84 27       	eor	r24, r20
    36f8:	8c 93       	st	X, r24
    36fa:	13 c0       	rjmp	.+38     	; 0x3722 <DIO_TogglePIN+0xfc>
		break ;
		case PD :
		TOGGLE_BIT(PORTD , pnum) ;
    36fc:	a2 e3       	ldi	r26, 0x32	; 50
    36fe:	b0 e0       	ldi	r27, 0x00	; 0
    3700:	e2 e3       	ldi	r30, 0x32	; 50
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	80 81       	ld	r24, Z
    3706:	48 2f       	mov	r20, r24
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	28 2f       	mov	r18, r24
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	02 2e       	mov	r0, r18
    3714:	02 c0       	rjmp	.+4      	; 0x371a <DIO_TogglePIN+0xf4>
    3716:	88 0f       	add	r24, r24
    3718:	99 1f       	adc	r25, r25
    371a:	0a 94       	dec	r0
    371c:	e2 f7       	brpl	.-8      	; 0x3716 <DIO_TogglePIN+0xf0>
    371e:	84 27       	eor	r24, r20
    3720:	8c 93       	st	X, r24
		break ;
	}
	
	
}
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	0f 90       	pop	r0
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <EXI_Enable>:
static void (*INT1_Fptr) (void)=NULLPTR;
static void (*INT2_Fptr) (void)=NULLPTR;

/************************************Enable/Disable functions***********************************/
void EXI_Enable(ExInterruptSource_type Interrupt)
{
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	00 d0       	rcall	.+0      	; 0x3738 <EXI_Enable+0x6>
    3738:	0f 92       	push	r0
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	28 2f       	mov	r18, r24
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	3b 83       	std	Y+3, r19	; 0x03
    3748:	2a 83       	std	Y+2, r18	; 0x02
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
    374c:	9b 81       	ldd	r25, Y+3	; 0x03
    374e:	81 30       	cpi	r24, 0x01	; 1
    3750:	91 05       	cpc	r25, r1
    3752:	89 f0       	breq	.+34     	; 0x3776 <EXI_Enable+0x44>
    3754:	2a 81       	ldd	r18, Y+2	; 0x02
    3756:	3b 81       	ldd	r19, Y+3	; 0x03
    3758:	22 30       	cpi	r18, 0x02	; 2
    375a:	31 05       	cpc	r19, r1
    375c:	a1 f0       	breq	.+40     	; 0x3786 <EXI_Enable+0x54>
    375e:	8a 81       	ldd	r24, Y+2	; 0x02
    3760:	9b 81       	ldd	r25, Y+3	; 0x03
    3762:	00 97       	sbiw	r24, 0x00	; 0
    3764:	b9 f4       	brne	.+46     	; 0x3794 <EXI_Enable+0x62>
		case EX_INT0:
		SET_BIT(GICR,INT0);
    3766:	ab e5       	ldi	r26, 0x5B	; 91
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	eb e5       	ldi	r30, 0x5B	; 91
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	80 64       	ori	r24, 0x40	; 64
    3772:	8c 93       	st	X, r24
    3774:	0f c0       	rjmp	.+30     	; 0x3794 <EXI_Enable+0x62>
		break;
		case EX_INT1:
		SET_BIT(GICR,INT1);
    3776:	ab e5       	ldi	r26, 0x5B	; 91
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	eb e5       	ldi	r30, 0x5B	; 91
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	80 81       	ld	r24, Z
    3780:	80 68       	ori	r24, 0x80	; 128
    3782:	8c 93       	st	X, r24
    3784:	07 c0       	rjmp	.+14     	; 0x3794 <EXI_Enable+0x62>
		break;
		case EX_INT2:
		SET_BIT(GICR,INT2);
    3786:	ab e5       	ldi	r26, 0x5B	; 91
    3788:	b0 e0       	ldi	r27, 0x00	; 0
    378a:	eb e5       	ldi	r30, 0x5B	; 91
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	80 81       	ld	r24, Z
    3790:	80 62       	ori	r24, 0x20	; 32
    3792:	8c 93       	st	X, r24
		break;
	}
}
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	08 95       	ret

000037a0 <EXI_Disable>:

void EXI_Disable(ExInterruptSource_type Interrupt)
{
    37a0:	df 93       	push	r29
    37a2:	cf 93       	push	r28
    37a4:	00 d0       	rcall	.+0      	; 0x37a6 <EXI_Disable+0x6>
    37a6:	0f 92       	push	r0
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	28 2f       	mov	r18, r24
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	3b 83       	std	Y+3, r19	; 0x03
    37b6:	2a 83       	std	Y+2, r18	; 0x02
    37b8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ba:	9b 81       	ldd	r25, Y+3	; 0x03
    37bc:	81 30       	cpi	r24, 0x01	; 1
    37be:	91 05       	cpc	r25, r1
    37c0:	89 f0       	breq	.+34     	; 0x37e4 <EXI_Disable+0x44>
    37c2:	2a 81       	ldd	r18, Y+2	; 0x02
    37c4:	3b 81       	ldd	r19, Y+3	; 0x03
    37c6:	22 30       	cpi	r18, 0x02	; 2
    37c8:	31 05       	cpc	r19, r1
    37ca:	a1 f0       	breq	.+40     	; 0x37f4 <EXI_Disable+0x54>
    37cc:	8a 81       	ldd	r24, Y+2	; 0x02
    37ce:	9b 81       	ldd	r25, Y+3	; 0x03
    37d0:	00 97       	sbiw	r24, 0x00	; 0
    37d2:	b9 f4       	brne	.+46     	; 0x3802 <EXI_Disable+0x62>
		case EX_INT0:
		CLEAR_BIT(GICR,INT0);
    37d4:	ab e5       	ldi	r26, 0x5B	; 91
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	eb e5       	ldi	r30, 0x5B	; 91
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	80 81       	ld	r24, Z
    37de:	8f 7b       	andi	r24, 0xBF	; 191
    37e0:	8c 93       	st	X, r24
    37e2:	0f c0       	rjmp	.+30     	; 0x3802 <EXI_Disable+0x62>
		break;
		case EX_INT1:
		CLEAR_BIT(GICR,INT1);
    37e4:	ab e5       	ldi	r26, 0x5B	; 91
    37e6:	b0 e0       	ldi	r27, 0x00	; 0
    37e8:	eb e5       	ldi	r30, 0x5B	; 91
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	8f 77       	andi	r24, 0x7F	; 127
    37f0:	8c 93       	st	X, r24
    37f2:	07 c0       	rjmp	.+14     	; 0x3802 <EXI_Disable+0x62>
		break;
		case EX_INT2:
		CLEAR_BIT(GICR,INT2);
    37f4:	ab e5       	ldi	r26, 0x5B	; 91
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	eb e5       	ldi	r30, 0x5B	; 91
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	80 81       	ld	r24, Z
    37fe:	8f 7d       	andi	r24, 0xDF	; 223
    3800:	8c 93       	st	X, r24
		break;
	}
}
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	cf 91       	pop	r28
    380a:	df 91       	pop	r29
    380c:	08 95       	ret

0000380e <EXI_TriggerEdge>:
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	2a 97       	sbiw	r28, 0x0a	; 10
    3818:	0f b6       	in	r0, 0x3f	; 63
    381a:	f8 94       	cli
    381c:	de bf       	out	0x3e, r29	; 62
    381e:	0f be       	out	0x3f, r0	; 63
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	89 83       	std	Y+1, r24	; 0x01
    3824:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	3a 87       	std	Y+10, r19	; 0x0a
    382e:	29 87       	std	Y+9, r18	; 0x09
    3830:	89 85       	ldd	r24, Y+9	; 0x09
    3832:	9a 85       	ldd	r25, Y+10	; 0x0a
    3834:	81 30       	cpi	r24, 0x01	; 1
    3836:	91 05       	cpc	r25, r1
    3838:	09 f4       	brne	.+2      	; 0x383c <EXI_TriggerEdge+0x2e>
    383a:	66 c0       	rjmp	.+204    	; 0x3908 <EXI_TriggerEdge+0xfa>
    383c:	29 85       	ldd	r18, Y+9	; 0x09
    383e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3840:	22 30       	cpi	r18, 0x02	; 2
    3842:	31 05       	cpc	r19, r1
    3844:	09 f4       	brne	.+2      	; 0x3848 <EXI_TriggerEdge+0x3a>
    3846:	bb c0       	rjmp	.+374    	; 0x39be <EXI_TriggerEdge+0x1b0>
    3848:	89 85       	ldd	r24, Y+9	; 0x09
    384a:	9a 85       	ldd	r25, Y+10	; 0x0a
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	09 f0       	breq	.+2      	; 0x3852 <EXI_TriggerEdge+0x44>
    3850:	dd c0       	rjmp	.+442    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
		case EX_INT0:
		switch(Edge){
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	28 2f       	mov	r18, r24
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	38 87       	std	Y+8, r19	; 0x08
    385a:	2f 83       	std	Y+7, r18	; 0x07
    385c:	8f 81       	ldd	r24, Y+7	; 0x07
    385e:	98 85       	ldd	r25, Y+8	; 0x08
    3860:	81 30       	cpi	r24, 0x01	; 1
    3862:	91 05       	cpc	r25, r1
    3864:	21 f1       	breq	.+72     	; 0x38ae <EXI_TriggerEdge+0xa0>
    3866:	2f 81       	ldd	r18, Y+7	; 0x07
    3868:	38 85       	ldd	r19, Y+8	; 0x08
    386a:	22 30       	cpi	r18, 0x02	; 2
    386c:	31 05       	cpc	r19, r1
    386e:	2c f4       	brge	.+10     	; 0x387a <EXI_TriggerEdge+0x6c>
    3870:	8f 81       	ldd	r24, Y+7	; 0x07
    3872:	98 85       	ldd	r25, Y+8	; 0x08
    3874:	00 97       	sbiw	r24, 0x00	; 0
    3876:	61 f0       	breq	.+24     	; 0x3890 <EXI_TriggerEdge+0x82>
    3878:	c9 c0       	rjmp	.+402    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
    387a:	2f 81       	ldd	r18, Y+7	; 0x07
    387c:	38 85       	ldd	r19, Y+8	; 0x08
    387e:	22 30       	cpi	r18, 0x02	; 2
    3880:	31 05       	cpc	r19, r1
    3882:	21 f1       	breq	.+72     	; 0x38cc <EXI_TriggerEdge+0xbe>
    3884:	8f 81       	ldd	r24, Y+7	; 0x07
    3886:	98 85       	ldd	r25, Y+8	; 0x08
    3888:	83 30       	cpi	r24, 0x03	; 3
    388a:	91 05       	cpc	r25, r1
    388c:	71 f1       	breq	.+92     	; 0x38ea <EXI_TriggerEdge+0xdc>
    388e:	be c0       	rjmp	.+380    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    3890:	a5 e5       	ldi	r26, 0x55	; 85
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	e5 e5       	ldi	r30, 0x55	; 85
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	8e 7f       	andi	r24, 0xFE	; 254
    389c:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    389e:	a5 e5       	ldi	r26, 0x55	; 85
    38a0:	b0 e0       	ldi	r27, 0x00	; 0
    38a2:	e5 e5       	ldi	r30, 0x55	; 85
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	80 81       	ld	r24, Z
    38a8:	8d 7f       	andi	r24, 0xFD	; 253
    38aa:	8c 93       	st	X, r24
    38ac:	af c0       	rjmp	.+350    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    38ae:	a5 e5       	ldi	r26, 0x55	; 85
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	e5 e5       	ldi	r30, 0x55	; 85
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	81 60       	ori	r24, 0x01	; 1
    38ba:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    38bc:	a5 e5       	ldi	r26, 0x55	; 85
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e5 e5       	ldi	r30, 0x55	; 85
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	8d 7f       	andi	r24, 0xFD	; 253
    38c8:	8c 93       	st	X, r24
    38ca:	a0 c0       	rjmp	.+320    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
    38cc:	a5 e5       	ldi	r26, 0x55	; 85
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	e5 e5       	ldi	r30, 0x55	; 85
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	8e 7f       	andi	r24, 0xFE	; 254
    38d8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    38da:	a5 e5       	ldi	r26, 0x55	; 85
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e5 e5       	ldi	r30, 0x55	; 85
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	82 60       	ori	r24, 0x02	; 2
    38e6:	8c 93       	st	X, r24
    38e8:	91 c0       	rjmp	.+290    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    38ea:	a5 e5       	ldi	r26, 0x55	; 85
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	e5 e5       	ldi	r30, 0x55	; 85
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	81 60       	ori	r24, 0x01	; 1
    38f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    38f8:	a5 e5       	ldi	r26, 0x55	; 85
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	e5 e5       	ldi	r30, 0x55	; 85
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	82 60       	ori	r24, 0x02	; 2
    3904:	8c 93       	st	X, r24
    3906:	82 c0       	rjmp	.+260    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT1:
		switch(Edge){
    3908:	8a 81       	ldd	r24, Y+2	; 0x02
    390a:	28 2f       	mov	r18, r24
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	3e 83       	std	Y+6, r19	; 0x06
    3910:	2d 83       	std	Y+5, r18	; 0x05
    3912:	8d 81       	ldd	r24, Y+5	; 0x05
    3914:	9e 81       	ldd	r25, Y+6	; 0x06
    3916:	81 30       	cpi	r24, 0x01	; 1
    3918:	91 05       	cpc	r25, r1
    391a:	21 f1       	breq	.+72     	; 0x3964 <EXI_TriggerEdge+0x156>
    391c:	2d 81       	ldd	r18, Y+5	; 0x05
    391e:	3e 81       	ldd	r19, Y+6	; 0x06
    3920:	22 30       	cpi	r18, 0x02	; 2
    3922:	31 05       	cpc	r19, r1
    3924:	2c f4       	brge	.+10     	; 0x3930 <EXI_TriggerEdge+0x122>
    3926:	8d 81       	ldd	r24, Y+5	; 0x05
    3928:	9e 81       	ldd	r25, Y+6	; 0x06
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	61 f0       	breq	.+24     	; 0x3946 <EXI_TriggerEdge+0x138>
    392e:	6e c0       	rjmp	.+220    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
    3930:	2d 81       	ldd	r18, Y+5	; 0x05
    3932:	3e 81       	ldd	r19, Y+6	; 0x06
    3934:	22 30       	cpi	r18, 0x02	; 2
    3936:	31 05       	cpc	r19, r1
    3938:	21 f1       	breq	.+72     	; 0x3982 <EXI_TriggerEdge+0x174>
    393a:	8d 81       	ldd	r24, Y+5	; 0x05
    393c:	9e 81       	ldd	r25, Y+6	; 0x06
    393e:	83 30       	cpi	r24, 0x03	; 3
    3940:	91 05       	cpc	r25, r1
    3942:	71 f1       	breq	.+92     	; 0x39a0 <EXI_TriggerEdge+0x192>
    3944:	63 c0       	rjmp	.+198    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
    3946:	a5 e5       	ldi	r26, 0x55	; 85
    3948:	b0 e0       	ldi	r27, 0x00	; 0
    394a:	e5 e5       	ldi	r30, 0x55	; 85
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	80 81       	ld	r24, Z
    3950:	8b 7f       	andi	r24, 0xFB	; 251
    3952:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    3954:	a5 e5       	ldi	r26, 0x55	; 85
    3956:	b0 e0       	ldi	r27, 0x00	; 0
    3958:	e5 e5       	ldi	r30, 0x55	; 85
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	80 81       	ld	r24, Z
    395e:	87 7f       	andi	r24, 0xF7	; 247
    3960:	8c 93       	st	X, r24
    3962:	54 c0       	rjmp	.+168    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
    3964:	a5 e5       	ldi	r26, 0x55	; 85
    3966:	b0 e0       	ldi	r27, 0x00	; 0
    3968:	e5 e5       	ldi	r30, 0x55	; 85
    396a:	f0 e0       	ldi	r31, 0x00	; 0
    396c:	80 81       	ld	r24, Z
    396e:	84 60       	ori	r24, 0x04	; 4
    3970:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    3972:	a5 e5       	ldi	r26, 0x55	; 85
    3974:	b0 e0       	ldi	r27, 0x00	; 0
    3976:	e5 e5       	ldi	r30, 0x55	; 85
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	87 7f       	andi	r24, 0xF7	; 247
    397e:	8c 93       	st	X, r24
    3980:	45 c0       	rjmp	.+138    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
    3982:	a5 e5       	ldi	r26, 0x55	; 85
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e5 e5       	ldi	r30, 0x55	; 85
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	8b 7f       	andi	r24, 0xFB	; 251
    398e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    3990:	a5 e5       	ldi	r26, 0x55	; 85
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e5 e5       	ldi	r30, 0x55	; 85
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	88 60       	ori	r24, 0x08	; 8
    399c:	8c 93       	st	X, r24
    399e:	36 c0       	rjmp	.+108    	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    39a0:	a5 e5       	ldi	r26, 0x55	; 85
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	e5 e5       	ldi	r30, 0x55	; 85
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	84 60       	ori	r24, 0x04	; 4
    39ac:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    39ae:	a5 e5       	ldi	r26, 0x55	; 85
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	e5 e5       	ldi	r30, 0x55	; 85
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	88 60       	ori	r24, 0x08	; 8
    39ba:	8c 93       	st	X, r24
    39bc:	27 c0       	rjmp	.+78     	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT2:
		switch(Edge){
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	28 2f       	mov	r18, r24
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	3c 83       	std	Y+4, r19	; 0x04
    39c6:	2b 83       	std	Y+3, r18	; 0x03
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	9c 81       	ldd	r25, Y+4	; 0x04
    39cc:	82 30       	cpi	r24, 0x02	; 2
    39ce:	91 05       	cpc	r25, r1
    39d0:	31 f0       	breq	.+12     	; 0x39de <EXI_TriggerEdge+0x1d0>
    39d2:	2b 81       	ldd	r18, Y+3	; 0x03
    39d4:	3c 81       	ldd	r19, Y+4	; 0x04
    39d6:	23 30       	cpi	r18, 0x03	; 3
    39d8:	31 05       	cpc	r19, r1
    39da:	49 f0       	breq	.+18     	; 0x39ee <EXI_TriggerEdge+0x1e0>
    39dc:	10 c0       	rjmp	.+32     	; 0x39fe <EXI_TriggerEdge+0x1f0>
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
    39de:	a4 e5       	ldi	r26, 0x54	; 84
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	e4 e5       	ldi	r30, 0x54	; 84
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	8f 7b       	andi	r24, 0xBF	; 191
    39ea:	8c 93       	st	X, r24
    39ec:	0f c0       	rjmp	.+30     	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    39ee:	a4 e5       	ldi	r26, 0x54	; 84
    39f0:	b0 e0       	ldi	r27, 0x00	; 0
    39f2:	e4 e5       	ldi	r30, 0x54	; 84
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	80 81       	ld	r24, Z
    39f8:	80 64       	ori	r24, 0x40	; 64
    39fa:	8c 93       	st	X, r24
    39fc:	07 c0       	rjmp	.+14     	; 0x3a0c <EXI_TriggerEdge+0x1fe>
			break;
			default:
			CLEAR_BIT(MCUCSR,ISC2);
    39fe:	a4 e5       	ldi	r26, 0x54	; 84
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	e4 e5       	ldi	r30, 0x54	; 84
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	8f 7b       	andi	r24, 0xBF	; 191
    3a0a:	8c 93       	st	X, r24
		}
		break;
	}
}
    3a0c:	2a 96       	adiw	r28, 0x0a	; 10
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	f8 94       	cli
    3a12:	de bf       	out	0x3e, r29	; 62
    3a14:	0f be       	out	0x3f, r0	; 63
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	00 d0       	rcall	.+0      	; 0x3a24 <EXI_SetCallBack+0x6>
    3a24:	00 d0       	rcall	.+0      	; 0x3a26 <EXI_SetCallBack+0x8>
    3a26:	0f 92       	push	r0
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	7b 83       	std	Y+3, r23	; 0x03
    3a30:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	28 2f       	mov	r18, r24
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	3d 83       	std	Y+5, r19	; 0x05
    3a3a:	2c 83       	std	Y+4, r18	; 0x04
    3a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a40:	81 30       	cpi	r24, 0x01	; 1
    3a42:	91 05       	cpc	r25, r1
    3a44:	81 f0       	breq	.+32     	; 0x3a66 <EXI_SetCallBack+0x48>
    3a46:	2c 81       	ldd	r18, Y+4	; 0x04
    3a48:	3d 81       	ldd	r19, Y+5	; 0x05
    3a4a:	22 30       	cpi	r18, 0x02	; 2
    3a4c:	31 05       	cpc	r19, r1
    3a4e:	91 f0       	breq	.+36     	; 0x3a74 <EXI_SetCallBack+0x56>
    3a50:	8c 81       	ldd	r24, Y+4	; 0x04
    3a52:	9d 81       	ldd	r25, Y+5	; 0x05
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	a1 f4       	brne	.+40     	; 0x3a80 <EXI_SetCallBack+0x62>
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    3a58:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5c:	90 93 ad 01 	sts	0x01AD, r25
    3a60:	80 93 ac 01 	sts	0x01AC, r24
    3a64:	0d c0       	rjmp	.+26     	; 0x3a80 <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6a:	90 93 af 01 	sts	0x01AF, r25
    3a6e:	80 93 ae 01 	sts	0x01AE, r24
    3a72:	06 c0       	rjmp	.+12     	; 0x3a80 <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	9b 81       	ldd	r25, Y+3	; 0x03
    3a78:	90 93 b1 01 	sts	0x01B1, r25
    3a7c:	80 93 b0 01 	sts	0x01B0, r24
		break;
	}
}
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	cf 91       	pop	r28
    3a8c:	df 91       	pop	r29
    3a8e:	08 95       	ret

00003a90 <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
    3a90:	1f 92       	push	r1
    3a92:	0f 92       	push	r0
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	0f 92       	push	r0
    3a98:	11 24       	eor	r1, r1
    3a9a:	2f 93       	push	r18
    3a9c:	3f 93       	push	r19
    3a9e:	4f 93       	push	r20
    3aa0:	5f 93       	push	r21
    3aa2:	6f 93       	push	r22
    3aa4:	7f 93       	push	r23
    3aa6:	8f 93       	push	r24
    3aa8:	9f 93       	push	r25
    3aaa:	af 93       	push	r26
    3aac:	bf 93       	push	r27
    3aae:	ef 93       	push	r30
    3ab0:	ff 93       	push	r31
    3ab2:	df 93       	push	r29
    3ab4:	cf 93       	push	r28
    3ab6:	cd b7       	in	r28, 0x3d	; 61
    3ab8:	de b7       	in	r29, 0x3e	; 62
	
	if (INT0_Fptr!=NULLPTR)
    3aba:	80 91 ac 01 	lds	r24, 0x01AC
    3abe:	90 91 ad 01 	lds	r25, 0x01AD
    3ac2:	00 97       	sbiw	r24, 0x00	; 0
    3ac4:	29 f0       	breq	.+10     	; 0x3ad0 <__vector_1+0x40>
	{
		INT0_Fptr();
    3ac6:	e0 91 ac 01 	lds	r30, 0x01AC
    3aca:	f0 91 ad 01 	lds	r31, 0x01AD
    3ace:	09 95       	icall
	}
}
    3ad0:	cf 91       	pop	r28
    3ad2:	df 91       	pop	r29
    3ad4:	ff 91       	pop	r31
    3ad6:	ef 91       	pop	r30
    3ad8:	bf 91       	pop	r27
    3ada:	af 91       	pop	r26
    3adc:	9f 91       	pop	r25
    3ade:	8f 91       	pop	r24
    3ae0:	7f 91       	pop	r23
    3ae2:	6f 91       	pop	r22
    3ae4:	5f 91       	pop	r21
    3ae6:	4f 91       	pop	r20
    3ae8:	3f 91       	pop	r19
    3aea:	2f 91       	pop	r18
    3aec:	0f 90       	pop	r0
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	0f 90       	pop	r0
    3af2:	1f 90       	pop	r1
    3af4:	18 95       	reti

00003af6 <__vector_2>:
ISR(INT1_vect)
{
    3af6:	1f 92       	push	r1
    3af8:	0f 92       	push	r0
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	0f 92       	push	r0
    3afe:	11 24       	eor	r1, r1
    3b00:	2f 93       	push	r18
    3b02:	3f 93       	push	r19
    3b04:	4f 93       	push	r20
    3b06:	5f 93       	push	r21
    3b08:	6f 93       	push	r22
    3b0a:	7f 93       	push	r23
    3b0c:	8f 93       	push	r24
    3b0e:	9f 93       	push	r25
    3b10:	af 93       	push	r26
    3b12:	bf 93       	push	r27
    3b14:	ef 93       	push	r30
    3b16:	ff 93       	push	r31
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
	if (INT1_Fptr!=NULLPTR)
    3b20:	80 91 ae 01 	lds	r24, 0x01AE
    3b24:	90 91 af 01 	lds	r25, 0x01AF
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	29 f0       	breq	.+10     	; 0x3b36 <__vector_2+0x40>
	{
		INT1_Fptr();
    3b2c:	e0 91 ae 01 	lds	r30, 0x01AE
    3b30:	f0 91 af 01 	lds	r31, 0x01AF
    3b34:	09 95       	icall
	}
}
    3b36:	cf 91       	pop	r28
    3b38:	df 91       	pop	r29
    3b3a:	ff 91       	pop	r31
    3b3c:	ef 91       	pop	r30
    3b3e:	bf 91       	pop	r27
    3b40:	af 91       	pop	r26
    3b42:	9f 91       	pop	r25
    3b44:	8f 91       	pop	r24
    3b46:	7f 91       	pop	r23
    3b48:	6f 91       	pop	r22
    3b4a:	5f 91       	pop	r21
    3b4c:	4f 91       	pop	r20
    3b4e:	3f 91       	pop	r19
    3b50:	2f 91       	pop	r18
    3b52:	0f 90       	pop	r0
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	0f 90       	pop	r0
    3b58:	1f 90       	pop	r1
    3b5a:	18 95       	reti

00003b5c <__vector_3>:
ISR(INT2_vect)
{
    3b5c:	1f 92       	push	r1
    3b5e:	0f 92       	push	r0
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	0f 92       	push	r0
    3b64:	11 24       	eor	r1, r1
    3b66:	2f 93       	push	r18
    3b68:	3f 93       	push	r19
    3b6a:	4f 93       	push	r20
    3b6c:	5f 93       	push	r21
    3b6e:	6f 93       	push	r22
    3b70:	7f 93       	push	r23
    3b72:	8f 93       	push	r24
    3b74:	9f 93       	push	r25
    3b76:	af 93       	push	r26
    3b78:	bf 93       	push	r27
    3b7a:	ef 93       	push	r30
    3b7c:	ff 93       	push	r31
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
	if (INT2_Fptr!=NULLPTR)
    3b86:	80 91 b0 01 	lds	r24, 0x01B0
    3b8a:	90 91 b1 01 	lds	r25, 0x01B1
    3b8e:	00 97       	sbiw	r24, 0x00	; 0
    3b90:	29 f0       	breq	.+10     	; 0x3b9c <__vector_3+0x40>
	{
		INT2_Fptr();
    3b92:	e0 91 b0 01 	lds	r30, 0x01B0
    3b96:	f0 91 b1 01 	lds	r31, 0x01B1
    3b9a:	09 95       	icall
	}
    3b9c:	cf 91       	pop	r28
    3b9e:	df 91       	pop	r29
    3ba0:	ff 91       	pop	r31
    3ba2:	ef 91       	pop	r30
    3ba4:	bf 91       	pop	r27
    3ba6:	af 91       	pop	r26
    3ba8:	9f 91       	pop	r25
    3baa:	8f 91       	pop	r24
    3bac:	7f 91       	pop	r23
    3bae:	6f 91       	pop	r22
    3bb0:	5f 91       	pop	r21
    3bb2:	4f 91       	pop	r20
    3bb4:	3f 91       	pop	r19
    3bb6:	2f 91       	pop	r18
    3bb8:	0f 90       	pop	r0
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	0f 90       	pop	r0
    3bbe:	1f 90       	pop	r1
    3bc0:	18 95       	reti

00003bc2 <LCD_WriteCommand>:
	_delay_ms(2) ;
	LCD_WriteCommand(0x06) ; // Address increase no shift
}
#elif (LCD_MODE==_4_BIT)
static void LCD_WriteCommand(u8 command)
{
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	cd b7       	in	r28, 0x3d	; 61
    3bc8:	de b7       	in	r29, 0x3e	; 62
    3bca:	e9 97       	sbiw	r28, 0x39	; 57
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePIN (RS,LOW) ;
    3bd8:	82 e1       	ldi	r24, 0x12	; 18
    3bda:	60 e0       	ldi	r22, 0x00	; 0
    3bdc:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D7 , READ_BIT(command , 7)) ;
    3be0:	89 ad       	ldd	r24, Y+57	; 0x39
    3be2:	98 2f       	mov	r25, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	99 27       	eor	r25, r25
    3be8:	99 1f       	adc	r25, r25
    3bea:	87 e1       	ldi	r24, 0x17	; 23
    3bec:	69 2f       	mov	r22, r25
    3bee:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(command , 6)) ;
    3bf2:	89 ad       	ldd	r24, Y+57	; 0x39
    3bf4:	82 95       	swap	r24
    3bf6:	86 95       	lsr	r24
    3bf8:	86 95       	lsr	r24
    3bfa:	83 70       	andi	r24, 0x03	; 3
    3bfc:	98 2f       	mov	r25, r24
    3bfe:	91 70       	andi	r25, 0x01	; 1
    3c00:	86 e1       	ldi	r24, 0x16	; 22
    3c02:	69 2f       	mov	r22, r25
    3c04:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(command , 5)) ;
    3c08:	89 ad       	ldd	r24, Y+57	; 0x39
    3c0a:	82 95       	swap	r24
    3c0c:	86 95       	lsr	r24
    3c0e:	87 70       	andi	r24, 0x07	; 7
    3c10:	98 2f       	mov	r25, r24
    3c12:	91 70       	andi	r25, 0x01	; 1
    3c14:	85 e1       	ldi	r24, 0x15	; 21
    3c16:	69 2f       	mov	r22, r25
    3c18:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(command , 4)) ;
    3c1c:	89 ad       	ldd	r24, Y+57	; 0x39
    3c1e:	82 95       	swap	r24
    3c20:	8f 70       	andi	r24, 0x0F	; 15
    3c22:	98 2f       	mov	r25, r24
    3c24:	91 70       	andi	r25, 0x01	; 1
    3c26:	84 e1       	ldi	r24, 0x14	; 20
    3c28:	69 2f       	mov	r22, r25
    3c2a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    3c2e:	83 e1       	ldi	r24, 0x13	; 19
    3c30:	61 e0       	ldi	r22, 0x01	; 1
    3c32:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	a0 e8       	ldi	r26, 0x80	; 128
    3c3c:	bf e3       	ldi	r27, 0x3F	; 63
    3c3e:	8d ab       	std	Y+53, r24	; 0x35
    3c40:	9e ab       	std	Y+54, r25	; 0x36
    3c42:	af ab       	std	Y+55, r26	; 0x37
    3c44:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c46:	6d a9       	ldd	r22, Y+53	; 0x35
    3c48:	7e a9       	ldd	r23, Y+54	; 0x36
    3c4a:	8f a9       	ldd	r24, Y+55	; 0x37
    3c4c:	98 ad       	ldd	r25, Y+56	; 0x38
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	4a ef       	ldi	r20, 0xFA	; 250
    3c54:	54 e4       	ldi	r21, 0x44	; 68
    3c56:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	89 ab       	std	Y+49, r24	; 0x31
    3c60:	9a ab       	std	Y+50, r25	; 0x32
    3c62:	ab ab       	std	Y+51, r26	; 0x33
    3c64:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c66:	69 a9       	ldd	r22, Y+49	; 0x31
    3c68:	7a a9       	ldd	r23, Y+50	; 0x32
    3c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    3c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e8       	ldi	r20, 0x80	; 128
    3c74:	5f e3       	ldi	r21, 0x3F	; 63
    3c76:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3c7a:	88 23       	and	r24, r24
    3c7c:	2c f4       	brge	.+10     	; 0x3c88 <LCD_WriteCommand+0xc6>
		__ticks = 1;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	98 ab       	std	Y+48, r25	; 0x30
    3c84:	8f a7       	std	Y+47, r24	; 0x2f
    3c86:	3f c0       	rjmp	.+126    	; 0x3d06 <LCD_WriteCommand+0x144>
	else if (__tmp > 65535)
    3c88:	69 a9       	ldd	r22, Y+49	; 0x31
    3c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	3f ef       	ldi	r19, 0xFF	; 255
    3c94:	4f e7       	ldi	r20, 0x7F	; 127
    3c96:	57 e4       	ldi	r21, 0x47	; 71
    3c98:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3c9c:	18 16       	cp	r1, r24
    3c9e:	4c f5       	brge	.+82     	; 0x3cf2 <LCD_WriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca0:	6d a9       	ldd	r22, Y+53	; 0x35
    3ca2:	7e a9       	ldd	r23, Y+54	; 0x36
    3ca4:	8f a9       	ldd	r24, Y+55	; 0x37
    3ca6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e2       	ldi	r20, 0x20	; 32
    3cae:	51 e4       	ldi	r21, 0x41	; 65
    3cb0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	bc 01       	movw	r22, r24
    3cba:	cd 01       	movw	r24, r26
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	98 ab       	std	Y+48, r25	; 0x30
    3cc6:	8f a7       	std	Y+47, r24	; 0x2f
    3cc8:	0f c0       	rjmp	.+30     	; 0x3ce8 <LCD_WriteCommand+0x126>
    3cca:	88 ec       	ldi	r24, 0xC8	; 200
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	9e a7       	std	Y+46, r25	; 0x2e
    3cd0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cd2:	8d a5       	ldd	r24, Y+45	; 0x2d
    3cd4:	9e a5       	ldd	r25, Y+46	; 0x2e
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	f1 f7       	brne	.-4      	; 0x3cd6 <LCD_WriteCommand+0x114>
    3cda:	9e a7       	std	Y+46, r25	; 0x2e
    3cdc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	98 ab       	std	Y+48, r25	; 0x30
    3ce6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ce8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3cea:	98 a9       	ldd	r25, Y+48	; 0x30
    3cec:	00 97       	sbiw	r24, 0x00	; 0
    3cee:	69 f7       	brne	.-38     	; 0x3cca <LCD_WriteCommand+0x108>
    3cf0:	14 c0       	rjmp	.+40     	; 0x3d1a <LCD_WriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf2:	69 a9       	ldd	r22, Y+49	; 0x31
    3cf4:	7a a9       	ldd	r23, Y+50	; 0x32
    3cf6:	8b a9       	ldd	r24, Y+51	; 0x33
    3cf8:	9c a9       	ldd	r25, Y+52	; 0x34
    3cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	98 ab       	std	Y+48, r25	; 0x30
    3d04:	8f a7       	std	Y+47, r24	; 0x2f
    3d06:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d08:	98 a9       	ldd	r25, Y+48	; 0x30
    3d0a:	9c a7       	std	Y+44, r25	; 0x2c
    3d0c:	8b a7       	std	Y+43, r24	; 0x2b
    3d0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d10:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <LCD_WriteCommand+0x150>
    3d16:	9c a7       	std	Y+44, r25	; 0x2c
    3d18:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    3d1a:	83 e1       	ldi	r24, 0x13	; 19
    3d1c:	60 e0       	ldi	r22, 0x00	; 0
    3d1e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a0 e8       	ldi	r26, 0x80	; 128
    3d28:	bf e3       	ldi	r27, 0x3F	; 63
    3d2a:	8f a3       	std	Y+39, r24	; 0x27
    3d2c:	98 a7       	std	Y+40, r25	; 0x28
    3d2e:	a9 a7       	std	Y+41, r26	; 0x29
    3d30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d32:	6f a1       	ldd	r22, Y+39	; 0x27
    3d34:	78 a5       	ldd	r23, Y+40	; 0x28
    3d36:	89 a5       	ldd	r24, Y+41	; 0x29
    3d38:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d3a:	20 e0       	ldi	r18, 0x00	; 0
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	4a ef       	ldi	r20, 0xFA	; 250
    3d40:	54 e4       	ldi	r21, 0x44	; 68
    3d42:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3d46:	dc 01       	movw	r26, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	8b a3       	std	Y+35, r24	; 0x23
    3d4c:	9c a3       	std	Y+36, r25	; 0x24
    3d4e:	ad a3       	std	Y+37, r26	; 0x25
    3d50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d52:	6b a1       	ldd	r22, Y+35	; 0x23
    3d54:	7c a1       	ldd	r23, Y+36	; 0x24
    3d56:	8d a1       	ldd	r24, Y+37	; 0x25
    3d58:	9e a1       	ldd	r25, Y+38	; 0x26
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e8       	ldi	r20, 0x80	; 128
    3d60:	5f e3       	ldi	r21, 0x3F	; 63
    3d62:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3d66:	88 23       	and	r24, r24
    3d68:	2c f4       	brge	.+10     	; 0x3d74 <LCD_WriteCommand+0x1b2>
		__ticks = 1;
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	9a a3       	std	Y+34, r25	; 0x22
    3d70:	89 a3       	std	Y+33, r24	; 0x21
    3d72:	3f c0       	rjmp	.+126    	; 0x3df2 <LCD_WriteCommand+0x230>
	else if (__tmp > 65535)
    3d74:	6b a1       	ldd	r22, Y+35	; 0x23
    3d76:	7c a1       	ldd	r23, Y+36	; 0x24
    3d78:	8d a1       	ldd	r24, Y+37	; 0x25
    3d7a:	9e a1       	ldd	r25, Y+38	; 0x26
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	3f ef       	ldi	r19, 0xFF	; 255
    3d80:	4f e7       	ldi	r20, 0x7F	; 127
    3d82:	57 e4       	ldi	r21, 0x47	; 71
    3d84:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3d88:	18 16       	cp	r1, r24
    3d8a:	4c f5       	brge	.+82     	; 0x3dde <LCD_WriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8c:	6f a1       	ldd	r22, Y+39	; 0x27
    3d8e:	78 a5       	ldd	r23, Y+40	; 0x28
    3d90:	89 a5       	ldd	r24, Y+41	; 0x29
    3d92:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	30 e0       	ldi	r19, 0x00	; 0
    3d98:	40 e2       	ldi	r20, 0x20	; 32
    3d9a:	51 e4       	ldi	r21, 0x41	; 65
    3d9c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3da0:	dc 01       	movw	r26, r24
    3da2:	cb 01       	movw	r24, r22
    3da4:	bc 01       	movw	r22, r24
    3da6:	cd 01       	movw	r24, r26
    3da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dac:	dc 01       	movw	r26, r24
    3dae:	cb 01       	movw	r24, r22
    3db0:	9a a3       	std	Y+34, r25	; 0x22
    3db2:	89 a3       	std	Y+33, r24	; 0x21
    3db4:	0f c0       	rjmp	.+30     	; 0x3dd4 <LCD_WriteCommand+0x212>
    3db6:	88 ec       	ldi	r24, 0xC8	; 200
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	98 a3       	std	Y+32, r25	; 0x20
    3dbc:	8f 8f       	std	Y+31, r24	; 0x1f
    3dbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3dc0:	98 a1       	ldd	r25, Y+32	; 0x20
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <LCD_WriteCommand+0x200>
    3dc6:	98 a3       	std	Y+32, r25	; 0x20
    3dc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dca:	89 a1       	ldd	r24, Y+33	; 0x21
    3dcc:	9a a1       	ldd	r25, Y+34	; 0x22
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	9a a3       	std	Y+34, r25	; 0x22
    3dd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3dd6:	9a a1       	ldd	r25, Y+34	; 0x22
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	69 f7       	brne	.-38     	; 0x3db6 <LCD_WriteCommand+0x1f4>
    3ddc:	14 c0       	rjmp	.+40     	; 0x3e06 <LCD_WriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dde:	6b a1       	ldd	r22, Y+35	; 0x23
    3de0:	7c a1       	ldd	r23, Y+36	; 0x24
    3de2:	8d a1       	ldd	r24, Y+37	; 0x25
    3de4:	9e a1       	ldd	r25, Y+38	; 0x26
    3de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	9a a3       	std	Y+34, r25	; 0x22
    3df0:	89 a3       	std	Y+33, r24	; 0x21
    3df2:	89 a1       	ldd	r24, Y+33	; 0x21
    3df4:	9a a1       	ldd	r25, Y+34	; 0x22
    3df6:	9e 8f       	std	Y+30, r25	; 0x1e
    3df8:	8d 8f       	std	Y+29, r24	; 0x1d
    3dfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3dfe:	01 97       	sbiw	r24, 0x01	; 1
    3e00:	f1 f7       	brne	.-4      	; 0x3dfe <LCD_WriteCommand+0x23c>
    3e02:	9e 8f       	std	Y+30, r25	; 0x1e
    3e04:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	DIO_WritePIN(D7 , READ_BIT(command , 3)) ;
    3e06:	89 ad       	ldd	r24, Y+57	; 0x39
    3e08:	86 95       	lsr	r24
    3e0a:	86 95       	lsr	r24
    3e0c:	86 95       	lsr	r24
    3e0e:	98 2f       	mov	r25, r24
    3e10:	91 70       	andi	r25, 0x01	; 1
    3e12:	87 e1       	ldi	r24, 0x17	; 23
    3e14:	69 2f       	mov	r22, r25
    3e16:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(command , 2)) ;
    3e1a:	89 ad       	ldd	r24, Y+57	; 0x39
    3e1c:	86 95       	lsr	r24
    3e1e:	86 95       	lsr	r24
    3e20:	98 2f       	mov	r25, r24
    3e22:	91 70       	andi	r25, 0x01	; 1
    3e24:	86 e1       	ldi	r24, 0x16	; 22
    3e26:	69 2f       	mov	r22, r25
    3e28:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(command , 1)) ;
    3e2c:	89 ad       	ldd	r24, Y+57	; 0x39
    3e2e:	86 95       	lsr	r24
    3e30:	98 2f       	mov	r25, r24
    3e32:	91 70       	andi	r25, 0x01	; 1
    3e34:	85 e1       	ldi	r24, 0x15	; 21
    3e36:	69 2f       	mov	r22, r25
    3e38:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(command , 0)) ;
    3e3c:	89 ad       	ldd	r24, Y+57	; 0x39
    3e3e:	98 2f       	mov	r25, r24
    3e40:	91 70       	andi	r25, 0x01	; 1
    3e42:	84 e1       	ldi	r24, 0x14	; 20
    3e44:	69 2f       	mov	r22, r25
    3e46:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    3e4a:	83 e1       	ldi	r24, 0x13	; 19
    3e4c:	61 e0       	ldi	r22, 0x01	; 1
    3e4e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	a0 e8       	ldi	r26, 0x80	; 128
    3e58:	bf e3       	ldi	r27, 0x3F	; 63
    3e5a:	89 8f       	std	Y+25, r24	; 0x19
    3e5c:	9a 8f       	std	Y+26, r25	; 0x1a
    3e5e:	ab 8f       	std	Y+27, r26	; 0x1b
    3e60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e62:	69 8d       	ldd	r22, Y+25	; 0x19
    3e64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	4a ef       	ldi	r20, 0xFA	; 250
    3e70:	54 e4       	ldi	r21, 0x44	; 68
    3e72:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	8d 8b       	std	Y+21, r24	; 0x15
    3e7c:	9e 8b       	std	Y+22, r25	; 0x16
    3e7e:	af 8b       	std	Y+23, r26	; 0x17
    3e80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e82:	6d 89       	ldd	r22, Y+21	; 0x15
    3e84:	7e 89       	ldd	r23, Y+22	; 0x16
    3e86:	8f 89       	ldd	r24, Y+23	; 0x17
    3e88:	98 8d       	ldd	r25, Y+24	; 0x18
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f e3       	ldi	r21, 0x3F	; 63
    3e92:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3e96:	88 23       	and	r24, r24
    3e98:	2c f4       	brge	.+10     	; 0x3ea4 <LCD_WriteCommand+0x2e2>
		__ticks = 1;
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	9c 8b       	std	Y+20, r25	; 0x14
    3ea0:	8b 8b       	std	Y+19, r24	; 0x13
    3ea2:	3f c0       	rjmp	.+126    	; 0x3f22 <LCD_WriteCommand+0x360>
	else if (__tmp > 65535)
    3ea4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ea6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ea8:	8f 89       	ldd	r24, Y+23	; 0x17
    3eaa:	98 8d       	ldd	r25, Y+24	; 0x18
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	3f ef       	ldi	r19, 0xFF	; 255
    3eb0:	4f e7       	ldi	r20, 0x7F	; 127
    3eb2:	57 e4       	ldi	r21, 0x47	; 71
    3eb4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3eb8:	18 16       	cp	r1, r24
    3eba:	4c f5       	brge	.+82     	; 0x3f0e <LCD_WriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ebc:	69 8d       	ldd	r22, Y+25	; 0x19
    3ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	40 e2       	ldi	r20, 0x20	; 32
    3eca:	51 e4       	ldi	r21, 0x41	; 65
    3ecc:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	bc 01       	movw	r22, r24
    3ed6:	cd 01       	movw	r24, r26
    3ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	9c 8b       	std	Y+20, r25	; 0x14
    3ee2:	8b 8b       	std	Y+19, r24	; 0x13
    3ee4:	0f c0       	rjmp	.+30     	; 0x3f04 <LCD_WriteCommand+0x342>
    3ee6:	88 ec       	ldi	r24, 0xC8	; 200
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	9a 8b       	std	Y+18, r25	; 0x12
    3eec:	89 8b       	std	Y+17, r24	; 0x11
    3eee:	89 89       	ldd	r24, Y+17	; 0x11
    3ef0:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <LCD_WriteCommand+0x330>
    3ef6:	9a 8b       	std	Y+18, r25	; 0x12
    3ef8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efa:	8b 89       	ldd	r24, Y+19	; 0x13
    3efc:	9c 89       	ldd	r25, Y+20	; 0x14
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	9c 8b       	std	Y+20, r25	; 0x14
    3f02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f04:	8b 89       	ldd	r24, Y+19	; 0x13
    3f06:	9c 89       	ldd	r25, Y+20	; 0x14
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	69 f7       	brne	.-38     	; 0x3ee6 <LCD_WriteCommand+0x324>
    3f0c:	14 c0       	rjmp	.+40     	; 0x3f36 <LCD_WriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3f10:	7e 89       	ldd	r23, Y+22	; 0x16
    3f12:	8f 89       	ldd	r24, Y+23	; 0x17
    3f14:	98 8d       	ldd	r25, Y+24	; 0x18
    3f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	9c 8b       	std	Y+20, r25	; 0x14
    3f20:	8b 8b       	std	Y+19, r24	; 0x13
    3f22:	8b 89       	ldd	r24, Y+19	; 0x13
    3f24:	9c 89       	ldd	r25, Y+20	; 0x14
    3f26:	98 8b       	std	Y+16, r25	; 0x10
    3f28:	8f 87       	std	Y+15, r24	; 0x0f
    3f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f2c:	98 89       	ldd	r25, Y+16	; 0x10
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <LCD_WriteCommand+0x36c>
    3f32:	98 8b       	std	Y+16, r25	; 0x10
    3f34:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    3f36:	83 e1       	ldi	r24, 0x13	; 19
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	a0 e8       	ldi	r26, 0x80	; 128
    3f44:	bf e3       	ldi	r27, 0x3F	; 63
    3f46:	8b 87       	std	Y+11, r24	; 0x0b
    3f48:	9c 87       	std	Y+12, r25	; 0x0c
    3f4a:	ad 87       	std	Y+13, r26	; 0x0d
    3f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	4a ef       	ldi	r20, 0xFA	; 250
    3f5c:	54 e4       	ldi	r21, 0x44	; 68
    3f5e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	8f 83       	std	Y+7, r24	; 0x07
    3f68:	98 87       	std	Y+8, r25	; 0x08
    3f6a:	a9 87       	std	Y+9, r26	; 0x09
    3f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f70:	78 85       	ldd	r23, Y+8	; 0x08
    3f72:	89 85       	ldd	r24, Y+9	; 0x09
    3f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	5f e3       	ldi	r21, 0x3F	; 63
    3f7e:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3f82:	88 23       	and	r24, r24
    3f84:	2c f4       	brge	.+10     	; 0x3f90 <LCD_WriteCommand+0x3ce>
		__ticks = 1;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	9e 83       	std	Y+6, r25	; 0x06
    3f8c:	8d 83       	std	Y+5, r24	; 0x05
    3f8e:	3f c0       	rjmp	.+126    	; 0x400e <LCD_WriteCommand+0x44c>
	else if (__tmp > 65535)
    3f90:	6f 81       	ldd	r22, Y+7	; 0x07
    3f92:	78 85       	ldd	r23, Y+8	; 0x08
    3f94:	89 85       	ldd	r24, Y+9	; 0x09
    3f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	3f ef       	ldi	r19, 0xFF	; 255
    3f9c:	4f e7       	ldi	r20, 0x7F	; 127
    3f9e:	57 e4       	ldi	r21, 0x47	; 71
    3fa0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3fa4:	18 16       	cp	r1, r24
    3fa6:	4c f5       	brge	.+82     	; 0x3ffa <LCD_WriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	40 e2       	ldi	r20, 0x20	; 32
    3fb6:	51 e4       	ldi	r21, 0x41	; 65
    3fb8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	9e 83       	std	Y+6, r25	; 0x06
    3fce:	8d 83       	std	Y+5, r24	; 0x05
    3fd0:	0f c0       	rjmp	.+30     	; 0x3ff0 <LCD_WriteCommand+0x42e>
    3fd2:	88 ec       	ldi	r24, 0xC8	; 200
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	9c 83       	std	Y+4, r25	; 0x04
    3fd8:	8b 83       	std	Y+3, r24	; 0x03
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <LCD_WriteCommand+0x41c>
    3fe2:	9c 83       	std	Y+4, r25	; 0x04
    3fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    3fea:	01 97       	sbiw	r24, 0x01	; 1
    3fec:	9e 83       	std	Y+6, r25	; 0x06
    3fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	69 f7       	brne	.-38     	; 0x3fd2 <LCD_WriteCommand+0x410>
    3ff8:	14 c0       	rjmp	.+40     	; 0x4022 <LCD_WriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    3ffc:	78 85       	ldd	r23, Y+8	; 0x08
    3ffe:	89 85       	ldd	r24, Y+9	; 0x09
    4000:	9a 85       	ldd	r25, Y+10	; 0x0a
    4002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	9e 83       	std	Y+6, r25	; 0x06
    400c:	8d 83       	std	Y+5, r24	; 0x05
    400e:	8d 81       	ldd	r24, Y+5	; 0x05
    4010:	9e 81       	ldd	r25, Y+6	; 0x06
    4012:	9a 83       	std	Y+2, r25	; 0x02
    4014:	89 83       	std	Y+1, r24	; 0x01
    4016:	89 81       	ldd	r24, Y+1	; 0x01
    4018:	9a 81       	ldd	r25, Y+2	; 0x02
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	f1 f7       	brne	.-4      	; 0x401a <LCD_WriteCommand+0x458>
    401e:	9a 83       	std	Y+2, r25	; 0x02
    4020:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	

}
    4022:	e9 96       	adiw	r28, 0x39	; 57
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	de bf       	out	0x3e, r29	; 62
    402a:	0f be       	out	0x3f, r0	; 63
    402c:	cd bf       	out	0x3d, r28	; 61
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	08 95       	ret

00004034 <LCD_WriteData>:

static void LCD_WriteData (u8 data)
{
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
    403c:	e9 97       	sbiw	r28, 0x39	; 57
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePIN(RS , HIGH) ;
    404a:	82 e1       	ldi	r24, 0x12	; 18
    404c:	61 e0       	ldi	r22, 0x01	; 1
    404e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D7 , READ_BIT(data , 7)) ;
    4052:	89 ad       	ldd	r24, Y+57	; 0x39
    4054:	98 2f       	mov	r25, r24
    4056:	99 1f       	adc	r25, r25
    4058:	99 27       	eor	r25, r25
    405a:	99 1f       	adc	r25, r25
    405c:	87 e1       	ldi	r24, 0x17	; 23
    405e:	69 2f       	mov	r22, r25
    4060:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(data , 6)) ;
    4064:	89 ad       	ldd	r24, Y+57	; 0x39
    4066:	82 95       	swap	r24
    4068:	86 95       	lsr	r24
    406a:	86 95       	lsr	r24
    406c:	83 70       	andi	r24, 0x03	; 3
    406e:	98 2f       	mov	r25, r24
    4070:	91 70       	andi	r25, 0x01	; 1
    4072:	86 e1       	ldi	r24, 0x16	; 22
    4074:	69 2f       	mov	r22, r25
    4076:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(data , 5)) ;
    407a:	89 ad       	ldd	r24, Y+57	; 0x39
    407c:	82 95       	swap	r24
    407e:	86 95       	lsr	r24
    4080:	87 70       	andi	r24, 0x07	; 7
    4082:	98 2f       	mov	r25, r24
    4084:	91 70       	andi	r25, 0x01	; 1
    4086:	85 e1       	ldi	r24, 0x15	; 21
    4088:	69 2f       	mov	r22, r25
    408a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(data , 4)) ;
    408e:	89 ad       	ldd	r24, Y+57	; 0x39
    4090:	82 95       	swap	r24
    4092:	8f 70       	andi	r24, 0x0F	; 15
    4094:	98 2f       	mov	r25, r24
    4096:	91 70       	andi	r25, 0x01	; 1
    4098:	84 e1       	ldi	r24, 0x14	; 20
    409a:	69 2f       	mov	r22, r25
    409c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    40a0:	83 e1       	ldi	r24, 0x13	; 19
    40a2:	61 e0       	ldi	r22, 0x01	; 1
    40a4:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	a0 e8       	ldi	r26, 0x80	; 128
    40ae:	bf e3       	ldi	r27, 0x3F	; 63
    40b0:	8d ab       	std	Y+53, r24	; 0x35
    40b2:	9e ab       	std	Y+54, r25	; 0x36
    40b4:	af ab       	std	Y+55, r26	; 0x37
    40b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b8:	6d a9       	ldd	r22, Y+53	; 0x35
    40ba:	7e a9       	ldd	r23, Y+54	; 0x36
    40bc:	8f a9       	ldd	r24, Y+55	; 0x37
    40be:	98 ad       	ldd	r25, Y+56	; 0x38
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	4a ef       	ldi	r20, 0xFA	; 250
    40c6:	54 e4       	ldi	r21, 0x44	; 68
    40c8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	89 ab       	std	Y+49, r24	; 0x31
    40d2:	9a ab       	std	Y+50, r25	; 0x32
    40d4:	ab ab       	std	Y+51, r26	; 0x33
    40d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40d8:	69 a9       	ldd	r22, Y+49	; 0x31
    40da:	7a a9       	ldd	r23, Y+50	; 0x32
    40dc:	8b a9       	ldd	r24, Y+51	; 0x33
    40de:	9c a9       	ldd	r25, Y+52	; 0x34
    40e0:	20 e0       	ldi	r18, 0x00	; 0
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	40 e8       	ldi	r20, 0x80	; 128
    40e6:	5f e3       	ldi	r21, 0x3F	; 63
    40e8:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    40ec:	88 23       	and	r24, r24
    40ee:	2c f4       	brge	.+10     	; 0x40fa <LCD_WriteData+0xc6>
		__ticks = 1;
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	98 ab       	std	Y+48, r25	; 0x30
    40f6:	8f a7       	std	Y+47, r24	; 0x2f
    40f8:	3f c0       	rjmp	.+126    	; 0x4178 <LCD_WriteData+0x144>
	else if (__tmp > 65535)
    40fa:	69 a9       	ldd	r22, Y+49	; 0x31
    40fc:	7a a9       	ldd	r23, Y+50	; 0x32
    40fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4100:	9c a9       	ldd	r25, Y+52	; 0x34
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	3f ef       	ldi	r19, 0xFF	; 255
    4106:	4f e7       	ldi	r20, 0x7F	; 127
    4108:	57 e4       	ldi	r21, 0x47	; 71
    410a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    410e:	18 16       	cp	r1, r24
    4110:	4c f5       	brge	.+82     	; 0x4164 <LCD_WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4112:	6d a9       	ldd	r22, Y+53	; 0x35
    4114:	7e a9       	ldd	r23, Y+54	; 0x36
    4116:	8f a9       	ldd	r24, Y+55	; 0x37
    4118:	98 ad       	ldd	r25, Y+56	; 0x38
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	40 e2       	ldi	r20, 0x20	; 32
    4120:	51 e4       	ldi	r21, 0x41	; 65
    4122:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	bc 01       	movw	r22, r24
    412c:	cd 01       	movw	r24, r26
    412e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	98 ab       	std	Y+48, r25	; 0x30
    4138:	8f a7       	std	Y+47, r24	; 0x2f
    413a:	0f c0       	rjmp	.+30     	; 0x415a <LCD_WriteData+0x126>
    413c:	88 ec       	ldi	r24, 0xC8	; 200
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	9e a7       	std	Y+46, r25	; 0x2e
    4142:	8d a7       	std	Y+45, r24	; 0x2d
    4144:	8d a5       	ldd	r24, Y+45	; 0x2d
    4146:	9e a5       	ldd	r25, Y+46	; 0x2e
    4148:	01 97       	sbiw	r24, 0x01	; 1
    414a:	f1 f7       	brne	.-4      	; 0x4148 <LCD_WriteData+0x114>
    414c:	9e a7       	std	Y+46, r25	; 0x2e
    414e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4150:	8f a5       	ldd	r24, Y+47	; 0x2f
    4152:	98 a9       	ldd	r25, Y+48	; 0x30
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	98 ab       	std	Y+48, r25	; 0x30
    4158:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415a:	8f a5       	ldd	r24, Y+47	; 0x2f
    415c:	98 a9       	ldd	r25, Y+48	; 0x30
    415e:	00 97       	sbiw	r24, 0x00	; 0
    4160:	69 f7       	brne	.-38     	; 0x413c <LCD_WriteData+0x108>
    4162:	14 c0       	rjmp	.+40     	; 0x418c <LCD_WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4164:	69 a9       	ldd	r22, Y+49	; 0x31
    4166:	7a a9       	ldd	r23, Y+50	; 0x32
    4168:	8b a9       	ldd	r24, Y+51	; 0x33
    416a:	9c a9       	ldd	r25, Y+52	; 0x34
    416c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4170:	dc 01       	movw	r26, r24
    4172:	cb 01       	movw	r24, r22
    4174:	98 ab       	std	Y+48, r25	; 0x30
    4176:	8f a7       	std	Y+47, r24	; 0x2f
    4178:	8f a5       	ldd	r24, Y+47	; 0x2f
    417a:	98 a9       	ldd	r25, Y+48	; 0x30
    417c:	9c a7       	std	Y+44, r25	; 0x2c
    417e:	8b a7       	std	Y+43, r24	; 0x2b
    4180:	8b a5       	ldd	r24, Y+43	; 0x2b
    4182:	9c a5       	ldd	r25, Y+44	; 0x2c
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <LCD_WriteData+0x150>
    4188:	9c a7       	std	Y+44, r25	; 0x2c
    418a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    418c:	83 e1       	ldi	r24, 0x13	; 19
    418e:	60 e0       	ldi	r22, 0x00	; 0
    4190:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	a0 e8       	ldi	r26, 0x80	; 128
    419a:	bf e3       	ldi	r27, 0x3F	; 63
    419c:	8f a3       	std	Y+39, r24	; 0x27
    419e:	98 a7       	std	Y+40, r25	; 0x28
    41a0:	a9 a7       	std	Y+41, r26	; 0x29
    41a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a4:	6f a1       	ldd	r22, Y+39	; 0x27
    41a6:	78 a5       	ldd	r23, Y+40	; 0x28
    41a8:	89 a5       	ldd	r24, Y+41	; 0x29
    41aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	4a ef       	ldi	r20, 0xFA	; 250
    41b2:	54 e4       	ldi	r21, 0x44	; 68
    41b4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	8b a3       	std	Y+35, r24	; 0x23
    41be:	9c a3       	std	Y+36, r25	; 0x24
    41c0:	ad a3       	std	Y+37, r26	; 0x25
    41c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41c4:	6b a1       	ldd	r22, Y+35	; 0x23
    41c6:	7c a1       	ldd	r23, Y+36	; 0x24
    41c8:	8d a1       	ldd	r24, Y+37	; 0x25
    41ca:	9e a1       	ldd	r25, Y+38	; 0x26
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e8       	ldi	r20, 0x80	; 128
    41d2:	5f e3       	ldi	r21, 0x3F	; 63
    41d4:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    41d8:	88 23       	and	r24, r24
    41da:	2c f4       	brge	.+10     	; 0x41e6 <LCD_WriteData+0x1b2>
		__ticks = 1;
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	9a a3       	std	Y+34, r25	; 0x22
    41e2:	89 a3       	std	Y+33, r24	; 0x21
    41e4:	3f c0       	rjmp	.+126    	; 0x4264 <LCD_WriteData+0x230>
	else if (__tmp > 65535)
    41e6:	6b a1       	ldd	r22, Y+35	; 0x23
    41e8:	7c a1       	ldd	r23, Y+36	; 0x24
    41ea:	8d a1       	ldd	r24, Y+37	; 0x25
    41ec:	9e a1       	ldd	r25, Y+38	; 0x26
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	3f ef       	ldi	r19, 0xFF	; 255
    41f2:	4f e7       	ldi	r20, 0x7F	; 127
    41f4:	57 e4       	ldi	r21, 0x47	; 71
    41f6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    41fa:	18 16       	cp	r1, r24
    41fc:	4c f5       	brge	.+82     	; 0x4250 <LCD_WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fe:	6f a1       	ldd	r22, Y+39	; 0x27
    4200:	78 a5       	ldd	r23, Y+40	; 0x28
    4202:	89 a5       	ldd	r24, Y+41	; 0x29
    4204:	9a a5       	ldd	r25, Y+42	; 0x2a
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e2       	ldi	r20, 0x20	; 32
    420c:	51 e4       	ldi	r21, 0x41	; 65
    420e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	bc 01       	movw	r22, r24
    4218:	cd 01       	movw	r24, r26
    421a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	9a a3       	std	Y+34, r25	; 0x22
    4224:	89 a3       	std	Y+33, r24	; 0x21
    4226:	0f c0       	rjmp	.+30     	; 0x4246 <LCD_WriteData+0x212>
    4228:	88 ec       	ldi	r24, 0xC8	; 200
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	98 a3       	std	Y+32, r25	; 0x20
    422e:	8f 8f       	std	Y+31, r24	; 0x1f
    4230:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4232:	98 a1       	ldd	r25, Y+32	; 0x20
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <LCD_WriteData+0x200>
    4238:	98 a3       	std	Y+32, r25	; 0x20
    423a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423c:	89 a1       	ldd	r24, Y+33	; 0x21
    423e:	9a a1       	ldd	r25, Y+34	; 0x22
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	9a a3       	std	Y+34, r25	; 0x22
    4244:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4246:	89 a1       	ldd	r24, Y+33	; 0x21
    4248:	9a a1       	ldd	r25, Y+34	; 0x22
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	69 f7       	brne	.-38     	; 0x4228 <LCD_WriteData+0x1f4>
    424e:	14 c0       	rjmp	.+40     	; 0x4278 <LCD_WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4250:	6b a1       	ldd	r22, Y+35	; 0x23
    4252:	7c a1       	ldd	r23, Y+36	; 0x24
    4254:	8d a1       	ldd	r24, Y+37	; 0x25
    4256:	9e a1       	ldd	r25, Y+38	; 0x26
    4258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	9a a3       	std	Y+34, r25	; 0x22
    4262:	89 a3       	std	Y+33, r24	; 0x21
    4264:	89 a1       	ldd	r24, Y+33	; 0x21
    4266:	9a a1       	ldd	r25, Y+34	; 0x22
    4268:	9e 8f       	std	Y+30, r25	; 0x1e
    426a:	8d 8f       	std	Y+29, r24	; 0x1d
    426c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    426e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	f1 f7       	brne	.-4      	; 0x4270 <LCD_WriteData+0x23c>
    4274:	9e 8f       	std	Y+30, r25	; 0x1e
    4276:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	DIO_WritePIN(D7 , READ_BIT(data , 3)) ;
    4278:	89 ad       	ldd	r24, Y+57	; 0x39
    427a:	86 95       	lsr	r24
    427c:	86 95       	lsr	r24
    427e:	86 95       	lsr	r24
    4280:	98 2f       	mov	r25, r24
    4282:	91 70       	andi	r25, 0x01	; 1
    4284:	87 e1       	ldi	r24, 0x17	; 23
    4286:	69 2f       	mov	r22, r25
    4288:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(data , 2)) ;
    428c:	89 ad       	ldd	r24, Y+57	; 0x39
    428e:	86 95       	lsr	r24
    4290:	86 95       	lsr	r24
    4292:	98 2f       	mov	r25, r24
    4294:	91 70       	andi	r25, 0x01	; 1
    4296:	86 e1       	ldi	r24, 0x16	; 22
    4298:	69 2f       	mov	r22, r25
    429a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(data , 1)) ;
    429e:	89 ad       	ldd	r24, Y+57	; 0x39
    42a0:	86 95       	lsr	r24
    42a2:	98 2f       	mov	r25, r24
    42a4:	91 70       	andi	r25, 0x01	; 1
    42a6:	85 e1       	ldi	r24, 0x15	; 21
    42a8:	69 2f       	mov	r22, r25
    42aa:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(data , 0)) ;
    42ae:	89 ad       	ldd	r24, Y+57	; 0x39
    42b0:	98 2f       	mov	r25, r24
    42b2:	91 70       	andi	r25, 0x01	; 1
    42b4:	84 e1       	ldi	r24, 0x14	; 20
    42b6:	69 2f       	mov	r22, r25
    42b8:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    42bc:	83 e1       	ldi	r24, 0x13	; 19
    42be:	61 e0       	ldi	r22, 0x01	; 1
    42c0:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	a0 e8       	ldi	r26, 0x80	; 128
    42ca:	bf e3       	ldi	r27, 0x3F	; 63
    42cc:	89 8f       	std	Y+25, r24	; 0x19
    42ce:	9a 8f       	std	Y+26, r25	; 0x1a
    42d0:	ab 8f       	std	Y+27, r26	; 0x1b
    42d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42d4:	69 8d       	ldd	r22, Y+25	; 0x19
    42d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	4a ef       	ldi	r20, 0xFA	; 250
    42e2:	54 e4       	ldi	r21, 0x44	; 68
    42e4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	8d 8b       	std	Y+21, r24	; 0x15
    42ee:	9e 8b       	std	Y+22, r25	; 0x16
    42f0:	af 8b       	std	Y+23, r26	; 0x17
    42f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42f4:	6d 89       	ldd	r22, Y+21	; 0x15
    42f6:	7e 89       	ldd	r23, Y+22	; 0x16
    42f8:	8f 89       	ldd	r24, Y+23	; 0x17
    42fa:	98 8d       	ldd	r25, Y+24	; 0x18
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	40 e8       	ldi	r20, 0x80	; 128
    4302:	5f e3       	ldi	r21, 0x3F	; 63
    4304:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4308:	88 23       	and	r24, r24
    430a:	2c f4       	brge	.+10     	; 0x4316 <LCD_WriteData+0x2e2>
		__ticks = 1;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	9c 8b       	std	Y+20, r25	; 0x14
    4312:	8b 8b       	std	Y+19, r24	; 0x13
    4314:	3f c0       	rjmp	.+126    	; 0x4394 <LCD_WriteData+0x360>
	else if (__tmp > 65535)
    4316:	6d 89       	ldd	r22, Y+21	; 0x15
    4318:	7e 89       	ldd	r23, Y+22	; 0x16
    431a:	8f 89       	ldd	r24, Y+23	; 0x17
    431c:	98 8d       	ldd	r25, Y+24	; 0x18
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    432a:	18 16       	cp	r1, r24
    432c:	4c f5       	brge	.+82     	; 0x4380 <LCD_WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    432e:	69 8d       	ldd	r22, Y+25	; 0x19
    4330:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4332:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4334:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4336:	20 e0       	ldi	r18, 0x00	; 0
    4338:	30 e0       	ldi	r19, 0x00	; 0
    433a:	40 e2       	ldi	r20, 0x20	; 32
    433c:	51 e4       	ldi	r21, 0x41	; 65
    433e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4342:	dc 01       	movw	r26, r24
    4344:	cb 01       	movw	r24, r22
    4346:	bc 01       	movw	r22, r24
    4348:	cd 01       	movw	r24, r26
    434a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    434e:	dc 01       	movw	r26, r24
    4350:	cb 01       	movw	r24, r22
    4352:	9c 8b       	std	Y+20, r25	; 0x14
    4354:	8b 8b       	std	Y+19, r24	; 0x13
    4356:	0f c0       	rjmp	.+30     	; 0x4376 <LCD_WriteData+0x342>
    4358:	88 ec       	ldi	r24, 0xC8	; 200
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	9a 8b       	std	Y+18, r25	; 0x12
    435e:	89 8b       	std	Y+17, r24	; 0x11
    4360:	89 89       	ldd	r24, Y+17	; 0x11
    4362:	9a 89       	ldd	r25, Y+18	; 0x12
    4364:	01 97       	sbiw	r24, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <LCD_WriteData+0x330>
    4368:	9a 8b       	std	Y+18, r25	; 0x12
    436a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436c:	8b 89       	ldd	r24, Y+19	; 0x13
    436e:	9c 89       	ldd	r25, Y+20	; 0x14
    4370:	01 97       	sbiw	r24, 0x01	; 1
    4372:	9c 8b       	std	Y+20, r25	; 0x14
    4374:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4376:	8b 89       	ldd	r24, Y+19	; 0x13
    4378:	9c 89       	ldd	r25, Y+20	; 0x14
    437a:	00 97       	sbiw	r24, 0x00	; 0
    437c:	69 f7       	brne	.-38     	; 0x4358 <LCD_WriteData+0x324>
    437e:	14 c0       	rjmp	.+40     	; 0x43a8 <LCD_WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4380:	6d 89       	ldd	r22, Y+21	; 0x15
    4382:	7e 89       	ldd	r23, Y+22	; 0x16
    4384:	8f 89       	ldd	r24, Y+23	; 0x17
    4386:	98 8d       	ldd	r25, Y+24	; 0x18
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9c 8b       	std	Y+20, r25	; 0x14
    4392:	8b 8b       	std	Y+19, r24	; 0x13
    4394:	8b 89       	ldd	r24, Y+19	; 0x13
    4396:	9c 89       	ldd	r25, Y+20	; 0x14
    4398:	98 8b       	std	Y+16, r25	; 0x10
    439a:	8f 87       	std	Y+15, r24	; 0x0f
    439c:	8f 85       	ldd	r24, Y+15	; 0x0f
    439e:	98 89       	ldd	r25, Y+16	; 0x10
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	f1 f7       	brne	.-4      	; 0x43a0 <LCD_WriteData+0x36c>
    43a4:	98 8b       	std	Y+16, r25	; 0x10
    43a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    43a8:	83 e1       	ldi	r24, 0x13	; 19
    43aa:	60 e0       	ldi	r22, 0x00	; 0
    43ac:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	a0 e8       	ldi	r26, 0x80	; 128
    43b6:	bf e3       	ldi	r27, 0x3F	; 63
    43b8:	8b 87       	std	Y+11, r24	; 0x0b
    43ba:	9c 87       	std	Y+12, r25	; 0x0c
    43bc:	ad 87       	std	Y+13, r26	; 0x0d
    43be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    43c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    43c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	4a ef       	ldi	r20, 0xFA	; 250
    43ce:	54 e4       	ldi	r21, 0x44	; 68
    43d0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	8f 83       	std	Y+7, r24	; 0x07
    43da:	98 87       	std	Y+8, r25	; 0x08
    43dc:	a9 87       	std	Y+9, r26	; 0x09
    43de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43e0:	6f 81       	ldd	r22, Y+7	; 0x07
    43e2:	78 85       	ldd	r23, Y+8	; 0x08
    43e4:	89 85       	ldd	r24, Y+9	; 0x09
    43e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	40 e8       	ldi	r20, 0x80	; 128
    43ee:	5f e3       	ldi	r21, 0x3F	; 63
    43f0:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    43f4:	88 23       	and	r24, r24
    43f6:	2c f4       	brge	.+10     	; 0x4402 <LCD_WriteData+0x3ce>
		__ticks = 1;
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	9e 83       	std	Y+6, r25	; 0x06
    43fe:	8d 83       	std	Y+5, r24	; 0x05
    4400:	3f c0       	rjmp	.+126    	; 0x4480 <LCD_WriteData+0x44c>
	else if (__tmp > 65535)
    4402:	6f 81       	ldd	r22, Y+7	; 0x07
    4404:	78 85       	ldd	r23, Y+8	; 0x08
    4406:	89 85       	ldd	r24, Y+9	; 0x09
    4408:	9a 85       	ldd	r25, Y+10	; 0x0a
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	3f ef       	ldi	r19, 0xFF	; 255
    440e:	4f e7       	ldi	r20, 0x7F	; 127
    4410:	57 e4       	ldi	r21, 0x47	; 71
    4412:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4416:	18 16       	cp	r1, r24
    4418:	4c f5       	brge	.+82     	; 0x446c <LCD_WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    441a:	6b 85       	ldd	r22, Y+11	; 0x0b
    441c:	7c 85       	ldd	r23, Y+12	; 0x0c
    441e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4420:	9e 85       	ldd	r25, Y+14	; 0x0e
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e2       	ldi	r20, 0x20	; 32
    4428:	51 e4       	ldi	r21, 0x41	; 65
    442a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    442e:	dc 01       	movw	r26, r24
    4430:	cb 01       	movw	r24, r22
    4432:	bc 01       	movw	r22, r24
    4434:	cd 01       	movw	r24, r26
    4436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	9e 83       	std	Y+6, r25	; 0x06
    4440:	8d 83       	std	Y+5, r24	; 0x05
    4442:	0f c0       	rjmp	.+30     	; 0x4462 <LCD_WriteData+0x42e>
    4444:	88 ec       	ldi	r24, 0xC8	; 200
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	9c 83       	std	Y+4, r25	; 0x04
    444a:	8b 83       	std	Y+3, r24	; 0x03
    444c:	8b 81       	ldd	r24, Y+3	; 0x03
    444e:	9c 81       	ldd	r25, Y+4	; 0x04
    4450:	01 97       	sbiw	r24, 0x01	; 1
    4452:	f1 f7       	brne	.-4      	; 0x4450 <LCD_WriteData+0x41c>
    4454:	9c 83       	std	Y+4, r25	; 0x04
    4456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4458:	8d 81       	ldd	r24, Y+5	; 0x05
    445a:	9e 81       	ldd	r25, Y+6	; 0x06
    445c:	01 97       	sbiw	r24, 0x01	; 1
    445e:	9e 83       	std	Y+6, r25	; 0x06
    4460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4462:	8d 81       	ldd	r24, Y+5	; 0x05
    4464:	9e 81       	ldd	r25, Y+6	; 0x06
    4466:	00 97       	sbiw	r24, 0x00	; 0
    4468:	69 f7       	brne	.-38     	; 0x4444 <LCD_WriteData+0x410>
    446a:	14 c0       	rjmp	.+40     	; 0x4494 <LCD_WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    446c:	6f 81       	ldd	r22, Y+7	; 0x07
    446e:	78 85       	ldd	r23, Y+8	; 0x08
    4470:	89 85       	ldd	r24, Y+9	; 0x09
    4472:	9a 85       	ldd	r25, Y+10	; 0x0a
    4474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4478:	dc 01       	movw	r26, r24
    447a:	cb 01       	movw	r24, r22
    447c:	9e 83       	std	Y+6, r25	; 0x06
    447e:	8d 83       	std	Y+5, r24	; 0x05
    4480:	8d 81       	ldd	r24, Y+5	; 0x05
    4482:	9e 81       	ldd	r25, Y+6	; 0x06
    4484:	9a 83       	std	Y+2, r25	; 0x02
    4486:	89 83       	std	Y+1, r24	; 0x01
    4488:	89 81       	ldd	r24, Y+1	; 0x01
    448a:	9a 81       	ldd	r25, Y+2	; 0x02
    448c:	01 97       	sbiw	r24, 0x01	; 1
    448e:	f1 f7       	brne	.-4      	; 0x448c <LCD_WriteData+0x458>
    4490:	9a 83       	std	Y+2, r25	; 0x02
    4492:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;

}
    4494:	e9 96       	adiw	r28, 0x39	; 57
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	cf 91       	pop	r28
    44a2:	df 91       	pop	r29
    44a4:	08 95       	ret

000044a6 <LCD_Init>:
void  LCD_Init ()
{
    44a6:	df 93       	push	r29
    44a8:	cf 93       	push	r28
    44aa:	cd b7       	in	r28, 0x3d	; 61
    44ac:	de b7       	in	r29, 0x3e	; 62
    44ae:	e8 97       	sbiw	r28, 0x38	; 56
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	a8 e4       	ldi	r26, 0x48	; 72
    44c0:	b2 e4       	ldi	r27, 0x42	; 66
    44c2:	8d ab       	std	Y+53, r24	; 0x35
    44c4:	9e ab       	std	Y+54, r25	; 0x36
    44c6:	af ab       	std	Y+55, r26	; 0x37
    44c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ca:	6d a9       	ldd	r22, Y+53	; 0x35
    44cc:	7e a9       	ldd	r23, Y+54	; 0x36
    44ce:	8f a9       	ldd	r24, Y+55	; 0x37
    44d0:	98 ad       	ldd	r25, Y+56	; 0x38
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	4a ef       	ldi	r20, 0xFA	; 250
    44d8:	54 e4       	ldi	r21, 0x44	; 68
    44da:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	89 ab       	std	Y+49, r24	; 0x31
    44e4:	9a ab       	std	Y+50, r25	; 0x32
    44e6:	ab ab       	std	Y+51, r26	; 0x33
    44e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44ea:	69 a9       	ldd	r22, Y+49	; 0x31
    44ec:	7a a9       	ldd	r23, Y+50	; 0x32
    44ee:	8b a9       	ldd	r24, Y+51	; 0x33
    44f0:	9c a9       	ldd	r25, Y+52	; 0x34
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	40 e8       	ldi	r20, 0x80	; 128
    44f8:	5f e3       	ldi	r21, 0x3F	; 63
    44fa:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    44fe:	88 23       	and	r24, r24
    4500:	2c f4       	brge	.+10     	; 0x450c <LCD_Init+0x66>
		__ticks = 1;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	98 ab       	std	Y+48, r25	; 0x30
    4508:	8f a7       	std	Y+47, r24	; 0x2f
    450a:	3f c0       	rjmp	.+126    	; 0x458a <LCD_Init+0xe4>
	else if (__tmp > 65535)
    450c:	69 a9       	ldd	r22, Y+49	; 0x31
    450e:	7a a9       	ldd	r23, Y+50	; 0x32
    4510:	8b a9       	ldd	r24, Y+51	; 0x33
    4512:	9c a9       	ldd	r25, Y+52	; 0x34
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	3f ef       	ldi	r19, 0xFF	; 255
    4518:	4f e7       	ldi	r20, 0x7F	; 127
    451a:	57 e4       	ldi	r21, 0x47	; 71
    451c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4520:	18 16       	cp	r1, r24
    4522:	4c f5       	brge	.+82     	; 0x4576 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4524:	6d a9       	ldd	r22, Y+53	; 0x35
    4526:	7e a9       	ldd	r23, Y+54	; 0x36
    4528:	8f a9       	ldd	r24, Y+55	; 0x37
    452a:	98 ad       	ldd	r25, Y+56	; 0x38
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	40 e2       	ldi	r20, 0x20	; 32
    4532:	51 e4       	ldi	r21, 0x41	; 65
    4534:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	98 ab       	std	Y+48, r25	; 0x30
    454a:	8f a7       	std	Y+47, r24	; 0x2f
    454c:	0f c0       	rjmp	.+30     	; 0x456c <LCD_Init+0xc6>
    454e:	88 ec       	ldi	r24, 0xC8	; 200
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	9e a7       	std	Y+46, r25	; 0x2e
    4554:	8d a7       	std	Y+45, r24	; 0x2d
    4556:	8d a5       	ldd	r24, Y+45	; 0x2d
    4558:	9e a5       	ldd	r25, Y+46	; 0x2e
    455a:	01 97       	sbiw	r24, 0x01	; 1
    455c:	f1 f7       	brne	.-4      	; 0x455a <LCD_Init+0xb4>
    455e:	9e a7       	std	Y+46, r25	; 0x2e
    4560:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4562:	8f a5       	ldd	r24, Y+47	; 0x2f
    4564:	98 a9       	ldd	r25, Y+48	; 0x30
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	98 ab       	std	Y+48, r25	; 0x30
    456a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456c:	8f a5       	ldd	r24, Y+47	; 0x2f
    456e:	98 a9       	ldd	r25, Y+48	; 0x30
    4570:	00 97       	sbiw	r24, 0x00	; 0
    4572:	69 f7       	brne	.-38     	; 0x454e <LCD_Init+0xa8>
    4574:	14 c0       	rjmp	.+40     	; 0x459e <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4576:	69 a9       	ldd	r22, Y+49	; 0x31
    4578:	7a a9       	ldd	r23, Y+50	; 0x32
    457a:	8b a9       	ldd	r24, Y+51	; 0x33
    457c:	9c a9       	ldd	r25, Y+52	; 0x34
    457e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	98 ab       	std	Y+48, r25	; 0x30
    4588:	8f a7       	std	Y+47, r24	; 0x2f
    458a:	8f a5       	ldd	r24, Y+47	; 0x2f
    458c:	98 a9       	ldd	r25, Y+48	; 0x30
    458e:	9c a7       	std	Y+44, r25	; 0x2c
    4590:	8b a7       	std	Y+43, r24	; 0x2b
    4592:	8b a5       	ldd	r24, Y+43	; 0x2b
    4594:	9c a5       	ldd	r25, Y+44	; 0x2c
    4596:	01 97       	sbiw	r24, 0x01	; 1
    4598:	f1 f7       	brne	.-4      	; 0x4596 <LCD_Init+0xf0>
    459a:	9c a7       	std	Y+44, r25	; 0x2c
    459c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50) ; // Because of if lcd_init () call first
	LCD_WriteCommand(0x02) ;
    459e:	82 e0       	ldi	r24, 0x02	; 2
    45a0:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
	LCD_WriteCommand(0x28) ;  // 4 bit ,, 2 line ,, 5*7 font
    45a4:	88 e2       	ldi	r24, 0x28	; 40
    45a6:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	a0 e8       	ldi	r26, 0x80	; 128
    45b0:	bf e3       	ldi	r27, 0x3F	; 63
    45b2:	8f a3       	std	Y+39, r24	; 0x27
    45b4:	98 a7       	std	Y+40, r25	; 0x28
    45b6:	a9 a7       	std	Y+41, r26	; 0x29
    45b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ba:	6f a1       	ldd	r22, Y+39	; 0x27
    45bc:	78 a5       	ldd	r23, Y+40	; 0x28
    45be:	89 a5       	ldd	r24, Y+41	; 0x29
    45c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	4a ef       	ldi	r20, 0xFA	; 250
    45c8:	54 e4       	ldi	r21, 0x44	; 68
    45ca:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	8b a3       	std	Y+35, r24	; 0x23
    45d4:	9c a3       	std	Y+36, r25	; 0x24
    45d6:	ad a3       	std	Y+37, r26	; 0x25
    45d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    45da:	6b a1       	ldd	r22, Y+35	; 0x23
    45dc:	7c a1       	ldd	r23, Y+36	; 0x24
    45de:	8d a1       	ldd	r24, Y+37	; 0x25
    45e0:	9e a1       	ldd	r25, Y+38	; 0x26
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	40 e8       	ldi	r20, 0x80	; 128
    45e8:	5f e3       	ldi	r21, 0x3F	; 63
    45ea:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    45ee:	88 23       	and	r24, r24
    45f0:	2c f4       	brge	.+10     	; 0x45fc <LCD_Init+0x156>
		__ticks = 1;
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	9a a3       	std	Y+34, r25	; 0x22
    45f8:	89 a3       	std	Y+33, r24	; 0x21
    45fa:	3f c0       	rjmp	.+126    	; 0x467a <LCD_Init+0x1d4>
	else if (__tmp > 65535)
    45fc:	6b a1       	ldd	r22, Y+35	; 0x23
    45fe:	7c a1       	ldd	r23, Y+36	; 0x24
    4600:	8d a1       	ldd	r24, Y+37	; 0x25
    4602:	9e a1       	ldd	r25, Y+38	; 0x26
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	3f ef       	ldi	r19, 0xFF	; 255
    4608:	4f e7       	ldi	r20, 0x7F	; 127
    460a:	57 e4       	ldi	r21, 0x47	; 71
    460c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4610:	18 16       	cp	r1, r24
    4612:	4c f5       	brge	.+82     	; 0x4666 <LCD_Init+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4614:	6f a1       	ldd	r22, Y+39	; 0x27
    4616:	78 a5       	ldd	r23, Y+40	; 0x28
    4618:	89 a5       	ldd	r24, Y+41	; 0x29
    461a:	9a a5       	ldd	r25, Y+42	; 0x2a
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	40 e2       	ldi	r20, 0x20	; 32
    4622:	51 e4       	ldi	r21, 0x41	; 65
    4624:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	bc 01       	movw	r22, r24
    462e:	cd 01       	movw	r24, r26
    4630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	9a a3       	std	Y+34, r25	; 0x22
    463a:	89 a3       	std	Y+33, r24	; 0x21
    463c:	0f c0       	rjmp	.+30     	; 0x465c <LCD_Init+0x1b6>
    463e:	88 ec       	ldi	r24, 0xC8	; 200
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	98 a3       	std	Y+32, r25	; 0x20
    4644:	8f 8f       	std	Y+31, r24	; 0x1f
    4646:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4648:	98 a1       	ldd	r25, Y+32	; 0x20
    464a:	01 97       	sbiw	r24, 0x01	; 1
    464c:	f1 f7       	brne	.-4      	; 0x464a <LCD_Init+0x1a4>
    464e:	98 a3       	std	Y+32, r25	; 0x20
    4650:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4652:	89 a1       	ldd	r24, Y+33	; 0x21
    4654:	9a a1       	ldd	r25, Y+34	; 0x22
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	9a a3       	std	Y+34, r25	; 0x22
    465a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    465c:	89 a1       	ldd	r24, Y+33	; 0x21
    465e:	9a a1       	ldd	r25, Y+34	; 0x22
    4660:	00 97       	sbiw	r24, 0x00	; 0
    4662:	69 f7       	brne	.-38     	; 0x463e <LCD_Init+0x198>
    4664:	14 c0       	rjmp	.+40     	; 0x468e <LCD_Init+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4666:	6b a1       	ldd	r22, Y+35	; 0x23
    4668:	7c a1       	ldd	r23, Y+36	; 0x24
    466a:	8d a1       	ldd	r24, Y+37	; 0x25
    466c:	9e a1       	ldd	r25, Y+38	; 0x26
    466e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4672:	dc 01       	movw	r26, r24
    4674:	cb 01       	movw	r24, r22
    4676:	9a a3       	std	Y+34, r25	; 0x22
    4678:	89 a3       	std	Y+33, r24	; 0x21
    467a:	89 a1       	ldd	r24, Y+33	; 0x21
    467c:	9a a1       	ldd	r25, Y+34	; 0x22
    467e:	9e 8f       	std	Y+30, r25	; 0x1e
    4680:	8d 8f       	std	Y+29, r24	; 0x1d
    4682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4684:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4686:	01 97       	sbiw	r24, 0x01	; 1
    4688:	f1 f7       	brne	.-4      	; 0x4686 <LCD_Init+0x1e0>
    468a:	9e 8f       	std	Y+30, r25	; 0x1e
    468c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	LCD_WriteCommand(0x0c) ;  // 0x0e ,, 0x0f cursor
    468e:	8c e0       	ldi	r24, 0x0C	; 12
    4690:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	a0 e8       	ldi	r26, 0x80	; 128
    469a:	bf e3       	ldi	r27, 0x3F	; 63
    469c:	89 8f       	std	Y+25, r24	; 0x19
    469e:	9a 8f       	std	Y+26, r25	; 0x1a
    46a0:	ab 8f       	std	Y+27, r26	; 0x1b
    46a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a4:	69 8d       	ldd	r22, Y+25	; 0x19
    46a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	4a ef       	ldi	r20, 0xFA	; 250
    46b2:	54 e4       	ldi	r21, 0x44	; 68
    46b4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	8d 8b       	std	Y+21, r24	; 0x15
    46be:	9e 8b       	std	Y+22, r25	; 0x16
    46c0:	af 8b       	std	Y+23, r26	; 0x17
    46c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46c4:	6d 89       	ldd	r22, Y+21	; 0x15
    46c6:	7e 89       	ldd	r23, Y+22	; 0x16
    46c8:	8f 89       	ldd	r24, Y+23	; 0x17
    46ca:	98 8d       	ldd	r25, Y+24	; 0x18
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e8       	ldi	r20, 0x80	; 128
    46d2:	5f e3       	ldi	r21, 0x3F	; 63
    46d4:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    46d8:	88 23       	and	r24, r24
    46da:	2c f4       	brge	.+10     	; 0x46e6 <LCD_Init+0x240>
		__ticks = 1;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	9c 8b       	std	Y+20, r25	; 0x14
    46e2:	8b 8b       	std	Y+19, r24	; 0x13
    46e4:	3f c0       	rjmp	.+126    	; 0x4764 <LCD_Init+0x2be>
	else if (__tmp > 65535)
    46e6:	6d 89       	ldd	r22, Y+21	; 0x15
    46e8:	7e 89       	ldd	r23, Y+22	; 0x16
    46ea:	8f 89       	ldd	r24, Y+23	; 0x17
    46ec:	98 8d       	ldd	r25, Y+24	; 0x18
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	3f ef       	ldi	r19, 0xFF	; 255
    46f2:	4f e7       	ldi	r20, 0x7F	; 127
    46f4:	57 e4       	ldi	r21, 0x47	; 71
    46f6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    46fa:	18 16       	cp	r1, r24
    46fc:	4c f5       	brge	.+82     	; 0x4750 <LCD_Init+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4700:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4702:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4704:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	30 e0       	ldi	r19, 0x00	; 0
    470a:	40 e2       	ldi	r20, 0x20	; 32
    470c:	51 e4       	ldi	r21, 0x41	; 65
    470e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4712:	dc 01       	movw	r26, r24
    4714:	cb 01       	movw	r24, r22
    4716:	bc 01       	movw	r22, r24
    4718:	cd 01       	movw	r24, r26
    471a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471e:	dc 01       	movw	r26, r24
    4720:	cb 01       	movw	r24, r22
    4722:	9c 8b       	std	Y+20, r25	; 0x14
    4724:	8b 8b       	std	Y+19, r24	; 0x13
    4726:	0f c0       	rjmp	.+30     	; 0x4746 <LCD_Init+0x2a0>
    4728:	88 ec       	ldi	r24, 0xC8	; 200
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	9a 8b       	std	Y+18, r25	; 0x12
    472e:	89 8b       	std	Y+17, r24	; 0x11
    4730:	89 89       	ldd	r24, Y+17	; 0x11
    4732:	9a 89       	ldd	r25, Y+18	; 0x12
    4734:	01 97       	sbiw	r24, 0x01	; 1
    4736:	f1 f7       	brne	.-4      	; 0x4734 <LCD_Init+0x28e>
    4738:	9a 8b       	std	Y+18, r25	; 0x12
    473a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    473c:	8b 89       	ldd	r24, Y+19	; 0x13
    473e:	9c 89       	ldd	r25, Y+20	; 0x14
    4740:	01 97       	sbiw	r24, 0x01	; 1
    4742:	9c 8b       	std	Y+20, r25	; 0x14
    4744:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4746:	8b 89       	ldd	r24, Y+19	; 0x13
    4748:	9c 89       	ldd	r25, Y+20	; 0x14
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	69 f7       	brne	.-38     	; 0x4728 <LCD_Init+0x282>
    474e:	14 c0       	rjmp	.+40     	; 0x4778 <LCD_Init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4750:	6d 89       	ldd	r22, Y+21	; 0x15
    4752:	7e 89       	ldd	r23, Y+22	; 0x16
    4754:	8f 89       	ldd	r24, Y+23	; 0x17
    4756:	98 8d       	ldd	r25, Y+24	; 0x18
    4758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	9c 8b       	std	Y+20, r25	; 0x14
    4762:	8b 8b       	std	Y+19, r24	; 0x13
    4764:	8b 89       	ldd	r24, Y+19	; 0x13
    4766:	9c 89       	ldd	r25, Y+20	; 0x14
    4768:	98 8b       	std	Y+16, r25	; 0x10
    476a:	8f 87       	std	Y+15, r24	; 0x0f
    476c:	8f 85       	ldd	r24, Y+15	; 0x0f
    476e:	98 89       	ldd	r25, Y+16	; 0x10
    4770:	01 97       	sbiw	r24, 0x01	; 1
    4772:	f1 f7       	brne	.-4      	; 0x4770 <LCD_Init+0x2ca>
    4774:	98 8b       	std	Y+16, r25	; 0x10
    4776:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	LCD_WriteCommand(0x01) ; // clear screen
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	a0 e0       	ldi	r26, 0x00	; 0
    4784:	b0 e4       	ldi	r27, 0x40	; 64
    4786:	8b 87       	std	Y+11, r24	; 0x0b
    4788:	9c 87       	std	Y+12, r25	; 0x0c
    478a:	ad 87       	std	Y+13, r26	; 0x0d
    478c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    478e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4790:	7c 85       	ldd	r23, Y+12	; 0x0c
    4792:	8d 85       	ldd	r24, Y+13	; 0x0d
    4794:	9e 85       	ldd	r25, Y+14	; 0x0e
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	4a ef       	ldi	r20, 0xFA	; 250
    479c:	54 e4       	ldi	r21, 0x44	; 68
    479e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	8f 83       	std	Y+7, r24	; 0x07
    47a8:	98 87       	std	Y+8, r25	; 0x08
    47aa:	a9 87       	std	Y+9, r26	; 0x09
    47ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47ae:	6f 81       	ldd	r22, Y+7	; 0x07
    47b0:	78 85       	ldd	r23, Y+8	; 0x08
    47b2:	89 85       	ldd	r24, Y+9	; 0x09
    47b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	40 e8       	ldi	r20, 0x80	; 128
    47bc:	5f e3       	ldi	r21, 0x3F	; 63
    47be:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    47c2:	88 23       	and	r24, r24
    47c4:	2c f4       	brge	.+10     	; 0x47d0 <LCD_Init+0x32a>
		__ticks = 1;
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	9e 83       	std	Y+6, r25	; 0x06
    47cc:	8d 83       	std	Y+5, r24	; 0x05
    47ce:	3f c0       	rjmp	.+126    	; 0x484e <LCD_Init+0x3a8>
	else if (__tmp > 65535)
    47d0:	6f 81       	ldd	r22, Y+7	; 0x07
    47d2:	78 85       	ldd	r23, Y+8	; 0x08
    47d4:	89 85       	ldd	r24, Y+9	; 0x09
    47d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	3f ef       	ldi	r19, 0xFF	; 255
    47dc:	4f e7       	ldi	r20, 0x7F	; 127
    47de:	57 e4       	ldi	r21, 0x47	; 71
    47e0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    47e4:	18 16       	cp	r1, r24
    47e6:	4c f5       	brge	.+82     	; 0x483a <LCD_Init+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    47ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e2       	ldi	r20, 0x20	; 32
    47f6:	51 e4       	ldi	r21, 0x41	; 65
    47f8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	bc 01       	movw	r22, r24
    4802:	cd 01       	movw	r24, r26
    4804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	9e 83       	std	Y+6, r25	; 0x06
    480e:	8d 83       	std	Y+5, r24	; 0x05
    4810:	0f c0       	rjmp	.+30     	; 0x4830 <LCD_Init+0x38a>
    4812:	88 ec       	ldi	r24, 0xC8	; 200
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	9c 83       	std	Y+4, r25	; 0x04
    4818:	8b 83       	std	Y+3, r24	; 0x03
    481a:	8b 81       	ldd	r24, Y+3	; 0x03
    481c:	9c 81       	ldd	r25, Y+4	; 0x04
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	f1 f7       	brne	.-4      	; 0x481e <LCD_Init+0x378>
    4822:	9c 83       	std	Y+4, r25	; 0x04
    4824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4826:	8d 81       	ldd	r24, Y+5	; 0x05
    4828:	9e 81       	ldd	r25, Y+6	; 0x06
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	9e 83       	std	Y+6, r25	; 0x06
    482e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4830:	8d 81       	ldd	r24, Y+5	; 0x05
    4832:	9e 81       	ldd	r25, Y+6	; 0x06
    4834:	00 97       	sbiw	r24, 0x00	; 0
    4836:	69 f7       	brne	.-38     	; 0x4812 <LCD_Init+0x36c>
    4838:	14 c0       	rjmp	.+40     	; 0x4862 <LCD_Init+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483a:	6f 81       	ldd	r22, Y+7	; 0x07
    483c:	78 85       	ldd	r23, Y+8	; 0x08
    483e:	89 85       	ldd	r24, Y+9	; 0x09
    4840:	9a 85       	ldd	r25, Y+10	; 0x0a
    4842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	9e 83       	std	Y+6, r25	; 0x06
    484c:	8d 83       	std	Y+5, r24	; 0x05
    484e:	8d 81       	ldd	r24, Y+5	; 0x05
    4850:	9e 81       	ldd	r25, Y+6	; 0x06
    4852:	9a 83       	std	Y+2, r25	; 0x02
    4854:	89 83       	std	Y+1, r24	; 0x01
    4856:	89 81       	ldd	r24, Y+1	; 0x01
    4858:	9a 81       	ldd	r25, Y+2	; 0x02
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	f1 f7       	brne	.-4      	; 0x485a <LCD_Init+0x3b4>
    485e:	9a 83       	std	Y+2, r25	; 0x02
    4860:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
	LCD_WriteCommand(0x06) ; // Address increase no shift
    4862:	86 e0       	ldi	r24, 0x06	; 6
    4864:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
	
}
    4868:	e8 96       	adiw	r28, 0x38	; 56
    486a:	0f b6       	in	r0, 0x3f	; 63
    486c:	f8 94       	cli
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	cf 91       	pop	r28
    4876:	df 91       	pop	r29
    4878:	08 95       	ret

0000487a <IntToString>:

#endif


static void IntToString (u8* str, s64 num)
{
    487a:	8f 92       	push	r8
    487c:	9f 92       	push	r9
    487e:	af 92       	push	r10
    4880:	bf 92       	push	r11
    4882:	cf 92       	push	r12
    4884:	df 92       	push	r13
    4886:	ef 92       	push	r14
    4888:	ff 92       	push	r15
    488a:	0f 93       	push	r16
    488c:	1f 93       	push	r17
    488e:	df 93       	push	r29
    4890:	cf 93       	push	r28
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	c2 54       	subi	r28, 0x42	; 66
    4898:	d0 40       	sbci	r29, 0x00	; 0
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
    48a4:	9a 87       	std	Y+10, r25	; 0x0a
    48a6:	89 87       	std	Y+9, r24	; 0x09
    48a8:	0b 87       	std	Y+11, r16	; 0x0b
    48aa:	1c 87       	std	Y+12, r17	; 0x0c
    48ac:	2d 87       	std	Y+13, r18	; 0x0d
    48ae:	3e 87       	std	Y+14, r19	; 0x0e
    48b0:	4f 87       	std	Y+15, r20	; 0x0f
    48b2:	58 8b       	std	Y+16, r21	; 0x10
    48b4:	69 8b       	std	Y+17, r22	; 0x11
    48b6:	7a 8b       	std	Y+18, r23	; 0x12
	int i =0, j, temp, flag = 1 ;
    48b8:	18 86       	std	Y+8, r1	; 0x08
    48ba:	1f 82       	std	Y+7, r1	; 0x07
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	9a 83       	std	Y+2, r25	; 0x02
    48c2:	89 83       	std	Y+1, r24	; 0x01
	if(num==0)
    48c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    48c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    48c8:	89 2b       	or	r24, r25
    48ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    48cc:	89 2b       	or	r24, r25
    48ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    48d0:	89 2b       	or	r24, r25
    48d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    48d4:	89 2b       	or	r24, r25
    48d6:	98 89       	ldd	r25, Y+16	; 0x10
    48d8:	89 2b       	or	r24, r25
    48da:	99 89       	ldd	r25, Y+17	; 0x11
    48dc:	89 2b       	or	r24, r25
    48de:	9a 89       	ldd	r25, Y+18	; 0x12
    48e0:	89 2b       	or	r24, r25
    48e2:	88 23       	and	r24, r24
    48e4:	b9 f4       	brne	.+46     	; 0x4914 <IntToString+0x9a>
	{
		str[i] = '0' ;
    48e6:	2f 81       	ldd	r18, Y+7	; 0x07
    48e8:	38 85       	ldd	r19, Y+8	; 0x08
    48ea:	89 85       	ldd	r24, Y+9	; 0x09
    48ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ee:	fc 01       	movw	r30, r24
    48f0:	e2 0f       	add	r30, r18
    48f2:	f3 1f       	adc	r31, r19
    48f4:	80 e3       	ldi	r24, 0x30	; 48
    48f6:	80 83       	st	Z, r24
		str[++i] = '\0' ;
    48f8:	8f 81       	ldd	r24, Y+7	; 0x07
    48fa:	98 85       	ldd	r25, Y+8	; 0x08
    48fc:	01 96       	adiw	r24, 0x01	; 1
    48fe:	98 87       	std	Y+8, r25	; 0x08
    4900:	8f 83       	std	Y+7, r24	; 0x07
    4902:	2f 81       	ldd	r18, Y+7	; 0x07
    4904:	38 85       	ldd	r19, Y+8	; 0x08
    4906:	89 85       	ldd	r24, Y+9	; 0x09
    4908:	9a 85       	ldd	r25, Y+10	; 0x0a
    490a:	fc 01       	movw	r30, r24
    490c:	e2 0f       	add	r30, r18
    490e:	f3 1f       	adc	r31, r19
    4910:	10 82       	st	Z, r1
    4912:	7e c2       	rjmp	.+1276   	; 0x4e10 <IntToString+0x596>
	}
	else
	{
		if (num < 0 )
    4914:	8a 89       	ldd	r24, Y+18	; 0x12
    4916:	88 23       	and	r24, r24
    4918:	d4 f0       	brlt	.+52     	; 0x494e <IntToString+0xd4>
    491a:	8a 89       	ldd	r24, Y+18	; 0x12
    491c:	88 23       	and	r24, r24
    491e:	09 f0       	breq	.+2      	; 0x4922 <IntToString+0xa8>
    4920:	74 c1       	rjmp	.+744    	; 0x4c0a <IntToString+0x390>
    4922:	89 89       	ldd	r24, Y+17	; 0x11
    4924:	88 23       	and	r24, r24
    4926:	09 f0       	breq	.+2      	; 0x492a <IntToString+0xb0>
    4928:	70 c1       	rjmp	.+736    	; 0x4c0a <IntToString+0x390>
    492a:	88 89       	ldd	r24, Y+16	; 0x10
    492c:	88 23       	and	r24, r24
    492e:	09 f0       	breq	.+2      	; 0x4932 <IntToString+0xb8>
    4930:	6c c1       	rjmp	.+728    	; 0x4c0a <IntToString+0x390>
    4932:	8f 85       	ldd	r24, Y+15	; 0x0f
    4934:	88 23       	and	r24, r24
    4936:	09 f0       	breq	.+2      	; 0x493a <IntToString+0xc0>
    4938:	68 c1       	rjmp	.+720    	; 0x4c0a <IntToString+0x390>
    493a:	8e 85       	ldd	r24, Y+14	; 0x0e
    493c:	88 23       	and	r24, r24
    493e:	09 f0       	breq	.+2      	; 0x4942 <IntToString+0xc8>
    4940:	64 c1       	rjmp	.+712    	; 0x4c0a <IntToString+0x390>
    4942:	8d 85       	ldd	r24, Y+13	; 0x0d
    4944:	88 23       	and	r24, r24
    4946:	09 f0       	breq	.+2      	; 0x494a <IntToString+0xd0>
    4948:	60 c1       	rjmp	.+704    	; 0x4c0a <IntToString+0x390>
    494a:	4c 85       	ldd	r20, Y+12	; 0x0c
    494c:	5e c1       	rjmp	.+700    	; 0x4c0a <IntToString+0x390>
		{
			str[i++] = '-' ;
    494e:	2f 81       	ldd	r18, Y+7	; 0x07
    4950:	38 85       	ldd	r19, Y+8	; 0x08
    4952:	89 85       	ldd	r24, Y+9	; 0x09
    4954:	9a 85       	ldd	r25, Y+10	; 0x0a
    4956:	fc 01       	movw	r30, r24
    4958:	e2 0f       	add	r30, r18
    495a:	f3 1f       	adc	r31, r19
    495c:	8d e2       	ldi	r24, 0x2D	; 45
    495e:	80 83       	st	Z, r24
    4960:	8f 81       	ldd	r24, Y+7	; 0x07
    4962:	98 85       	ldd	r25, Y+8	; 0x08
    4964:	01 96       	adiw	r24, 0x01	; 1
    4966:	98 87       	std	Y+8, r25	; 0x08
    4968:	8f 83       	std	Y+7, r24	; 0x07
			num *= -1 ;
    496a:	1c 8a       	std	Y+20, r1	; 0x14
    496c:	1d 8a       	std	Y+21, r1	; 0x15
    496e:	1e 8a       	std	Y+22, r1	; 0x16
    4970:	1f 8a       	std	Y+23, r1	; 0x17
    4972:	18 8e       	std	Y+24, r1	; 0x18
    4974:	19 8e       	std	Y+25, r1	; 0x19
    4976:	1a 8e       	std	Y+26, r1	; 0x1a
    4978:	1b 8e       	std	Y+27, r1	; 0x1b
    497a:	5b 85       	ldd	r21, Y+11	; 0x0b
    497c:	5c 8f       	std	Y+28, r21	; 0x1c
    497e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4980:	8d 8f       	std	Y+29, r24	; 0x1d
    4982:	9d 85       	ldd	r25, Y+13	; 0x0d
    4984:	9e 8f       	std	Y+30, r25	; 0x1e
    4986:	ee 85       	ldd	r30, Y+14	; 0x0e
    4988:	ef 8f       	std	Y+31, r30	; 0x1f
    498a:	ff 85       	ldd	r31, Y+15	; 0x0f
    498c:	f8 a3       	std	Y+32, r31	; 0x20
    498e:	48 89       	ldd	r20, Y+16	; 0x10
    4990:	49 a3       	std	Y+33, r20	; 0x21
    4992:	59 89       	ldd	r21, Y+17	; 0x11
    4994:	5a a3       	std	Y+34, r21	; 0x22
    4996:	8a 89       	ldd	r24, Y+18	; 0x12
    4998:	8b a3       	std	Y+35, r24	; 0x23
    499a:	9c 89       	ldd	r25, Y+20	; 0x14
    499c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    499e:	9e 1b       	sub	r25, r30
    49a0:	9c a3       	std	Y+36, r25	; 0x24
    49a2:	f1 e0       	ldi	r31, 0x01	; 1
    49a4:	fc a7       	std	Y+44, r31	; 0x2c
    49a6:	4c a1       	ldd	r20, Y+36	; 0x24
    49a8:	5c 89       	ldd	r21, Y+20	; 0x14
    49aa:	54 17       	cp	r21, r20
    49ac:	08 f0       	brcs	.+2      	; 0x49b0 <IntToString+0x136>
    49ae:	1c a6       	std	Y+44, r1	; 0x2c
    49b0:	8d 89       	ldd	r24, Y+21	; 0x15
    49b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    49b4:	89 1b       	sub	r24, r25
    49b6:	8d a3       	std	Y+37, r24	; 0x25
    49b8:	e1 e0       	ldi	r30, 0x01	; 1
    49ba:	ed a7       	std	Y+45, r30	; 0x2d
    49bc:	fd a1       	ldd	r31, Y+37	; 0x25
    49be:	4d 89       	ldd	r20, Y+21	; 0x15
    49c0:	4f 17       	cp	r20, r31
    49c2:	08 f0       	brcs	.+2      	; 0x49c6 <IntToString+0x14c>
    49c4:	1d a6       	std	Y+45, r1	; 0x2d
    49c6:	5d a1       	ldd	r21, Y+37	; 0x25
    49c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    49ca:	58 1b       	sub	r21, r24
    49cc:	5e a7       	std	Y+46, r21	; 0x2e
    49ce:	91 e0       	ldi	r25, 0x01	; 1
    49d0:	9f a7       	std	Y+47, r25	; 0x2f
    49d2:	ee a5       	ldd	r30, Y+46	; 0x2e
    49d4:	fd a1       	ldd	r31, Y+37	; 0x25
    49d6:	fe 17       	cp	r31, r30
    49d8:	08 f0       	brcs	.+2      	; 0x49dc <IntToString+0x162>
    49da:	1f a6       	std	Y+47, r1	; 0x2f
    49dc:	4d a5       	ldd	r20, Y+45	; 0x2d
    49de:	5f a5       	ldd	r21, Y+47	; 0x2f
    49e0:	45 2b       	or	r20, r21
    49e2:	4d a7       	std	Y+45, r20	; 0x2d
    49e4:	8e a5       	ldd	r24, Y+46	; 0x2e
    49e6:	8d a3       	std	Y+37, r24	; 0x25
    49e8:	9e 89       	ldd	r25, Y+22	; 0x16
    49ea:	ee 8d       	ldd	r30, Y+30	; 0x1e
    49ec:	9e 1b       	sub	r25, r30
    49ee:	9e a3       	std	Y+38, r25	; 0x26
    49f0:	f1 e0       	ldi	r31, 0x01	; 1
    49f2:	f8 ab       	std	Y+48, r31	; 0x30
    49f4:	4e a1       	ldd	r20, Y+38	; 0x26
    49f6:	5e 89       	ldd	r21, Y+22	; 0x16
    49f8:	54 17       	cp	r21, r20
    49fa:	08 f0       	brcs	.+2      	; 0x49fe <IntToString+0x184>
    49fc:	18 aa       	std	Y+48, r1	; 0x30
    49fe:	8e a1       	ldd	r24, Y+38	; 0x26
    4a00:	9d a5       	ldd	r25, Y+45	; 0x2d
    4a02:	89 1b       	sub	r24, r25
    4a04:	89 ab       	std	Y+49, r24	; 0x31
    4a06:	e1 e0       	ldi	r30, 0x01	; 1
    4a08:	ea ab       	std	Y+50, r30	; 0x32
    4a0a:	f9 a9       	ldd	r31, Y+49	; 0x31
    4a0c:	4e a1       	ldd	r20, Y+38	; 0x26
    4a0e:	4f 17       	cp	r20, r31
    4a10:	08 f0       	brcs	.+2      	; 0x4a14 <IntToString+0x19a>
    4a12:	1a aa       	std	Y+50, r1	; 0x32
    4a14:	58 a9       	ldd	r21, Y+48	; 0x30
    4a16:	8a a9       	ldd	r24, Y+50	; 0x32
    4a18:	58 2b       	or	r21, r24
    4a1a:	58 ab       	std	Y+48, r21	; 0x30
    4a1c:	99 a9       	ldd	r25, Y+49	; 0x31
    4a1e:	9e a3       	std	Y+38, r25	; 0x26
    4a20:	ef 89       	ldd	r30, Y+23	; 0x17
    4a22:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4a24:	ef 1b       	sub	r30, r31
    4a26:	ef a3       	std	Y+39, r30	; 0x27
    4a28:	41 e0       	ldi	r20, 0x01	; 1
    4a2a:	4b ab       	std	Y+51, r20	; 0x33
    4a2c:	5f a1       	ldd	r21, Y+39	; 0x27
    4a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a30:	85 17       	cp	r24, r21
    4a32:	08 f0       	brcs	.+2      	; 0x4a36 <IntToString+0x1bc>
    4a34:	1b aa       	std	Y+51, r1	; 0x33
    4a36:	9f a1       	ldd	r25, Y+39	; 0x27
    4a38:	e8 a9       	ldd	r30, Y+48	; 0x30
    4a3a:	9e 1b       	sub	r25, r30
    4a3c:	9c ab       	std	Y+52, r25	; 0x34
    4a3e:	f1 e0       	ldi	r31, 0x01	; 1
    4a40:	fd ab       	std	Y+53, r31	; 0x35
    4a42:	4c a9       	ldd	r20, Y+52	; 0x34
    4a44:	5f a1       	ldd	r21, Y+39	; 0x27
    4a46:	54 17       	cp	r21, r20
    4a48:	08 f0       	brcs	.+2      	; 0x4a4c <IntToString+0x1d2>
    4a4a:	1d aa       	std	Y+53, r1	; 0x35
    4a4c:	8b a9       	ldd	r24, Y+51	; 0x33
    4a4e:	9d a9       	ldd	r25, Y+53	; 0x35
    4a50:	89 2b       	or	r24, r25
    4a52:	8b ab       	std	Y+51, r24	; 0x33
    4a54:	ec a9       	ldd	r30, Y+52	; 0x34
    4a56:	ef a3       	std	Y+39, r30	; 0x27
    4a58:	f8 8d       	ldd	r31, Y+24	; 0x18
    4a5a:	48 a1       	ldd	r20, Y+32	; 0x20
    4a5c:	f4 1b       	sub	r31, r20
    4a5e:	f8 a7       	std	Y+40, r31	; 0x28
    4a60:	51 e0       	ldi	r21, 0x01	; 1
    4a62:	5e ab       	std	Y+54, r21	; 0x36
    4a64:	88 a5       	ldd	r24, Y+40	; 0x28
    4a66:	98 8d       	ldd	r25, Y+24	; 0x18
    4a68:	98 17       	cp	r25, r24
    4a6a:	08 f0       	brcs	.+2      	; 0x4a6e <IntToString+0x1f4>
    4a6c:	1e aa       	std	Y+54, r1	; 0x36
    4a6e:	e8 a5       	ldd	r30, Y+40	; 0x28
    4a70:	fb a9       	ldd	r31, Y+51	; 0x33
    4a72:	ef 1b       	sub	r30, r31
    4a74:	ef ab       	std	Y+55, r30	; 0x37
    4a76:	41 e0       	ldi	r20, 0x01	; 1
    4a78:	48 af       	std	Y+56, r20	; 0x38
    4a7a:	5f a9       	ldd	r21, Y+55	; 0x37
    4a7c:	88 a5       	ldd	r24, Y+40	; 0x28
    4a7e:	85 17       	cp	r24, r21
    4a80:	08 f0       	brcs	.+2      	; 0x4a84 <IntToString+0x20a>
    4a82:	18 ae       	std	Y+56, r1	; 0x38
    4a84:	9e a9       	ldd	r25, Y+54	; 0x36
    4a86:	e8 ad       	ldd	r30, Y+56	; 0x38
    4a88:	9e 2b       	or	r25, r30
    4a8a:	9e ab       	std	Y+54, r25	; 0x36
    4a8c:	ff a9       	ldd	r31, Y+55	; 0x37
    4a8e:	f8 a7       	std	Y+40, r31	; 0x28
    4a90:	49 8d       	ldd	r20, Y+25	; 0x19
    4a92:	59 a1       	ldd	r21, Y+33	; 0x21
    4a94:	45 1b       	sub	r20, r21
    4a96:	49 a7       	std	Y+41, r20	; 0x29
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	89 af       	std	Y+57, r24	; 0x39
    4a9c:	99 a5       	ldd	r25, Y+41	; 0x29
    4a9e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4aa0:	e9 17       	cp	r30, r25
    4aa2:	08 f0       	brcs	.+2      	; 0x4aa6 <IntToString+0x22c>
    4aa4:	19 ae       	std	Y+57, r1	; 0x39
    4aa6:	f9 a5       	ldd	r31, Y+41	; 0x29
    4aa8:	4e a9       	ldd	r20, Y+54	; 0x36
    4aaa:	f4 1b       	sub	r31, r20
    4aac:	fa af       	std	Y+58, r31	; 0x3a
    4aae:	51 e0       	ldi	r21, 0x01	; 1
    4ab0:	5b af       	std	Y+59, r21	; 0x3b
    4ab2:	8a ad       	ldd	r24, Y+58	; 0x3a
    4ab4:	99 a5       	ldd	r25, Y+41	; 0x29
    4ab6:	98 17       	cp	r25, r24
    4ab8:	08 f0       	brcs	.+2      	; 0x4abc <IntToString+0x242>
    4aba:	1b ae       	std	Y+59, r1	; 0x3b
    4abc:	e9 ad       	ldd	r30, Y+57	; 0x39
    4abe:	fb ad       	ldd	r31, Y+59	; 0x3b
    4ac0:	ef 2b       	or	r30, r31
    4ac2:	e9 af       	std	Y+57, r30	; 0x39
    4ac4:	4a ad       	ldd	r20, Y+58	; 0x3a
    4ac6:	49 a7       	std	Y+41, r20	; 0x29
    4ac8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    4aca:	8a a1       	ldd	r24, Y+34	; 0x22
    4acc:	58 1b       	sub	r21, r24
    4ace:	5a a7       	std	Y+42, r21	; 0x2a
    4ad0:	91 e0       	ldi	r25, 0x01	; 1
    4ad2:	9c af       	std	Y+60, r25	; 0x3c
    4ad4:	ea a5       	ldd	r30, Y+42	; 0x2a
    4ad6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4ad8:	fe 17       	cp	r31, r30
    4ada:	08 f0       	brcs	.+2      	; 0x4ade <IntToString+0x264>
    4adc:	1c ae       	std	Y+60, r1	; 0x3c
    4ade:	4a a5       	ldd	r20, Y+42	; 0x2a
    4ae0:	59 ad       	ldd	r21, Y+57	; 0x39
    4ae2:	45 1b       	sub	r20, r21
    4ae4:	4d af       	std	Y+61, r20	; 0x3d
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	8e af       	std	Y+62, r24	; 0x3e
    4aea:	9d ad       	ldd	r25, Y+61	; 0x3d
    4aec:	ea a5       	ldd	r30, Y+42	; 0x2a
    4aee:	e9 17       	cp	r30, r25
    4af0:	08 f0       	brcs	.+2      	; 0x4af4 <IntToString+0x27a>
    4af2:	1e ae       	std	Y+62, r1	; 0x3e
    4af4:	fc ad       	ldd	r31, Y+60	; 0x3c
    4af6:	4e ad       	ldd	r20, Y+62	; 0x3e
    4af8:	f4 2b       	or	r31, r20
    4afa:	fc af       	std	Y+60, r31	; 0x3c
    4afc:	5d ad       	ldd	r21, Y+61	; 0x3d
    4afe:	5a a7       	std	Y+42, r21	; 0x2a
    4b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b02:	9b a1       	ldd	r25, Y+35	; 0x23
    4b04:	89 1b       	sub	r24, r25
    4b06:	8b a7       	std	Y+43, r24	; 0x2b
    4b08:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b0a:	ec ad       	ldd	r30, Y+60	; 0x3c
    4b0c:	8e 1b       	sub	r24, r30
    4b0e:	8b a7       	std	Y+43, r24	; 0x2b
    4b10:	fc a1       	ldd	r31, Y+36	; 0x24
    4b12:	fb 87       	std	Y+11, r31	; 0x0b
    4b14:	4d a1       	ldd	r20, Y+37	; 0x25
    4b16:	4c 87       	std	Y+12, r20	; 0x0c
    4b18:	5e a1       	ldd	r21, Y+38	; 0x26
    4b1a:	5d 87       	std	Y+13, r21	; 0x0d
    4b1c:	8f a1       	ldd	r24, Y+39	; 0x27
    4b1e:	8e 87       	std	Y+14, r24	; 0x0e
    4b20:	98 a5       	ldd	r25, Y+40	; 0x28
    4b22:	9f 87       	std	Y+15, r25	; 0x0f
    4b24:	e9 a5       	ldd	r30, Y+41	; 0x29
    4b26:	e8 8b       	std	Y+16, r30	; 0x10
    4b28:	fa a5       	ldd	r31, Y+42	; 0x2a
    4b2a:	f9 8b       	std	Y+17, r31	; 0x11
    4b2c:	4b a5       	ldd	r20, Y+43	; 0x2b
    4b2e:	4a 8b       	std	Y+18, r20	; 0x12
			flag = 0 ;
    4b30:	1a 82       	std	Y+2, r1	; 0x02
    4b32:	19 82       	std	Y+1, r1	; 0x01
    4b34:	6a c0       	rjmp	.+212    	; 0x4c0a <IntToString+0x390>
		}
		for(  ; num > 0 ; ++i)
		{
			str[i] = (num%10) + '0' ;
    4b36:	2f 81       	ldd	r18, Y+7	; 0x07
    4b38:	38 85       	ldd	r19, Y+8	; 0x08
    4b3a:	89 85       	ldd	r24, Y+9	; 0x09
    4b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b3e:	4c 01       	movw	r8, r24
    4b40:	82 0e       	add	r8, r18
    4b42:	93 1e       	adc	r9, r19
    4b44:	ab 84       	ldd	r10, Y+11	; 0x0b
    4b46:	bc 84       	ldd	r11, Y+12	; 0x0c
    4b48:	cd 84       	ldd	r12, Y+13	; 0x0d
    4b4a:	de 84       	ldd	r13, Y+14	; 0x0e
    4b4c:	ef 84       	ldd	r14, Y+15	; 0x0f
    4b4e:	f8 88       	ldd	r15, Y+16	; 0x10
    4b50:	09 89       	ldd	r16, Y+17	; 0x11
    4b52:	1a 89       	ldd	r17, Y+18	; 0x12
    4b54:	2a 2d       	mov	r18, r10
    4b56:	3b 2d       	mov	r19, r11
    4b58:	4c 2d       	mov	r20, r12
    4b5a:	5d 2d       	mov	r21, r13
    4b5c:	6e 2d       	mov	r22, r14
    4b5e:	7f 2d       	mov	r23, r15
    4b60:	80 2f       	mov	r24, r16
    4b62:	91 2f       	mov	r25, r17
    4b64:	0f 2e       	mov	r0, r31
    4b66:	fa e0       	ldi	r31, 0x0A	; 10
    4b68:	af 2e       	mov	r10, r31
    4b6a:	f0 2d       	mov	r31, r0
    4b6c:	bb 24       	eor	r11, r11
    4b6e:	cc 24       	eor	r12, r12
    4b70:	dd 24       	eor	r13, r13
    4b72:	ee 24       	eor	r14, r14
    4b74:	ff 24       	eor	r15, r15
    4b76:	00 e0       	ldi	r16, 0x00	; 0
    4b78:	10 e0       	ldi	r17, 0x00	; 0
    4b7a:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    4b7e:	a2 2e       	mov	r10, r18
    4b80:	b3 2e       	mov	r11, r19
    4b82:	c4 2e       	mov	r12, r20
    4b84:	d5 2e       	mov	r13, r21
    4b86:	e6 2e       	mov	r14, r22
    4b88:	f7 2e       	mov	r15, r23
    4b8a:	08 2f       	mov	r16, r24
    4b8c:	19 2f       	mov	r17, r25
    4b8e:	2a 2d       	mov	r18, r10
    4b90:	3b 2d       	mov	r19, r11
    4b92:	4c 2d       	mov	r20, r12
    4b94:	5d 2d       	mov	r21, r13
    4b96:	6e 2d       	mov	r22, r14
    4b98:	7f 2d       	mov	r23, r15
    4b9a:	80 2f       	mov	r24, r16
    4b9c:	91 2f       	mov	r25, r17
    4b9e:	82 2f       	mov	r24, r18
    4ba0:	80 5d       	subi	r24, 0xD0	; 208
    4ba2:	f4 01       	movw	r30, r8
    4ba4:	80 83       	st	Z, r24
			num /= 10 ;
    4ba6:	ab 84       	ldd	r10, Y+11	; 0x0b
    4ba8:	bc 84       	ldd	r11, Y+12	; 0x0c
    4baa:	cd 84       	ldd	r12, Y+13	; 0x0d
    4bac:	de 84       	ldd	r13, Y+14	; 0x0e
    4bae:	ef 84       	ldd	r14, Y+15	; 0x0f
    4bb0:	f8 88       	ldd	r15, Y+16	; 0x10
    4bb2:	09 89       	ldd	r16, Y+17	; 0x11
    4bb4:	1a 89       	ldd	r17, Y+18	; 0x12
    4bb6:	2a 2d       	mov	r18, r10
    4bb8:	3b 2d       	mov	r19, r11
    4bba:	4c 2d       	mov	r20, r12
    4bbc:	5d 2d       	mov	r21, r13
    4bbe:	6e 2d       	mov	r22, r14
    4bc0:	7f 2d       	mov	r23, r15
    4bc2:	80 2f       	mov	r24, r16
    4bc4:	91 2f       	mov	r25, r17
    4bc6:	0f 2e       	mov	r0, r31
    4bc8:	fa e0       	ldi	r31, 0x0A	; 10
    4bca:	af 2e       	mov	r10, r31
    4bcc:	f0 2d       	mov	r31, r0
    4bce:	bb 24       	eor	r11, r11
    4bd0:	cc 24       	eor	r12, r12
    4bd2:	dd 24       	eor	r13, r13
    4bd4:	ee 24       	eor	r14, r14
    4bd6:	ff 24       	eor	r15, r15
    4bd8:	00 e0       	ldi	r16, 0x00	; 0
    4bda:	10 e0       	ldi	r17, 0x00	; 0
    4bdc:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    4be0:	a2 2e       	mov	r10, r18
    4be2:	b3 2e       	mov	r11, r19
    4be4:	c4 2e       	mov	r12, r20
    4be6:	d5 2e       	mov	r13, r21
    4be8:	e6 2e       	mov	r14, r22
    4bea:	f7 2e       	mov	r15, r23
    4bec:	08 2f       	mov	r16, r24
    4bee:	19 2f       	mov	r17, r25
    4bf0:	ab 86       	std	Y+11, r10	; 0x0b
    4bf2:	bc 86       	std	Y+12, r11	; 0x0c
    4bf4:	cd 86       	std	Y+13, r12	; 0x0d
    4bf6:	de 86       	std	Y+14, r13	; 0x0e
    4bf8:	ef 86       	std	Y+15, r14	; 0x0f
    4bfa:	f8 8a       	std	Y+16, r15	; 0x10
    4bfc:	09 8b       	std	Y+17, r16	; 0x11
    4bfe:	1a 8b       	std	Y+18, r17	; 0x12
		{
			str[i++] = '-' ;
			num *= -1 ;
			flag = 0 ;
		}
		for(  ; num > 0 ; ++i)
    4c00:	8f 81       	ldd	r24, Y+7	; 0x07
    4c02:	98 85       	ldd	r25, Y+8	; 0x08
    4c04:	01 96       	adiw	r24, 0x01	; 1
    4c06:	98 87       	std	Y+8, r25	; 0x08
    4c08:	8f 83       	std	Y+7, r24	; 0x07
    4c0a:	8a 89       	ldd	r24, Y+18	; 0x12
    4c0c:	18 16       	cp	r1, r24
    4c0e:	0c f4       	brge	.+2      	; 0x4c12 <IntToString+0x398>
    4c10:	92 cf       	rjmp	.-220    	; 0x4b36 <IntToString+0x2bc>
    4c12:	8a 89       	ldd	r24, Y+18	; 0x12
    4c14:	88 23       	and	r24, r24
    4c16:	71 f5       	brne	.+92     	; 0x4c74 <IntToString+0x3fa>
    4c18:	89 89       	ldd	r24, Y+17	; 0x11
    4c1a:	88 23       	and	r24, r24
    4c1c:	09 f0       	breq	.+2      	; 0x4c20 <IntToString+0x3a6>
    4c1e:	8b cf       	rjmp	.-234    	; 0x4b36 <IntToString+0x2bc>
    4c20:	89 89       	ldd	r24, Y+17	; 0x11
    4c22:	88 23       	and	r24, r24
    4c24:	39 f5       	brne	.+78     	; 0x4c74 <IntToString+0x3fa>
    4c26:	88 89       	ldd	r24, Y+16	; 0x10
    4c28:	88 23       	and	r24, r24
    4c2a:	09 f0       	breq	.+2      	; 0x4c2e <IntToString+0x3b4>
    4c2c:	84 cf       	rjmp	.-248    	; 0x4b36 <IntToString+0x2bc>
    4c2e:	88 89       	ldd	r24, Y+16	; 0x10
    4c30:	88 23       	and	r24, r24
    4c32:	01 f5       	brne	.+64     	; 0x4c74 <IntToString+0x3fa>
    4c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c36:	88 23       	and	r24, r24
    4c38:	09 f0       	breq	.+2      	; 0x4c3c <IntToString+0x3c2>
    4c3a:	7d cf       	rjmp	.-262    	; 0x4b36 <IntToString+0x2bc>
    4c3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c3e:	88 23       	and	r24, r24
    4c40:	c9 f4       	brne	.+50     	; 0x4c74 <IntToString+0x3fa>
    4c42:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c44:	88 23       	and	r24, r24
    4c46:	09 f0       	breq	.+2      	; 0x4c4a <IntToString+0x3d0>
    4c48:	76 cf       	rjmp	.-276    	; 0x4b36 <IntToString+0x2bc>
    4c4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c4c:	88 23       	and	r24, r24
    4c4e:	91 f4       	brne	.+36     	; 0x4c74 <IntToString+0x3fa>
    4c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c52:	88 23       	and	r24, r24
    4c54:	09 f0       	breq	.+2      	; 0x4c58 <IntToString+0x3de>
    4c56:	6f cf       	rjmp	.-290    	; 0x4b36 <IntToString+0x2bc>
    4c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c5a:	88 23       	and	r24, r24
    4c5c:	59 f4       	brne	.+22     	; 0x4c74 <IntToString+0x3fa>
    4c5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c60:	88 23       	and	r24, r24
    4c62:	09 f0       	breq	.+2      	; 0x4c66 <IntToString+0x3ec>
    4c64:	68 cf       	rjmp	.-304    	; 0x4b36 <IntToString+0x2bc>
    4c66:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c68:	88 23       	and	r24, r24
    4c6a:	21 f4       	brne	.+8      	; 0x4c74 <IntToString+0x3fa>
    4c6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4c6e:	88 23       	and	r24, r24
    4c70:	09 f0       	breq	.+2      	; 0x4c74 <IntToString+0x3fa>
    4c72:	61 cf       	rjmp	.-318    	; 0x4b36 <IntToString+0x2bc>
		{
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
    4c74:	89 81       	ldd	r24, Y+1	; 0x01
    4c76:	9a 81       	ldd	r25, Y+2	; 0x02
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <IntToString+0x404>
    4c7c:	62 c0       	rjmp	.+196    	; 0x4d42 <IntToString+0x4c8>
		{
			for( j= 0; j < (i/2) ; ++j)
    4c7e:	1e 82       	std	Y+6, r1	; 0x06
    4c80:	1d 82       	std	Y+5, r1	; 0x05
    4c82:	3c c0       	rjmp	.+120    	; 0x4cfc <IntToString+0x482>
			{
				temp = str[i-j-1] ;
    4c84:	2f 81       	ldd	r18, Y+7	; 0x07
    4c86:	38 85       	ldd	r19, Y+8	; 0x08
    4c88:	8d 81       	ldd	r24, Y+5	; 0x05
    4c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c8c:	a9 01       	movw	r20, r18
    4c8e:	48 1b       	sub	r20, r24
    4c90:	59 0b       	sbc	r21, r25
    4c92:	ca 01       	movw	r24, r20
    4c94:	9c 01       	movw	r18, r24
    4c96:	21 50       	subi	r18, 0x01	; 1
    4c98:	30 40       	sbci	r19, 0x00	; 0
    4c9a:	89 85       	ldd	r24, Y+9	; 0x09
    4c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c9e:	fc 01       	movw	r30, r24
    4ca0:	e2 0f       	add	r30, r18
    4ca2:	f3 1f       	adc	r31, r19
    4ca4:	80 81       	ld	r24, Z
    4ca6:	88 2f       	mov	r24, r24
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	9c 83       	std	Y+4, r25	; 0x04
    4cac:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j-1] = str[j] ;
    4cae:	2f 81       	ldd	r18, Y+7	; 0x07
    4cb0:	38 85       	ldd	r19, Y+8	; 0x08
    4cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb6:	f9 01       	movw	r30, r18
    4cb8:	e8 1b       	sub	r30, r24
    4cba:	f9 0b       	sbc	r31, r25
    4cbc:	cf 01       	movw	r24, r30
    4cbe:	9c 01       	movw	r18, r24
    4cc0:	21 50       	subi	r18, 0x01	; 1
    4cc2:	30 40       	sbci	r19, 0x00	; 0
    4cc4:	89 85       	ldd	r24, Y+9	; 0x09
    4cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc8:	dc 01       	movw	r26, r24
    4cca:	a2 0f       	add	r26, r18
    4ccc:	b3 1f       	adc	r27, r19
    4cce:	2d 81       	ldd	r18, Y+5	; 0x05
    4cd0:	3e 81       	ldd	r19, Y+6	; 0x06
    4cd2:	89 85       	ldd	r24, Y+9	; 0x09
    4cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	e2 0f       	add	r30, r18
    4cda:	f3 1f       	adc	r31, r19
    4cdc:	80 81       	ld	r24, Z
    4cde:	8c 93       	st	X, r24
				str[j] = temp ;
    4ce0:	2d 81       	ldd	r18, Y+5	; 0x05
    4ce2:	3e 81       	ldd	r19, Y+6	; 0x06
    4ce4:	89 85       	ldd	r24, Y+9	; 0x09
    4ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ce8:	fc 01       	movw	r30, r24
    4cea:	e2 0f       	add	r30, r18
    4cec:	f3 1f       	adc	r31, r19
    4cee:	8b 81       	ldd	r24, Y+3	; 0x03
    4cf0:	80 83       	st	Z, r24
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
		{
			for( j= 0; j < (i/2) ; ++j)
    4cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf6:	01 96       	adiw	r24, 0x01	; 1
    4cf8:	9e 83       	std	Y+6, r25	; 0x06
    4cfa:	8d 83       	std	Y+5, r24	; 0x05
    4cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    4cfe:	98 85       	ldd	r25, Y+8	; 0x08
    4d00:	21 96       	adiw	r28, 0x01	; 1
    4d02:	9f af       	std	Y+63, r25	; 0x3f
    4d04:	8e af       	std	Y+62, r24	; 0x3e
    4d06:	21 97       	sbiw	r28, 0x01	; 1
    4d08:	21 96       	adiw	r28, 0x01	; 1
    4d0a:	4e ad       	ldd	r20, Y+62	; 0x3e
    4d0c:	5f ad       	ldd	r21, Y+63	; 0x3f
    4d0e:	21 97       	sbiw	r28, 0x01	; 1
    4d10:	55 23       	and	r21, r21
    4d12:	4c f4       	brge	.+18     	; 0x4d26 <IntToString+0x4ac>
    4d14:	21 96       	adiw	r28, 0x01	; 1
    4d16:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d18:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d1a:	21 97       	sbiw	r28, 0x01	; 1
    4d1c:	01 96       	adiw	r24, 0x01	; 1
    4d1e:	21 96       	adiw	r28, 0x01	; 1
    4d20:	9f af       	std	Y+63, r25	; 0x3f
    4d22:	8e af       	std	Y+62, r24	; 0x3e
    4d24:	21 97       	sbiw	r28, 0x01	; 1
    4d26:	21 96       	adiw	r28, 0x01	; 1
    4d28:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d2c:	21 97       	sbiw	r28, 0x01	; 1
    4d2e:	95 95       	asr	r25
    4d30:	87 95       	ror	r24
    4d32:	9c 01       	movw	r18, r24
    4d34:	8d 81       	ldd	r24, Y+5	; 0x05
    4d36:	9e 81       	ldd	r25, Y+6	; 0x06
    4d38:	82 17       	cp	r24, r18
    4d3a:	93 07       	cpc	r25, r19
    4d3c:	0c f4       	brge	.+2      	; 0x4d40 <IntToString+0x4c6>
    4d3e:	a2 cf       	rjmp	.-188    	; 0x4c84 <IntToString+0x40a>
    4d40:	5f c0       	rjmp	.+190    	; 0x4e00 <IntToString+0x586>
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	9e 83       	std	Y+6, r25	; 0x06
    4d48:	8d 83       	std	Y+5, r24	; 0x05
    4d4a:	38 c0       	rjmp	.+112    	; 0x4dbc <IntToString+0x542>
			{
				temp = str[i-j] ;
    4d4c:	2f 81       	ldd	r18, Y+7	; 0x07
    4d4e:	38 85       	ldd	r19, Y+8	; 0x08
    4d50:	8d 81       	ldd	r24, Y+5	; 0x05
    4d52:	9e 81       	ldd	r25, Y+6	; 0x06
    4d54:	f9 01       	movw	r30, r18
    4d56:	e8 1b       	sub	r30, r24
    4d58:	f9 0b       	sbc	r31, r25
    4d5a:	cf 01       	movw	r24, r30
    4d5c:	9c 01       	movw	r18, r24
    4d5e:	89 85       	ldd	r24, Y+9	; 0x09
    4d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d62:	fc 01       	movw	r30, r24
    4d64:	e2 0f       	add	r30, r18
    4d66:	f3 1f       	adc	r31, r19
    4d68:	80 81       	ld	r24, Z
    4d6a:	88 2f       	mov	r24, r24
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	9c 83       	std	Y+4, r25	; 0x04
    4d70:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j] = str[j] ;
    4d72:	2f 81       	ldd	r18, Y+7	; 0x07
    4d74:	38 85       	ldd	r19, Y+8	; 0x08
    4d76:	8d 81       	ldd	r24, Y+5	; 0x05
    4d78:	9e 81       	ldd	r25, Y+6	; 0x06
    4d7a:	a9 01       	movw	r20, r18
    4d7c:	48 1b       	sub	r20, r24
    4d7e:	59 0b       	sbc	r21, r25
    4d80:	ca 01       	movw	r24, r20
    4d82:	9c 01       	movw	r18, r24
    4d84:	89 85       	ldd	r24, Y+9	; 0x09
    4d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d88:	dc 01       	movw	r26, r24
    4d8a:	a2 0f       	add	r26, r18
    4d8c:	b3 1f       	adc	r27, r19
    4d8e:	2d 81       	ldd	r18, Y+5	; 0x05
    4d90:	3e 81       	ldd	r19, Y+6	; 0x06
    4d92:	89 85       	ldd	r24, Y+9	; 0x09
    4d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d96:	fc 01       	movw	r30, r24
    4d98:	e2 0f       	add	r30, r18
    4d9a:	f3 1f       	adc	r31, r19
    4d9c:	80 81       	ld	r24, Z
    4d9e:	8c 93       	st	X, r24
				str[j] = temp ;
    4da0:	2d 81       	ldd	r18, Y+5	; 0x05
    4da2:	3e 81       	ldd	r19, Y+6	; 0x06
    4da4:	89 85       	ldd	r24, Y+9	; 0x09
    4da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da8:	fc 01       	movw	r30, r24
    4daa:	e2 0f       	add	r30, r18
    4dac:	f3 1f       	adc	r31, r19
    4dae:	8b 81       	ldd	r24, Y+3	; 0x03
    4db0:	80 83       	st	Z, r24
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    4db2:	8d 81       	ldd	r24, Y+5	; 0x05
    4db4:	9e 81       	ldd	r25, Y+6	; 0x06
    4db6:	01 96       	adiw	r24, 0x01	; 1
    4db8:	9e 83       	std	Y+6, r25	; 0x06
    4dba:	8d 83       	std	Y+5, r24	; 0x05
    4dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    4dbe:	98 85       	ldd	r25, Y+8	; 0x08
    4dc0:	23 96       	adiw	r28, 0x03	; 3
    4dc2:	9f af       	std	Y+63, r25	; 0x3f
    4dc4:	8e af       	std	Y+62, r24	; 0x3e
    4dc6:	23 97       	sbiw	r28, 0x03	; 3
    4dc8:	23 96       	adiw	r28, 0x03	; 3
    4dca:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dcc:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dce:	23 97       	sbiw	r28, 0x03	; 3
    4dd0:	99 23       	and	r25, r25
    4dd2:	4c f4       	brge	.+18     	; 0x4de6 <IntToString+0x56c>
    4dd4:	23 96       	adiw	r28, 0x03	; 3
    4dd6:	ee ad       	ldd	r30, Y+62	; 0x3e
    4dd8:	ff ad       	ldd	r31, Y+63	; 0x3f
    4dda:	23 97       	sbiw	r28, 0x03	; 3
    4ddc:	31 96       	adiw	r30, 0x01	; 1
    4dde:	23 96       	adiw	r28, 0x03	; 3
    4de0:	ff af       	std	Y+63, r31	; 0x3f
    4de2:	ee af       	std	Y+62, r30	; 0x3e
    4de4:	23 97       	sbiw	r28, 0x03	; 3
    4de6:	23 96       	adiw	r28, 0x03	; 3
    4de8:	8e ad       	ldd	r24, Y+62	; 0x3e
    4dea:	9f ad       	ldd	r25, Y+63	; 0x3f
    4dec:	23 97       	sbiw	r28, 0x03	; 3
    4dee:	95 95       	asr	r25
    4df0:	87 95       	ror	r24
    4df2:	9c 01       	movw	r18, r24
    4df4:	8d 81       	ldd	r24, Y+5	; 0x05
    4df6:	9e 81       	ldd	r25, Y+6	; 0x06
    4df8:	28 17       	cp	r18, r24
    4dfa:	39 07       	cpc	r19, r25
    4dfc:	0c f0       	brlt	.+2      	; 0x4e00 <IntToString+0x586>
    4dfe:	a6 cf       	rjmp	.-180    	; 0x4d4c <IntToString+0x4d2>
				str[j] = temp ;
			}
		}


		str[i] = 0 ;
    4e00:	8f 81       	ldd	r24, Y+7	; 0x07
    4e02:	98 85       	ldd	r25, Y+8	; 0x08
    4e04:	29 85       	ldd	r18, Y+9	; 0x09
    4e06:	3a 85       	ldd	r19, Y+10	; 0x0a
    4e08:	f9 01       	movw	r30, r18
    4e0a:	e8 0f       	add	r30, r24
    4e0c:	f9 1f       	adc	r31, r25
    4e0e:	10 82       	st	Z, r1

	}
}
    4e10:	ce 5b       	subi	r28, 0xBE	; 190
    4e12:	df 4f       	sbci	r29, 0xFF	; 255
    4e14:	0f b6       	in	r0, 0x3f	; 63
    4e16:	f8 94       	cli
    4e18:	de bf       	out	0x3e, r29	; 62
    4e1a:	0f be       	out	0x3f, r0	; 63
    4e1c:	cd bf       	out	0x3d, r28	; 61
    4e1e:	cf 91       	pop	r28
    4e20:	df 91       	pop	r29
    4e22:	1f 91       	pop	r17
    4e24:	0f 91       	pop	r16
    4e26:	ff 90       	pop	r15
    4e28:	ef 90       	pop	r14
    4e2a:	df 90       	pop	r13
    4e2c:	cf 90       	pop	r12
    4e2e:	bf 90       	pop	r11
    4e30:	af 90       	pop	r10
    4e32:	9f 90       	pop	r9
    4e34:	8f 90       	pop	r8
    4e36:	08 95       	ret

00004e38 <LCD_WriteChar>:



void LCD_WriteChar (u8 ch)   
{
    4e38:	df 93       	push	r29
    4e3a:	cf 93       	push	r28
    4e3c:	0f 92       	push	r0
    4e3e:	cd b7       	in	r28, 0x3d	; 61
    4e40:	de b7       	in	r29, 0x3e	; 62
    4e42:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(ch) ;
    4e44:	89 81       	ldd	r24, Y+1	; 0x01
    4e46:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
}
    4e4a:	0f 90       	pop	r0
    4e4c:	cf 91       	pop	r28
    4e4e:	df 91       	pop	r29
    4e50:	08 95       	ret

00004e52 <LCD_WriteString>:
void LCD_WriteString(u8* str)
{
    4e52:	df 93       	push	r29
    4e54:	cf 93       	push	r28
    4e56:	00 d0       	rcall	.+0      	; 0x4e58 <LCD_WriteString+0x6>
    4e58:	00 d0       	rcall	.+0      	; 0x4e5a <LCD_WriteString+0x8>
    4e5a:	cd b7       	in	r28, 0x3d	; 61
    4e5c:	de b7       	in	r29, 0x3e	; 62
    4e5e:	9c 83       	std	Y+4, r25	; 0x04
    4e60:	8b 83       	std	Y+3, r24	; 0x03
	int i ; 
	for(i=0 ; str[i] ; ++i)
    4e62:	1a 82       	std	Y+2, r1	; 0x02
    4e64:	19 82       	std	Y+1, r1	; 0x01
    4e66:	0f c0       	rjmp	.+30     	; 0x4e86 <LCD_WriteString+0x34>
	{
		LCD_WriteData(str[i]) ;
    4e68:	29 81       	ldd	r18, Y+1	; 0x01
    4e6a:	3a 81       	ldd	r19, Y+2	; 0x02
    4e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e70:	fc 01       	movw	r30, r24
    4e72:	e2 0f       	add	r30, r18
    4e74:	f3 1f       	adc	r31, r19
    4e76:	80 81       	ld	r24, Z
    4e78:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
	LCD_WriteData(ch) ;
}
void LCD_WriteString(u8* str)
{
	int i ; 
	for(i=0 ; str[i] ; ++i)
    4e7c:	89 81       	ldd	r24, Y+1	; 0x01
    4e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e80:	01 96       	adiw	r24, 0x01	; 1
    4e82:	9a 83       	std	Y+2, r25	; 0x02
    4e84:	89 83       	std	Y+1, r24	; 0x01
    4e86:	29 81       	ldd	r18, Y+1	; 0x01
    4e88:	3a 81       	ldd	r19, Y+2	; 0x02
    4e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e8e:	fc 01       	movw	r30, r24
    4e90:	e2 0f       	add	r30, r18
    4e92:	f3 1f       	adc	r31, r19
    4e94:	80 81       	ld	r24, Z
    4e96:	88 23       	and	r24, r24
    4e98:	39 f7       	brne	.-50     	; 0x4e68 <LCD_WriteString+0x16>
	{
		LCD_WriteData(str[i]) ;
	}
}
    4e9a:	0f 90       	pop	r0
    4e9c:	0f 90       	pop	r0
    4e9e:	0f 90       	pop	r0
    4ea0:	0f 90       	pop	r0
    4ea2:	cf 91       	pop	r28
    4ea4:	df 91       	pop	r29
    4ea6:	08 95       	ret

00004ea8 <LCD_WriteNumber>:

void LCD_WriteNumber (s64 num) 
{
    4ea8:	8f 92       	push	r8
    4eaa:	9f 92       	push	r9
    4eac:	af 92       	push	r10
    4eae:	bf 92       	push	r11
    4eb0:	cf 92       	push	r12
    4eb2:	df 92       	push	r13
    4eb4:	ef 92       	push	r14
    4eb6:	ff 92       	push	r15
    4eb8:	0f 93       	push	r16
    4eba:	1f 93       	push	r17
    4ebc:	df 93       	push	r29
    4ebe:	cf 93       	push	r28
    4ec0:	cd b7       	in	r28, 0x3d	; 61
    4ec2:	de b7       	in	r29, 0x3e	; 62
    4ec4:	a8 97       	sbiw	r28, 0x28	; 40
    4ec6:	0f b6       	in	r0, 0x3f	; 63
    4ec8:	f8 94       	cli
    4eca:	de bf       	out	0x3e, r29	; 62
    4ecc:	0f be       	out	0x3f, r0	; 63
    4ece:	cd bf       	out	0x3d, r28	; 61
    4ed0:	29 a3       	std	Y+33, r18	; 0x21
    4ed2:	3a a3       	std	Y+34, r19	; 0x22
    4ed4:	4b a3       	std	Y+35, r20	; 0x23
    4ed6:	5c a3       	std	Y+36, r21	; 0x24
    4ed8:	6d a3       	std	Y+37, r22	; 0x25
    4eda:	7e a3       	std	Y+38, r23	; 0x26
    4edc:	8f a3       	std	Y+39, r24	; 0x27
    4ede:	98 a7       	std	Y+40, r25	; 0x28
	u8 inttostring_arr [32] = {0} ;
    4ee0:	80 e2       	ldi	r24, 0x20	; 32
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	31 96       	adiw	r30, 0x01	; 1
    4ee6:	df 01       	movw	r26, r30
    4ee8:	98 2f       	mov	r25, r24
    4eea:	1d 92       	st	X+, r1
    4eec:	9a 95       	dec	r25
    4eee:	e9 f7       	brne	.-6      	; 0x4eea <LCD_WriteNumber+0x42>
	IntToString(inttostring_arr , num) ;
    4ef0:	89 a0       	ldd	r8, Y+33	; 0x21
    4ef2:	9a a0       	ldd	r9, Y+34	; 0x22
    4ef4:	ab a0       	ldd	r10, Y+35	; 0x23
    4ef6:	bc a0       	ldd	r11, Y+36	; 0x24
    4ef8:	cd a0       	ldd	r12, Y+37	; 0x25
    4efa:	de a0       	ldd	r13, Y+38	; 0x26
    4efc:	ef a0       	ldd	r14, Y+39	; 0x27
    4efe:	f8 a4       	ldd	r15, Y+40	; 0x28
    4f00:	ce 01       	movw	r24, r28
    4f02:	01 96       	adiw	r24, 0x01	; 1
    4f04:	08 2d       	mov	r16, r8
    4f06:	19 2d       	mov	r17, r9
    4f08:	2a 2d       	mov	r18, r10
    4f0a:	3b 2d       	mov	r19, r11
    4f0c:	4c 2d       	mov	r20, r12
    4f0e:	5d 2d       	mov	r21, r13
    4f10:	6e 2d       	mov	r22, r14
    4f12:	7f 2d       	mov	r23, r15
    4f14:	0e 94 3d 24 	call	0x487a	; 0x487a <IntToString>
	LCD_WriteString(inttostring_arr) ;
    4f18:	ce 01       	movw	r24, r28
    4f1a:	01 96       	adiw	r24, 0x01	; 1
    4f1c:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_WriteString>
}
    4f20:	a8 96       	adiw	r28, 0x28	; 40
    4f22:	0f b6       	in	r0, 0x3f	; 63
    4f24:	f8 94       	cli
    4f26:	de bf       	out	0x3e, r29	; 62
    4f28:	0f be       	out	0x3f, r0	; 63
    4f2a:	cd bf       	out	0x3d, r28	; 61
    4f2c:	cf 91       	pop	r28
    4f2e:	df 91       	pop	r29
    4f30:	1f 91       	pop	r17
    4f32:	0f 91       	pop	r16
    4f34:	ff 90       	pop	r15
    4f36:	ef 90       	pop	r14
    4f38:	df 90       	pop	r13
    4f3a:	cf 90       	pop	r12
    4f3c:	bf 90       	pop	r11
    4f3e:	af 90       	pop	r10
    4f40:	9f 90       	pop	r9
    4f42:	8f 90       	pop	r8
    4f44:	08 95       	ret

00004f46 <LCD_ClearDisplay>:
void LCD_ClearDisplay (void) 
{
    4f46:	df 93       	push	r29
    4f48:	cf 93       	push	r28
    4f4a:	cd b7       	in	r28, 0x3d	; 61
    4f4c:	de b7       	in	r29, 0x3e	; 62
    4f4e:	2e 97       	sbiw	r28, 0x0e	; 14
    4f50:	0f b6       	in	r0, 0x3f	; 63
    4f52:	f8 94       	cli
    4f54:	de bf       	out	0x3e, r29	; 62
    4f56:	0f be       	out	0x3f, r0	; 63
    4f58:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01) ; // clear screen
    4f5a:	81 e0       	ldi	r24, 0x01	; 1
    4f5c:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
    4f60:	80 e0       	ldi	r24, 0x00	; 0
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	a0 e0       	ldi	r26, 0x00	; 0
    4f66:	b0 e4       	ldi	r27, 0x40	; 64
    4f68:	8b 87       	std	Y+11, r24	; 0x0b
    4f6a:	9c 87       	std	Y+12, r25	; 0x0c
    4f6c:	ad 87       	std	Y+13, r26	; 0x0d
    4f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f78:	20 e0       	ldi	r18, 0x00	; 0
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
    4f7c:	4a ef       	ldi	r20, 0xFA	; 250
    4f7e:	54 e4       	ldi	r21, 0x44	; 68
    4f80:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4f84:	dc 01       	movw	r26, r24
    4f86:	cb 01       	movw	r24, r22
    4f88:	8f 83       	std	Y+7, r24	; 0x07
    4f8a:	98 87       	std	Y+8, r25	; 0x08
    4f8c:	a9 87       	std	Y+9, r26	; 0x09
    4f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f90:	6f 81       	ldd	r22, Y+7	; 0x07
    4f92:	78 85       	ldd	r23, Y+8	; 0x08
    4f94:	89 85       	ldd	r24, Y+9	; 0x09
    4f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f98:	20 e0       	ldi	r18, 0x00	; 0
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	40 e8       	ldi	r20, 0x80	; 128
    4f9e:	5f e3       	ldi	r21, 0x3F	; 63
    4fa0:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4fa4:	88 23       	and	r24, r24
    4fa6:	2c f4       	brge	.+10     	; 0x4fb2 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	9e 83       	std	Y+6, r25	; 0x06
    4fae:	8d 83       	std	Y+5, r24	; 0x05
    4fb0:	3f c0       	rjmp	.+126    	; 0x5030 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    4fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    4fb4:	78 85       	ldd	r23, Y+8	; 0x08
    4fb6:	89 85       	ldd	r24, Y+9	; 0x09
    4fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fba:	20 e0       	ldi	r18, 0x00	; 0
    4fbc:	3f ef       	ldi	r19, 0xFF	; 255
    4fbe:	4f e7       	ldi	r20, 0x7F	; 127
    4fc0:	57 e4       	ldi	r21, 0x47	; 71
    4fc2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4fc6:	18 16       	cp	r1, r24
    4fc8:	4c f5       	brge	.+82     	; 0x501c <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	40 e2       	ldi	r20, 0x20	; 32
    4fd8:	51 e4       	ldi	r21, 0x41	; 65
    4fda:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	bc 01       	movw	r22, r24
    4fe4:	cd 01       	movw	r24, r26
    4fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fea:	dc 01       	movw	r26, r24
    4fec:	cb 01       	movw	r24, r22
    4fee:	9e 83       	std	Y+6, r25	; 0x06
    4ff0:	8d 83       	std	Y+5, r24	; 0x05
    4ff2:	0f c0       	rjmp	.+30     	; 0x5012 <LCD_ClearDisplay+0xcc>
    4ff4:	88 ec       	ldi	r24, 0xC8	; 200
    4ff6:	90 e0       	ldi	r25, 0x00	; 0
    4ff8:	9c 83       	std	Y+4, r25	; 0x04
    4ffa:	8b 83       	std	Y+3, r24	; 0x03
    4ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    5000:	01 97       	sbiw	r24, 0x01	; 1
    5002:	f1 f7       	brne	.-4      	; 0x5000 <LCD_ClearDisplay+0xba>
    5004:	9c 83       	std	Y+4, r25	; 0x04
    5006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5008:	8d 81       	ldd	r24, Y+5	; 0x05
    500a:	9e 81       	ldd	r25, Y+6	; 0x06
    500c:	01 97       	sbiw	r24, 0x01	; 1
    500e:	9e 83       	std	Y+6, r25	; 0x06
    5010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5012:	8d 81       	ldd	r24, Y+5	; 0x05
    5014:	9e 81       	ldd	r25, Y+6	; 0x06
    5016:	00 97       	sbiw	r24, 0x00	; 0
    5018:	69 f7       	brne	.-38     	; 0x4ff4 <LCD_ClearDisplay+0xae>
    501a:	14 c0       	rjmp	.+40     	; 0x5044 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    501c:	6f 81       	ldd	r22, Y+7	; 0x07
    501e:	78 85       	ldd	r23, Y+8	; 0x08
    5020:	89 85       	ldd	r24, Y+9	; 0x09
    5022:	9a 85       	ldd	r25, Y+10	; 0x0a
    5024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5028:	dc 01       	movw	r26, r24
    502a:	cb 01       	movw	r24, r22
    502c:	9e 83       	std	Y+6, r25	; 0x06
    502e:	8d 83       	std	Y+5, r24	; 0x05
    5030:	8d 81       	ldd	r24, Y+5	; 0x05
    5032:	9e 81       	ldd	r25, Y+6	; 0x06
    5034:	9a 83       	std	Y+2, r25	; 0x02
    5036:	89 83       	std	Y+1, r24	; 0x01
    5038:	89 81       	ldd	r24, Y+1	; 0x01
    503a:	9a 81       	ldd	r25, Y+2	; 0x02
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	f1 f7       	brne	.-4      	; 0x503c <LCD_ClearDisplay+0xf6>
    5040:	9a 83       	std	Y+2, r25	; 0x02
    5042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
}
    5044:	2e 96       	adiw	r28, 0x0e	; 14
    5046:	0f b6       	in	r0, 0x3f	; 63
    5048:	f8 94       	cli
    504a:	de bf       	out	0x3e, r29	; 62
    504c:	0f be       	out	0x3f, r0	; 63
    504e:	cd bf       	out	0x3d, r28	; 61
    5050:	cf 91       	pop	r28
    5052:	df 91       	pop	r29
    5054:	08 95       	ret

00005056 <LCD_WriteBin>:
void LCD_WriteBin (s8 num) 
{
    5056:	df 93       	push	r29
    5058:	cf 93       	push	r28
    505a:	cd b7       	in	r28, 0x3d	; 61
    505c:	de b7       	in	r29, 0x3e	; 62
    505e:	2d 97       	sbiw	r28, 0x0d	; 13
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	f8 94       	cli
    5064:	de bf       	out	0x3e, r29	; 62
    5066:	0f be       	out	0x3f, r0	; 63
    5068:	cd bf       	out	0x3d, r28	; 61
    506a:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr [8] = {0}  , j = 0 , flag = 0 ;
    506c:	88 e0       	ldi	r24, 0x08	; 8
    506e:	fe 01       	movw	r30, r28
    5070:	35 96       	adiw	r30, 0x05	; 5
    5072:	df 01       	movw	r26, r30
    5074:	98 2f       	mov	r25, r24
    5076:	1d 92       	st	X+, r1
    5078:	9a 95       	dec	r25
    507a:	e9 f7       	brne	.-6      	; 0x5076 <LCD_WriteBin+0x20>
    507c:	1c 82       	std	Y+4, r1	; 0x04
    507e:	1b 82       	std	Y+3, r1	; 0x03
	int i ; 
	for(i= 7 ; i >= 0 ; --i)
    5080:	87 e0       	ldi	r24, 0x07	; 7
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	9a 83       	std	Y+2, r25	; 0x02
    5086:	89 83       	std	Y+1, r24	; 0x01
    5088:	41 c0       	rjmp	.+130    	; 0x510c <LCD_WriteBin+0xb6>
	{
		if(num & (1<<i))
    508a:	8d 85       	ldd	r24, Y+13	; 0x0d
    508c:	99 27       	eor	r25, r25
    508e:	87 fd       	sbrc	r24, 7
    5090:	90 95       	com	r25
    5092:	09 80       	ldd	r0, Y+1	; 0x01
    5094:	02 c0       	rjmp	.+4      	; 0x509a <LCD_WriteBin+0x44>
    5096:	95 95       	asr	r25
    5098:	87 95       	ror	r24
    509a:	0a 94       	dec	r0
    509c:	e2 f7       	brpl	.-8      	; 0x5096 <LCD_WriteBin+0x40>
    509e:	81 70       	andi	r24, 0x01	; 1
    50a0:	90 70       	andi	r25, 0x00	; 0
    50a2:	88 23       	and	r24, r24
    50a4:	11 f0       	breq	.+4      	; 0x50aa <LCD_WriteBin+0x54>
		{
			flag = 1 ;
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(flag == 1)
    50aa:	8b 81       	ldd	r24, Y+3	; 0x03
    50ac:	81 30       	cpi	r24, 0x01	; 1
    50ae:	49 f5       	brne	.+82     	; 0x5102 <LCD_WriteBin+0xac>
		{
			if(num & (1<<i))
    50b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    50b2:	99 27       	eor	r25, r25
    50b4:	87 fd       	sbrc	r24, 7
    50b6:	90 95       	com	r25
    50b8:	09 80       	ldd	r0, Y+1	; 0x01
    50ba:	02 c0       	rjmp	.+4      	; 0x50c0 <LCD_WriteBin+0x6a>
    50bc:	95 95       	asr	r25
    50be:	87 95       	ror	r24
    50c0:	0a 94       	dec	r0
    50c2:	e2 f7       	brpl	.-8      	; 0x50bc <LCD_WriteBin+0x66>
    50c4:	81 70       	andi	r24, 0x01	; 1
    50c6:	90 70       	andi	r25, 0x00	; 0
    50c8:	88 23       	and	r24, r24
    50ca:	71 f0       	breq	.+28     	; 0x50e8 <LCD_WriteBin+0x92>
			{
				arr[j++] = '1' ;
    50cc:	8c 81       	ldd	r24, Y+4	; 0x04
    50ce:	28 2f       	mov	r18, r24
    50d0:	30 e0       	ldi	r19, 0x00	; 0
    50d2:	ce 01       	movw	r24, r28
    50d4:	05 96       	adiw	r24, 0x05	; 5
    50d6:	fc 01       	movw	r30, r24
    50d8:	e2 0f       	add	r30, r18
    50da:	f3 1f       	adc	r31, r19
    50dc:	81 e3       	ldi	r24, 0x31	; 49
    50de:	80 83       	st	Z, r24
    50e0:	8c 81       	ldd	r24, Y+4	; 0x04
    50e2:	8f 5f       	subi	r24, 0xFF	; 255
    50e4:	8c 83       	std	Y+4, r24	; 0x04
    50e6:	0d c0       	rjmp	.+26     	; 0x5102 <LCD_WriteBin+0xac>
			}
			else
			    arr[j++] = '0' ;
    50e8:	8c 81       	ldd	r24, Y+4	; 0x04
    50ea:	28 2f       	mov	r18, r24
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	ce 01       	movw	r24, r28
    50f0:	05 96       	adiw	r24, 0x05	; 5
    50f2:	fc 01       	movw	r30, r24
    50f4:	e2 0f       	add	r30, r18
    50f6:	f3 1f       	adc	r31, r19
    50f8:	80 e3       	ldi	r24, 0x30	; 48
    50fa:	80 83       	st	Z, r24
    50fc:	8c 81       	ldd	r24, Y+4	; 0x04
    50fe:	8f 5f       	subi	r24, 0xFF	; 255
    5100:	8c 83       	std	Y+4, r24	; 0x04
}
void LCD_WriteBin (s8 num) 
{
	u8 arr [8] = {0}  , j = 0 , flag = 0 ;
	int i ; 
	for(i= 7 ; i >= 0 ; --i)
    5102:	89 81       	ldd	r24, Y+1	; 0x01
    5104:	9a 81       	ldd	r25, Y+2	; 0x02
    5106:	01 97       	sbiw	r24, 0x01	; 1
    5108:	9a 83       	std	Y+2, r25	; 0x02
    510a:	89 83       	std	Y+1, r24	; 0x01
    510c:	89 81       	ldd	r24, Y+1	; 0x01
    510e:	9a 81       	ldd	r25, Y+2	; 0x02
    5110:	99 23       	and	r25, r25
    5112:	0c f0       	brlt	.+2      	; 0x5116 <LCD_WriteBin+0xc0>
    5114:	ba cf       	rjmp	.-140    	; 0x508a <LCD_WriteBin+0x34>
			    arr[j++] = '0' ;
			
			
		}
	}
	LCD_WriteString(arr) ;
    5116:	ce 01       	movw	r24, r28
    5118:	05 96       	adiw	r24, 0x05	; 5
    511a:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_WriteString>
	
}
    511e:	2d 96       	adiw	r28, 0x0d	; 13
    5120:	0f b6       	in	r0, 0x3f	; 63
    5122:	f8 94       	cli
    5124:	de bf       	out	0x3e, r29	; 62
    5126:	0f be       	out	0x3f, r0	; 63
    5128:	cd bf       	out	0x3d, r28	; 61
    512a:	cf 91       	pop	r28
    512c:	df 91       	pop	r29
    512e:	08 95       	ret

00005130 <LCD_WriteHex>:
/*void LCD_WriteStringcon (u8* str) ;
{
	
}*/
void LCD_WriteHex(u8 num)//0x54  0b0101 0100
{
    5130:	df 93       	push	r29
    5132:	cf 93       	push	r28
    5134:	cd b7       	in	r28, 0x3d	; 61
    5136:	de b7       	in	r29, 0x3e	; 62
    5138:	68 97       	sbiw	r28, 0x18	; 24
    513a:	0f b6       	in	r0, 0x3f	; 63
    513c:	f8 94       	cli
    513e:	de bf       	out	0x3e, r29	; 62
    5140:	0f be       	out	0x3f, r0	; 63
    5142:	cd bf       	out	0x3d, r28	; 61
    5144:	8b 8b       	std	Y+19, r24	; 0x13
	u8 high=num>>4;//00000101
    5146:	8b 89       	ldd	r24, Y+19	; 0x13
    5148:	82 95       	swap	r24
    514a:	8f 70       	andi	r24, 0x0F	; 15
    514c:	8a 83       	std	Y+2, r24	; 0x02
	u8 low =num&0x0f;//00000100
    514e:	8b 89       	ldd	r24, Y+19	; 0x13
    5150:	8f 70       	andi	r24, 0x0F	; 15
    5152:	89 83       	std	Y+1, r24	; 0x01
	u8 HEX[16]={'0','1','2','3' , '4' , '5' , '6' ,'7','8' , '9' , 'A','B' ,'C' , 'D' ,'E' ,'F'}; // using looK up table
    5154:	ce 01       	movw	r24, r28
    5156:	03 96       	adiw	r24, 0x03	; 3
    5158:	9d 8b       	std	Y+21, r25	; 0x15
    515a:	8c 8b       	std	Y+20, r24	; 0x14
    515c:	eb e9       	ldi	r30, 0x9B	; 155
    515e:	f1 e0       	ldi	r31, 0x01	; 1
    5160:	ff 8b       	std	Y+23, r31	; 0x17
    5162:	ee 8b       	std	Y+22, r30	; 0x16
    5164:	f0 e1       	ldi	r31, 0x10	; 16
    5166:	f8 8f       	std	Y+24, r31	; 0x18
    5168:	ee 89       	ldd	r30, Y+22	; 0x16
    516a:	ff 89       	ldd	r31, Y+23	; 0x17
    516c:	00 80       	ld	r0, Z
    516e:	8e 89       	ldd	r24, Y+22	; 0x16
    5170:	9f 89       	ldd	r25, Y+23	; 0x17
    5172:	01 96       	adiw	r24, 0x01	; 1
    5174:	9f 8b       	std	Y+23, r25	; 0x17
    5176:	8e 8b       	std	Y+22, r24	; 0x16
    5178:	ec 89       	ldd	r30, Y+20	; 0x14
    517a:	fd 89       	ldd	r31, Y+21	; 0x15
    517c:	00 82       	st	Z, r0
    517e:	8c 89       	ldd	r24, Y+20	; 0x14
    5180:	9d 89       	ldd	r25, Y+21	; 0x15
    5182:	01 96       	adiw	r24, 0x01	; 1
    5184:	9d 8b       	std	Y+21, r25	; 0x15
    5186:	8c 8b       	std	Y+20, r24	; 0x14
    5188:	98 8d       	ldd	r25, Y+24	; 0x18
    518a:	91 50       	subi	r25, 0x01	; 1
    518c:	98 8f       	std	Y+24, r25	; 0x18
    518e:	e8 8d       	ldd	r30, Y+24	; 0x18
    5190:	ee 23       	and	r30, r30
    5192:	51 f7       	brne	.-44     	; 0x5168 <LCD_WriteHex+0x38>
	if(high<=9)
    5194:	8a 81       	ldd	r24, Y+2	; 0x02
    5196:	8a 30       	cpi	r24, 0x0A	; 10
    5198:	28 f4       	brcc	.+10     	; 0x51a4 <LCD_WriteHex+0x74>
	LCD_WriteData(high+'0');
    519a:	8a 81       	ldd	r24, Y+2	; 0x02
    519c:	80 5d       	subi	r24, 0xD0	; 208
    519e:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
    51a2:	04 c0       	rjmp	.+8      	; 0x51ac <LCD_WriteHex+0x7c>
	else
	LCD_WriteData(high-10+'A');
    51a4:	8a 81       	ldd	r24, Y+2	; 0x02
    51a6:	89 5c       	subi	r24, 0xC9	; 201
    51a8:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
	
	LCD_WriteData(HEX[low]);
    51ac:	89 81       	ldd	r24, Y+1	; 0x01
    51ae:	28 2f       	mov	r18, r24
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	ce 01       	movw	r24, r28
    51b4:	03 96       	adiw	r24, 0x03	; 3
    51b6:	fc 01       	movw	r30, r24
    51b8:	e2 0f       	add	r30, r18
    51ba:	f3 1f       	adc	r31, r19
    51bc:	80 81       	ld	r24, Z
    51be:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
}
    51c2:	68 96       	adiw	r28, 0x18	; 24
    51c4:	0f b6       	in	r0, 0x3f	; 63
    51c6:	f8 94       	cli
    51c8:	de bf       	out	0x3e, r29	; 62
    51ca:	0f be       	out	0x3f, r0	; 63
    51cc:	cd bf       	out	0x3d, r28	; 61
    51ce:	cf 91       	pop	r28
    51d0:	df 91       	pop	r29
    51d2:	08 95       	ret

000051d4 <LCD_WriteNumber_4Digit>:
void LCD_WriteNumber_4Digit (u16 num) 
{
    51d4:	df 93       	push	r29
    51d6:	cf 93       	push	r28
    51d8:	00 d0       	rcall	.+0      	; 0x51da <LCD_WriteNumber_4Digit+0x6>
    51da:	cd b7       	in	r28, 0x3d	; 61
    51dc:	de b7       	in	r29, 0x3e	; 62
    51de:	9a 83       	std	Y+2, r25	; 0x02
    51e0:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(((num %10000)/1000) + '0') ;
    51e2:	89 81       	ldd	r24, Y+1	; 0x01
    51e4:	9a 81       	ldd	r25, Y+2	; 0x02
    51e6:	20 e1       	ldi	r18, 0x10	; 16
    51e8:	37 e2       	ldi	r19, 0x27	; 39
    51ea:	b9 01       	movw	r22, r18
    51ec:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__udivmodhi4>
    51f0:	28 ee       	ldi	r18, 0xE8	; 232
    51f2:	33 e0       	ldi	r19, 0x03	; 3
    51f4:	b9 01       	movw	r22, r18
    51f6:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__udivmodhi4>
    51fa:	cb 01       	movw	r24, r22
    51fc:	80 5d       	subi	r24, 0xD0	; 208
    51fe:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
	LCD_WriteData(((num %1000)/100) + '0') ;
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	9a 81       	ldd	r25, Y+2	; 0x02
    5206:	28 ee       	ldi	r18, 0xE8	; 232
    5208:	33 e0       	ldi	r19, 0x03	; 3
    520a:	b9 01       	movw	r22, r18
    520c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__udivmodhi4>
    5210:	24 e6       	ldi	r18, 0x64	; 100
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	b9 01       	movw	r22, r18
    5216:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__udivmodhi4>
    521a:	cb 01       	movw	r24, r22
    521c:	80 5d       	subi	r24, 0xD0	; 208
    521e:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
	LCD_WriteData(((num %100)/10) + '0') ;
    5222:	89 81       	ldd	r24, Y+1	; 0x01
    5224:	9a 81       	ldd	r25, Y+2	; 0x02
    5226:	24 e6       	ldi	r18, 0x64	; 100
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	b9 01       	movw	r22, r18
    522c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__udivmodhi4>
    5230:	2a e0       	ldi	r18, 0x0A	; 10
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	b9 01       	movw	r22, r18
    5236:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__udivmodhi4>
    523a:	cb 01       	movw	r24, r22
    523c:	80 5d       	subi	r24, 0xD0	; 208
    523e:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
	LCD_WriteData(((num %10)/1) + '0') ;
    5242:	89 81       	ldd	r24, Y+1	; 0x01
    5244:	9a 81       	ldd	r25, Y+2	; 0x02
    5246:	2a e0       	ldi	r18, 0x0A	; 10
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	b9 01       	movw	r22, r18
    524c:	0e 94 b2 36 	call	0x6d64	; 0x6d64 <__udivmodhi4>
    5250:	80 5d       	subi	r24, 0xD0	; 208
    5252:	0e 94 1a 20 	call	0x4034	; 0x4034 <LCD_WriteData>
}
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
    525a:	cf 91       	pop	r28
    525c:	df 91       	pop	r29
    525e:	08 95       	ret

00005260 <LCD_GoTo>:
void LCD_GoTo(u8 line ,u8 x)//1
{
    5260:	df 93       	push	r29
    5262:	cf 93       	push	r28
    5264:	00 d0       	rcall	.+0      	; 0x5266 <LCD_GoTo+0x6>
    5266:	cd b7       	in	r28, 0x3d	; 61
    5268:	de b7       	in	r29, 0x3e	; 62
    526a:	89 83       	std	Y+1, r24	; 0x01
    526c:	6a 83       	std	Y+2, r22	; 0x02
	if (line==0)
    526e:	89 81       	ldd	r24, Y+1	; 0x01
    5270:	88 23       	and	r24, r24
    5272:	29 f4       	brne	.+10     	; 0x527e <LCD_GoTo+0x1e>
	{
		LCD_WriteCommand(0x80+x);
    5274:	8a 81       	ldd	r24, Y+2	; 0x02
    5276:	80 58       	subi	r24, 0x80	; 128
    5278:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
    527c:	07 c0       	rjmp	.+14     	; 0x528c <LCD_GoTo+0x2c>

	}
	else if (line==1)
    527e:	89 81       	ldd	r24, Y+1	; 0x01
    5280:	81 30       	cpi	r24, 0x01	; 1
    5282:	21 f4       	brne	.+8      	; 0x528c <LCD_GoTo+0x2c>
	{
		LCD_WriteCommand(0x80+0x40+x);
    5284:	8a 81       	ldd	r24, Y+2	; 0x02
    5286:	80 54       	subi	r24, 0x40	; 64
    5288:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <LCD_WriteCommand>
	}

}
    528c:	0f 90       	pop	r0
    528e:	0f 90       	pop	r0
    5290:	cf 91       	pop	r28
    5292:	df 91       	pop	r29
    5294:	08 95       	ret

00005296 <MOTOR_CW>:
 *  Author: EL-talkhawy
 */ 
#include "Motors.h"

void MOTOR_CW (MOTOR_type motor) 
{
    5296:	df 93       	push	r29
    5298:	cf 93       	push	r28
    529a:	00 d0       	rcall	.+0      	; 0x529c <MOTOR_CW+0x6>
    529c:	0f 92       	push	r0
    529e:	cd b7       	in	r28, 0x3d	; 61
    52a0:	de b7       	in	r29, 0x3e	; 62
    52a2:	89 83       	std	Y+1, r24	; 0x01
	switch(motor)
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	28 2f       	mov	r18, r24
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	3b 83       	std	Y+3, r19	; 0x03
    52ac:	2a 83       	std	Y+2, r18	; 0x02
    52ae:	8a 81       	ldd	r24, Y+2	; 0x02
    52b0:	9b 81       	ldd	r25, Y+3	; 0x03
    52b2:	00 97       	sbiw	r24, 0x00	; 0
    52b4:	31 f0       	breq	.+12     	; 0x52c2 <MOTOR_CW+0x2c>
    52b6:	2a 81       	ldd	r18, Y+2	; 0x02
    52b8:	3b 81       	ldd	r19, Y+3	; 0x03
    52ba:	21 30       	cpi	r18, 0x01	; 1
    52bc:	31 05       	cpc	r19, r1
    52be:	71 f0       	breq	.+28     	; 0x52dc <MOTOR_CW+0x46>
    52c0:	19 c0       	rjmp	.+50     	; 0x52f4 <MOTOR_CW+0x5e>
	{
		case MOTOR1 : 
		DIO_WritePIN(EN1 , HIGH) ;
    52c2:	85 e0       	ldi	r24, 0x05	; 5
    52c4:	61 e0       	ldi	r22, 0x01	; 1
    52c6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N1 , HIGH) ;
    52ca:	83 e0       	ldi	r24, 0x03	; 3
    52cc:	61 e0       	ldi	r22, 0x01	; 1
    52ce:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N2 , LOW) ;
    52d2:	84 e0       	ldi	r24, 0x04	; 4
    52d4:	60 e0       	ldi	r22, 0x00	; 0
    52d6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    52da:	0c c0       	rjmp	.+24     	; 0x52f4 <MOTOR_CW+0x5e>
		break ; 
		case MOTOR2 :
		DIO_WritePIN(EN2 , HIGH) ;
    52dc:	83 e1       	ldi	r24, 0x13	; 19
    52de:	61 e0       	ldi	r22, 0x01	; 1
    52e0:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N3 , HIGH) ;
    52e4:	84 e1       	ldi	r24, 0x14	; 20
    52e6:	61 e0       	ldi	r22, 0x01	; 1
    52e8:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N4 , LOW) ;
    52ec:	85 e1       	ldi	r24, 0x15	; 21
    52ee:	60 e0       	ldi	r22, 0x00	; 0
    52f0:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		break ;
	}
}
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    52fa:	cf 91       	pop	r28
    52fc:	df 91       	pop	r29
    52fe:	08 95       	ret

00005300 <MOTOR_CCW>:

void MOTOR_CCW (MOTOR_type motor) 
{
    5300:	df 93       	push	r29
    5302:	cf 93       	push	r28
    5304:	00 d0       	rcall	.+0      	; 0x5306 <MOTOR_CCW+0x6>
    5306:	0f 92       	push	r0
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
    530c:	89 83       	std	Y+1, r24	; 0x01
	switch(motor)
    530e:	89 81       	ldd	r24, Y+1	; 0x01
    5310:	28 2f       	mov	r18, r24
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	3b 83       	std	Y+3, r19	; 0x03
    5316:	2a 83       	std	Y+2, r18	; 0x02
    5318:	8a 81       	ldd	r24, Y+2	; 0x02
    531a:	9b 81       	ldd	r25, Y+3	; 0x03
    531c:	00 97       	sbiw	r24, 0x00	; 0
    531e:	31 f0       	breq	.+12     	; 0x532c <MOTOR_CCW+0x2c>
    5320:	2a 81       	ldd	r18, Y+2	; 0x02
    5322:	3b 81       	ldd	r19, Y+3	; 0x03
    5324:	21 30       	cpi	r18, 0x01	; 1
    5326:	31 05       	cpc	r19, r1
    5328:	71 f0       	breq	.+28     	; 0x5346 <MOTOR_CCW+0x46>
    532a:	19 c0       	rjmp	.+50     	; 0x535e <MOTOR_CCW+0x5e>
	{
		case MOTOR1 :
		DIO_WritePIN(EN1 , HIGH) ;
    532c:	85 e0       	ldi	r24, 0x05	; 5
    532e:	61 e0       	ldi	r22, 0x01	; 1
    5330:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N1 , LOW) ;
    5334:	83 e0       	ldi	r24, 0x03	; 3
    5336:	60 e0       	ldi	r22, 0x00	; 0
    5338:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N2 , HIGH) ;
    533c:	84 e0       	ldi	r24, 0x04	; 4
    533e:	61 e0       	ldi	r22, 0x01	; 1
    5340:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5344:	0c c0       	rjmp	.+24     	; 0x535e <MOTOR_CCW+0x5e>
		break ;
		case MOTOR2 :
		DIO_WritePIN(EN2 , HIGH) ;
    5346:	83 e1       	ldi	r24, 0x13	; 19
    5348:	61 e0       	ldi	r22, 0x01	; 1
    534a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N3 , LOW) ;
    534e:	84 e1       	ldi	r24, 0x14	; 20
    5350:	60 e0       	ldi	r22, 0x00	; 0
    5352:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N4 , HIGH) ;
    5356:	85 e1       	ldi	r24, 0x15	; 21
    5358:	61 e0       	ldi	r22, 0x01	; 1
    535a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		break ;
	}
	
}
    535e:	0f 90       	pop	r0
    5360:	0f 90       	pop	r0
    5362:	0f 90       	pop	r0
    5364:	cf 91       	pop	r28
    5366:	df 91       	pop	r29
    5368:	08 95       	ret

0000536a <MOTOR_STOP>:

void MOTOR_STOP (MOTOR_type motor) 
{
    536a:	df 93       	push	r29
    536c:	cf 93       	push	r28
    536e:	00 d0       	rcall	.+0      	; 0x5370 <MOTOR_STOP+0x6>
    5370:	0f 92       	push	r0
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	89 83       	std	Y+1, r24	; 0x01
	switch(motor)
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	28 2f       	mov	r18, r24
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	3b 83       	std	Y+3, r19	; 0x03
    5380:	2a 83       	std	Y+2, r18	; 0x02
    5382:	8a 81       	ldd	r24, Y+2	; 0x02
    5384:	9b 81       	ldd	r25, Y+3	; 0x03
    5386:	00 97       	sbiw	r24, 0x00	; 0
    5388:	31 f0       	breq	.+12     	; 0x5396 <MOTOR_STOP+0x2c>
    538a:	2a 81       	ldd	r18, Y+2	; 0x02
    538c:	3b 81       	ldd	r19, Y+3	; 0x03
    538e:	21 30       	cpi	r18, 0x01	; 1
    5390:	31 05       	cpc	r19, r1
    5392:	71 f0       	breq	.+28     	; 0x53b0 <MOTOR_STOP+0x46>
    5394:	19 c0       	rjmp	.+50     	; 0x53c8 <MOTOR_STOP+0x5e>
	{
		case MOTOR1 :
		DIO_WritePIN(EN1 , LOW) ;
    5396:	85 e0       	ldi	r24, 0x05	; 5
    5398:	60 e0       	ldi	r22, 0x00	; 0
    539a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N1 , LOW) ;
    539e:	83 e0       	ldi	r24, 0x03	; 3
    53a0:	60 e0       	ldi	r22, 0x00	; 0
    53a2:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N2 , LOW) ;
    53a6:	84 e0       	ldi	r24, 0x04	; 4
    53a8:	60 e0       	ldi	r22, 0x00	; 0
    53aa:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    53ae:	0c c0       	rjmp	.+24     	; 0x53c8 <MOTOR_STOP+0x5e>
		break ;
		case MOTOR2 :
		DIO_WritePIN(EN2 ,LOW) ;
    53b0:	83 e1       	ldi	r24, 0x13	; 19
    53b2:	60 e0       	ldi	r22, 0x00	; 0
    53b4:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N3 , LOW) ;
    53b8:	84 e1       	ldi	r24, 0x14	; 20
    53ba:	60 e0       	ldi	r22, 0x00	; 0
    53bc:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		DIO_WritePIN(N4 , LOW) ;
    53c0:	85 e1       	ldi	r24, 0x15	; 21
    53c2:	60 e0       	ldi	r22, 0x00	; 0
    53c4:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
		break ;
	}
	
}
    53c8:	0f 90       	pop	r0
    53ca:	0f 90       	pop	r0
    53cc:	0f 90       	pop	r0
    53ce:	cf 91       	pop	r28
    53d0:	df 91       	pop	r29
    53d2:	08 95       	ret

000053d4 <STEEPER_CW>:
you can write function forward () in app using 4 motor with clock wise or use reverse 
function with counter clock wise */ 

/********************************STEPPER*****************************************/
void STEEPER_CW (void) 
{
    53d4:	df 93       	push	r29
    53d6:	cf 93       	push	r28
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62
    53dc:	e8 97       	sbiw	r28, 0x38	; 56
    53de:	0f b6       	in	r0, 0x3f	; 63
    53e0:	f8 94       	cli
    53e2:	de bf       	out	0x3e, r29	; 62
    53e4:	0f be       	out	0x3f, r0	; 63
    53e6:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePIN(B1 , HIGH) ;
    53e8:	88 e1       	ldi	r24, 0x18	; 24
    53ea:	61 e0       	ldi	r22, 0x01	; 1
    53ec:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    53f0:	89 e1       	ldi	r24, 0x19	; 25
    53f2:	60 e0       	ldi	r22, 0x00	; 0
    53f4:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    53f8:	8a e1       	ldi	r24, 0x1A	; 26
    53fa:	60 e0       	ldi	r22, 0x00	; 0
    53fc:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    5400:	8b e1       	ldi	r24, 0x1B	; 27
    5402:	60 e0       	ldi	r22, 0x00	; 0
    5404:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5408:	80 e0       	ldi	r24, 0x00	; 0
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	a8 e4       	ldi	r26, 0x48	; 72
    540e:	b3 e4       	ldi	r27, 0x43	; 67
    5410:	8d ab       	std	Y+53, r24	; 0x35
    5412:	9e ab       	std	Y+54, r25	; 0x36
    5414:	af ab       	std	Y+55, r26	; 0x37
    5416:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5418:	6d a9       	ldd	r22, Y+53	; 0x35
    541a:	7e a9       	ldd	r23, Y+54	; 0x36
    541c:	8f a9       	ldd	r24, Y+55	; 0x37
    541e:	98 ad       	ldd	r25, Y+56	; 0x38
    5420:	20 e0       	ldi	r18, 0x00	; 0
    5422:	30 e0       	ldi	r19, 0x00	; 0
    5424:	4a ef       	ldi	r20, 0xFA	; 250
    5426:	54 e4       	ldi	r21, 0x44	; 68
    5428:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    542c:	dc 01       	movw	r26, r24
    542e:	cb 01       	movw	r24, r22
    5430:	89 ab       	std	Y+49, r24	; 0x31
    5432:	9a ab       	std	Y+50, r25	; 0x32
    5434:	ab ab       	std	Y+51, r26	; 0x33
    5436:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5438:	69 a9       	ldd	r22, Y+49	; 0x31
    543a:	7a a9       	ldd	r23, Y+50	; 0x32
    543c:	8b a9       	ldd	r24, Y+51	; 0x33
    543e:	9c a9       	ldd	r25, Y+52	; 0x34
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	40 e8       	ldi	r20, 0x80	; 128
    5446:	5f e3       	ldi	r21, 0x3F	; 63
    5448:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    544c:	88 23       	and	r24, r24
    544e:	2c f4       	brge	.+10     	; 0x545a <STEEPER_CW+0x86>
		__ticks = 1;
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	98 ab       	std	Y+48, r25	; 0x30
    5456:	8f a7       	std	Y+47, r24	; 0x2f
    5458:	3f c0       	rjmp	.+126    	; 0x54d8 <STEEPER_CW+0x104>
	else if (__tmp > 65535)
    545a:	69 a9       	ldd	r22, Y+49	; 0x31
    545c:	7a a9       	ldd	r23, Y+50	; 0x32
    545e:	8b a9       	ldd	r24, Y+51	; 0x33
    5460:	9c a9       	ldd	r25, Y+52	; 0x34
    5462:	20 e0       	ldi	r18, 0x00	; 0
    5464:	3f ef       	ldi	r19, 0xFF	; 255
    5466:	4f e7       	ldi	r20, 0x7F	; 127
    5468:	57 e4       	ldi	r21, 0x47	; 71
    546a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    546e:	18 16       	cp	r1, r24
    5470:	4c f5       	brge	.+82     	; 0x54c4 <STEEPER_CW+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5472:	6d a9       	ldd	r22, Y+53	; 0x35
    5474:	7e a9       	ldd	r23, Y+54	; 0x36
    5476:	8f a9       	ldd	r24, Y+55	; 0x37
    5478:	98 ad       	ldd	r25, Y+56	; 0x38
    547a:	20 e0       	ldi	r18, 0x00	; 0
    547c:	30 e0       	ldi	r19, 0x00	; 0
    547e:	40 e2       	ldi	r20, 0x20	; 32
    5480:	51 e4       	ldi	r21, 0x41	; 65
    5482:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5486:	dc 01       	movw	r26, r24
    5488:	cb 01       	movw	r24, r22
    548a:	bc 01       	movw	r22, r24
    548c:	cd 01       	movw	r24, r26
    548e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5492:	dc 01       	movw	r26, r24
    5494:	cb 01       	movw	r24, r22
    5496:	98 ab       	std	Y+48, r25	; 0x30
    5498:	8f a7       	std	Y+47, r24	; 0x2f
    549a:	0f c0       	rjmp	.+30     	; 0x54ba <STEEPER_CW+0xe6>
    549c:	88 ec       	ldi	r24, 0xC8	; 200
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	9e a7       	std	Y+46, r25	; 0x2e
    54a2:	8d a7       	std	Y+45, r24	; 0x2d
    54a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    54a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    54a8:	01 97       	sbiw	r24, 0x01	; 1
    54aa:	f1 f7       	brne	.-4      	; 0x54a8 <STEEPER_CW+0xd4>
    54ac:	9e a7       	std	Y+46, r25	; 0x2e
    54ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    54b2:	98 a9       	ldd	r25, Y+48	; 0x30
    54b4:	01 97       	sbiw	r24, 0x01	; 1
    54b6:	98 ab       	std	Y+48, r25	; 0x30
    54b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    54bc:	98 a9       	ldd	r25, Y+48	; 0x30
    54be:	00 97       	sbiw	r24, 0x00	; 0
    54c0:	69 f7       	brne	.-38     	; 0x549c <STEEPER_CW+0xc8>
    54c2:	14 c0       	rjmp	.+40     	; 0x54ec <STEEPER_CW+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54c4:	69 a9       	ldd	r22, Y+49	; 0x31
    54c6:	7a a9       	ldd	r23, Y+50	; 0x32
    54c8:	8b a9       	ldd	r24, Y+51	; 0x33
    54ca:	9c a9       	ldd	r25, Y+52	; 0x34
    54cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54d0:	dc 01       	movw	r26, r24
    54d2:	cb 01       	movw	r24, r22
    54d4:	98 ab       	std	Y+48, r25	; 0x30
    54d6:	8f a7       	std	Y+47, r24	; 0x2f
    54d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    54da:	98 a9       	ldd	r25, Y+48	; 0x30
    54dc:	9c a7       	std	Y+44, r25	; 0x2c
    54de:	8b a7       	std	Y+43, r24	; 0x2b
    54e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    54e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <STEEPER_CW+0x110>
    54e8:	9c a7       	std	Y+44, r25	; 0x2c
    54ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    54ec:	88 e1       	ldi	r24, 0x18	; 24
    54ee:	60 e0       	ldi	r22, 0x00	; 0
    54f0:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 , HIGH) ;
    54f4:	89 e1       	ldi	r24, 0x19	; 25
    54f6:	61 e0       	ldi	r22, 0x01	; 1
    54f8:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    54fc:	8a e1       	ldi	r24, 0x1A	; 26
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    5504:	8b e1       	ldi	r24, 0x1B	; 27
    5506:	60 e0       	ldi	r22, 0x00	; 0
    5508:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    550c:	80 e0       	ldi	r24, 0x00	; 0
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	a8 e4       	ldi	r26, 0x48	; 72
    5512:	b3 e4       	ldi	r27, 0x43	; 67
    5514:	8f a3       	std	Y+39, r24	; 0x27
    5516:	98 a7       	std	Y+40, r25	; 0x28
    5518:	a9 a7       	std	Y+41, r26	; 0x29
    551a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    551c:	6f a1       	ldd	r22, Y+39	; 0x27
    551e:	78 a5       	ldd	r23, Y+40	; 0x28
    5520:	89 a5       	ldd	r24, Y+41	; 0x29
    5522:	9a a5       	ldd	r25, Y+42	; 0x2a
    5524:	20 e0       	ldi	r18, 0x00	; 0
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	4a ef       	ldi	r20, 0xFA	; 250
    552a:	54 e4       	ldi	r21, 0x44	; 68
    552c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	8b a3       	std	Y+35, r24	; 0x23
    5536:	9c a3       	std	Y+36, r25	; 0x24
    5538:	ad a3       	std	Y+37, r26	; 0x25
    553a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    553c:	6b a1       	ldd	r22, Y+35	; 0x23
    553e:	7c a1       	ldd	r23, Y+36	; 0x24
    5540:	8d a1       	ldd	r24, Y+37	; 0x25
    5542:	9e a1       	ldd	r25, Y+38	; 0x26
    5544:	20 e0       	ldi	r18, 0x00	; 0
    5546:	30 e0       	ldi	r19, 0x00	; 0
    5548:	40 e8       	ldi	r20, 0x80	; 128
    554a:	5f e3       	ldi	r21, 0x3F	; 63
    554c:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    5550:	88 23       	and	r24, r24
    5552:	2c f4       	brge	.+10     	; 0x555e <STEEPER_CW+0x18a>
		__ticks = 1;
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	9a a3       	std	Y+34, r25	; 0x22
    555a:	89 a3       	std	Y+33, r24	; 0x21
    555c:	3f c0       	rjmp	.+126    	; 0x55dc <STEEPER_CW+0x208>
	else if (__tmp > 65535)
    555e:	6b a1       	ldd	r22, Y+35	; 0x23
    5560:	7c a1       	ldd	r23, Y+36	; 0x24
    5562:	8d a1       	ldd	r24, Y+37	; 0x25
    5564:	9e a1       	ldd	r25, Y+38	; 0x26
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	3f ef       	ldi	r19, 0xFF	; 255
    556a:	4f e7       	ldi	r20, 0x7F	; 127
    556c:	57 e4       	ldi	r21, 0x47	; 71
    556e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    5572:	18 16       	cp	r1, r24
    5574:	4c f5       	brge	.+82     	; 0x55c8 <STEEPER_CW+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5576:	6f a1       	ldd	r22, Y+39	; 0x27
    5578:	78 a5       	ldd	r23, Y+40	; 0x28
    557a:	89 a5       	ldd	r24, Y+41	; 0x29
    557c:	9a a5       	ldd	r25, Y+42	; 0x2a
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	40 e2       	ldi	r20, 0x20	; 32
    5584:	51 e4       	ldi	r21, 0x41	; 65
    5586:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    558a:	dc 01       	movw	r26, r24
    558c:	cb 01       	movw	r24, r22
    558e:	bc 01       	movw	r22, r24
    5590:	cd 01       	movw	r24, r26
    5592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5596:	dc 01       	movw	r26, r24
    5598:	cb 01       	movw	r24, r22
    559a:	9a a3       	std	Y+34, r25	; 0x22
    559c:	89 a3       	std	Y+33, r24	; 0x21
    559e:	0f c0       	rjmp	.+30     	; 0x55be <STEEPER_CW+0x1ea>
    55a0:	88 ec       	ldi	r24, 0xC8	; 200
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	98 a3       	std	Y+32, r25	; 0x20
    55a6:	8f 8f       	std	Y+31, r24	; 0x1f
    55a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55aa:	98 a1       	ldd	r25, Y+32	; 0x20
    55ac:	01 97       	sbiw	r24, 0x01	; 1
    55ae:	f1 f7       	brne	.-4      	; 0x55ac <STEEPER_CW+0x1d8>
    55b0:	98 a3       	std	Y+32, r25	; 0x20
    55b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55b4:	89 a1       	ldd	r24, Y+33	; 0x21
    55b6:	9a a1       	ldd	r25, Y+34	; 0x22
    55b8:	01 97       	sbiw	r24, 0x01	; 1
    55ba:	9a a3       	std	Y+34, r25	; 0x22
    55bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55be:	89 a1       	ldd	r24, Y+33	; 0x21
    55c0:	9a a1       	ldd	r25, Y+34	; 0x22
    55c2:	00 97       	sbiw	r24, 0x00	; 0
    55c4:	69 f7       	brne	.-38     	; 0x55a0 <STEEPER_CW+0x1cc>
    55c6:	14 c0       	rjmp	.+40     	; 0x55f0 <STEEPER_CW+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55c8:	6b a1       	ldd	r22, Y+35	; 0x23
    55ca:	7c a1       	ldd	r23, Y+36	; 0x24
    55cc:	8d a1       	ldd	r24, Y+37	; 0x25
    55ce:	9e a1       	ldd	r25, Y+38	; 0x26
    55d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	9a a3       	std	Y+34, r25	; 0x22
    55da:	89 a3       	std	Y+33, r24	; 0x21
    55dc:	89 a1       	ldd	r24, Y+33	; 0x21
    55de:	9a a1       	ldd	r25, Y+34	; 0x22
    55e0:	9e 8f       	std	Y+30, r25	; 0x1e
    55e2:	8d 8f       	std	Y+29, r24	; 0x1d
    55e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55e8:	01 97       	sbiw	r24, 0x01	; 1
    55ea:	f1 f7       	brne	.-4      	; 0x55e8 <STEEPER_CW+0x214>
    55ec:	9e 8f       	std	Y+30, r25	; 0x1e
    55ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    55f0:	88 e1       	ldi	r24, 0x18	; 24
    55f2:	60 e0       	ldi	r22, 0x00	; 0
    55f4:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    55f8:	89 e1       	ldi	r24, 0x19	; 25
    55fa:	60 e0       	ldi	r22, 0x00	; 0
    55fc:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 , HIGH) ;
    5600:	8a e1       	ldi	r24, 0x1A	; 26
    5602:	61 e0       	ldi	r22, 0x01	; 1
    5604:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    5608:	8b e1       	ldi	r24, 0x1B	; 27
    560a:	60 e0       	ldi	r22, 0x00	; 0
    560c:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	a8 e4       	ldi	r26, 0x48	; 72
    5616:	b3 e4       	ldi	r27, 0x43	; 67
    5618:	89 8f       	std	Y+25, r24	; 0x19
    561a:	9a 8f       	std	Y+26, r25	; 0x1a
    561c:	ab 8f       	std	Y+27, r26	; 0x1b
    561e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5620:	69 8d       	ldd	r22, Y+25	; 0x19
    5622:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5624:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	4a ef       	ldi	r20, 0xFA	; 250
    562e:	54 e4       	ldi	r21, 0x44	; 68
    5630:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	8d 8b       	std	Y+21, r24	; 0x15
    563a:	9e 8b       	std	Y+22, r25	; 0x16
    563c:	af 8b       	std	Y+23, r26	; 0x17
    563e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5640:	6d 89       	ldd	r22, Y+21	; 0x15
    5642:	7e 89       	ldd	r23, Y+22	; 0x16
    5644:	8f 89       	ldd	r24, Y+23	; 0x17
    5646:	98 8d       	ldd	r25, Y+24	; 0x18
    5648:	20 e0       	ldi	r18, 0x00	; 0
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	40 e8       	ldi	r20, 0x80	; 128
    564e:	5f e3       	ldi	r21, 0x3F	; 63
    5650:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    5654:	88 23       	and	r24, r24
    5656:	2c f4       	brge	.+10     	; 0x5662 <STEEPER_CW+0x28e>
		__ticks = 1;
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	9c 8b       	std	Y+20, r25	; 0x14
    565e:	8b 8b       	std	Y+19, r24	; 0x13
    5660:	3f c0       	rjmp	.+126    	; 0x56e0 <STEEPER_CW+0x30c>
	else if (__tmp > 65535)
    5662:	6d 89       	ldd	r22, Y+21	; 0x15
    5664:	7e 89       	ldd	r23, Y+22	; 0x16
    5666:	8f 89       	ldd	r24, Y+23	; 0x17
    5668:	98 8d       	ldd	r25, Y+24	; 0x18
    566a:	20 e0       	ldi	r18, 0x00	; 0
    566c:	3f ef       	ldi	r19, 0xFF	; 255
    566e:	4f e7       	ldi	r20, 0x7F	; 127
    5670:	57 e4       	ldi	r21, 0x47	; 71
    5672:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    5676:	18 16       	cp	r1, r24
    5678:	4c f5       	brge	.+82     	; 0x56cc <STEEPER_CW+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    567a:	69 8d       	ldd	r22, Y+25	; 0x19
    567c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    567e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	40 e2       	ldi	r20, 0x20	; 32
    5688:	51 e4       	ldi	r21, 0x41	; 65
    568a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	bc 01       	movw	r22, r24
    5694:	cd 01       	movw	r24, r26
    5696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    569a:	dc 01       	movw	r26, r24
    569c:	cb 01       	movw	r24, r22
    569e:	9c 8b       	std	Y+20, r25	; 0x14
    56a0:	8b 8b       	std	Y+19, r24	; 0x13
    56a2:	0f c0       	rjmp	.+30     	; 0x56c2 <STEEPER_CW+0x2ee>
    56a4:	88 ec       	ldi	r24, 0xC8	; 200
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	9a 8b       	std	Y+18, r25	; 0x12
    56aa:	89 8b       	std	Y+17, r24	; 0x11
    56ac:	89 89       	ldd	r24, Y+17	; 0x11
    56ae:	9a 89       	ldd	r25, Y+18	; 0x12
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	f1 f7       	brne	.-4      	; 0x56b0 <STEEPER_CW+0x2dc>
    56b4:	9a 8b       	std	Y+18, r25	; 0x12
    56b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b8:	8b 89       	ldd	r24, Y+19	; 0x13
    56ba:	9c 89       	ldd	r25, Y+20	; 0x14
    56bc:	01 97       	sbiw	r24, 0x01	; 1
    56be:	9c 8b       	std	Y+20, r25	; 0x14
    56c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c2:	8b 89       	ldd	r24, Y+19	; 0x13
    56c4:	9c 89       	ldd	r25, Y+20	; 0x14
    56c6:	00 97       	sbiw	r24, 0x00	; 0
    56c8:	69 f7       	brne	.-38     	; 0x56a4 <STEEPER_CW+0x2d0>
    56ca:	14 c0       	rjmp	.+40     	; 0x56f4 <STEEPER_CW+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56cc:	6d 89       	ldd	r22, Y+21	; 0x15
    56ce:	7e 89       	ldd	r23, Y+22	; 0x16
    56d0:	8f 89       	ldd	r24, Y+23	; 0x17
    56d2:	98 8d       	ldd	r25, Y+24	; 0x18
    56d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	9c 8b       	std	Y+20, r25	; 0x14
    56de:	8b 8b       	std	Y+19, r24	; 0x13
    56e0:	8b 89       	ldd	r24, Y+19	; 0x13
    56e2:	9c 89       	ldd	r25, Y+20	; 0x14
    56e4:	98 8b       	std	Y+16, r25	; 0x10
    56e6:	8f 87       	std	Y+15, r24	; 0x0f
    56e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    56ea:	98 89       	ldd	r25, Y+16	; 0x10
    56ec:	01 97       	sbiw	r24, 0x01	; 1
    56ee:	f1 f7       	brne	.-4      	; 0x56ec <STEEPER_CW+0x318>
    56f0:	98 8b       	std	Y+16, r25	; 0x10
    56f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    56f4:	88 e1       	ldi	r24, 0x18	; 24
    56f6:	60 e0       	ldi	r22, 0x00	; 0
    56f8:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    56fc:	89 e1       	ldi	r24, 0x19	; 25
    56fe:	60 e0       	ldi	r22, 0x00	; 0
    5700:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    5704:	8a e1       	ldi	r24, 0x1A	; 26
    5706:	60 e0       	ldi	r22, 0x00	; 0
    5708:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 , HIGH) ;
    570c:	8b e1       	ldi	r24, 0x1B	; 27
    570e:	61 e0       	ldi	r22, 0x01	; 1
    5710:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	a8 e4       	ldi	r26, 0x48	; 72
    571a:	b3 e4       	ldi	r27, 0x43	; 67
    571c:	8b 87       	std	Y+11, r24	; 0x0b
    571e:	9c 87       	std	Y+12, r25	; 0x0c
    5720:	ad 87       	std	Y+13, r26	; 0x0d
    5722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5724:	6b 85       	ldd	r22, Y+11	; 0x0b
    5726:	7c 85       	ldd	r23, Y+12	; 0x0c
    5728:	8d 85       	ldd	r24, Y+13	; 0x0d
    572a:	9e 85       	ldd	r25, Y+14	; 0x0e
    572c:	20 e0       	ldi	r18, 0x00	; 0
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	4a ef       	ldi	r20, 0xFA	; 250
    5732:	54 e4       	ldi	r21, 0x44	; 68
    5734:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	8f 83       	std	Y+7, r24	; 0x07
    573e:	98 87       	std	Y+8, r25	; 0x08
    5740:	a9 87       	std	Y+9, r26	; 0x09
    5742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5744:	6f 81       	ldd	r22, Y+7	; 0x07
    5746:	78 85       	ldd	r23, Y+8	; 0x08
    5748:	89 85       	ldd	r24, Y+9	; 0x09
    574a:	9a 85       	ldd	r25, Y+10	; 0x0a
    574c:	20 e0       	ldi	r18, 0x00	; 0
    574e:	30 e0       	ldi	r19, 0x00	; 0
    5750:	40 e8       	ldi	r20, 0x80	; 128
    5752:	5f e3       	ldi	r21, 0x3F	; 63
    5754:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    5758:	88 23       	and	r24, r24
    575a:	2c f4       	brge	.+10     	; 0x5766 <STEEPER_CW+0x392>
		__ticks = 1;
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	9e 83       	std	Y+6, r25	; 0x06
    5762:	8d 83       	std	Y+5, r24	; 0x05
    5764:	3f c0       	rjmp	.+126    	; 0x57e4 <STEEPER_CW+0x410>
	else if (__tmp > 65535)
    5766:	6f 81       	ldd	r22, Y+7	; 0x07
    5768:	78 85       	ldd	r23, Y+8	; 0x08
    576a:	89 85       	ldd	r24, Y+9	; 0x09
    576c:	9a 85       	ldd	r25, Y+10	; 0x0a
    576e:	20 e0       	ldi	r18, 0x00	; 0
    5770:	3f ef       	ldi	r19, 0xFF	; 255
    5772:	4f e7       	ldi	r20, 0x7F	; 127
    5774:	57 e4       	ldi	r21, 0x47	; 71
    5776:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    577a:	18 16       	cp	r1, r24
    577c:	4c f5       	brge	.+82     	; 0x57d0 <STEEPER_CW+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    577e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5780:	7c 85       	ldd	r23, Y+12	; 0x0c
    5782:	8d 85       	ldd	r24, Y+13	; 0x0d
    5784:	9e 85       	ldd	r25, Y+14	; 0x0e
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	40 e2       	ldi	r20, 0x20	; 32
    578c:	51 e4       	ldi	r21, 0x41	; 65
    578e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	bc 01       	movw	r22, r24
    5798:	cd 01       	movw	r24, r26
    579a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    579e:	dc 01       	movw	r26, r24
    57a0:	cb 01       	movw	r24, r22
    57a2:	9e 83       	std	Y+6, r25	; 0x06
    57a4:	8d 83       	std	Y+5, r24	; 0x05
    57a6:	0f c0       	rjmp	.+30     	; 0x57c6 <STEEPER_CW+0x3f2>
    57a8:	88 ec       	ldi	r24, 0xC8	; 200
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	9c 83       	std	Y+4, r25	; 0x04
    57ae:	8b 83       	std	Y+3, r24	; 0x03
    57b0:	8b 81       	ldd	r24, Y+3	; 0x03
    57b2:	9c 81       	ldd	r25, Y+4	; 0x04
    57b4:	01 97       	sbiw	r24, 0x01	; 1
    57b6:	f1 f7       	brne	.-4      	; 0x57b4 <STEEPER_CW+0x3e0>
    57b8:	9c 83       	std	Y+4, r25	; 0x04
    57ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57bc:	8d 81       	ldd	r24, Y+5	; 0x05
    57be:	9e 81       	ldd	r25, Y+6	; 0x06
    57c0:	01 97       	sbiw	r24, 0x01	; 1
    57c2:	9e 83       	std	Y+6, r25	; 0x06
    57c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57c6:	8d 81       	ldd	r24, Y+5	; 0x05
    57c8:	9e 81       	ldd	r25, Y+6	; 0x06
    57ca:	00 97       	sbiw	r24, 0x00	; 0
    57cc:	69 f7       	brne	.-38     	; 0x57a8 <STEEPER_CW+0x3d4>
    57ce:	14 c0       	rjmp	.+40     	; 0x57f8 <STEEPER_CW+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57d0:	6f 81       	ldd	r22, Y+7	; 0x07
    57d2:	78 85       	ldd	r23, Y+8	; 0x08
    57d4:	89 85       	ldd	r24, Y+9	; 0x09
    57d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57dc:	dc 01       	movw	r26, r24
    57de:	cb 01       	movw	r24, r22
    57e0:	9e 83       	std	Y+6, r25	; 0x06
    57e2:	8d 83       	std	Y+5, r24	; 0x05
    57e4:	8d 81       	ldd	r24, Y+5	; 0x05
    57e6:	9e 81       	ldd	r25, Y+6	; 0x06
    57e8:	9a 83       	std	Y+2, r25	; 0x02
    57ea:	89 83       	std	Y+1, r24	; 0x01
    57ec:	89 81       	ldd	r24, Y+1	; 0x01
    57ee:	9a 81       	ldd	r25, Y+2	; 0x02
    57f0:	01 97       	sbiw	r24, 0x01	; 1
    57f2:	f1 f7       	brne	.-4      	; 0x57f0 <STEEPER_CW+0x41c>
    57f4:	9a 83       	std	Y+2, r25	; 0x02
    57f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STEPPER_DELAY) ;
}
    57f8:	e8 96       	adiw	r28, 0x38	; 56
    57fa:	0f b6       	in	r0, 0x3f	; 63
    57fc:	f8 94       	cli
    57fe:	de bf       	out	0x3e, r29	; 62
    5800:	0f be       	out	0x3f, r0	; 63
    5802:	cd bf       	out	0x3d, r28	; 61
    5804:	cf 91       	pop	r28
    5806:	df 91       	pop	r29
    5808:	08 95       	ret

0000580a <STEEPER_CCW>:
void STEEPER_CCW (void)
{
    580a:	df 93       	push	r29
    580c:	cf 93       	push	r28
    580e:	cd b7       	in	r28, 0x3d	; 61
    5810:	de b7       	in	r29, 0x3e	; 62
    5812:	e8 97       	sbiw	r28, 0x38	; 56
    5814:	0f b6       	in	r0, 0x3f	; 63
    5816:	f8 94       	cli
    5818:	de bf       	out	0x3e, r29	; 62
    581a:	0f be       	out	0x3f, r0	; 63
    581c:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePIN(B1 ,  LOW) ;
    581e:	88 e1       	ldi	r24, 0x18	; 24
    5820:	60 e0       	ldi	r22, 0x00	; 0
    5822:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    5826:	89 e1       	ldi	r24, 0x19	; 25
    5828:	60 e0       	ldi	r22, 0x00	; 0
    582a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    582e:	8a e1       	ldi	r24, 0x1A	; 26
    5830:	60 e0       	ldi	r22, 0x00	; 0
    5832:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 , HIGH) ;
    5836:	8b e1       	ldi	r24, 0x1B	; 27
    5838:	61 e0       	ldi	r22, 0x01	; 1
    583a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    583e:	80 e0       	ldi	r24, 0x00	; 0
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	a8 e4       	ldi	r26, 0x48	; 72
    5844:	b3 e4       	ldi	r27, 0x43	; 67
    5846:	8d ab       	std	Y+53, r24	; 0x35
    5848:	9e ab       	std	Y+54, r25	; 0x36
    584a:	af ab       	std	Y+55, r26	; 0x37
    584c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    584e:	6d a9       	ldd	r22, Y+53	; 0x35
    5850:	7e a9       	ldd	r23, Y+54	; 0x36
    5852:	8f a9       	ldd	r24, Y+55	; 0x37
    5854:	98 ad       	ldd	r25, Y+56	; 0x38
    5856:	20 e0       	ldi	r18, 0x00	; 0
    5858:	30 e0       	ldi	r19, 0x00	; 0
    585a:	4a ef       	ldi	r20, 0xFA	; 250
    585c:	54 e4       	ldi	r21, 0x44	; 68
    585e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5862:	dc 01       	movw	r26, r24
    5864:	cb 01       	movw	r24, r22
    5866:	89 ab       	std	Y+49, r24	; 0x31
    5868:	9a ab       	std	Y+50, r25	; 0x32
    586a:	ab ab       	std	Y+51, r26	; 0x33
    586c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    586e:	69 a9       	ldd	r22, Y+49	; 0x31
    5870:	7a a9       	ldd	r23, Y+50	; 0x32
    5872:	8b a9       	ldd	r24, Y+51	; 0x33
    5874:	9c a9       	ldd	r25, Y+52	; 0x34
    5876:	20 e0       	ldi	r18, 0x00	; 0
    5878:	30 e0       	ldi	r19, 0x00	; 0
    587a:	40 e8       	ldi	r20, 0x80	; 128
    587c:	5f e3       	ldi	r21, 0x3F	; 63
    587e:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    5882:	88 23       	and	r24, r24
    5884:	2c f4       	brge	.+10     	; 0x5890 <STEEPER_CCW+0x86>
		__ticks = 1;
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	98 ab       	std	Y+48, r25	; 0x30
    588c:	8f a7       	std	Y+47, r24	; 0x2f
    588e:	3f c0       	rjmp	.+126    	; 0x590e <STEEPER_CCW+0x104>
	else if (__tmp > 65535)
    5890:	69 a9       	ldd	r22, Y+49	; 0x31
    5892:	7a a9       	ldd	r23, Y+50	; 0x32
    5894:	8b a9       	ldd	r24, Y+51	; 0x33
    5896:	9c a9       	ldd	r25, Y+52	; 0x34
    5898:	20 e0       	ldi	r18, 0x00	; 0
    589a:	3f ef       	ldi	r19, 0xFF	; 255
    589c:	4f e7       	ldi	r20, 0x7F	; 127
    589e:	57 e4       	ldi	r21, 0x47	; 71
    58a0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    58a4:	18 16       	cp	r1, r24
    58a6:	4c f5       	brge	.+82     	; 0x58fa <STEEPER_CCW+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58a8:	6d a9       	ldd	r22, Y+53	; 0x35
    58aa:	7e a9       	ldd	r23, Y+54	; 0x36
    58ac:	8f a9       	ldd	r24, Y+55	; 0x37
    58ae:	98 ad       	ldd	r25, Y+56	; 0x38
    58b0:	20 e0       	ldi	r18, 0x00	; 0
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	40 e2       	ldi	r20, 0x20	; 32
    58b6:	51 e4       	ldi	r21, 0x41	; 65
    58b8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    58bc:	dc 01       	movw	r26, r24
    58be:	cb 01       	movw	r24, r22
    58c0:	bc 01       	movw	r22, r24
    58c2:	cd 01       	movw	r24, r26
    58c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58c8:	dc 01       	movw	r26, r24
    58ca:	cb 01       	movw	r24, r22
    58cc:	98 ab       	std	Y+48, r25	; 0x30
    58ce:	8f a7       	std	Y+47, r24	; 0x2f
    58d0:	0f c0       	rjmp	.+30     	; 0x58f0 <STEEPER_CCW+0xe6>
    58d2:	88 ec       	ldi	r24, 0xC8	; 200
    58d4:	90 e0       	ldi	r25, 0x00	; 0
    58d6:	9e a7       	std	Y+46, r25	; 0x2e
    58d8:	8d a7       	std	Y+45, r24	; 0x2d
    58da:	8d a5       	ldd	r24, Y+45	; 0x2d
    58dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    58de:	01 97       	sbiw	r24, 0x01	; 1
    58e0:	f1 f7       	brne	.-4      	; 0x58de <STEEPER_CCW+0xd4>
    58e2:	9e a7       	std	Y+46, r25	; 0x2e
    58e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    58e8:	98 a9       	ldd	r25, Y+48	; 0x30
    58ea:	01 97       	sbiw	r24, 0x01	; 1
    58ec:	98 ab       	std	Y+48, r25	; 0x30
    58ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    58f2:	98 a9       	ldd	r25, Y+48	; 0x30
    58f4:	00 97       	sbiw	r24, 0x00	; 0
    58f6:	69 f7       	brne	.-38     	; 0x58d2 <STEEPER_CCW+0xc8>
    58f8:	14 c0       	rjmp	.+40     	; 0x5922 <STEEPER_CCW+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58fa:	69 a9       	ldd	r22, Y+49	; 0x31
    58fc:	7a a9       	ldd	r23, Y+50	; 0x32
    58fe:	8b a9       	ldd	r24, Y+51	; 0x33
    5900:	9c a9       	ldd	r25, Y+52	; 0x34
    5902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5906:	dc 01       	movw	r26, r24
    5908:	cb 01       	movw	r24, r22
    590a:	98 ab       	std	Y+48, r25	; 0x30
    590c:	8f a7       	std	Y+47, r24	; 0x2f
    590e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5910:	98 a9       	ldd	r25, Y+48	; 0x30
    5912:	9c a7       	std	Y+44, r25	; 0x2c
    5914:	8b a7       	std	Y+43, r24	; 0x2b
    5916:	8b a5       	ldd	r24, Y+43	; 0x2b
    5918:	9c a5       	ldd	r25, Y+44	; 0x2c
    591a:	01 97       	sbiw	r24, 0x01	; 1
    591c:	f1 f7       	brne	.-4      	; 0x591a <STEEPER_CCW+0x110>
    591e:	9c a7       	std	Y+44, r25	; 0x2c
    5920:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    5922:	88 e1       	ldi	r24, 0x18	; 24
    5924:	60 e0       	ldi	r22, 0x00	; 0
    5926:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    592a:	89 e1       	ldi	r24, 0x19	; 25
    592c:	60 e0       	ldi	r22, 0x00	; 0
    592e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 , HIGH) ;
    5932:	8a e1       	ldi	r24, 0x1A	; 26
    5934:	61 e0       	ldi	r22, 0x01	; 1
    5936:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    593a:	8b e1       	ldi	r24, 0x1B	; 27
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5942:	80 e0       	ldi	r24, 0x00	; 0
    5944:	90 e0       	ldi	r25, 0x00	; 0
    5946:	a8 e4       	ldi	r26, 0x48	; 72
    5948:	b3 e4       	ldi	r27, 0x43	; 67
    594a:	8f a3       	std	Y+39, r24	; 0x27
    594c:	98 a7       	std	Y+40, r25	; 0x28
    594e:	a9 a7       	std	Y+41, r26	; 0x29
    5950:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5952:	6f a1       	ldd	r22, Y+39	; 0x27
    5954:	78 a5       	ldd	r23, Y+40	; 0x28
    5956:	89 a5       	ldd	r24, Y+41	; 0x29
    5958:	9a a5       	ldd	r25, Y+42	; 0x2a
    595a:	20 e0       	ldi	r18, 0x00	; 0
    595c:	30 e0       	ldi	r19, 0x00	; 0
    595e:	4a ef       	ldi	r20, 0xFA	; 250
    5960:	54 e4       	ldi	r21, 0x44	; 68
    5962:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5966:	dc 01       	movw	r26, r24
    5968:	cb 01       	movw	r24, r22
    596a:	8b a3       	std	Y+35, r24	; 0x23
    596c:	9c a3       	std	Y+36, r25	; 0x24
    596e:	ad a3       	std	Y+37, r26	; 0x25
    5970:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5972:	6b a1       	ldd	r22, Y+35	; 0x23
    5974:	7c a1       	ldd	r23, Y+36	; 0x24
    5976:	8d a1       	ldd	r24, Y+37	; 0x25
    5978:	9e a1       	ldd	r25, Y+38	; 0x26
    597a:	20 e0       	ldi	r18, 0x00	; 0
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	40 e8       	ldi	r20, 0x80	; 128
    5980:	5f e3       	ldi	r21, 0x3F	; 63
    5982:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    5986:	88 23       	and	r24, r24
    5988:	2c f4       	brge	.+10     	; 0x5994 <STEEPER_CCW+0x18a>
		__ticks = 1;
    598a:	81 e0       	ldi	r24, 0x01	; 1
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	9a a3       	std	Y+34, r25	; 0x22
    5990:	89 a3       	std	Y+33, r24	; 0x21
    5992:	3f c0       	rjmp	.+126    	; 0x5a12 <STEEPER_CCW+0x208>
	else if (__tmp > 65535)
    5994:	6b a1       	ldd	r22, Y+35	; 0x23
    5996:	7c a1       	ldd	r23, Y+36	; 0x24
    5998:	8d a1       	ldd	r24, Y+37	; 0x25
    599a:	9e a1       	ldd	r25, Y+38	; 0x26
    599c:	20 e0       	ldi	r18, 0x00	; 0
    599e:	3f ef       	ldi	r19, 0xFF	; 255
    59a0:	4f e7       	ldi	r20, 0x7F	; 127
    59a2:	57 e4       	ldi	r21, 0x47	; 71
    59a4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    59a8:	18 16       	cp	r1, r24
    59aa:	4c f5       	brge	.+82     	; 0x59fe <STEEPER_CCW+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ac:	6f a1       	ldd	r22, Y+39	; 0x27
    59ae:	78 a5       	ldd	r23, Y+40	; 0x28
    59b0:	89 a5       	ldd	r24, Y+41	; 0x29
    59b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    59b4:	20 e0       	ldi	r18, 0x00	; 0
    59b6:	30 e0       	ldi	r19, 0x00	; 0
    59b8:	40 e2       	ldi	r20, 0x20	; 32
    59ba:	51 e4       	ldi	r21, 0x41	; 65
    59bc:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    59c0:	dc 01       	movw	r26, r24
    59c2:	cb 01       	movw	r24, r22
    59c4:	bc 01       	movw	r22, r24
    59c6:	cd 01       	movw	r24, r26
    59c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59cc:	dc 01       	movw	r26, r24
    59ce:	cb 01       	movw	r24, r22
    59d0:	9a a3       	std	Y+34, r25	; 0x22
    59d2:	89 a3       	std	Y+33, r24	; 0x21
    59d4:	0f c0       	rjmp	.+30     	; 0x59f4 <STEEPER_CCW+0x1ea>
    59d6:	88 ec       	ldi	r24, 0xC8	; 200
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	98 a3       	std	Y+32, r25	; 0x20
    59dc:	8f 8f       	std	Y+31, r24	; 0x1f
    59de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59e0:	98 a1       	ldd	r25, Y+32	; 0x20
    59e2:	01 97       	sbiw	r24, 0x01	; 1
    59e4:	f1 f7       	brne	.-4      	; 0x59e2 <STEEPER_CCW+0x1d8>
    59e6:	98 a3       	std	Y+32, r25	; 0x20
    59e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59ea:	89 a1       	ldd	r24, Y+33	; 0x21
    59ec:	9a a1       	ldd	r25, Y+34	; 0x22
    59ee:	01 97       	sbiw	r24, 0x01	; 1
    59f0:	9a a3       	std	Y+34, r25	; 0x22
    59f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59f4:	89 a1       	ldd	r24, Y+33	; 0x21
    59f6:	9a a1       	ldd	r25, Y+34	; 0x22
    59f8:	00 97       	sbiw	r24, 0x00	; 0
    59fa:	69 f7       	brne	.-38     	; 0x59d6 <STEEPER_CCW+0x1cc>
    59fc:	14 c0       	rjmp	.+40     	; 0x5a26 <STEEPER_CCW+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59fe:	6b a1       	ldd	r22, Y+35	; 0x23
    5a00:	7c a1       	ldd	r23, Y+36	; 0x24
    5a02:	8d a1       	ldd	r24, Y+37	; 0x25
    5a04:	9e a1       	ldd	r25, Y+38	; 0x26
    5a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a0a:	dc 01       	movw	r26, r24
    5a0c:	cb 01       	movw	r24, r22
    5a0e:	9a a3       	std	Y+34, r25	; 0x22
    5a10:	89 a3       	std	Y+33, r24	; 0x21
    5a12:	89 a1       	ldd	r24, Y+33	; 0x21
    5a14:	9a a1       	ldd	r25, Y+34	; 0x22
    5a16:	9e 8f       	std	Y+30, r25	; 0x1e
    5a18:	8d 8f       	std	Y+29, r24	; 0x1d
    5a1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a1e:	01 97       	sbiw	r24, 0x01	; 1
    5a20:	f1 f7       	brne	.-4      	; 0x5a1e <STEEPER_CCW+0x214>
    5a22:	9e 8f       	std	Y+30, r25	; 0x1e
    5a24:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  LOW) ;
    5a26:	88 e1       	ldi	r24, 0x18	; 24
    5a28:	60 e0       	ldi	r22, 0x00	; 0
    5a2a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 , HIGH) ;
    5a2e:	89 e1       	ldi	r24, 0x19	; 25
    5a30:	61 e0       	ldi	r22, 0x01	; 1
    5a32:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    5a36:	8a e1       	ldi	r24, 0x1A	; 26
    5a38:	60 e0       	ldi	r22, 0x00	; 0
    5a3a:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    5a3e:	8b e1       	ldi	r24, 0x1B	; 27
    5a40:	60 e0       	ldi	r22, 0x00	; 0
    5a42:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	a8 e4       	ldi	r26, 0x48	; 72
    5a4c:	b3 e4       	ldi	r27, 0x43	; 67
    5a4e:	89 8f       	std	Y+25, r24	; 0x19
    5a50:	9a 8f       	std	Y+26, r25	; 0x1a
    5a52:	ab 8f       	std	Y+27, r26	; 0x1b
    5a54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a56:	69 8d       	ldd	r22, Y+25	; 0x19
    5a58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a5e:	20 e0       	ldi	r18, 0x00	; 0
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	4a ef       	ldi	r20, 0xFA	; 250
    5a64:	54 e4       	ldi	r21, 0x44	; 68
    5a66:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	cb 01       	movw	r24, r22
    5a6e:	8d 8b       	std	Y+21, r24	; 0x15
    5a70:	9e 8b       	std	Y+22, r25	; 0x16
    5a72:	af 8b       	std	Y+23, r26	; 0x17
    5a74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a76:	6d 89       	ldd	r22, Y+21	; 0x15
    5a78:	7e 89       	ldd	r23, Y+22	; 0x16
    5a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a7e:	20 e0       	ldi	r18, 0x00	; 0
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	40 e8       	ldi	r20, 0x80	; 128
    5a84:	5f e3       	ldi	r21, 0x3F	; 63
    5a86:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    5a8a:	88 23       	and	r24, r24
    5a8c:	2c f4       	brge	.+10     	; 0x5a98 <STEEPER_CCW+0x28e>
		__ticks = 1;
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	9c 8b       	std	Y+20, r25	; 0x14
    5a94:	8b 8b       	std	Y+19, r24	; 0x13
    5a96:	3f c0       	rjmp	.+126    	; 0x5b16 <STEEPER_CCW+0x30c>
	else if (__tmp > 65535)
    5a98:	6d 89       	ldd	r22, Y+21	; 0x15
    5a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	3f ef       	ldi	r19, 0xFF	; 255
    5aa4:	4f e7       	ldi	r20, 0x7F	; 127
    5aa6:	57 e4       	ldi	r21, 0x47	; 71
    5aa8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    5aac:	18 16       	cp	r1, r24
    5aae:	4c f5       	brge	.+82     	; 0x5b02 <STEEPER_CCW+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab0:	69 8d       	ldd	r22, Y+25	; 0x19
    5ab2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	40 e2       	ldi	r20, 0x20	; 32
    5abe:	51 e4       	ldi	r21, 0x41	; 65
    5ac0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5ac4:	dc 01       	movw	r26, r24
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	bc 01       	movw	r22, r24
    5aca:	cd 01       	movw	r24, r26
    5acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad0:	dc 01       	movw	r26, r24
    5ad2:	cb 01       	movw	r24, r22
    5ad4:	9c 8b       	std	Y+20, r25	; 0x14
    5ad6:	8b 8b       	std	Y+19, r24	; 0x13
    5ad8:	0f c0       	rjmp	.+30     	; 0x5af8 <STEEPER_CCW+0x2ee>
    5ada:	88 ec       	ldi	r24, 0xC8	; 200
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	9a 8b       	std	Y+18, r25	; 0x12
    5ae0:	89 8b       	std	Y+17, r24	; 0x11
    5ae2:	89 89       	ldd	r24, Y+17	; 0x11
    5ae4:	9a 89       	ldd	r25, Y+18	; 0x12
    5ae6:	01 97       	sbiw	r24, 0x01	; 1
    5ae8:	f1 f7       	brne	.-4      	; 0x5ae6 <STEEPER_CCW+0x2dc>
    5aea:	9a 8b       	std	Y+18, r25	; 0x12
    5aec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aee:	8b 89       	ldd	r24, Y+19	; 0x13
    5af0:	9c 89       	ldd	r25, Y+20	; 0x14
    5af2:	01 97       	sbiw	r24, 0x01	; 1
    5af4:	9c 8b       	std	Y+20, r25	; 0x14
    5af6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5af8:	8b 89       	ldd	r24, Y+19	; 0x13
    5afa:	9c 89       	ldd	r25, Y+20	; 0x14
    5afc:	00 97       	sbiw	r24, 0x00	; 0
    5afe:	69 f7       	brne	.-38     	; 0x5ada <STEEPER_CCW+0x2d0>
    5b00:	14 c0       	rjmp	.+40     	; 0x5b2a <STEEPER_CCW+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b02:	6d 89       	ldd	r22, Y+21	; 0x15
    5b04:	7e 89       	ldd	r23, Y+22	; 0x16
    5b06:	8f 89       	ldd	r24, Y+23	; 0x17
    5b08:	98 8d       	ldd	r25, Y+24	; 0x18
    5b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	9c 8b       	std	Y+20, r25	; 0x14
    5b14:	8b 8b       	std	Y+19, r24	; 0x13
    5b16:	8b 89       	ldd	r24, Y+19	; 0x13
    5b18:	9c 89       	ldd	r25, Y+20	; 0x14
    5b1a:	98 8b       	std	Y+16, r25	; 0x10
    5b1c:	8f 87       	std	Y+15, r24	; 0x0f
    5b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b20:	98 89       	ldd	r25, Y+16	; 0x10
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	f1 f7       	brne	.-4      	; 0x5b22 <STEEPER_CCW+0x318>
    5b26:	98 8b       	std	Y+16, r25	; 0x10
    5b28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(STEPPER_DELAY) ;
	DIO_WritePIN(B1 ,  HIGH) ;
    5b2a:	88 e1       	ldi	r24, 0x18	; 24
    5b2c:	61 e0       	ldi	r22, 0x01	; 1
    5b2e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B2 ,  LOW) ;
    5b32:	89 e1       	ldi	r24, 0x19	; 25
    5b34:	60 e0       	ldi	r22, 0x00	; 0
    5b36:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B3 ,  LOW) ;
    5b3a:	8a e1       	ldi	r24, 0x1A	; 26
    5b3c:	60 e0       	ldi	r22, 0x00	; 0
    5b3e:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
	DIO_WritePIN(B4 ,  LOW) ;
    5b42:	8b e1       	ldi	r24, 0x1B	; 27
    5b44:	60 e0       	ldi	r22, 0x00	; 0
    5b46:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	a8 e4       	ldi	r26, 0x48	; 72
    5b50:	b3 e4       	ldi	r27, 0x43	; 67
    5b52:	8b 87       	std	Y+11, r24	; 0x0b
    5b54:	9c 87       	std	Y+12, r25	; 0x0c
    5b56:	ad 87       	std	Y+13, r26	; 0x0d
    5b58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b62:	20 e0       	ldi	r18, 0x00	; 0
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	4a ef       	ldi	r20, 0xFA	; 250
    5b68:	54 e4       	ldi	r21, 0x44	; 68
    5b6a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	cb 01       	movw	r24, r22
    5b72:	8f 83       	std	Y+7, r24	; 0x07
    5b74:	98 87       	std	Y+8, r25	; 0x08
    5b76:	a9 87       	std	Y+9, r26	; 0x09
    5b78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    5b7c:	78 85       	ldd	r23, Y+8	; 0x08
    5b7e:	89 85       	ldd	r24, Y+9	; 0x09
    5b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	40 e8       	ldi	r20, 0x80	; 128
    5b88:	5f e3       	ldi	r21, 0x3F	; 63
    5b8a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    5b8e:	88 23       	and	r24, r24
    5b90:	2c f4       	brge	.+10     	; 0x5b9c <STEEPER_CCW+0x392>
		__ticks = 1;
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	9e 83       	std	Y+6, r25	; 0x06
    5b98:	8d 83       	std	Y+5, r24	; 0x05
    5b9a:	3f c0       	rjmp	.+126    	; 0x5c1a <STEEPER_CCW+0x410>
	else if (__tmp > 65535)
    5b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    5b9e:	78 85       	ldd	r23, Y+8	; 0x08
    5ba0:	89 85       	ldd	r24, Y+9	; 0x09
    5ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	3f ef       	ldi	r19, 0xFF	; 255
    5ba8:	4f e7       	ldi	r20, 0x7F	; 127
    5baa:	57 e4       	ldi	r21, 0x47	; 71
    5bac:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    5bb0:	18 16       	cp	r1, r24
    5bb2:	4c f5       	brge	.+82     	; 0x5c06 <STEEPER_CCW+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	40 e2       	ldi	r20, 0x20	; 32
    5bc2:	51 e4       	ldi	r21, 0x41	; 65
    5bc4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	bc 01       	movw	r22, r24
    5bce:	cd 01       	movw	r24, r26
    5bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bd4:	dc 01       	movw	r26, r24
    5bd6:	cb 01       	movw	r24, r22
    5bd8:	9e 83       	std	Y+6, r25	; 0x06
    5bda:	8d 83       	std	Y+5, r24	; 0x05
    5bdc:	0f c0       	rjmp	.+30     	; 0x5bfc <STEEPER_CCW+0x3f2>
    5bde:	88 ec       	ldi	r24, 0xC8	; 200
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	9c 83       	std	Y+4, r25	; 0x04
    5be4:	8b 83       	std	Y+3, r24	; 0x03
    5be6:	8b 81       	ldd	r24, Y+3	; 0x03
    5be8:	9c 81       	ldd	r25, Y+4	; 0x04
    5bea:	01 97       	sbiw	r24, 0x01	; 1
    5bec:	f1 f7       	brne	.-4      	; 0x5bea <STEEPER_CCW+0x3e0>
    5bee:	9c 83       	std	Y+4, r25	; 0x04
    5bf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    5bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    5bf6:	01 97       	sbiw	r24, 0x01	; 1
    5bf8:	9e 83       	std	Y+6, r25	; 0x06
    5bfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    5bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    5c00:	00 97       	sbiw	r24, 0x00	; 0
    5c02:	69 f7       	brne	.-38     	; 0x5bde <STEEPER_CCW+0x3d4>
    5c04:	14 c0       	rjmp	.+40     	; 0x5c2e <STEEPER_CCW+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c06:	6f 81       	ldd	r22, Y+7	; 0x07
    5c08:	78 85       	ldd	r23, Y+8	; 0x08
    5c0a:	89 85       	ldd	r24, Y+9	; 0x09
    5c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c12:	dc 01       	movw	r26, r24
    5c14:	cb 01       	movw	r24, r22
    5c16:	9e 83       	std	Y+6, r25	; 0x06
    5c18:	8d 83       	std	Y+5, r24	; 0x05
    5c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c1e:	9a 83       	std	Y+2, r25	; 0x02
    5c20:	89 83       	std	Y+1, r24	; 0x01
    5c22:	89 81       	ldd	r24, Y+1	; 0x01
    5c24:	9a 81       	ldd	r25, Y+2	; 0x02
    5c26:	01 97       	sbiw	r24, 0x01	; 1
    5c28:	f1 f7       	brne	.-4      	; 0x5c26 <STEEPER_CCW+0x41c>
    5c2a:	9a 83       	std	Y+2, r25	; 0x02
    5c2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STEPPER_DELAY) ;
}
    5c2e:	e8 96       	adiw	r28, 0x38	; 56
    5c30:	0f b6       	in	r0, 0x3f	; 63
    5c32:	f8 94       	cli
    5c34:	de bf       	out	0x3e, r29	; 62
    5c36:	0f be       	out	0x3f, r0	; 63
    5c38:	cd bf       	out	0x3d, r28	; 61
    5c3a:	cf 91       	pop	r28
    5c3c:	df 91       	pop	r29
    5c3e:	08 95       	ret

00005c40 <SPI_MasterInit>:
#include "SPI.h"

static void(*SPI_STC_Fptr)(void)=NULLPTR;

void SPI_MasterInit() 
{
    5c40:	df 93       	push	r29
    5c42:	cf 93       	push	r28
    5c44:	cd b7       	in	r28, 0x3d	; 61
    5c46:	de b7       	in	r29, 0x3e	; 62
	/*** MSB **/ 
	CLEAR_BIT(SPCR,DORD) ;
    5c48:	ad e2       	ldi	r26, 0x2D	; 45
    5c4a:	b0 e0       	ldi	r27, 0x00	; 0
    5c4c:	ed e2       	ldi	r30, 0x2D	; 45
    5c4e:	f0 e0       	ldi	r31, 0x00	; 0
    5c50:	80 81       	ld	r24, Z
    5c52:	8f 7d       	andi	r24, 0xDF	; 223
    5c54:	8c 93       	st	X, r24
	/* master is set */
	SET_BIT(SPCR,MSTR) ;
    5c56:	ad e2       	ldi	r26, 0x2D	; 45
    5c58:	b0 e0       	ldi	r27, 0x00	; 0
    5c5a:	ed e2       	ldi	r30, 0x2D	; 45
    5c5c:	f0 e0       	ldi	r31, 0x00	; 0
    5c5e:	80 81       	ld	r24, Z
    5c60:	80 61       	ori	r24, 0x10	; 16
    5c62:	8c 93       	st	X, r24
	/* clk idle ow | leading edge is rising */
	CLEAR_BIT(SPCR,CPOL) ;
    5c64:	ad e2       	ldi	r26, 0x2D	; 45
    5c66:	b0 e0       	ldi	r27, 0x00	; 0
    5c68:	ed e2       	ldi	r30, 0x2D	; 45
    5c6a:	f0 e0       	ldi	r31, 0x00	; 0
    5c6c:	80 81       	ld	r24, Z
    5c6e:	87 7f       	andi	r24, 0xF7	; 247
    5c70:	8c 93       	st	X, r24
	/* sample at leading */ 
	CLEAR_BIT(SPCR,CPHA) ;
    5c72:	ad e2       	ldi	r26, 0x2D	; 45
    5c74:	b0 e0       	ldi	r27, 0x00	; 0
    5c76:	ed e2       	ldi	r30, 0x2D	; 45
    5c78:	f0 e0       	ldi	r31, 0x00	; 0
    5c7a:	80 81       	ld	r24, Z
    5c7c:	8b 7f       	andi	r24, 0xFB	; 251
    5c7e:	8c 93       	st	X, r24
	/* clk fosc /16 */
	SET_BIT(SPCR,SPR0) ;
    5c80:	ad e2       	ldi	r26, 0x2D	; 45
    5c82:	b0 e0       	ldi	r27, 0x00	; 0
    5c84:	ed e2       	ldi	r30, 0x2D	; 45
    5c86:	f0 e0       	ldi	r31, 0x00	; 0
    5c88:	80 81       	ld	r24, Z
    5c8a:	81 60       	ori	r24, 0x01	; 1
    5c8c:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR,SPR1) ;
    5c8e:	ad e2       	ldi	r26, 0x2D	; 45
    5c90:	b0 e0       	ldi	r27, 0x00	; 0
    5c92:	ed e2       	ldi	r30, 0x2D	; 45
    5c94:	f0 e0       	ldi	r31, 0x00	; 0
    5c96:	80 81       	ld	r24, Z
    5c98:	8d 7f       	andi	r24, 0xFD	; 253
    5c9a:	8c 93       	st	X, r24
	CLEAR_BIT(SPSR,SPI2X) ;
    5c9c:	ae e2       	ldi	r26, 0x2E	; 46
    5c9e:	b0 e0       	ldi	r27, 0x00	; 0
    5ca0:	ee e2       	ldi	r30, 0x2E	; 46
    5ca2:	f0 e0       	ldi	r31, 0x00	; 0
    5ca4:	80 81       	ld	r24, Z
    5ca6:	8e 7f       	andi	r24, 0xFE	; 254
    5ca8:	8c 93       	st	X, r24
	/** SPI ENABLE **/
	SET_BIT(SPCR,SPE) ;
    5caa:	ad e2       	ldi	r26, 0x2D	; 45
    5cac:	b0 e0       	ldi	r27, 0x00	; 0
    5cae:	ed e2       	ldi	r30, 0x2D	; 45
    5cb0:	f0 e0       	ldi	r31, 0x00	; 0
    5cb2:	80 81       	ld	r24, Z
    5cb4:	80 64       	ori	r24, 0x40	; 64
    5cb6:	8c 93       	st	X, r24
}
    5cb8:	cf 91       	pop	r28
    5cba:	df 91       	pop	r29
    5cbc:	08 95       	ret

00005cbe <SPI_SalveInit>:
void SPI_SalveInit() 
{
    5cbe:	df 93       	push	r29
    5cc0:	cf 93       	push	r28
    5cc2:	cd b7       	in	r28, 0x3d	; 61
    5cc4:	de b7       	in	r29, 0x3e	; 62
	/*** MSB **/
	CLEAR_BIT(SPCR,DORD) ;
    5cc6:	ad e2       	ldi	r26, 0x2D	; 45
    5cc8:	b0 e0       	ldi	r27, 0x00	; 0
    5cca:	ed e2       	ldi	r30, 0x2D	; 45
    5ccc:	f0 e0       	ldi	r31, 0x00	; 0
    5cce:	80 81       	ld	r24, Z
    5cd0:	8f 7d       	andi	r24, 0xDF	; 223
    5cd2:	8c 93       	st	X, r24
	/* salve is set */
	CLEAR_BIT(SPCR,MSTR) ;
    5cd4:	ad e2       	ldi	r26, 0x2D	; 45
    5cd6:	b0 e0       	ldi	r27, 0x00	; 0
    5cd8:	ed e2       	ldi	r30, 0x2D	; 45
    5cda:	f0 e0       	ldi	r31, 0x00	; 0
    5cdc:	80 81       	ld	r24, Z
    5cde:	8f 7e       	andi	r24, 0xEF	; 239
    5ce0:	8c 93       	st	X, r24
	/* clk idle ow | leading edge is rising */
	CLEAR_BIT(SPCR,CPOL) ;
    5ce2:	ad e2       	ldi	r26, 0x2D	; 45
    5ce4:	b0 e0       	ldi	r27, 0x00	; 0
    5ce6:	ed e2       	ldi	r30, 0x2D	; 45
    5ce8:	f0 e0       	ldi	r31, 0x00	; 0
    5cea:	80 81       	ld	r24, Z
    5cec:	87 7f       	andi	r24, 0xF7	; 247
    5cee:	8c 93       	st	X, r24
	/* sample at leading */
	CLEAR_BIT(SPCR,CPHA) ;
    5cf0:	ad e2       	ldi	r26, 0x2D	; 45
    5cf2:	b0 e0       	ldi	r27, 0x00	; 0
    5cf4:	ed e2       	ldi	r30, 0x2D	; 45
    5cf6:	f0 e0       	ldi	r31, 0x00	; 0
    5cf8:	80 81       	ld	r24, Z
    5cfa:	8b 7f       	andi	r24, 0xFB	; 251
    5cfc:	8c 93       	st	X, r24
	/** SPI ENABLE **/
	SET_BIT(SPCR,SPE) ;
    5cfe:	ad e2       	ldi	r26, 0x2D	; 45
    5d00:	b0 e0       	ldi	r27, 0x00	; 0
    5d02:	ed e2       	ldi	r30, 0x2D	; 45
    5d04:	f0 e0       	ldi	r31, 0x00	; 0
    5d06:	80 81       	ld	r24, Z
    5d08:	80 64       	ori	r24, 0x40	; 64
    5d0a:	8c 93       	st	X, r24
	
}
    5d0c:	cf 91       	pop	r28
    5d0e:	df 91       	pop	r29
    5d10:	08 95       	ret

00005d12 <SPI_Transfer>:
u8 SPI_Transfer (u8 data) 
{
    5d12:	df 93       	push	r29
    5d14:	cf 93       	push	r28
    5d16:	0f 92       	push	r0
    5d18:	cd b7       	in	r28, 0x3d	; 61
    5d1a:	de b7       	in	r29, 0x3e	; 62
    5d1c:	89 83       	std	Y+1, r24	; 0x01
	/* send data */
	SPDR = data ; 
    5d1e:	ef e2       	ldi	r30, 0x2F	; 47
    5d20:	f0 e0       	ldi	r31, 0x00	; 0
    5d22:	89 81       	ldd	r24, Y+1	; 0x01
    5d24:	80 83       	st	Z, r24
	while(!READ_BIT(SPSR,SPIF)) ; 
    5d26:	ee e2       	ldi	r30, 0x2E	; 46
    5d28:	f0 e0       	ldi	r31, 0x00	; 0
    5d2a:	80 81       	ld	r24, Z
    5d2c:	88 23       	and	r24, r24
    5d2e:	dc f7       	brge	.-10     	; 0x5d26 <SPI_Transfer+0x14>
	return SPDR ;
    5d30:	ef e2       	ldi	r30, 0x2F	; 47
    5d32:	f0 e0       	ldi	r31, 0x00	; 0
    5d34:	80 81       	ld	r24, Z
}
    5d36:	0f 90       	pop	r0
    5d38:	cf 91       	pop	r28
    5d3a:	df 91       	pop	r29
    5d3c:	08 95       	ret

00005d3e <SPI_Send>:
void SPI_Send (u8 data)
{
    5d3e:	df 93       	push	r29
    5d40:	cf 93       	push	r28
    5d42:	0f 92       	push	r0
    5d44:	cd b7       	in	r28, 0x3d	; 61
    5d46:	de b7       	in	r29, 0x3e	; 62
    5d48:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data ;
    5d4a:	ef e2       	ldi	r30, 0x2F	; 47
    5d4c:	f0 e0       	ldi	r31, 0x00	; 0
    5d4e:	89 81       	ldd	r24, Y+1	; 0x01
    5d50:	80 83       	st	Z, r24
	while(!READ_BIT(SPSR,SPIF)) ;
    5d52:	ee e2       	ldi	r30, 0x2E	; 46
    5d54:	f0 e0       	ldi	r31, 0x00	; 0
    5d56:	80 81       	ld	r24, Z
    5d58:	88 23       	and	r24, r24
    5d5a:	dc f7       	brge	.-10     	; 0x5d52 <SPI_Send+0x14>
}
    5d5c:	0f 90       	pop	r0
    5d5e:	cf 91       	pop	r28
    5d60:	df 91       	pop	r29
    5d62:	08 95       	ret

00005d64 <SPI_Receive>:
u8 SPI_Receive(void)
{
    5d64:	df 93       	push	r29
    5d66:	cf 93       	push	r28
    5d68:	cd b7       	in	r28, 0x3d	; 61
    5d6a:	de b7       	in	r29, 0x3e	; 62
	while(!READ_BIT(SPSR,SPIF)) ;
    5d6c:	ee e2       	ldi	r30, 0x2E	; 46
    5d6e:	f0 e0       	ldi	r31, 0x00	; 0
    5d70:	80 81       	ld	r24, Z
    5d72:	88 23       	and	r24, r24
    5d74:	dc f7       	brge	.-10     	; 0x5d6c <SPI_Receive+0x8>
	return SPDR ; 
    5d76:	ef e2       	ldi	r30, 0x2F	; 47
    5d78:	f0 e0       	ldi	r31, 0x00	; 0
    5d7a:	80 81       	ld	r24, Z
}
    5d7c:	cf 91       	pop	r28
    5d7e:	df 91       	pop	r29
    5d80:	08 95       	ret

00005d82 <SPI_SendString>:
void SPI_SendString(u8* str)
{
    5d82:	df 93       	push	r29
    5d84:	cf 93       	push	r28
    5d86:	00 d0       	rcall	.+0      	; 0x5d88 <SPI_SendString+0x6>
    5d88:	0f 92       	push	r0
    5d8a:	cd b7       	in	r28, 0x3d	; 61
    5d8c:	de b7       	in	r29, 0x3e	; 62
    5d8e:	9b 83       	std	Y+3, r25	; 0x03
    5d90:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ; 
	for(i= 0 ; str[i] ; ++i)
    5d92:	19 82       	std	Y+1, r1	; 0x01
    5d94:	0e c0       	rjmp	.+28     	; 0x5db2 <SPI_SendString+0x30>
	{
		SPI_Send(str[i]) ;
    5d96:	89 81       	ldd	r24, Y+1	; 0x01
    5d98:	28 2f       	mov	r18, r24
    5d9a:	30 e0       	ldi	r19, 0x00	; 0
    5d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    5da0:	fc 01       	movw	r30, r24
    5da2:	e2 0f       	add	r30, r18
    5da4:	f3 1f       	adc	r31, r19
    5da6:	80 81       	ld	r24, Z
    5da8:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <SPI_Send>
	return SPDR ; 
}
void SPI_SendString(u8* str)
{
	u8 i ; 
	for(i= 0 ; str[i] ; ++i)
    5dac:	89 81       	ldd	r24, Y+1	; 0x01
    5dae:	8f 5f       	subi	r24, 0xFF	; 255
    5db0:	89 83       	std	Y+1, r24	; 0x01
    5db2:	89 81       	ldd	r24, Y+1	; 0x01
    5db4:	28 2f       	mov	r18, r24
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	8a 81       	ldd	r24, Y+2	; 0x02
    5dba:	9b 81       	ldd	r25, Y+3	; 0x03
    5dbc:	fc 01       	movw	r30, r24
    5dbe:	e2 0f       	add	r30, r18
    5dc0:	f3 1f       	adc	r31, r19
    5dc2:	80 81       	ld	r24, Z
    5dc4:	88 23       	and	r24, r24
    5dc6:	39 f7       	brne	.-50     	; 0x5d96 <SPI_SendString+0x14>
	{
		SPI_Send(str[i]) ;
	}
	SPI_Send(13) ;
    5dc8:	8d e0       	ldi	r24, 0x0D	; 13
    5dca:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <SPI_Send>
	
}
    5dce:	0f 90       	pop	r0
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    5dd4:	cf 91       	pop	r28
    5dd6:	df 91       	pop	r29
    5dd8:	08 95       	ret

00005dda <SPI_ReceiveString>:
void SPI_ReceiveString(u8* str)
{
    5dda:	0f 93       	push	r16
    5ddc:	1f 93       	push	r17
    5dde:	df 93       	push	r29
    5de0:	cf 93       	push	r28
    5de2:	00 d0       	rcall	.+0      	; 0x5de4 <SPI_ReceiveString+0xa>
    5de4:	0f 92       	push	r0
    5de6:	cd b7       	in	r28, 0x3d	; 61
    5de8:	de b7       	in	r29, 0x3e	; 62
    5dea:	9b 83       	std	Y+3, r25	; 0x03
    5dec:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ; 
    5dee:	19 82       	std	Y+1, r1	; 0x01
	str[i] = SPI_Receive() ;
    5df0:	89 81       	ldd	r24, Y+1	; 0x01
    5df2:	28 2f       	mov	r18, r24
    5df4:	30 e0       	ldi	r19, 0x00	; 0
    5df6:	8a 81       	ldd	r24, Y+2	; 0x02
    5df8:	9b 81       	ldd	r25, Y+3	; 0x03
    5dfa:	8c 01       	movw	r16, r24
    5dfc:	02 0f       	add	r16, r18
    5dfe:	13 1f       	adc	r17, r19
    5e00:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <SPI_Receive>
    5e04:	f8 01       	movw	r30, r16
    5e06:	80 83       	st	Z, r24
	for(i= 0 ; str[i] != 13 ; )
    5e08:	19 82       	std	Y+1, r1	; 0x01
    5e0a:	0f c0       	rjmp	.+30     	; 0x5e2a <SPI_ReceiveString+0x50>
	{
		++i ;
    5e0c:	89 81       	ldd	r24, Y+1	; 0x01
    5e0e:	8f 5f       	subi	r24, 0xFF	; 255
    5e10:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_Receive() ;
    5e12:	89 81       	ldd	r24, Y+1	; 0x01
    5e14:	28 2f       	mov	r18, r24
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e1c:	8c 01       	movw	r16, r24
    5e1e:	02 0f       	add	r16, r18
    5e20:	13 1f       	adc	r17, r19
    5e22:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <SPI_Receive>
    5e26:	f8 01       	movw	r30, r16
    5e28:	80 83       	st	Z, r24
}
void SPI_ReceiveString(u8* str)
{
	u8 i = 0 ; 
	str[i] = SPI_Receive() ;
	for(i= 0 ; str[i] != 13 ; )
    5e2a:	89 81       	ldd	r24, Y+1	; 0x01
    5e2c:	28 2f       	mov	r18, r24
    5e2e:	30 e0       	ldi	r19, 0x00	; 0
    5e30:	8a 81       	ldd	r24, Y+2	; 0x02
    5e32:	9b 81       	ldd	r25, Y+3	; 0x03
    5e34:	fc 01       	movw	r30, r24
    5e36:	e2 0f       	add	r30, r18
    5e38:	f3 1f       	adc	r31, r19
    5e3a:	80 81       	ld	r24, Z
    5e3c:	8d 30       	cpi	r24, 0x0D	; 13
    5e3e:	31 f7       	brne	.-52     	; 0x5e0c <SPI_ReceiveString+0x32>
	{
		++i ;
		str[i] = SPI_Receive() ;
	}
	
}
    5e40:	0f 90       	pop	r0
    5e42:	0f 90       	pop	r0
    5e44:	0f 90       	pop	r0
    5e46:	cf 91       	pop	r28
    5e48:	df 91       	pop	r29
    5e4a:	1f 91       	pop	r17
    5e4c:	0f 91       	pop	r16
    5e4e:	08 95       	ret

00005e50 <POT_VoltRead>:
 *  Author: EL-talkhawy
 */ 

#include "Sensor.h"
u16 POT_VoltRead(void) 
{
    5e50:	df 93       	push	r29
    5e52:	cf 93       	push	r28
    5e54:	00 d0       	rcall	.+0      	; 0x5e56 <POT_VoltRead+0x6>
    5e56:	00 d0       	rcall	.+0      	; 0x5e58 <POT_VoltRead+0x8>
    5e58:	cd b7       	in	r28, 0x3d	; 61
    5e5a:	de b7       	in	r29, 0x3e	; 62
	u16 adc = ADC_Read(POT_CH) ;
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    5e62:	9c 83       	std	Y+4, r25	; 0x04
    5e64:	8b 83       	std	Y+3, r24	; 0x03
	/*u8 volt = (adc*5)/1024 ;
	 here does not accuarte and to avoid use float we modify it from v to mv
	 and also change from u8 to u16 */
	u16 volt = ((u32)adc*5000) / 1024 ; 
    5e66:	8b 81       	ldd	r24, Y+3	; 0x03
    5e68:	9c 81       	ldd	r25, Y+4	; 0x04
    5e6a:	cc 01       	movw	r24, r24
    5e6c:	a0 e0       	ldi	r26, 0x00	; 0
    5e6e:	b0 e0       	ldi	r27, 0x00	; 0
    5e70:	28 e8       	ldi	r18, 0x88	; 136
    5e72:	33 e1       	ldi	r19, 0x13	; 19
    5e74:	40 e0       	ldi	r20, 0x00	; 0
    5e76:	50 e0       	ldi	r21, 0x00	; 0
    5e78:	bc 01       	movw	r22, r24
    5e7a:	cd 01       	movw	r24, r26
    5e7c:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    5e80:	dc 01       	movw	r26, r24
    5e82:	cb 01       	movw	r24, r22
    5e84:	07 2e       	mov	r0, r23
    5e86:	7a e0       	ldi	r23, 0x0A	; 10
    5e88:	b6 95       	lsr	r27
    5e8a:	a7 95       	ror	r26
    5e8c:	97 95       	ror	r25
    5e8e:	87 95       	ror	r24
    5e90:	7a 95       	dec	r23
    5e92:	d1 f7       	brne	.-12     	; 0x5e88 <POT_VoltRead+0x38>
    5e94:	70 2d       	mov	r23, r0
    5e96:	9a 83       	std	Y+2, r25	; 0x02
    5e98:	89 83       	std	Y+1, r24	; 0x01
	/* if we cal adc *5000 do this op in int but it can be larger than int so truncation occuar 
	so we cast adc to u32 to cal in long  the problem ocuuar here becuase truncation occuar before division */
	return volt ;
    5e9a:	89 81       	ldd	r24, Y+1	; 0x01
    5e9c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5e9e:	0f 90       	pop	r0
    5ea0:	0f 90       	pop	r0
    5ea2:	0f 90       	pop	r0
    5ea4:	0f 90       	pop	r0
    5ea6:	cf 91       	pop	r28
    5ea8:	df 91       	pop	r29
    5eaa:	08 95       	ret

00005eac <POT_PrecRead>:
u8  POT_PrecRead(void)
{ /* precantge*/
    5eac:	df 93       	push	r29
    5eae:	cf 93       	push	r28
    5eb0:	00 d0       	rcall	.+0      	; 0x5eb2 <POT_PrecRead+0x6>
    5eb2:	00 d0       	rcall	.+0      	; 0x5eb4 <POT_PrecRead+0x8>
    5eb4:	cd b7       	in	r28, 0x3d	; 61
    5eb6:	de b7       	in	r29, 0x3e	; 62
	u16 adc = ADC_Read(POT_CH) ;
    5eb8:	80 e0       	ldi	r24, 0x00	; 0
    5eba:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    5ebe:	9c 83       	std	Y+4, r25	; 0x04
    5ec0:	8b 83       	std	Y+3, r24	; 0x03
	u16 volt = ((u32)adc*5000) / 1024 ; 
    5ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ec6:	cc 01       	movw	r24, r24
    5ec8:	a0 e0       	ldi	r26, 0x00	; 0
    5eca:	b0 e0       	ldi	r27, 0x00	; 0
    5ecc:	28 e8       	ldi	r18, 0x88	; 136
    5ece:	33 e1       	ldi	r19, 0x13	; 19
    5ed0:	40 e0       	ldi	r20, 0x00	; 0
    5ed2:	50 e0       	ldi	r21, 0x00	; 0
    5ed4:	bc 01       	movw	r22, r24
    5ed6:	cd 01       	movw	r24, r26
    5ed8:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    5edc:	dc 01       	movw	r26, r24
    5ede:	cb 01       	movw	r24, r22
    5ee0:	07 2e       	mov	r0, r23
    5ee2:	7a e0       	ldi	r23, 0x0A	; 10
    5ee4:	b6 95       	lsr	r27
    5ee6:	a7 95       	ror	r26
    5ee8:	97 95       	ror	r25
    5eea:	87 95       	ror	r24
    5eec:	7a 95       	dec	r23
    5eee:	d1 f7       	brne	.-12     	; 0x5ee4 <POT_PrecRead+0x38>
    5ef0:	70 2d       	mov	r23, r0
    5ef2:	9a 83       	std	Y+2, r25	; 0x02
    5ef4:	89 83       	std	Y+1, r24	; 0x01
	return (((u32)volt *100) / 4995) ;
    5ef6:	89 81       	ldd	r24, Y+1	; 0x01
    5ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    5efa:	cc 01       	movw	r24, r24
    5efc:	a0 e0       	ldi	r26, 0x00	; 0
    5efe:	b0 e0       	ldi	r27, 0x00	; 0
    5f00:	24 e6       	ldi	r18, 0x64	; 100
    5f02:	30 e0       	ldi	r19, 0x00	; 0
    5f04:	40 e0       	ldi	r20, 0x00	; 0
    5f06:	50 e0       	ldi	r21, 0x00	; 0
    5f08:	bc 01       	movw	r22, r24
    5f0a:	cd 01       	movw	r24, r26
    5f0c:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    5f10:	dc 01       	movw	r26, r24
    5f12:	cb 01       	movw	r24, r22
    5f14:	23 e8       	ldi	r18, 0x83	; 131
    5f16:	33 e1       	ldi	r19, 0x13	; 19
    5f18:	40 e0       	ldi	r20, 0x00	; 0
    5f1a:	50 e0       	ldi	r21, 0x00	; 0
    5f1c:	bc 01       	movw	r22, r24
    5f1e:	cd 01       	movw	r24, r26
    5f20:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    5f24:	da 01       	movw	r26, r20
    5f26:	c9 01       	movw	r24, r18
	
}
    5f28:	0f 90       	pop	r0
    5f2a:	0f 90       	pop	r0
    5f2c:	0f 90       	pop	r0
    5f2e:	0f 90       	pop	r0
    5f30:	cf 91       	pop	r28
    5f32:	df 91       	pop	r29
    5f34:	08 95       	ret

00005f36 <TEMP_Read>:
u16 TEMP_Read(void) 
{  // increase 10mv for every degree
    5f36:	df 93       	push	r29
    5f38:	cf 93       	push	r28
    5f3a:	00 d0       	rcall	.+0      	; 0x5f3c <TEMP_Read+0x6>
    5f3c:	00 d0       	rcall	.+0      	; 0x5f3e <TEMP_Read+0x8>
    5f3e:	00 d0       	rcall	.+0      	; 0x5f40 <TEMP_Read+0xa>
    5f40:	cd b7       	in	r28, 0x3d	; 61
    5f42:	de b7       	in	r29, 0x3e	; 62
	u16 adc  = ADC_Read(LM_35) ; 
    5f44:	80 e0       	ldi	r24, 0x00	; 0
    5f46:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    5f4a:	9e 83       	std	Y+6, r25	; 0x06
    5f4c:	8d 83       	std	Y+5, r24	; 0x05
	u16 volt = ((u32)adc*5000) / 1024 ; 
    5f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    5f50:	9e 81       	ldd	r25, Y+6	; 0x06
    5f52:	cc 01       	movw	r24, r24
    5f54:	a0 e0       	ldi	r26, 0x00	; 0
    5f56:	b0 e0       	ldi	r27, 0x00	; 0
    5f58:	28 e8       	ldi	r18, 0x88	; 136
    5f5a:	33 e1       	ldi	r19, 0x13	; 19
    5f5c:	40 e0       	ldi	r20, 0x00	; 0
    5f5e:	50 e0       	ldi	r21, 0x00	; 0
    5f60:	bc 01       	movw	r22, r24
    5f62:	cd 01       	movw	r24, r26
    5f64:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    5f68:	dc 01       	movw	r26, r24
    5f6a:	cb 01       	movw	r24, r22
    5f6c:	07 2e       	mov	r0, r23
    5f6e:	7a e0       	ldi	r23, 0x0A	; 10
    5f70:	b6 95       	lsr	r27
    5f72:	a7 95       	ror	r26
    5f74:	97 95       	ror	r25
    5f76:	87 95       	ror	r24
    5f78:	7a 95       	dec	r23
    5f7a:	d1 f7       	brne	.-12     	; 0x5f70 <TEMP_Read+0x3a>
    5f7c:	70 2d       	mov	r23, r0
    5f7e:	9c 83       	std	Y+4, r25	; 0x04
    5f80:	8b 83       	std	Y+3, r24	; 0x03
	u16 t = volt  ; // not volt / 10 increase zero but save accuarcy 
    5f82:	8b 81       	ldd	r24, Y+3	; 0x03
    5f84:	9c 81       	ldd	r25, Y+4	; 0x04
    5f86:	9a 83       	std	Y+2, r25	; 0x02
    5f88:	89 83       	std	Y+1, r24	; 0x01
	return t  ;
    5f8a:	89 81       	ldd	r24, Y+1	; 0x01
    5f8c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5f8e:	26 96       	adiw	r28, 0x06	; 6
    5f90:	0f b6       	in	r0, 0x3f	; 63
    5f92:	f8 94       	cli
    5f94:	de bf       	out	0x3e, r29	; 62
    5f96:	0f be       	out	0x3f, r0	; 63
    5f98:	cd bf       	out	0x3d, r28	; 61
    5f9a:	cf 91       	pop	r28
    5f9c:	df 91       	pop	r29
    5f9e:	08 95       	ret

00005fa0 <PRESS_Read>:

u16 PRESS_Read(void)
{
    5fa0:	df 93       	push	r29
    5fa2:	cf 93       	push	r28
    5fa4:	00 d0       	rcall	.+0      	; 0x5fa6 <PRESS_Read+0x6>
    5fa6:	00 d0       	rcall	.+0      	; 0x5fa8 <PRESS_Read+0x8>
    5fa8:	00 d0       	rcall	.+0      	; 0x5faa <PRESS_Read+0xa>
    5faa:	cd b7       	in	r28, 0x3d	; 61
    5fac:	de b7       	in	r29, 0x3e	; 62
	u16 adc = ADC_Read(MPX_4115) ; 
    5fae:	81 e0       	ldi	r24, 0x01	; 1
    5fb0:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    5fb4:	9e 83       	std	Y+6, r25	; 0x06
    5fb6:	8d 83       	std	Y+5, r24	; 0x05
	u32 p = ((u32)adc-55)*10857 + 1500000 ; 
    5fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    5fba:	9e 81       	ldd	r25, Y+6	; 0x06
    5fbc:	cc 01       	movw	r24, r24
    5fbe:	a0 e0       	ldi	r26, 0x00	; 0
    5fc0:	b0 e0       	ldi	r27, 0x00	; 0
    5fc2:	29 e6       	ldi	r18, 0x69	; 105
    5fc4:	3a e2       	ldi	r19, 0x2A	; 42
    5fc6:	40 e0       	ldi	r20, 0x00	; 0
    5fc8:	50 e0       	ldi	r21, 0x00	; 0
    5fca:	bc 01       	movw	r22, r24
    5fcc:	cd 01       	movw	r24, r26
    5fce:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    5fd2:	dc 01       	movw	r26, r24
    5fd4:	cb 01       	movw	r24, r22
    5fd6:	8f 52       	subi	r24, 0x2F	; 47
    5fd8:	99 43       	sbci	r25, 0x39	; 57
    5fda:	a2 4f       	sbci	r26, 0xF2	; 242
    5fdc:	bf 4f       	sbci	r27, 0xFF	; 255
    5fde:	89 83       	std	Y+1, r24	; 0x01
    5fe0:	9a 83       	std	Y+2, r25	; 0x02
    5fe2:	ab 83       	std	Y+3, r26	; 0x03
    5fe4:	bc 83       	std	Y+4, r27	; 0x04
	p = p /10000 ; //pressure here increase zero 
    5fe6:	89 81       	ldd	r24, Y+1	; 0x01
    5fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    5fea:	ab 81       	ldd	r26, Y+3	; 0x03
    5fec:	bc 81       	ldd	r27, Y+4	; 0x04
    5fee:	20 e1       	ldi	r18, 0x10	; 16
    5ff0:	37 e2       	ldi	r19, 0x27	; 39
    5ff2:	40 e0       	ldi	r20, 0x00	; 0
    5ff4:	50 e0       	ldi	r21, 0x00	; 0
    5ff6:	bc 01       	movw	r22, r24
    5ff8:	cd 01       	movw	r24, r26
    5ffa:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    5ffe:	da 01       	movw	r26, r20
    6000:	c9 01       	movw	r24, r18
    6002:	89 83       	std	Y+1, r24	; 0x01
    6004:	9a 83       	std	Y+2, r25	; 0x02
    6006:	ab 83       	std	Y+3, r26	; 0x03
    6008:	bc 83       	std	Y+4, r27	; 0x04
	return p ;
    600a:	89 81       	ldd	r24, Y+1	; 0x01
    600c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    600e:	26 96       	adiw	r28, 0x06	; 6
    6010:	0f b6       	in	r0, 0x3f	; 63
    6012:	f8 94       	cli
    6014:	de bf       	out	0x3e, r29	; 62
    6016:	0f be       	out	0x3f, r0	; 63
    6018:	cd bf       	out	0x3d, r28	; 61
    601a:	cf 91       	pop	r28
    601c:	df 91       	pop	r29
    601e:	08 95       	ret

00006020 <SERVO_Init>:

#include "Servo.h"


void SERVO_Init(void)
{
    6020:	df 93       	push	r29
    6022:	cf 93       	push	r28
    6024:	cd b7       	in	r28, 0x3d	; 61
    6026:	de b7       	in	r29, 0x3e	; 62
	/*set timer 1 prescaler to 8to get 1us tick time
	use fast mode with top value at OCRA reg to set the freq of servo
	diconnect OC1A PIN ,and generate the PWM on OC1B PIN with nin inverting mode to use OCR1B reg as the ton value*/

	Timer1_Init(TIMER1_FASTPWM_OCRA_TOP_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_NON_INVERTING);
    6028:	84 e0       	ldi	r24, 0x04	; 4
    602a:	62 e0       	ldi	r22, 0x02	; 2
    602c:	40 e0       	ldi	r20, 0x00	; 0
    602e:	22 e0       	ldi	r18, 0x02	; 2
    6030:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <Timer1_Init>
	OCR1A = 19999 ;//20000us to get 50hz 
    6034:	ea e4       	ldi	r30, 0x4A	; 74
    6036:	f0 e0       	ldi	r31, 0x00	; 0
    6038:	8f e1       	ldi	r24, 0x1F	; 31
    603a:	9e e4       	ldi	r25, 0x4E	; 78
    603c:	91 83       	std	Z+1, r25	; 0x01
    603e:	80 83       	st	Z, r24
	OCR1B = 999;// 1000us ton to get angle zero
    6040:	e8 e4       	ldi	r30, 0x48	; 72
    6042:	f0 e0       	ldi	r31, 0x00	; 0
    6044:	87 ee       	ldi	r24, 0xE7	; 231
    6046:	93 e0       	ldi	r25, 0x03	; 3
    6048:	91 83       	std	Z+1, r25	; 0x01
    604a:	80 83       	st	Z, r24
}
    604c:	cf 91       	pop	r28
    604e:	df 91       	pop	r29
    6050:	08 95       	ret

00006052 <SERVO_SetAngle>:
 
void SERVO_SetAngle(u8 angle)
{
    6052:	0f 93       	push	r16
    6054:	1f 93       	push	r17
    6056:	df 93       	push	r29
    6058:	cf 93       	push	r28
    605a:	0f 92       	push	r0
    605c:	cd b7       	in	r28, 0x3d	; 61
    605e:	de b7       	in	r29, 0x3e	; 62
    6060:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=(((u32)angle*1000)/180)+999;
    6062:	08 e4       	ldi	r16, 0x48	; 72
    6064:	10 e0       	ldi	r17, 0x00	; 0
    6066:	89 81       	ldd	r24, Y+1	; 0x01
    6068:	88 2f       	mov	r24, r24
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	a0 e0       	ldi	r26, 0x00	; 0
    606e:	b0 e0       	ldi	r27, 0x00	; 0
    6070:	28 ee       	ldi	r18, 0xE8	; 232
    6072:	33 e0       	ldi	r19, 0x03	; 3
    6074:	40 e0       	ldi	r20, 0x00	; 0
    6076:	50 e0       	ldi	r21, 0x00	; 0
    6078:	bc 01       	movw	r22, r24
    607a:	cd 01       	movw	r24, r26
    607c:	0e 94 93 36 	call	0x6d26	; 0x6d26 <__mulsi3>
    6080:	dc 01       	movw	r26, r24
    6082:	cb 01       	movw	r24, r22
    6084:	24 eb       	ldi	r18, 0xB4	; 180
    6086:	30 e0       	ldi	r19, 0x00	; 0
    6088:	40 e0       	ldi	r20, 0x00	; 0
    608a:	50 e0       	ldi	r21, 0x00	; 0
    608c:	bc 01       	movw	r22, r24
    608e:	cd 01       	movw	r24, r26
    6090:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <__udivmodsi4>
    6094:	da 01       	movw	r26, r20
    6096:	c9 01       	movw	r24, r18
    6098:	89 51       	subi	r24, 0x19	; 25
    609a:	9c 4f       	sbci	r25, 0xFC	; 252
    609c:	f8 01       	movw	r30, r16
    609e:	91 83       	std	Z+1, r25	; 0x01
    60a0:	80 83       	st	Z, r24
}
    60a2:	0f 90       	pop	r0
    60a4:	cf 91       	pop	r28
    60a6:	df 91       	pop	r29
    60a8:	1f 91       	pop	r17
    60aa:	0f 91       	pop	r16
    60ac:	08 95       	ret

000060ae <Timer0_Init>:
static void (*Timer1_ICU_Fptr) (void)=NULLPTR;

/**********************************************    Timer 0   *********************************************/

void Timer0_Init( Timer0Mode_type mode,Timer0Scaler_type scaler ,OC0Mode_type oc_mode)
{
    60ae:	df 93       	push	r29
    60b0:	cf 93       	push	r28
    60b2:	cd b7       	in	r28, 0x3d	; 61
    60b4:	de b7       	in	r29, 0x3e	; 62
    60b6:	27 97       	sbiw	r28, 0x07	; 7
    60b8:	0f b6       	in	r0, 0x3f	; 63
    60ba:	f8 94       	cli
    60bc:	de bf       	out	0x3e, r29	; 62
    60be:	0f be       	out	0x3f, r0	; 63
    60c0:	cd bf       	out	0x3d, r28	; 61
    60c2:	89 83       	std	Y+1, r24	; 0x01
    60c4:	6a 83       	std	Y+2, r22	; 0x02
    60c6:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    60c8:	89 81       	ldd	r24, Y+1	; 0x01
    60ca:	28 2f       	mov	r18, r24
    60cc:	30 e0       	ldi	r19, 0x00	; 0
    60ce:	3f 83       	std	Y+7, r19	; 0x07
    60d0:	2e 83       	std	Y+6, r18	; 0x06
    60d2:	8e 81       	ldd	r24, Y+6	; 0x06
    60d4:	9f 81       	ldd	r25, Y+7	; 0x07
    60d6:	81 30       	cpi	r24, 0x01	; 1
    60d8:	91 05       	cpc	r25, r1
    60da:	21 f1       	breq	.+72     	; 0x6124 <Timer0_Init+0x76>
    60dc:	2e 81       	ldd	r18, Y+6	; 0x06
    60de:	3f 81       	ldd	r19, Y+7	; 0x07
    60e0:	22 30       	cpi	r18, 0x02	; 2
    60e2:	31 05       	cpc	r19, r1
    60e4:	2c f4       	brge	.+10     	; 0x60f0 <Timer0_Init+0x42>
    60e6:	8e 81       	ldd	r24, Y+6	; 0x06
    60e8:	9f 81       	ldd	r25, Y+7	; 0x07
    60ea:	00 97       	sbiw	r24, 0x00	; 0
    60ec:	61 f0       	breq	.+24     	; 0x6106 <Timer0_Init+0x58>
    60ee:	46 c0       	rjmp	.+140    	; 0x617c <Timer0_Init+0xce>
    60f0:	2e 81       	ldd	r18, Y+6	; 0x06
    60f2:	3f 81       	ldd	r19, Y+7	; 0x07
    60f4:	22 30       	cpi	r18, 0x02	; 2
    60f6:	31 05       	cpc	r19, r1
    60f8:	21 f1       	breq	.+72     	; 0x6142 <Timer0_Init+0x94>
    60fa:	8e 81       	ldd	r24, Y+6	; 0x06
    60fc:	9f 81       	ldd	r25, Y+7	; 0x07
    60fe:	83 30       	cpi	r24, 0x03	; 3
    6100:	91 05       	cpc	r25, r1
    6102:	71 f1       	breq	.+92     	; 0x6160 <Timer0_Init+0xb2>
    6104:	3b c0       	rjmp	.+118    	; 0x617c <Timer0_Init+0xce>
	{
		case TIMER0_NORMAL_MODE:
		CLEAR_BIT(TCCR0,WGM00);
    6106:	a3 e5       	ldi	r26, 0x53	; 83
    6108:	b0 e0       	ldi	r27, 0x00	; 0
    610a:	e3 e5       	ldi	r30, 0x53	; 83
    610c:	f0 e0       	ldi	r31, 0x00	; 0
    610e:	80 81       	ld	r24, Z
    6110:	8f 7b       	andi	r24, 0xBF	; 191
    6112:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    6114:	a3 e5       	ldi	r26, 0x53	; 83
    6116:	b0 e0       	ldi	r27, 0x00	; 0
    6118:	e3 e5       	ldi	r30, 0x53	; 83
    611a:	f0 e0       	ldi	r31, 0x00	; 0
    611c:	80 81       	ld	r24, Z
    611e:	87 7f       	andi	r24, 0xF7	; 247
    6120:	8c 93       	st	X, r24
    6122:	2c c0       	rjmp	.+88     	; 0x617c <Timer0_Init+0xce>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    6124:	a3 e5       	ldi	r26, 0x53	; 83
    6126:	b0 e0       	ldi	r27, 0x00	; 0
    6128:	e3 e5       	ldi	r30, 0x53	; 83
    612a:	f0 e0       	ldi	r31, 0x00	; 0
    612c:	80 81       	ld	r24, Z
    612e:	80 64       	ori	r24, 0x40	; 64
    6130:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    6132:	a3 e5       	ldi	r26, 0x53	; 83
    6134:	b0 e0       	ldi	r27, 0x00	; 0
    6136:	e3 e5       	ldi	r30, 0x53	; 83
    6138:	f0 e0       	ldi	r31, 0x00	; 0
    613a:	80 81       	ld	r24, Z
    613c:	87 7f       	andi	r24, 0xF7	; 247
    613e:	8c 93       	st	X, r24
    6140:	1d c0       	rjmp	.+58     	; 0x617c <Timer0_Init+0xce>
		break;
		case TIMER0_CTC_MODE:
		CLEAR_BIT(TCCR0,WGM00);
    6142:	a3 e5       	ldi	r26, 0x53	; 83
    6144:	b0 e0       	ldi	r27, 0x00	; 0
    6146:	e3 e5       	ldi	r30, 0x53	; 83
    6148:	f0 e0       	ldi	r31, 0x00	; 0
    614a:	80 81       	ld	r24, Z
    614c:	8f 7b       	andi	r24, 0xBF	; 191
    614e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    6150:	a3 e5       	ldi	r26, 0x53	; 83
    6152:	b0 e0       	ldi	r27, 0x00	; 0
    6154:	e3 e5       	ldi	r30, 0x53	; 83
    6156:	f0 e0       	ldi	r31, 0x00	; 0
    6158:	80 81       	ld	r24, Z
    615a:	88 60       	ori	r24, 0x08	; 8
    615c:	8c 93       	st	X, r24
    615e:	0e c0       	rjmp	.+28     	; 0x617c <Timer0_Init+0xce>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM00);
    6160:	a3 e5       	ldi	r26, 0x53	; 83
    6162:	b0 e0       	ldi	r27, 0x00	; 0
    6164:	e3 e5       	ldi	r30, 0x53	; 83
    6166:	f0 e0       	ldi	r31, 0x00	; 0
    6168:	80 81       	ld	r24, Z
    616a:	80 64       	ori	r24, 0x40	; 64
    616c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    616e:	a3 e5       	ldi	r26, 0x53	; 83
    6170:	b0 e0       	ldi	r27, 0x00	; 0
    6172:	e3 e5       	ldi	r30, 0x53	; 83
    6174:	f0 e0       	ldi	r31, 0x00	; 0
    6176:	80 81       	ld	r24, Z
    6178:	88 60       	ori	r24, 0x08	; 8
    617a:	8c 93       	st	X, r24
		break;
	}

	TCCR0&=0XF8;
    617c:	a3 e5       	ldi	r26, 0x53	; 83
    617e:	b0 e0       	ldi	r27, 0x00	; 0
    6180:	e3 e5       	ldi	r30, 0x53	; 83
    6182:	f0 e0       	ldi	r31, 0x00	; 0
    6184:	80 81       	ld	r24, Z
    6186:	88 7f       	andi	r24, 0xF8	; 248
    6188:	8c 93       	st	X, r24
	TCCR0|=scaler;
    618a:	a3 e5       	ldi	r26, 0x53	; 83
    618c:	b0 e0       	ldi	r27, 0x00	; 0
    618e:	e3 e5       	ldi	r30, 0x53	; 83
    6190:	f0 e0       	ldi	r31, 0x00	; 0
    6192:	90 81       	ld	r25, Z
    6194:	8a 81       	ldd	r24, Y+2	; 0x02
    6196:	89 2b       	or	r24, r25
    6198:	8c 93       	st	X, r24

	switch (oc_mode)
    619a:	8b 81       	ldd	r24, Y+3	; 0x03
    619c:	28 2f       	mov	r18, r24
    619e:	30 e0       	ldi	r19, 0x00	; 0
    61a0:	3d 83       	std	Y+5, r19	; 0x05
    61a2:	2c 83       	std	Y+4, r18	; 0x04
    61a4:	8c 81       	ldd	r24, Y+4	; 0x04
    61a6:	9d 81       	ldd	r25, Y+5	; 0x05
    61a8:	81 30       	cpi	r24, 0x01	; 1
    61aa:	91 05       	cpc	r25, r1
    61ac:	21 f1       	breq	.+72     	; 0x61f6 <Timer0_Init+0x148>
    61ae:	2c 81       	ldd	r18, Y+4	; 0x04
    61b0:	3d 81       	ldd	r19, Y+5	; 0x05
    61b2:	22 30       	cpi	r18, 0x02	; 2
    61b4:	31 05       	cpc	r19, r1
    61b6:	2c f4       	brge	.+10     	; 0x61c2 <Timer0_Init+0x114>
    61b8:	8c 81       	ldd	r24, Y+4	; 0x04
    61ba:	9d 81       	ldd	r25, Y+5	; 0x05
    61bc:	00 97       	sbiw	r24, 0x00	; 0
    61be:	61 f0       	breq	.+24     	; 0x61d8 <Timer0_Init+0x12a>
    61c0:	46 c0       	rjmp	.+140    	; 0x624e <Timer0_Init+0x1a0>
    61c2:	2c 81       	ldd	r18, Y+4	; 0x04
    61c4:	3d 81       	ldd	r19, Y+5	; 0x05
    61c6:	22 30       	cpi	r18, 0x02	; 2
    61c8:	31 05       	cpc	r19, r1
    61ca:	21 f1       	breq	.+72     	; 0x6214 <Timer0_Init+0x166>
    61cc:	8c 81       	ldd	r24, Y+4	; 0x04
    61ce:	9d 81       	ldd	r25, Y+5	; 0x05
    61d0:	83 30       	cpi	r24, 0x03	; 3
    61d2:	91 05       	cpc	r25, r1
    61d4:	71 f1       	breq	.+92     	; 0x6232 <Timer0_Init+0x184>
    61d6:	3b c0       	rjmp	.+118    	; 0x624e <Timer0_Init+0x1a0>
	{
		case OCO_DISCONNECTED:
		CLEAR_BIT(TCCR0,COM00);
    61d8:	a3 e5       	ldi	r26, 0x53	; 83
    61da:	b0 e0       	ldi	r27, 0x00	; 0
    61dc:	e3 e5       	ldi	r30, 0x53	; 83
    61de:	f0 e0       	ldi	r31, 0x00	; 0
    61e0:	80 81       	ld	r24, Z
    61e2:	8f 7e       	andi	r24, 0xEF	; 239
    61e4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
    61e6:	a3 e5       	ldi	r26, 0x53	; 83
    61e8:	b0 e0       	ldi	r27, 0x00	; 0
    61ea:	e3 e5       	ldi	r30, 0x53	; 83
    61ec:	f0 e0       	ldi	r31, 0x00	; 0
    61ee:	80 81       	ld	r24, Z
    61f0:	8f 7d       	andi	r24, 0xDF	; 223
    61f2:	8c 93       	st	X, r24
    61f4:	2c c0       	rjmp	.+88     	; 0x624e <Timer0_Init+0x1a0>
		break;
		case OCO_TOGGLE:
		SET_BIT(TCCR0,COM00);
    61f6:	a3 e5       	ldi	r26, 0x53	; 83
    61f8:	b0 e0       	ldi	r27, 0x00	; 0
    61fa:	e3 e5       	ldi	r30, 0x53	; 83
    61fc:	f0 e0       	ldi	r31, 0x00	; 0
    61fe:	80 81       	ld	r24, Z
    6200:	80 61       	ori	r24, 0x10	; 16
    6202:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
    6204:	a3 e5       	ldi	r26, 0x53	; 83
    6206:	b0 e0       	ldi	r27, 0x00	; 0
    6208:	e3 e5       	ldi	r30, 0x53	; 83
    620a:	f0 e0       	ldi	r31, 0x00	; 0
    620c:	80 81       	ld	r24, Z
    620e:	8f 7d       	andi	r24, 0xDF	; 223
    6210:	8c 93       	st	X, r24
    6212:	1d c0       	rjmp	.+58     	; 0x624e <Timer0_Init+0x1a0>
		break;
		case OCO_NON_INVERTING:
		CLEAR_BIT(TCCR0,COM00);
    6214:	a3 e5       	ldi	r26, 0x53	; 83
    6216:	b0 e0       	ldi	r27, 0x00	; 0
    6218:	e3 e5       	ldi	r30, 0x53	; 83
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	80 81       	ld	r24, Z
    621e:	8f 7e       	andi	r24, 0xEF	; 239
    6220:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    6222:	a3 e5       	ldi	r26, 0x53	; 83
    6224:	b0 e0       	ldi	r27, 0x00	; 0
    6226:	e3 e5       	ldi	r30, 0x53	; 83
    6228:	f0 e0       	ldi	r31, 0x00	; 0
    622a:	80 81       	ld	r24, Z
    622c:	80 62       	ori	r24, 0x20	; 32
    622e:	8c 93       	st	X, r24
    6230:	0e c0       	rjmp	.+28     	; 0x624e <Timer0_Init+0x1a0>
		break;
		case OCO_INVERTING:
		SET_BIT(TCCR0,COM00);
    6232:	a3 e5       	ldi	r26, 0x53	; 83
    6234:	b0 e0       	ldi	r27, 0x00	; 0
    6236:	e3 e5       	ldi	r30, 0x53	; 83
    6238:	f0 e0       	ldi	r31, 0x00	; 0
    623a:	80 81       	ld	r24, Z
    623c:	80 61       	ori	r24, 0x10	; 16
    623e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    6240:	a3 e5       	ldi	r26, 0x53	; 83
    6242:	b0 e0       	ldi	r27, 0x00	; 0
    6244:	e3 e5       	ldi	r30, 0x53	; 83
    6246:	f0 e0       	ldi	r31, 0x00	; 0
    6248:	80 81       	ld	r24, Z
    624a:	80 62       	ori	r24, 0x20	; 32
    624c:	8c 93       	st	X, r24
		break;
	}
	

}
    624e:	27 96       	adiw	r28, 0x07	; 7
    6250:	0f b6       	in	r0, 0x3f	; 63
    6252:	f8 94       	cli
    6254:	de bf       	out	0x3e, r29	; 62
    6256:	0f be       	out	0x3f, r0	; 63
    6258:	cd bf       	out	0x3d, r28	; 61
    625a:	cf 91       	pop	r28
    625c:	df 91       	pop	r29
    625e:	08 95       	ret

00006260 <Timer0_OV_InterruptEnable>:

void Timer0_OV_InterruptEnable(void)
{
    6260:	df 93       	push	r29
    6262:	cf 93       	push	r28
    6264:	cd b7       	in	r28, 0x3d	; 61
    6266:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    6268:	a9 e5       	ldi	r26, 0x59	; 89
    626a:	b0 e0       	ldi	r27, 0x00	; 0
    626c:	e9 e5       	ldi	r30, 0x59	; 89
    626e:	f0 e0       	ldi	r31, 0x00	; 0
    6270:	80 81       	ld	r24, Z
    6272:	81 60       	ori	r24, 0x01	; 1
    6274:	8c 93       	st	X, r24
}
    6276:	cf 91       	pop	r28
    6278:	df 91       	pop	r29
    627a:	08 95       	ret

0000627c <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
    627c:	df 93       	push	r29
    627e:	cf 93       	push	r28
    6280:	cd b7       	in	r28, 0x3d	; 61
    6282:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE0);
    6284:	a9 e5       	ldi	r26, 0x59	; 89
    6286:	b0 e0       	ldi	r27, 0x00	; 0
    6288:	e9 e5       	ldi	r30, 0x59	; 89
    628a:	f0 e0       	ldi	r31, 0x00	; 0
    628c:	80 81       	ld	r24, Z
    628e:	8e 7f       	andi	r24, 0xFE	; 254
    6290:	8c 93       	st	X, r24
}
    6292:	cf 91       	pop	r28
    6294:	df 91       	pop	r29
    6296:	08 95       	ret

00006298 <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
    6298:	df 93       	push	r29
    629a:	cf 93       	push	r28
    629c:	cd b7       	in	r28, 0x3d	; 61
    629e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    62a0:	a9 e5       	ldi	r26, 0x59	; 89
    62a2:	b0 e0       	ldi	r27, 0x00	; 0
    62a4:	e9 e5       	ldi	r30, 0x59	; 89
    62a6:	f0 e0       	ldi	r31, 0x00	; 0
    62a8:	80 81       	ld	r24, Z
    62aa:	82 60       	ori	r24, 0x02	; 2
    62ac:	8c 93       	st	X, r24
}
    62ae:	cf 91       	pop	r28
    62b0:	df 91       	pop	r29
    62b2:	08 95       	ret

000062b4 <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
    62b4:	df 93       	push	r29
    62b6:	cf 93       	push	r28
    62b8:	cd b7       	in	r28, 0x3d	; 61
    62ba:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE0);
    62bc:	a9 e5       	ldi	r26, 0x59	; 89
    62be:	b0 e0       	ldi	r27, 0x00	; 0
    62c0:	e9 e5       	ldi	r30, 0x59	; 89
    62c2:	f0 e0       	ldi	r31, 0x00	; 0
    62c4:	80 81       	ld	r24, Z
    62c6:	8d 7f       	andi	r24, 0xFD	; 253
    62c8:	8c 93       	st	X, r24
}
    62ca:	cf 91       	pop	r28
    62cc:	df 91       	pop	r29
    62ce:	08 95       	ret

000062d0 <Timer0_OC_SetCallBack>:

void Timer0_OC_SetCallBack(void(*LocalFptr)(void))
{
    62d0:	df 93       	push	r29
    62d2:	cf 93       	push	r28
    62d4:	00 d0       	rcall	.+0      	; 0x62d6 <Timer0_OC_SetCallBack+0x6>
    62d6:	cd b7       	in	r28, 0x3d	; 61
    62d8:	de b7       	in	r29, 0x3e	; 62
    62da:	9a 83       	std	Y+2, r25	; 0x02
    62dc:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OC_Fptr=LocalFptr;
    62de:	89 81       	ldd	r24, Y+1	; 0x01
    62e0:	9a 81       	ldd	r25, Y+2	; 0x02
    62e2:	90 93 b7 01 	sts	0x01B7, r25
    62e6:	80 93 b6 01 	sts	0x01B6, r24
}
    62ea:	0f 90       	pop	r0
    62ec:	0f 90       	pop	r0
    62ee:	cf 91       	pop	r28
    62f0:	df 91       	pop	r29
    62f2:	08 95       	ret

000062f4 <__vector_10>:
ISR (TIMER0_OC_vect)
{
    62f4:	1f 92       	push	r1
    62f6:	0f 92       	push	r0
    62f8:	0f b6       	in	r0, 0x3f	; 63
    62fa:	0f 92       	push	r0
    62fc:	11 24       	eor	r1, r1
    62fe:	2f 93       	push	r18
    6300:	3f 93       	push	r19
    6302:	4f 93       	push	r20
    6304:	5f 93       	push	r21
    6306:	6f 93       	push	r22
    6308:	7f 93       	push	r23
    630a:	8f 93       	push	r24
    630c:	9f 93       	push	r25
    630e:	af 93       	push	r26
    6310:	bf 93       	push	r27
    6312:	ef 93       	push	r30
    6314:	ff 93       	push	r31
    6316:	df 93       	push	r29
    6318:	cf 93       	push	r28
    631a:	cd b7       	in	r28, 0x3d	; 61
    631c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OC_Fptr != NULLPTR)
    631e:	80 91 b6 01 	lds	r24, 0x01B6
    6322:	90 91 b7 01 	lds	r25, 0x01B7
    6326:	00 97       	sbiw	r24, 0x00	; 0
    6328:	29 f0       	breq	.+10     	; 0x6334 <__vector_10+0x40>
	{
		Timer0_OC_Fptr() ;
    632a:	e0 91 b6 01 	lds	r30, 0x01B6
    632e:	f0 91 b7 01 	lds	r31, 0x01B7
    6332:	09 95       	icall
	}
}
    6334:	cf 91       	pop	r28
    6336:	df 91       	pop	r29
    6338:	ff 91       	pop	r31
    633a:	ef 91       	pop	r30
    633c:	bf 91       	pop	r27
    633e:	af 91       	pop	r26
    6340:	9f 91       	pop	r25
    6342:	8f 91       	pop	r24
    6344:	7f 91       	pop	r23
    6346:	6f 91       	pop	r22
    6348:	5f 91       	pop	r21
    634a:	4f 91       	pop	r20
    634c:	3f 91       	pop	r19
    634e:	2f 91       	pop	r18
    6350:	0f 90       	pop	r0
    6352:	0f be       	out	0x3f, r0	; 63
    6354:	0f 90       	pop	r0
    6356:	1f 90       	pop	r1
    6358:	18 95       	reti

0000635a <Timer0_OVF_SetCallBack>:
void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
    635a:	df 93       	push	r29
    635c:	cf 93       	push	r28
    635e:	00 d0       	rcall	.+0      	; 0x6360 <Timer0_OVF_SetCallBack+0x6>
    6360:	cd b7       	in	r28, 0x3d	; 61
    6362:	de b7       	in	r29, 0x3e	; 62
    6364:	9a 83       	std	Y+2, r25	; 0x02
    6366:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OVF_Fptr=LocalFptr;
    6368:	89 81       	ldd	r24, Y+1	; 0x01
    636a:	9a 81       	ldd	r25, Y+2	; 0x02
    636c:	90 93 b5 01 	sts	0x01B5, r25
    6370:	80 93 b4 01 	sts	0x01B4, r24
}
    6374:	0f 90       	pop	r0
    6376:	0f 90       	pop	r0
    6378:	cf 91       	pop	r28
    637a:	df 91       	pop	r29
    637c:	08 95       	ret

0000637e <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    637e:	1f 92       	push	r1
    6380:	0f 92       	push	r0
    6382:	0f b6       	in	r0, 0x3f	; 63
    6384:	0f 92       	push	r0
    6386:	11 24       	eor	r1, r1
    6388:	2f 93       	push	r18
    638a:	3f 93       	push	r19
    638c:	4f 93       	push	r20
    638e:	5f 93       	push	r21
    6390:	6f 93       	push	r22
    6392:	7f 93       	push	r23
    6394:	8f 93       	push	r24
    6396:	9f 93       	push	r25
    6398:	af 93       	push	r26
    639a:	bf 93       	push	r27
    639c:	ef 93       	push	r30
    639e:	ff 93       	push	r31
    63a0:	df 93       	push	r29
    63a2:	cf 93       	push	r28
    63a4:	cd b7       	in	r28, 0x3d	; 61
    63a6:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULLPTR)
    63a8:	80 91 b4 01 	lds	r24, 0x01B4
    63ac:	90 91 b5 01 	lds	r25, 0x01B5
    63b0:	00 97       	sbiw	r24, 0x00	; 0
    63b2:	29 f0       	breq	.+10     	; 0x63be <__vector_11+0x40>
	{
		Timer0_OVF_Fptr() ;
    63b4:	e0 91 b4 01 	lds	r30, 0x01B4
    63b8:	f0 91 b5 01 	lds	r31, 0x01B5
    63bc:	09 95       	icall
	}
	
}
    63be:	cf 91       	pop	r28
    63c0:	df 91       	pop	r29
    63c2:	ff 91       	pop	r31
    63c4:	ef 91       	pop	r30
    63c6:	bf 91       	pop	r27
    63c8:	af 91       	pop	r26
    63ca:	9f 91       	pop	r25
    63cc:	8f 91       	pop	r24
    63ce:	7f 91       	pop	r23
    63d0:	6f 91       	pop	r22
    63d2:	5f 91       	pop	r21
    63d4:	4f 91       	pop	r20
    63d6:	3f 91       	pop	r19
    63d8:	2f 91       	pop	r18
    63da:	0f 90       	pop	r0
    63dc:	0f be       	out	0x3f, r0	; 63
    63de:	0f 90       	pop	r0
    63e0:	1f 90       	pop	r1
    63e2:	18 95       	reti

000063e4 <Timer1_Init>:

/*************************************************TIMER 1 **************************************************/

void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler,OC1A_Mode_type oc1a_mode,OC1B_Mode_type oc1b_mode)

{
    63e4:	df 93       	push	r29
    63e6:	cf 93       	push	r28
    63e8:	cd b7       	in	r28, 0x3d	; 61
    63ea:	de b7       	in	r29, 0x3e	; 62
    63ec:	2a 97       	sbiw	r28, 0x0a	; 10
    63ee:	0f b6       	in	r0, 0x3f	; 63
    63f0:	f8 94       	cli
    63f2:	de bf       	out	0x3e, r29	; 62
    63f4:	0f be       	out	0x3f, r0	; 63
    63f6:	cd bf       	out	0x3d, r28	; 61
    63f8:	89 83       	std	Y+1, r24	; 0x01
    63fa:	6a 83       	std	Y+2, r22	; 0x02
    63fc:	4b 83       	std	Y+3, r20	; 0x03
    63fe:	2c 83       	std	Y+4, r18	; 0x04
	switch (mode)
    6400:	89 81       	ldd	r24, Y+1	; 0x01
    6402:	28 2f       	mov	r18, r24
    6404:	30 e0       	ldi	r19, 0x00	; 0
    6406:	3a 87       	std	Y+10, r19	; 0x0a
    6408:	29 87       	std	Y+9, r18	; 0x09
    640a:	89 85       	ldd	r24, Y+9	; 0x09
    640c:	9a 85       	ldd	r25, Y+10	; 0x0a
    640e:	82 30       	cpi	r24, 0x02	; 2
    6410:	91 05       	cpc	r25, r1
    6412:	09 f4       	brne	.+2      	; 0x6416 <Timer1_Init+0x32>
    6414:	56 c0       	rjmp	.+172    	; 0x64c2 <Timer1_Init+0xde>
    6416:	29 85       	ldd	r18, Y+9	; 0x09
    6418:	3a 85       	ldd	r19, Y+10	; 0x0a
    641a:	23 30       	cpi	r18, 0x03	; 3
    641c:	31 05       	cpc	r19, r1
    641e:	54 f4       	brge	.+20     	; 0x6434 <Timer1_Init+0x50>
    6420:	89 85       	ldd	r24, Y+9	; 0x09
    6422:	9a 85       	ldd	r25, Y+10	; 0x0a
    6424:	00 97       	sbiw	r24, 0x00	; 0
    6426:	99 f0       	breq	.+38     	; 0x644e <Timer1_Init+0x6a>
    6428:	29 85       	ldd	r18, Y+9	; 0x09
    642a:	3a 85       	ldd	r19, Y+10	; 0x0a
    642c:	21 30       	cpi	r18, 0x01	; 1
    642e:	31 05       	cpc	r19, r1
    6430:	59 f1       	breq	.+86     	; 0x6488 <Timer1_Init+0xa4>
    6432:	9d c0       	rjmp	.+314    	; 0x656e <Timer1_Init+0x18a>
    6434:	89 85       	ldd	r24, Y+9	; 0x09
    6436:	9a 85       	ldd	r25, Y+10	; 0x0a
    6438:	83 30       	cpi	r24, 0x03	; 3
    643a:	91 05       	cpc	r25, r1
    643c:	09 f4       	brne	.+2      	; 0x6440 <Timer1_Init+0x5c>
    643e:	5e c0       	rjmp	.+188    	; 0x64fc <Timer1_Init+0x118>
    6440:	29 85       	ldd	r18, Y+9	; 0x09
    6442:	3a 85       	ldd	r19, Y+10	; 0x0a
    6444:	24 30       	cpi	r18, 0x04	; 4
    6446:	31 05       	cpc	r19, r1
    6448:	09 f4       	brne	.+2      	; 0x644c <Timer1_Init+0x68>
    644a:	75 c0       	rjmp	.+234    	; 0x6536 <Timer1_Init+0x152>
    644c:	90 c0       	rjmp	.+288    	; 0x656e <Timer1_Init+0x18a>
	{
		case TIMER1_NORMAL_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    644e:	af e4       	ldi	r26, 0x4F	; 79
    6450:	b0 e0       	ldi	r27, 0x00	; 0
    6452:	ef e4       	ldi	r30, 0x4F	; 79
    6454:	f0 e0       	ldi	r31, 0x00	; 0
    6456:	80 81       	ld	r24, Z
    6458:	8e 7f       	andi	r24, 0xFE	; 254
    645a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    645c:	af e4       	ldi	r26, 0x4F	; 79
    645e:	b0 e0       	ldi	r27, 0x00	; 0
    6460:	ef e4       	ldi	r30, 0x4F	; 79
    6462:	f0 e0       	ldi	r31, 0x00	; 0
    6464:	80 81       	ld	r24, Z
    6466:	8d 7f       	andi	r24, 0xFD	; 253
    6468:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    646a:	ae e4       	ldi	r26, 0x4E	; 78
    646c:	b0 e0       	ldi	r27, 0x00	; 0
    646e:	ee e4       	ldi	r30, 0x4E	; 78
    6470:	f0 e0       	ldi	r31, 0x00	; 0
    6472:	80 81       	ld	r24, Z
    6474:	87 7f       	andi	r24, 0xF7	; 247
    6476:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    6478:	ae e4       	ldi	r26, 0x4E	; 78
    647a:	b0 e0       	ldi	r27, 0x00	; 0
    647c:	ee e4       	ldi	r30, 0x4E	; 78
    647e:	f0 e0       	ldi	r31, 0x00	; 0
    6480:	80 81       	ld	r24, Z
    6482:	8f 7e       	andi	r24, 0xEF	; 239
    6484:	8c 93       	st	X, r24
    6486:	73 c0       	rjmp	.+230    	; 0x656e <Timer1_Init+0x18a>
		break;
		case TIMER1_CTC_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    6488:	af e4       	ldi	r26, 0x4F	; 79
    648a:	b0 e0       	ldi	r27, 0x00	; 0
    648c:	ef e4       	ldi	r30, 0x4F	; 79
    648e:	f0 e0       	ldi	r31, 0x00	; 0
    6490:	80 81       	ld	r24, Z
    6492:	8e 7f       	andi	r24, 0xFE	; 254
    6494:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    6496:	af e4       	ldi	r26, 0x4F	; 79
    6498:	b0 e0       	ldi	r27, 0x00	; 0
    649a:	ef e4       	ldi	r30, 0x4F	; 79
    649c:	f0 e0       	ldi	r31, 0x00	; 0
    649e:	80 81       	ld	r24, Z
    64a0:	8d 7f       	andi	r24, 0xFD	; 253
    64a2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    64a4:	ae e4       	ldi	r26, 0x4E	; 78
    64a6:	b0 e0       	ldi	r27, 0x00	; 0
    64a8:	ee e4       	ldi	r30, 0x4E	; 78
    64aa:	f0 e0       	ldi	r31, 0x00	; 0
    64ac:	80 81       	ld	r24, Z
    64ae:	88 60       	ori	r24, 0x08	; 8
    64b0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    64b2:	ae e4       	ldi	r26, 0x4E	; 78
    64b4:	b0 e0       	ldi	r27, 0x00	; 0
    64b6:	ee e4       	ldi	r30, 0x4E	; 78
    64b8:	f0 e0       	ldi	r31, 0x00	; 0
    64ba:	80 81       	ld	r24, Z
    64bc:	80 61       	ori	r24, 0x10	; 16
    64be:	8c 93       	st	X, r24
    64c0:	56 c0       	rjmp	.+172    	; 0x656e <Timer1_Init+0x18a>
		break;
		
		case TIMER1_CTC_OCRA_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    64c2:	af e4       	ldi	r26, 0x4F	; 79
    64c4:	b0 e0       	ldi	r27, 0x00	; 0
    64c6:	ef e4       	ldi	r30, 0x4F	; 79
    64c8:	f0 e0       	ldi	r31, 0x00	; 0
    64ca:	80 81       	ld	r24, Z
    64cc:	8e 7f       	andi	r24, 0xFE	; 254
    64ce:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    64d0:	af e4       	ldi	r26, 0x4F	; 79
    64d2:	b0 e0       	ldi	r27, 0x00	; 0
    64d4:	ef e4       	ldi	r30, 0x4F	; 79
    64d6:	f0 e0       	ldi	r31, 0x00	; 0
    64d8:	80 81       	ld	r24, Z
    64da:	8d 7f       	andi	r24, 0xFD	; 253
    64dc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    64de:	ae e4       	ldi	r26, 0x4E	; 78
    64e0:	b0 e0       	ldi	r27, 0x00	; 0
    64e2:	ee e4       	ldi	r30, 0x4E	; 78
    64e4:	f0 e0       	ldi	r31, 0x00	; 0
    64e6:	80 81       	ld	r24, Z
    64e8:	88 60       	ori	r24, 0x08	; 8
    64ea:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    64ec:	ae e4       	ldi	r26, 0x4E	; 78
    64ee:	b0 e0       	ldi	r27, 0x00	; 0
    64f0:	ee e4       	ldi	r30, 0x4E	; 78
    64f2:	f0 e0       	ldi	r31, 0x00	; 0
    64f4:	80 81       	ld	r24, Z
    64f6:	8f 7e       	andi	r24, 0xEF	; 239
    64f8:	8c 93       	st	X, r24
    64fa:	39 c0       	rjmp	.+114    	; 0x656e <Timer1_Init+0x18a>
		break;
		
		case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    64fc:	af e4       	ldi	r26, 0x4F	; 79
    64fe:	b0 e0       	ldi	r27, 0x00	; 0
    6500:	ef e4       	ldi	r30, 0x4F	; 79
    6502:	f0 e0       	ldi	r31, 0x00	; 0
    6504:	80 81       	ld	r24, Z
    6506:	8e 7f       	andi	r24, 0xFE	; 254
    6508:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    650a:	af e4       	ldi	r26, 0x4F	; 79
    650c:	b0 e0       	ldi	r27, 0x00	; 0
    650e:	ef e4       	ldi	r30, 0x4F	; 79
    6510:	f0 e0       	ldi	r31, 0x00	; 0
    6512:	80 81       	ld	r24, Z
    6514:	82 60       	ori	r24, 0x02	; 2
    6516:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    6518:	ae e4       	ldi	r26, 0x4E	; 78
    651a:	b0 e0       	ldi	r27, 0x00	; 0
    651c:	ee e4       	ldi	r30, 0x4E	; 78
    651e:	f0 e0       	ldi	r31, 0x00	; 0
    6520:	80 81       	ld	r24, Z
    6522:	88 60       	ori	r24, 0x08	; 8
    6524:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    6526:	ae e4       	ldi	r26, 0x4E	; 78
    6528:	b0 e0       	ldi	r27, 0x00	; 0
    652a:	ee e4       	ldi	r30, 0x4E	; 78
    652c:	f0 e0       	ldi	r31, 0x00	; 0
    652e:	80 81       	ld	r24, Z
    6530:	80 61       	ori	r24, 0x10	; 16
    6532:	8c 93       	st	X, r24
    6534:	1c c0       	rjmp	.+56     	; 0x656e <Timer1_Init+0x18a>
		break;
		
		case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    6536:	af e4       	ldi	r26, 0x4F	; 79
    6538:	b0 e0       	ldi	r27, 0x00	; 0
    653a:	ef e4       	ldi	r30, 0x4F	; 79
    653c:	f0 e0       	ldi	r31, 0x00	; 0
    653e:	80 81       	ld	r24, Z
    6540:	81 60       	ori	r24, 0x01	; 1
    6542:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    6544:	af e4       	ldi	r26, 0x4F	; 79
    6546:	b0 e0       	ldi	r27, 0x00	; 0
    6548:	ef e4       	ldi	r30, 0x4F	; 79
    654a:	f0 e0       	ldi	r31, 0x00	; 0
    654c:	80 81       	ld	r24, Z
    654e:	82 60       	ori	r24, 0x02	; 2
    6550:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    6552:	ae e4       	ldi	r26, 0x4E	; 78
    6554:	b0 e0       	ldi	r27, 0x00	; 0
    6556:	ee e4       	ldi	r30, 0x4E	; 78
    6558:	f0 e0       	ldi	r31, 0x00	; 0
    655a:	80 81       	ld	r24, Z
    655c:	88 60       	ori	r24, 0x08	; 8
    655e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    6560:	ae e4       	ldi	r26, 0x4E	; 78
    6562:	b0 e0       	ldi	r27, 0x00	; 0
    6564:	ee e4       	ldi	r30, 0x4E	; 78
    6566:	f0 e0       	ldi	r31, 0x00	; 0
    6568:	80 81       	ld	r24, Z
    656a:	80 61       	ori	r24, 0x10	; 16
    656c:	8c 93       	st	X, r24
		break;
	}
	switch (oc1a_mode)
    656e:	8b 81       	ldd	r24, Y+3	; 0x03
    6570:	28 2f       	mov	r18, r24
    6572:	30 e0       	ldi	r19, 0x00	; 0
    6574:	38 87       	std	Y+8, r19	; 0x08
    6576:	2f 83       	std	Y+7, r18	; 0x07
    6578:	8f 81       	ldd	r24, Y+7	; 0x07
    657a:	98 85       	ldd	r25, Y+8	; 0x08
    657c:	81 30       	cpi	r24, 0x01	; 1
    657e:	91 05       	cpc	r25, r1
    6580:	21 f1       	breq	.+72     	; 0x65ca <Timer1_Init+0x1e6>
    6582:	2f 81       	ldd	r18, Y+7	; 0x07
    6584:	38 85       	ldd	r19, Y+8	; 0x08
    6586:	22 30       	cpi	r18, 0x02	; 2
    6588:	31 05       	cpc	r19, r1
    658a:	2c f4       	brge	.+10     	; 0x6596 <Timer1_Init+0x1b2>
    658c:	8f 81       	ldd	r24, Y+7	; 0x07
    658e:	98 85       	ldd	r25, Y+8	; 0x08
    6590:	00 97       	sbiw	r24, 0x00	; 0
    6592:	61 f0       	breq	.+24     	; 0x65ac <Timer1_Init+0x1c8>
    6594:	46 c0       	rjmp	.+140    	; 0x6622 <Timer1_Init+0x23e>
    6596:	2f 81       	ldd	r18, Y+7	; 0x07
    6598:	38 85       	ldd	r19, Y+8	; 0x08
    659a:	22 30       	cpi	r18, 0x02	; 2
    659c:	31 05       	cpc	r19, r1
    659e:	21 f1       	breq	.+72     	; 0x65e8 <Timer1_Init+0x204>
    65a0:	8f 81       	ldd	r24, Y+7	; 0x07
    65a2:	98 85       	ldd	r25, Y+8	; 0x08
    65a4:	83 30       	cpi	r24, 0x03	; 3
    65a6:	91 05       	cpc	r25, r1
    65a8:	71 f1       	breq	.+92     	; 0x6606 <Timer1_Init+0x222>
    65aa:	3b c0       	rjmp	.+118    	; 0x6622 <Timer1_Init+0x23e>
	{
		case OCRA_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1A0);
    65ac:	af e4       	ldi	r26, 0x4F	; 79
    65ae:	b0 e0       	ldi	r27, 0x00	; 0
    65b0:	ef e4       	ldi	r30, 0x4F	; 79
    65b2:	f0 e0       	ldi	r31, 0x00	; 0
    65b4:	80 81       	ld	r24, Z
    65b6:	8f 7b       	andi	r24, 0xBF	; 191
    65b8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    65ba:	af e4       	ldi	r26, 0x4F	; 79
    65bc:	b0 e0       	ldi	r27, 0x00	; 0
    65be:	ef e4       	ldi	r30, 0x4F	; 79
    65c0:	f0 e0       	ldi	r31, 0x00	; 0
    65c2:	80 81       	ld	r24, Z
    65c4:	8f 77       	andi	r24, 0x7F	; 127
    65c6:	8c 93       	st	X, r24
    65c8:	2c c0       	rjmp	.+88     	; 0x6622 <Timer1_Init+0x23e>
		break;
		case OCRA_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
    65ca:	af e4       	ldi	r26, 0x4F	; 79
    65cc:	b0 e0       	ldi	r27, 0x00	; 0
    65ce:	ef e4       	ldi	r30, 0x4F	; 79
    65d0:	f0 e0       	ldi	r31, 0x00	; 0
    65d2:	80 81       	ld	r24, Z
    65d4:	80 64       	ori	r24, 0x40	; 64
    65d6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    65d8:	af e4       	ldi	r26, 0x4F	; 79
    65da:	b0 e0       	ldi	r27, 0x00	; 0
    65dc:	ef e4       	ldi	r30, 0x4F	; 79
    65de:	f0 e0       	ldi	r31, 0x00	; 0
    65e0:	80 81       	ld	r24, Z
    65e2:	8f 77       	andi	r24, 0x7F	; 127
    65e4:	8c 93       	st	X, r24
    65e6:	1d c0       	rjmp	.+58     	; 0x6622 <Timer1_Init+0x23e>
		break;
		case OCRA_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1A0);
    65e8:	af e4       	ldi	r26, 0x4F	; 79
    65ea:	b0 e0       	ldi	r27, 0x00	; 0
    65ec:	ef e4       	ldi	r30, 0x4F	; 79
    65ee:	f0 e0       	ldi	r31, 0x00	; 0
    65f0:	80 81       	ld	r24, Z
    65f2:	8f 7b       	andi	r24, 0xBF	; 191
    65f4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    65f6:	af e4       	ldi	r26, 0x4F	; 79
    65f8:	b0 e0       	ldi	r27, 0x00	; 0
    65fa:	ef e4       	ldi	r30, 0x4F	; 79
    65fc:	f0 e0       	ldi	r31, 0x00	; 0
    65fe:	80 81       	ld	r24, Z
    6600:	80 68       	ori	r24, 0x80	; 128
    6602:	8c 93       	st	X, r24
    6604:	0e c0       	rjmp	.+28     	; 0x6622 <Timer1_Init+0x23e>
		break;
		case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    6606:	af e4       	ldi	r26, 0x4F	; 79
    6608:	b0 e0       	ldi	r27, 0x00	; 0
    660a:	ef e4       	ldi	r30, 0x4F	; 79
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	80 81       	ld	r24, Z
    6610:	80 64       	ori	r24, 0x40	; 64
    6612:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    6614:	af e4       	ldi	r26, 0x4F	; 79
    6616:	b0 e0       	ldi	r27, 0x00	; 0
    6618:	ef e4       	ldi	r30, 0x4F	; 79
    661a:	f0 e0       	ldi	r31, 0x00	; 0
    661c:	80 81       	ld	r24, Z
    661e:	80 68       	ori	r24, 0x80	; 128
    6620:	8c 93       	st	X, r24
		break;
	}
	switch (oc1b_mode)
    6622:	8c 81       	ldd	r24, Y+4	; 0x04
    6624:	28 2f       	mov	r18, r24
    6626:	30 e0       	ldi	r19, 0x00	; 0
    6628:	3e 83       	std	Y+6, r19	; 0x06
    662a:	2d 83       	std	Y+5, r18	; 0x05
    662c:	8d 81       	ldd	r24, Y+5	; 0x05
    662e:	9e 81       	ldd	r25, Y+6	; 0x06
    6630:	81 30       	cpi	r24, 0x01	; 1
    6632:	91 05       	cpc	r25, r1
    6634:	21 f1       	breq	.+72     	; 0x667e <Timer1_Init+0x29a>
    6636:	2d 81       	ldd	r18, Y+5	; 0x05
    6638:	3e 81       	ldd	r19, Y+6	; 0x06
    663a:	22 30       	cpi	r18, 0x02	; 2
    663c:	31 05       	cpc	r19, r1
    663e:	2c f4       	brge	.+10     	; 0x664a <Timer1_Init+0x266>
    6640:	8d 81       	ldd	r24, Y+5	; 0x05
    6642:	9e 81       	ldd	r25, Y+6	; 0x06
    6644:	00 97       	sbiw	r24, 0x00	; 0
    6646:	61 f0       	breq	.+24     	; 0x6660 <Timer1_Init+0x27c>
    6648:	46 c0       	rjmp	.+140    	; 0x66d6 <Timer1_Init+0x2f2>
    664a:	2d 81       	ldd	r18, Y+5	; 0x05
    664c:	3e 81       	ldd	r19, Y+6	; 0x06
    664e:	22 30       	cpi	r18, 0x02	; 2
    6650:	31 05       	cpc	r19, r1
    6652:	21 f1       	breq	.+72     	; 0x669c <Timer1_Init+0x2b8>
    6654:	8d 81       	ldd	r24, Y+5	; 0x05
    6656:	9e 81       	ldd	r25, Y+6	; 0x06
    6658:	83 30       	cpi	r24, 0x03	; 3
    665a:	91 05       	cpc	r25, r1
    665c:	71 f1       	breq	.+92     	; 0x66ba <Timer1_Init+0x2d6>
    665e:	3b c0       	rjmp	.+118    	; 0x66d6 <Timer1_Init+0x2f2>
	{
		case OCRB_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1B0);
    6660:	af e4       	ldi	r26, 0x4F	; 79
    6662:	b0 e0       	ldi	r27, 0x00	; 0
    6664:	ef e4       	ldi	r30, 0x4F	; 79
    6666:	f0 e0       	ldi	r31, 0x00	; 0
    6668:	80 81       	ld	r24, Z
    666a:	8f 7e       	andi	r24, 0xEF	; 239
    666c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    666e:	af e4       	ldi	r26, 0x4F	; 79
    6670:	b0 e0       	ldi	r27, 0x00	; 0
    6672:	ef e4       	ldi	r30, 0x4F	; 79
    6674:	f0 e0       	ldi	r31, 0x00	; 0
    6676:	80 81       	ld	r24, Z
    6678:	8f 7d       	andi	r24, 0xDF	; 223
    667a:	8c 93       	st	X, r24
    667c:	2c c0       	rjmp	.+88     	; 0x66d6 <Timer1_Init+0x2f2>
		break;
		case OCRB_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
    667e:	af e4       	ldi	r26, 0x4F	; 79
    6680:	b0 e0       	ldi	r27, 0x00	; 0
    6682:	ef e4       	ldi	r30, 0x4F	; 79
    6684:	f0 e0       	ldi	r31, 0x00	; 0
    6686:	80 81       	ld	r24, Z
    6688:	80 61       	ori	r24, 0x10	; 16
    668a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    668c:	af e4       	ldi	r26, 0x4F	; 79
    668e:	b0 e0       	ldi	r27, 0x00	; 0
    6690:	ef e4       	ldi	r30, 0x4F	; 79
    6692:	f0 e0       	ldi	r31, 0x00	; 0
    6694:	80 81       	ld	r24, Z
    6696:	8f 7d       	andi	r24, 0xDF	; 223
    6698:	8c 93       	st	X, r24
    669a:	1d c0       	rjmp	.+58     	; 0x66d6 <Timer1_Init+0x2f2>
		break;
		case OCRB_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1B0);
    669c:	af e4       	ldi	r26, 0x4F	; 79
    669e:	b0 e0       	ldi	r27, 0x00	; 0
    66a0:	ef e4       	ldi	r30, 0x4F	; 79
    66a2:	f0 e0       	ldi	r31, 0x00	; 0
    66a4:	80 81       	ld	r24, Z
    66a6:	8f 7e       	andi	r24, 0xEF	; 239
    66a8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    66aa:	af e4       	ldi	r26, 0x4F	; 79
    66ac:	b0 e0       	ldi	r27, 0x00	; 0
    66ae:	ef e4       	ldi	r30, 0x4F	; 79
    66b0:	f0 e0       	ldi	r31, 0x00	; 0
    66b2:	80 81       	ld	r24, Z
    66b4:	80 62       	ori	r24, 0x20	; 32
    66b6:	8c 93       	st	X, r24
    66b8:	0e c0       	rjmp	.+28     	; 0x66d6 <Timer1_Init+0x2f2>
		break;
		case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    66ba:	af e4       	ldi	r26, 0x4F	; 79
    66bc:	b0 e0       	ldi	r27, 0x00	; 0
    66be:	ef e4       	ldi	r30, 0x4F	; 79
    66c0:	f0 e0       	ldi	r31, 0x00	; 0
    66c2:	80 81       	ld	r24, Z
    66c4:	80 61       	ori	r24, 0x10	; 16
    66c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    66c8:	af e4       	ldi	r26, 0x4F	; 79
    66ca:	b0 e0       	ldi	r27, 0x00	; 0
    66cc:	ef e4       	ldi	r30, 0x4F	; 79
    66ce:	f0 e0       	ldi	r31, 0x00	; 0
    66d0:	80 81       	ld	r24, Z
    66d2:	80 62       	ori	r24, 0x20	; 32
    66d4:	8c 93       	st	X, r24
		break;
	}
	
	
	TCCR1B&=0XF8;
    66d6:	ae e4       	ldi	r26, 0x4E	; 78
    66d8:	b0 e0       	ldi	r27, 0x00	; 0
    66da:	ee e4       	ldi	r30, 0x4E	; 78
    66dc:	f0 e0       	ldi	r31, 0x00	; 0
    66de:	80 81       	ld	r24, Z
    66e0:	88 7f       	andi	r24, 0xF8	; 248
    66e2:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    66e4:	ae e4       	ldi	r26, 0x4E	; 78
    66e6:	b0 e0       	ldi	r27, 0x00	; 0
    66e8:	ee e4       	ldi	r30, 0x4E	; 78
    66ea:	f0 e0       	ldi	r31, 0x00	; 0
    66ec:	90 81       	ld	r25, Z
    66ee:	8a 81       	ldd	r24, Y+2	; 0x02
    66f0:	89 2b       	or	r24, r25
    66f2:	8c 93       	st	X, r24

}
    66f4:	2a 96       	adiw	r28, 0x0a	; 10
    66f6:	0f b6       	in	r0, 0x3f	; 63
    66f8:	f8 94       	cli
    66fa:	de bf       	out	0x3e, r29	; 62
    66fc:	0f be       	out	0x3f, r0	; 63
    66fe:	cd bf       	out	0x3d, r28	; 61
    6700:	cf 91       	pop	r28
    6702:	df 91       	pop	r29
    6704:	08 95       	ret

00006706 <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    6706:	df 93       	push	r29
    6708:	cf 93       	push	r28
    670a:	0f 92       	push	r0
    670c:	cd b7       	in	r28, 0x3d	; 61
    670e:	de b7       	in	r29, 0x3e	; 62
    6710:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    6712:	89 81       	ldd	r24, Y+1	; 0x01
    6714:	88 23       	and	r24, r24
    6716:	41 f4       	brne	.+16     	; 0x6728 <Timer1_InputCaptureEdge+0x22>
	SET_BIT(TCCR1B,ICES1);
    6718:	ae e4       	ldi	r26, 0x4E	; 78
    671a:	b0 e0       	ldi	r27, 0x00	; 0
    671c:	ee e4       	ldi	r30, 0x4E	; 78
    671e:	f0 e0       	ldi	r31, 0x00	; 0
    6720:	80 81       	ld	r24, Z
    6722:	80 64       	ori	r24, 0x40	; 64
    6724:	8c 93       	st	X, r24
    6726:	0a c0       	rjmp	.+20     	; 0x673c <Timer1_InputCaptureEdge+0x36>
	
	else if(edge==FALLING)
    6728:	89 81       	ldd	r24, Y+1	; 0x01
    672a:	81 30       	cpi	r24, 0x01	; 1
    672c:	39 f4       	brne	.+14     	; 0x673c <Timer1_InputCaptureEdge+0x36>
	CLEAR_BIT(TCCR1B,ICES1);
    672e:	ae e4       	ldi	r26, 0x4E	; 78
    6730:	b0 e0       	ldi	r27, 0x00	; 0
    6732:	ee e4       	ldi	r30, 0x4E	; 78
    6734:	f0 e0       	ldi	r31, 0x00	; 0
    6736:	80 81       	ld	r24, Z
    6738:	8f 7b       	andi	r24, 0xBF	; 191
    673a:	8c 93       	st	X, r24

}
    673c:	0f 90       	pop	r0
    673e:	cf 91       	pop	r28
    6740:	df 91       	pop	r29
    6742:	08 95       	ret

00006744 <Timer1_ICU_InterruptEnable>:
/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    6744:	df 93       	push	r29
    6746:	cf 93       	push	r28
    6748:	cd b7       	in	r28, 0x3d	; 61
    674a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    674c:	a9 e5       	ldi	r26, 0x59	; 89
    674e:	b0 e0       	ldi	r27, 0x00	; 0
    6750:	e9 e5       	ldi	r30, 0x59	; 89
    6752:	f0 e0       	ldi	r31, 0x00	; 0
    6754:	80 81       	ld	r24, Z
    6756:	80 62       	ori	r24, 0x20	; 32
    6758:	8c 93       	st	X, r24
}
    675a:	cf 91       	pop	r28
    675c:	df 91       	pop	r29
    675e:	08 95       	ret

00006760 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    6760:	df 93       	push	r29
    6762:	cf 93       	push	r28
    6764:	cd b7       	in	r28, 0x3d	; 61
    6766:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TICIE1);
    6768:	a9 e5       	ldi	r26, 0x59	; 89
    676a:	b0 e0       	ldi	r27, 0x00	; 0
    676c:	e9 e5       	ldi	r30, 0x59	; 89
    676e:	f0 e0       	ldi	r31, 0x00	; 0
    6770:	80 81       	ld	r24, Z
    6772:	8f 7d       	andi	r24, 0xDF	; 223
    6774:	8c 93       	st	X, r24
}
    6776:	cf 91       	pop	r28
    6778:	df 91       	pop	r29
    677a:	08 95       	ret

0000677c <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    677c:	df 93       	push	r29
    677e:	cf 93       	push	r28
    6780:	cd b7       	in	r28, 0x3d	; 61
    6782:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    6784:	a9 e5       	ldi	r26, 0x59	; 89
    6786:	b0 e0       	ldi	r27, 0x00	; 0
    6788:	e9 e5       	ldi	r30, 0x59	; 89
    678a:	f0 e0       	ldi	r31, 0x00	; 0
    678c:	80 81       	ld	r24, Z
    678e:	84 60       	ori	r24, 0x04	; 4
    6790:	8c 93       	st	X, r24
}
    6792:	cf 91       	pop	r28
    6794:	df 91       	pop	r29
    6796:	08 95       	ret

00006798 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    6798:	df 93       	push	r29
    679a:	cf 93       	push	r28
    679c:	cd b7       	in	r28, 0x3d	; 61
    679e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE1);
    67a0:	a9 e5       	ldi	r26, 0x59	; 89
    67a2:	b0 e0       	ldi	r27, 0x00	; 0
    67a4:	e9 e5       	ldi	r30, 0x59	; 89
    67a6:	f0 e0       	ldi	r31, 0x00	; 0
    67a8:	80 81       	ld	r24, Z
    67aa:	8b 7f       	andi	r24, 0xFB	; 251
    67ac:	8c 93       	st	X, r24
}
    67ae:	cf 91       	pop	r28
    67b0:	df 91       	pop	r29
    67b2:	08 95       	ret

000067b4 <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    67b4:	df 93       	push	r29
    67b6:	cf 93       	push	r28
    67b8:	cd b7       	in	r28, 0x3d	; 61
    67ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    67bc:	a9 e5       	ldi	r26, 0x59	; 89
    67be:	b0 e0       	ldi	r27, 0x00	; 0
    67c0:	e9 e5       	ldi	r30, 0x59	; 89
    67c2:	f0 e0       	ldi	r31, 0x00	; 0
    67c4:	80 81       	ld	r24, Z
    67c6:	80 61       	ori	r24, 0x10	; 16
    67c8:	8c 93       	st	X, r24
}
    67ca:	cf 91       	pop	r28
    67cc:	df 91       	pop	r29
    67ce:	08 95       	ret

000067d0 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    67d0:	df 93       	push	r29
    67d2:	cf 93       	push	r28
    67d4:	cd b7       	in	r28, 0x3d	; 61
    67d6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1A);
    67d8:	a9 e5       	ldi	r26, 0x59	; 89
    67da:	b0 e0       	ldi	r27, 0x00	; 0
    67dc:	e9 e5       	ldi	r30, 0x59	; 89
    67de:	f0 e0       	ldi	r31, 0x00	; 0
    67e0:	80 81       	ld	r24, Z
    67e2:	8f 7e       	andi	r24, 0xEF	; 239
    67e4:	8c 93       	st	X, r24
}
    67e6:	cf 91       	pop	r28
    67e8:	df 91       	pop	r29
    67ea:	08 95       	ret

000067ec <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    67ec:	df 93       	push	r29
    67ee:	cf 93       	push	r28
    67f0:	cd b7       	in	r28, 0x3d	; 61
    67f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    67f4:	a9 e5       	ldi	r26, 0x59	; 89
    67f6:	b0 e0       	ldi	r27, 0x00	; 0
    67f8:	e9 e5       	ldi	r30, 0x59	; 89
    67fa:	f0 e0       	ldi	r31, 0x00	; 0
    67fc:	80 81       	ld	r24, Z
    67fe:	88 60       	ori	r24, 0x08	; 8
    6800:	8c 93       	st	X, r24
}
    6802:	cf 91       	pop	r28
    6804:	df 91       	pop	r29
    6806:	08 95       	ret

00006808 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    6808:	df 93       	push	r29
    680a:	cf 93       	push	r28
    680c:	cd b7       	in	r28, 0x3d	; 61
    680e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1B);
    6810:	a9 e5       	ldi	r26, 0x59	; 89
    6812:	b0 e0       	ldi	r27, 0x00	; 0
    6814:	e9 e5       	ldi	r30, 0x59	; 89
    6816:	f0 e0       	ldi	r31, 0x00	; 0
    6818:	80 81       	ld	r24, Z
    681a:	87 7f       	andi	r24, 0xF7	; 247
    681c:	8c 93       	st	X, r24
}
    681e:	cf 91       	pop	r28
    6820:	df 91       	pop	r29
    6822:	08 95       	ret

00006824 <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    6824:	df 93       	push	r29
    6826:	cf 93       	push	r28
    6828:	00 d0       	rcall	.+0      	; 0x682a <Timer1_OVF_SetCallBack+0x6>
    682a:	cd b7       	in	r28, 0x3d	; 61
    682c:	de b7       	in	r29, 0x3e	; 62
    682e:	9a 83       	std	Y+2, r25	; 0x02
    6830:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    6832:	89 81       	ldd	r24, Y+1	; 0x01
    6834:	9a 81       	ldd	r25, Y+2	; 0x02
    6836:	90 93 b9 01 	sts	0x01B9, r25
    683a:	80 93 b8 01 	sts	0x01B8, r24
}
    683e:	0f 90       	pop	r0
    6840:	0f 90       	pop	r0
    6842:	cf 91       	pop	r28
    6844:	df 91       	pop	r29
    6846:	08 95       	ret

00006848 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    6848:	df 93       	push	r29
    684a:	cf 93       	push	r28
    684c:	00 d0       	rcall	.+0      	; 0x684e <Timer1_OCA_SetCallBack+0x6>
    684e:	cd b7       	in	r28, 0x3d	; 61
    6850:	de b7       	in	r29, 0x3e	; 62
    6852:	9a 83       	std	Y+2, r25	; 0x02
    6854:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    6856:	89 81       	ldd	r24, Y+1	; 0x01
    6858:	9a 81       	ldd	r25, Y+2	; 0x02
    685a:	90 93 bb 01 	sts	0x01BB, r25
    685e:	80 93 ba 01 	sts	0x01BA, r24
}
    6862:	0f 90       	pop	r0
    6864:	0f 90       	pop	r0
    6866:	cf 91       	pop	r28
    6868:	df 91       	pop	r29
    686a:	08 95       	ret

0000686c <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    686c:	df 93       	push	r29
    686e:	cf 93       	push	r28
    6870:	00 d0       	rcall	.+0      	; 0x6872 <Timer1_OCB_SetCallBack+0x6>
    6872:	cd b7       	in	r28, 0x3d	; 61
    6874:	de b7       	in	r29, 0x3e	; 62
    6876:	9a 83       	std	Y+2, r25	; 0x02
    6878:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    687a:	89 81       	ldd	r24, Y+1	; 0x01
    687c:	9a 81       	ldd	r25, Y+2	; 0x02
    687e:	90 93 bd 01 	sts	0x01BD, r25
    6882:	80 93 bc 01 	sts	0x01BC, r24
}
    6886:	0f 90       	pop	r0
    6888:	0f 90       	pop	r0
    688a:	cf 91       	pop	r28
    688c:	df 91       	pop	r29
    688e:	08 95       	ret

00006890 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    6890:	df 93       	push	r29
    6892:	cf 93       	push	r28
    6894:	00 d0       	rcall	.+0      	; 0x6896 <Timer1_ICU_SetCallBack+0x6>
    6896:	cd b7       	in	r28, 0x3d	; 61
    6898:	de b7       	in	r29, 0x3e	; 62
    689a:	9a 83       	std	Y+2, r25	; 0x02
    689c:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    689e:	89 81       	ldd	r24, Y+1	; 0x01
    68a0:	9a 81       	ldd	r25, Y+2	; 0x02
    68a2:	90 93 bf 01 	sts	0x01BF, r25
    68a6:	80 93 be 01 	sts	0x01BE, r24
}
    68aa:	0f 90       	pop	r0
    68ac:	0f 90       	pop	r0
    68ae:	cf 91       	pop	r28
    68b0:	df 91       	pop	r29
    68b2:	08 95       	ret

000068b4 <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    68b4:	1f 92       	push	r1
    68b6:	0f 92       	push	r0
    68b8:	0f b6       	in	r0, 0x3f	; 63
    68ba:	0f 92       	push	r0
    68bc:	11 24       	eor	r1, r1
    68be:	2f 93       	push	r18
    68c0:	3f 93       	push	r19
    68c2:	4f 93       	push	r20
    68c4:	5f 93       	push	r21
    68c6:	6f 93       	push	r22
    68c8:	7f 93       	push	r23
    68ca:	8f 93       	push	r24
    68cc:	9f 93       	push	r25
    68ce:	af 93       	push	r26
    68d0:	bf 93       	push	r27
    68d2:	ef 93       	push	r30
    68d4:	ff 93       	push	r31
    68d6:	df 93       	push	r29
    68d8:	cf 93       	push	r28
    68da:	cd b7       	in	r28, 0x3d	; 61
    68dc:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULLPTR)
    68de:	80 91 b8 01 	lds	r24, 0x01B8
    68e2:	90 91 b9 01 	lds	r25, 0x01B9
    68e6:	00 97       	sbiw	r24, 0x00	; 0
    68e8:	29 f0       	breq	.+10     	; 0x68f4 <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    68ea:	e0 91 b8 01 	lds	r30, 0x01B8
    68ee:	f0 91 b9 01 	lds	r31, 0x01B9
    68f2:	09 95       	icall
	}
}
    68f4:	cf 91       	pop	r28
    68f6:	df 91       	pop	r29
    68f8:	ff 91       	pop	r31
    68fa:	ef 91       	pop	r30
    68fc:	bf 91       	pop	r27
    68fe:	af 91       	pop	r26
    6900:	9f 91       	pop	r25
    6902:	8f 91       	pop	r24
    6904:	7f 91       	pop	r23
    6906:	6f 91       	pop	r22
    6908:	5f 91       	pop	r21
    690a:	4f 91       	pop	r20
    690c:	3f 91       	pop	r19
    690e:	2f 91       	pop	r18
    6910:	0f 90       	pop	r0
    6912:	0f be       	out	0x3f, r0	; 63
    6914:	0f 90       	pop	r0
    6916:	1f 90       	pop	r1
    6918:	18 95       	reti

0000691a <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    691a:	1f 92       	push	r1
    691c:	0f 92       	push	r0
    691e:	0f b6       	in	r0, 0x3f	; 63
    6920:	0f 92       	push	r0
    6922:	11 24       	eor	r1, r1
    6924:	2f 93       	push	r18
    6926:	3f 93       	push	r19
    6928:	4f 93       	push	r20
    692a:	5f 93       	push	r21
    692c:	6f 93       	push	r22
    692e:	7f 93       	push	r23
    6930:	8f 93       	push	r24
    6932:	9f 93       	push	r25
    6934:	af 93       	push	r26
    6936:	bf 93       	push	r27
    6938:	ef 93       	push	r30
    693a:	ff 93       	push	r31
    693c:	df 93       	push	r29
    693e:	cf 93       	push	r28
    6940:	cd b7       	in	r28, 0x3d	; 61
    6942:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULLPTR)
    6944:	80 91 ba 01 	lds	r24, 0x01BA
    6948:	90 91 bb 01 	lds	r25, 0x01BB
    694c:	00 97       	sbiw	r24, 0x00	; 0
    694e:	29 f0       	breq	.+10     	; 0x695a <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    6950:	e0 91 ba 01 	lds	r30, 0x01BA
    6954:	f0 91 bb 01 	lds	r31, 0x01BB
    6958:	09 95       	icall
	}
}
    695a:	cf 91       	pop	r28
    695c:	df 91       	pop	r29
    695e:	ff 91       	pop	r31
    6960:	ef 91       	pop	r30
    6962:	bf 91       	pop	r27
    6964:	af 91       	pop	r26
    6966:	9f 91       	pop	r25
    6968:	8f 91       	pop	r24
    696a:	7f 91       	pop	r23
    696c:	6f 91       	pop	r22
    696e:	5f 91       	pop	r21
    6970:	4f 91       	pop	r20
    6972:	3f 91       	pop	r19
    6974:	2f 91       	pop	r18
    6976:	0f 90       	pop	r0
    6978:	0f be       	out	0x3f, r0	; 63
    697a:	0f 90       	pop	r0
    697c:	1f 90       	pop	r1
    697e:	18 95       	reti

00006980 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    6980:	1f 92       	push	r1
    6982:	0f 92       	push	r0
    6984:	0f b6       	in	r0, 0x3f	; 63
    6986:	0f 92       	push	r0
    6988:	11 24       	eor	r1, r1
    698a:	2f 93       	push	r18
    698c:	3f 93       	push	r19
    698e:	4f 93       	push	r20
    6990:	5f 93       	push	r21
    6992:	6f 93       	push	r22
    6994:	7f 93       	push	r23
    6996:	8f 93       	push	r24
    6998:	9f 93       	push	r25
    699a:	af 93       	push	r26
    699c:	bf 93       	push	r27
    699e:	ef 93       	push	r30
    69a0:	ff 93       	push	r31
    69a2:	df 93       	push	r29
    69a4:	cf 93       	push	r28
    69a6:	cd b7       	in	r28, 0x3d	; 61
    69a8:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULLPTR)
    69aa:	80 91 bc 01 	lds	r24, 0x01BC
    69ae:	90 91 bd 01 	lds	r25, 0x01BD
    69b2:	00 97       	sbiw	r24, 0x00	; 0
    69b4:	29 f0       	breq	.+10     	; 0x69c0 <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    69b6:	e0 91 bc 01 	lds	r30, 0x01BC
    69ba:	f0 91 bd 01 	lds	r31, 0x01BD
    69be:	09 95       	icall
	}
}
    69c0:	cf 91       	pop	r28
    69c2:	df 91       	pop	r29
    69c4:	ff 91       	pop	r31
    69c6:	ef 91       	pop	r30
    69c8:	bf 91       	pop	r27
    69ca:	af 91       	pop	r26
    69cc:	9f 91       	pop	r25
    69ce:	8f 91       	pop	r24
    69d0:	7f 91       	pop	r23
    69d2:	6f 91       	pop	r22
    69d4:	5f 91       	pop	r21
    69d6:	4f 91       	pop	r20
    69d8:	3f 91       	pop	r19
    69da:	2f 91       	pop	r18
    69dc:	0f 90       	pop	r0
    69de:	0f be       	out	0x3f, r0	; 63
    69e0:	0f 90       	pop	r0
    69e2:	1f 90       	pop	r1
    69e4:	18 95       	reti

000069e6 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    69e6:	1f 92       	push	r1
    69e8:	0f 92       	push	r0
    69ea:	0f b6       	in	r0, 0x3f	; 63
    69ec:	0f 92       	push	r0
    69ee:	11 24       	eor	r1, r1
    69f0:	2f 93       	push	r18
    69f2:	3f 93       	push	r19
    69f4:	4f 93       	push	r20
    69f6:	5f 93       	push	r21
    69f8:	6f 93       	push	r22
    69fa:	7f 93       	push	r23
    69fc:	8f 93       	push	r24
    69fe:	9f 93       	push	r25
    6a00:	af 93       	push	r26
    6a02:	bf 93       	push	r27
    6a04:	ef 93       	push	r30
    6a06:	ff 93       	push	r31
    6a08:	df 93       	push	r29
    6a0a:	cf 93       	push	r28
    6a0c:	cd b7       	in	r28, 0x3d	; 61
    6a0e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULLPTR)
    6a10:	80 91 be 01 	lds	r24, 0x01BE
    6a14:	90 91 bf 01 	lds	r25, 0x01BF
    6a18:	00 97       	sbiw	r24, 0x00	; 0
    6a1a:	29 f0       	breq	.+10     	; 0x6a26 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    6a1c:	e0 91 be 01 	lds	r30, 0x01BE
    6a20:	f0 91 bf 01 	lds	r31, 0x01BF
    6a24:	09 95       	icall
	}
}
    6a26:	cf 91       	pop	r28
    6a28:	df 91       	pop	r29
    6a2a:	ff 91       	pop	r31
    6a2c:	ef 91       	pop	r30
    6a2e:	bf 91       	pop	r27
    6a30:	af 91       	pop	r26
    6a32:	9f 91       	pop	r25
    6a34:	8f 91       	pop	r24
    6a36:	7f 91       	pop	r23
    6a38:	6f 91       	pop	r22
    6a3a:	5f 91       	pop	r21
    6a3c:	4f 91       	pop	r20
    6a3e:	3f 91       	pop	r19
    6a40:	2f 91       	pop	r18
    6a42:	0f 90       	pop	r0
    6a44:	0f be       	out	0x3f, r0	; 63
    6a46:	0f 90       	pop	r0
    6a48:	1f 90       	pop	r1
    6a4a:	18 95       	reti

00006a4c <check_equality>:




u8 check_equality(u8 *copy_pstring,u8 *copy_word)
{
    6a4c:	df 93       	push	r29
    6a4e:	cf 93       	push	r28
    6a50:	cd b7       	in	r28, 0x3d	; 61
    6a52:	de b7       	in	r29, 0x3e	; 62
    6a54:	27 97       	sbiw	r28, 0x07	; 7
    6a56:	0f b6       	in	r0, 0x3f	; 63
    6a58:	f8 94       	cli
    6a5a:	de bf       	out	0x3e, r29	; 62
    6a5c:	0f be       	out	0x3f, r0	; 63
    6a5e:	cd bf       	out	0x3d, r28	; 61
    6a60:	9d 83       	std	Y+5, r25	; 0x05
    6a62:	8c 83       	std	Y+4, r24	; 0x04
    6a64:	7f 83       	std	Y+7, r23	; 0x07
    6a66:	6e 83       	std	Y+6, r22	; 0x06
	u8 state =0;
    6a68:	1b 82       	std	Y+3, r1	; 0x03
	u8 flag=1;
    6a6a:	81 e0       	ldi	r24, 0x01	; 1
    6a6c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0;copy_word[i]!='\0';i++)
    6a6e:	19 82       	std	Y+1, r1	; 0x01
    6a70:	19 c0       	rjmp	.+50     	; 0x6aa4 <check_equality+0x58>
	{

		if(copy_word[i]!=copy_pstring[i])
    6a72:	89 81       	ldd	r24, Y+1	; 0x01
    6a74:	28 2f       	mov	r18, r24
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	8e 81       	ldd	r24, Y+6	; 0x06
    6a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    6a7c:	fc 01       	movw	r30, r24
    6a7e:	e2 0f       	add	r30, r18
    6a80:	f3 1f       	adc	r31, r19
    6a82:	40 81       	ld	r20, Z
    6a84:	89 81       	ldd	r24, Y+1	; 0x01
    6a86:	28 2f       	mov	r18, r24
    6a88:	30 e0       	ldi	r19, 0x00	; 0
    6a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    6a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    6a8e:	fc 01       	movw	r30, r24
    6a90:	e2 0f       	add	r30, r18
    6a92:	f3 1f       	adc	r31, r19
    6a94:	80 81       	ld	r24, Z
    6a96:	48 17       	cp	r20, r24
    6a98:	11 f0       	breq	.+4      	; 0x6a9e <check_equality+0x52>
		{
			flag=0;
    6a9a:	1a 82       	std	Y+2, r1	; 0x02
    6a9c:	0e c0       	rjmp	.+28     	; 0x6aba <check_equality+0x6e>

u8 check_equality(u8 *copy_pstring,u8 *copy_word)
{
	u8 state =0;
	u8 flag=1;
	for(u8 i=0;copy_word[i]!='\0';i++)
    6a9e:	89 81       	ldd	r24, Y+1	; 0x01
    6aa0:	8f 5f       	subi	r24, 0xFF	; 255
    6aa2:	89 83       	std	Y+1, r24	; 0x01
    6aa4:	89 81       	ldd	r24, Y+1	; 0x01
    6aa6:	28 2f       	mov	r18, r24
    6aa8:	30 e0       	ldi	r19, 0x00	; 0
    6aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    6aac:	9f 81       	ldd	r25, Y+7	; 0x07
    6aae:	fc 01       	movw	r30, r24
    6ab0:	e2 0f       	add	r30, r18
    6ab2:	f3 1f       	adc	r31, r19
    6ab4:	80 81       	ld	r24, Z
    6ab6:	88 23       	and	r24, r24
    6ab8:	e1 f6       	brne	.-72     	; 0x6a72 <check_equality+0x26>
	/*if(flag==1)
	{
		//UART_vidsendstring(copy_pstring);
		state=1;
	}*/
	return flag ;
    6aba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6abc:	27 96       	adiw	r28, 0x07	; 7
    6abe:	0f b6       	in	r0, 0x3f	; 63
    6ac0:	f8 94       	cli
    6ac2:	de bf       	out	0x3e, r29	; 62
    6ac4:	0f be       	out	0x3f, r0	; 63
    6ac6:	cd bf       	out	0x3d, r28	; 61
    6ac8:	cf 91       	pop	r28
    6aca:	df 91       	pop	r29
    6acc:	08 95       	ret

00006ace <main>:
int main(void)
{
    6ace:	af 92       	push	r10
    6ad0:	bf 92       	push	r11
    6ad2:	cf 92       	push	r12
    6ad4:	df 92       	push	r13
    6ad6:	ef 92       	push	r14
    6ad8:	ff 92       	push	r15
    6ada:	0f 93       	push	r16
    6adc:	1f 93       	push	r17
    6ade:	df 93       	push	r29
    6ae0:	cf 93       	push	r28
    6ae2:	cd b7       	in	r28, 0x3d	; 61
    6ae4:	de b7       	in	r29, 0x3e	; 62
    6ae6:	e9 97       	sbiw	r28, 0x39	; 57
    6ae8:	0f b6       	in	r0, 0x3f	; 63
    6aea:	f8 94       	cli
    6aec:	de bf       	out	0x3e, r29	; 62
    6aee:	0f be       	out	0x3f, r0	; 63
    6af0:	cd bf       	out	0x3d, r28	; 61
	u8 str[50] = "OK" ;
    6af2:	8f e4       	ldi	r24, 0x4F	; 79
    6af4:	9b e4       	ldi	r25, 0x4B	; 75
    6af6:	a0 e0       	ldi	r26, 0x00	; 0
    6af8:	b0 e0       	ldi	r27, 0x00	; 0
    6afa:	88 87       	std	Y+8, r24	; 0x08
    6afc:	99 87       	std	Y+9, r25	; 0x09
    6afe:	aa 87       	std	Y+10, r26	; 0x0a
    6b00:	bb 87       	std	Y+11, r27	; 0x0b
    6b02:	8e e2       	ldi	r24, 0x2E	; 46
    6b04:	fe 01       	movw	r30, r28
    6b06:	3c 96       	adiw	r30, 0x0c	; 12
    6b08:	df 01       	movw	r26, r30
    6b0a:	28 2f       	mov	r18, r24
    6b0c:	1d 92       	st	X+, r1
    6b0e:	2a 95       	dec	r18
    6b10:	e9 f7       	brne	.-6      	; 0x6b0c <main+0x3e>
	u16 temp , press ;
	DIO_Init()   ;
    6b12:	0e 94 b6 1a 	call	0x356c	; 0x356c <DIO_Init>
	LCD_Init()   ; 
    6b16:	0e 94 53 22 	call	0x44a6	; 0x44a6 <LCD_Init>
	ADC_Init(VREF_AVCC , ADC_SCALER_64) ;
    6b1a:	81 e0       	ldi	r24, 0x01	; 1
    6b1c:	66 e0       	ldi	r22, 0x06	; 6
    6b1e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <ADC_Init>
	SERVO_Init() ;
    6b22:	0e 94 10 30 	call	0x6020	; 0x6020 <SERVO_Init>
	SPI_SalveInit();
    6b26:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <SPI_SalveInit>
	sei() ;
    6b2a:	78 94       	sei
	while(1)
	{


		 LCD_GoTo(1,0) ;
    6b2c:	81 e0       	ldi	r24, 0x01	; 1
    6b2e:	60 e0       	ldi	r22, 0x00	; 0
    6b30:	0e 94 30 29 	call	0x5260	; 0x5260 <LCD_GoTo>
		 LCD_WriteString(str);
    6b34:	ce 01       	movw	r24, r28
    6b36:	08 96       	adiw	r24, 0x08	; 8
    6b38:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_WriteString>
		 press = PRESS_Read() ;
    6b3c:	0e 94 d0 2f 	call	0x5fa0	; 0x5fa0 <PRESS_Read>
    6b40:	9d 83       	std	Y+5, r25	; 0x05
    6b42:	8c 83       	std	Y+4, r24	; 0x04
		 temp = TEMP_Read() ;
    6b44:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <TEMP_Read>
    6b48:	9f 83       	std	Y+7, r25	; 0x07
    6b4a:	8e 83       	std	Y+6, r24	; 0x06
		 LCD_GoTo(0,0) ;
    6b4c:	80 e0       	ldi	r24, 0x00	; 0
    6b4e:	60 e0       	ldi	r22, 0x00	; 0
    6b50:	0e 94 30 29 	call	0x5260	; 0x5260 <LCD_GoTo>
		 LCD_WriteString("P=") ;
    6b54:	80 e6       	ldi	r24, 0x60	; 96
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_WriteString>
		 LCD_GoTo(0,3) ;
    6b5c:	80 e0       	ldi	r24, 0x00	; 0
    6b5e:	63 e0       	ldi	r22, 0x03	; 3
    6b60:	0e 94 30 29 	call	0x5260	; 0x5260 <LCD_GoTo>
		 LCD_WriteNumber(press) ;
    6b64:	8c 81       	ldd	r24, Y+4	; 0x04
    6b66:	9d 81       	ldd	r25, Y+5	; 0x05
    6b68:	5c 01       	movw	r10, r24
    6b6a:	cc 24       	eor	r12, r12
    6b6c:	dd 24       	eor	r13, r13
    6b6e:	ee 24       	eor	r14, r14
    6b70:	ff 24       	eor	r15, r15
    6b72:	87 01       	movw	r16, r14
    6b74:	2a 2d       	mov	r18, r10
    6b76:	3b 2d       	mov	r19, r11
    6b78:	4c 2d       	mov	r20, r12
    6b7a:	5d 2d       	mov	r21, r13
    6b7c:	6e 2d       	mov	r22, r14
    6b7e:	7f 2d       	mov	r23, r15
    6b80:	80 2f       	mov	r24, r16
    6b82:	91 2f       	mov	r25, r17
    6b84:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <LCD_WriteNumber>
		 LCD_GoTo(0,8) ;
    6b88:	80 e0       	ldi	r24, 0x00	; 0
    6b8a:	68 e0       	ldi	r22, 0x08	; 8
    6b8c:	0e 94 30 29 	call	0x5260	; 0x5260 <LCD_GoTo>
		 LCD_WriteString("T=") ;
    6b90:	83 e6       	ldi	r24, 0x63	; 99
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_WriteString>
		 LCD_GoTo(0,11) ;
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	6b e0       	ldi	r22, 0x0B	; 11
    6b9c:	0e 94 30 29 	call	0x5260	; 0x5260 <LCD_GoTo>
		 LCD_WriteNumber(temp) ;
    6ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    6ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    6ba4:	5c 01       	movw	r10, r24
    6ba6:	cc 24       	eor	r12, r12
    6ba8:	dd 24       	eor	r13, r13
    6baa:	ee 24       	eor	r14, r14
    6bac:	ff 24       	eor	r15, r15
    6bae:	87 01       	movw	r16, r14
    6bb0:	2a 2d       	mov	r18, r10
    6bb2:	3b 2d       	mov	r19, r11
    6bb4:	4c 2d       	mov	r20, r12
    6bb6:	5d 2d       	mov	r21, r13
    6bb8:	6e 2d       	mov	r22, r14
    6bba:	7f 2d       	mov	r23, r15
    6bbc:	80 2f       	mov	r24, r16
    6bbe:	91 2f       	mov	r25, r17
    6bc0:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <LCD_WriteNumber>
		 if(temp >= 500)
    6bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    6bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    6bc8:	a1 e0       	ldi	r26, 0x01	; 1
    6bca:	84 3f       	cpi	r24, 0xF4	; 244
    6bcc:	9a 07       	cpc	r25, r26
    6bce:	20 f0       	brcs	.+8      	; 0x6bd8 <main+0x10a>
		 {
			MOTOR_CW(MOTOR1);
    6bd0:	80 e0       	ldi	r24, 0x00	; 0
    6bd2:	0e 94 4b 29 	call	0x5296	; 0x5296 <MOTOR_CW>
    6bd6:	09 c0       	rjmp	.+18     	; 0x6bea <main+0x11c>
		 }
		 else if(temp < 480)
    6bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    6bda:	9f 81       	ldd	r25, Y+7	; 0x07
    6bdc:	b1 e0       	ldi	r27, 0x01	; 1
    6bde:	80 3e       	cpi	r24, 0xE0	; 224
    6be0:	9b 07       	cpc	r25, r27
    6be2:	18 f4       	brcc	.+6      	; 0x6bea <main+0x11c>
		 {
			 MOTOR_STOP(MOTOR1) ;
    6be4:	80 e0       	ldi	r24, 0x00	; 0
    6be6:	0e 94 b5 29 	call	0x536a	; 0x536a <MOTOR_STOP>
		 }
		 if(press >= 1000)
    6bea:	8c 81       	ldd	r24, Y+4	; 0x04
    6bec:	9d 81       	ldd	r25, Y+5	; 0x05
    6bee:	23 e0       	ldi	r18, 0x03	; 3
    6bf0:	88 3e       	cpi	r24, 0xE8	; 232
    6bf2:	92 07       	cpc	r25, r18
    6bf4:	20 f0       	brcs	.+8      	; 0x6bfe <main+0x130>
		 {
			SERVO_SetAngle(135);
    6bf6:	87 e8       	ldi	r24, 0x87	; 135
    6bf8:	0e 94 29 30 	call	0x6052	; 0x6052 <SERVO_SetAngle>
    6bfc:	09 c0       	rjmp	.+18     	; 0x6c10 <main+0x142>
		 }
		 else if(press < 980)
    6bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    6c00:	9d 81       	ldd	r25, Y+5	; 0x05
    6c02:	a3 e0       	ldi	r26, 0x03	; 3
    6c04:	84 3d       	cpi	r24, 0xD4	; 212
    6c06:	9a 07       	cpc	r25, r26
    6c08:	18 f4       	brcc	.+6      	; 0x6c10 <main+0x142>
		 {
			 SERVO_SetAngle(30);
    6c0a:	8e e1       	ldi	r24, 0x1E	; 30
    6c0c:	0e 94 29 30 	call	0x6052	; 0x6052 <SERVO_SetAngle>
		 }
		 if(!DIO_ReadPIN(PINB0))
    6c10:	88 e0       	ldi	r24, 0x08	; 8
    6c12:	0e 94 34 1a 	call	0x3468	; 0x3468 <DIO_ReadPIN>
    6c16:	88 23       	and	r24, r24
    6c18:	61 f4       	brne	.+24     	; 0x6c32 <main+0x164>
		{
		    SPI_ReceiveString(str) ;
    6c1a:	ce 01       	movw	r24, r28
    6c1c:	08 96       	adiw	r24, 0x08	; 8
    6c1e:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <SPI_ReceiveString>
		    LCD_GoTo(1,0) ;
    6c22:	81 e0       	ldi	r24, 0x01	; 1
    6c24:	60 e0       	ldi	r22, 0x00	; 0
    6c26:	0e 94 30 29 	call	0x5260	; 0x5260 <LCD_GoTo>
		    LCD_WriteString(str);
    6c2a:	ce 01       	movw	r24, r28
    6c2c:	08 96       	adiw	r24, 0x08	; 8
    6c2e:	0e 94 29 27 	call	0x4e52	; 0x4e52 <LCD_WriteString>

		 }
		 if(check_equality(str , "HELP"))
    6c32:	ce 01       	movw	r24, r28
    6c34:	08 96       	adiw	r24, 0x08	; 8
    6c36:	26 e6       	ldi	r18, 0x66	; 102
    6c38:	30 e0       	ldi	r19, 0x00	; 0
    6c3a:	b9 01       	movw	r22, r18
    6c3c:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <check_equality>
    6c40:	88 23       	and	r24, r24
    6c42:	f1 f0       	breq	.+60     	; 0x6c80 <main+0x1b2>
		 {
			 DIO_WritePIN(PINB2 , HIGH) ;
    6c44:	8a e0       	ldi	r24, 0x0A	; 10
    6c46:	61 e0       	ldi	r22, 0x01	; 1
    6c48:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
			 u8 i ;
			 for(i=0 ; str[i] ; ++i)
    6c4c:	1b 82       	std	Y+3, r1	; 0x03
    6c4e:	0c c0       	rjmp	.+24     	; 0x6c68 <main+0x19a>
			 {
				 str[i] = 0 ;
    6c50:	8b 81       	ldd	r24, Y+3	; 0x03
    6c52:	28 2f       	mov	r18, r24
    6c54:	30 e0       	ldi	r19, 0x00	; 0
    6c56:	ce 01       	movw	r24, r28
    6c58:	08 96       	adiw	r24, 0x08	; 8
    6c5a:	fc 01       	movw	r30, r24
    6c5c:	e2 0f       	add	r30, r18
    6c5e:	f3 1f       	adc	r31, r19
    6c60:	10 82       	st	Z, r1
		 }
		 if(check_equality(str , "HELP"))
		 {
			 DIO_WritePIN(PINB2 , HIGH) ;
			 u8 i ;
			 for(i=0 ; str[i] ; ++i)
    6c62:	8b 81       	ldd	r24, Y+3	; 0x03
    6c64:	8f 5f       	subi	r24, 0xFF	; 255
    6c66:	8b 83       	std	Y+3, r24	; 0x03
    6c68:	8b 81       	ldd	r24, Y+3	; 0x03
    6c6a:	28 2f       	mov	r18, r24
    6c6c:	30 e0       	ldi	r19, 0x00	; 0
    6c6e:	ce 01       	movw	r24, r28
    6c70:	08 96       	adiw	r24, 0x08	; 8
    6c72:	fc 01       	movw	r30, r24
    6c74:	e2 0f       	add	r30, r18
    6c76:	f3 1f       	adc	r31, r19
    6c78:	80 81       	ld	r24, Z
    6c7a:	88 23       	and	r24, r24
    6c7c:	49 f7       	brne	.-46     	; 0x6c50 <main+0x182>
    6c7e:	56 cf       	rjmp	.-340    	; 0x6b2c <main+0x5e>
			 {
				 str[i] = 0 ;
			 }
		 }

		else if (check_equality(str , "SOS"))
    6c80:	ce 01       	movw	r24, r28
    6c82:	08 96       	adiw	r24, 0x08	; 8
    6c84:	2b e6       	ldi	r18, 0x6B	; 107
    6c86:	30 e0       	ldi	r19, 0x00	; 0
    6c88:	b9 01       	movw	r22, r18
    6c8a:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <check_equality>
    6c8e:	88 23       	and	r24, r24
    6c90:	f1 f0       	breq	.+60     	; 0x6cce <main+0x200>
		 {

			 DIO_WritePIN(PINB1 , HIGH) ;
    6c92:	89 e0       	ldi	r24, 0x09	; 9
    6c94:	61 e0       	ldi	r22, 0x01	; 1
    6c96:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
			 u8 i ;
			 for(i=0 ; str[i] ; ++i)
    6c9a:	1a 82       	std	Y+2, r1	; 0x02
    6c9c:	0c c0       	rjmp	.+24     	; 0x6cb6 <main+0x1e8>
			 {
			 	str[i] = 0 ;
    6c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    6ca0:	28 2f       	mov	r18, r24
    6ca2:	30 e0       	ldi	r19, 0x00	; 0
    6ca4:	ce 01       	movw	r24, r28
    6ca6:	08 96       	adiw	r24, 0x08	; 8
    6ca8:	fc 01       	movw	r30, r24
    6caa:	e2 0f       	add	r30, r18
    6cac:	f3 1f       	adc	r31, r19
    6cae:	10 82       	st	Z, r1
		else if (check_equality(str , "SOS"))
		 {

			 DIO_WritePIN(PINB1 , HIGH) ;
			 u8 i ;
			 for(i=0 ; str[i] ; ++i)
    6cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb2:	8f 5f       	subi	r24, 0xFF	; 255
    6cb4:	8a 83       	std	Y+2, r24	; 0x02
    6cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb8:	28 2f       	mov	r18, r24
    6cba:	30 e0       	ldi	r19, 0x00	; 0
    6cbc:	ce 01       	movw	r24, r28
    6cbe:	08 96       	adiw	r24, 0x08	; 8
    6cc0:	fc 01       	movw	r30, r24
    6cc2:	e2 0f       	add	r30, r18
    6cc4:	f3 1f       	adc	r31, r19
    6cc6:	80 81       	ld	r24, Z
    6cc8:	88 23       	and	r24, r24
    6cca:	49 f7       	brne	.-46     	; 0x6c9e <main+0x1d0>
    6ccc:	2f cf       	rjmp	.-418    	; 0x6b2c <main+0x5e>
			 {
			 	str[i] = 0 ;
			 }

		 }
		 else if (check_equality(str , "OK"))
    6cce:	ce 01       	movw	r24, r28
    6cd0:	08 96       	adiw	r24, 0x08	; 8
    6cd2:	2f e6       	ldi	r18, 0x6F	; 111
    6cd4:	30 e0       	ldi	r19, 0x00	; 0
    6cd6:	b9 01       	movw	r22, r18
    6cd8:	0e 94 26 35 	call	0x6a4c	; 0x6a4c <check_equality>
    6cdc:	88 23       	and	r24, r24
    6cde:	09 f4       	brne	.+2      	; 0x6ce2 <main+0x214>
    6ce0:	25 cf       	rjmp	.-438    	; 0x6b2c <main+0x5e>
		 {
			 DIO_WritePIN(PINB2 , LOW) ;
    6ce2:	8a e0       	ldi	r24, 0x0A	; 10
    6ce4:	60 e0       	ldi	r22, 0x00	; 0
    6ce6:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
			 DIO_WritePIN(PINB1 , LOW) ;
    6cea:	89 e0       	ldi	r24, 0x09	; 9
    6cec:	60 e0       	ldi	r22, 0x00	; 0
    6cee:	0e 94 2d 19 	call	0x325a	; 0x325a <DIO_WritePIN>
			 u8 i ;
			 for(i=0 ; str[i] ; ++i)
    6cf2:	19 82       	std	Y+1, r1	; 0x01
    6cf4:	0c c0       	rjmp	.+24     	; 0x6d0e <main+0x240>
			  {
			 	 str[i] = 0 ;
    6cf6:	89 81       	ldd	r24, Y+1	; 0x01
    6cf8:	28 2f       	mov	r18, r24
    6cfa:	30 e0       	ldi	r19, 0x00	; 0
    6cfc:	ce 01       	movw	r24, r28
    6cfe:	08 96       	adiw	r24, 0x08	; 8
    6d00:	fc 01       	movw	r30, r24
    6d02:	e2 0f       	add	r30, r18
    6d04:	f3 1f       	adc	r31, r19
    6d06:	10 82       	st	Z, r1
		 else if (check_equality(str , "OK"))
		 {
			 DIO_WritePIN(PINB2 , LOW) ;
			 DIO_WritePIN(PINB1 , LOW) ;
			 u8 i ;
			 for(i=0 ; str[i] ; ++i)
    6d08:	89 81       	ldd	r24, Y+1	; 0x01
    6d0a:	8f 5f       	subi	r24, 0xFF	; 255
    6d0c:	89 83       	std	Y+1, r24	; 0x01
    6d0e:	89 81       	ldd	r24, Y+1	; 0x01
    6d10:	28 2f       	mov	r18, r24
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	ce 01       	movw	r24, r28
    6d16:	08 96       	adiw	r24, 0x08	; 8
    6d18:	fc 01       	movw	r30, r24
    6d1a:	e2 0f       	add	r30, r18
    6d1c:	f3 1f       	adc	r31, r19
    6d1e:	80 81       	ld	r24, Z
    6d20:	88 23       	and	r24, r24
    6d22:	49 f7       	brne	.-46     	; 0x6cf6 <main+0x228>
    6d24:	03 cf       	rjmp	.-506    	; 0x6b2c <main+0x5e>

00006d26 <__mulsi3>:
    6d26:	62 9f       	mul	r22, r18
    6d28:	d0 01       	movw	r26, r0
    6d2a:	73 9f       	mul	r23, r19
    6d2c:	f0 01       	movw	r30, r0
    6d2e:	82 9f       	mul	r24, r18
    6d30:	e0 0d       	add	r30, r0
    6d32:	f1 1d       	adc	r31, r1
    6d34:	64 9f       	mul	r22, r20
    6d36:	e0 0d       	add	r30, r0
    6d38:	f1 1d       	adc	r31, r1
    6d3a:	92 9f       	mul	r25, r18
    6d3c:	f0 0d       	add	r31, r0
    6d3e:	83 9f       	mul	r24, r19
    6d40:	f0 0d       	add	r31, r0
    6d42:	74 9f       	mul	r23, r20
    6d44:	f0 0d       	add	r31, r0
    6d46:	65 9f       	mul	r22, r21
    6d48:	f0 0d       	add	r31, r0
    6d4a:	99 27       	eor	r25, r25
    6d4c:	72 9f       	mul	r23, r18
    6d4e:	b0 0d       	add	r27, r0
    6d50:	e1 1d       	adc	r30, r1
    6d52:	f9 1f       	adc	r31, r25
    6d54:	63 9f       	mul	r22, r19
    6d56:	b0 0d       	add	r27, r0
    6d58:	e1 1d       	adc	r30, r1
    6d5a:	f9 1f       	adc	r31, r25
    6d5c:	bd 01       	movw	r22, r26
    6d5e:	cf 01       	movw	r24, r30
    6d60:	11 24       	eor	r1, r1
    6d62:	08 95       	ret

00006d64 <__udivmodhi4>:
    6d64:	aa 1b       	sub	r26, r26
    6d66:	bb 1b       	sub	r27, r27
    6d68:	51 e1       	ldi	r21, 0x11	; 17
    6d6a:	07 c0       	rjmp	.+14     	; 0x6d7a <__udivmodhi4_ep>

00006d6c <__udivmodhi4_loop>:
    6d6c:	aa 1f       	adc	r26, r26
    6d6e:	bb 1f       	adc	r27, r27
    6d70:	a6 17       	cp	r26, r22
    6d72:	b7 07       	cpc	r27, r23
    6d74:	10 f0       	brcs	.+4      	; 0x6d7a <__udivmodhi4_ep>
    6d76:	a6 1b       	sub	r26, r22
    6d78:	b7 0b       	sbc	r27, r23

00006d7a <__udivmodhi4_ep>:
    6d7a:	88 1f       	adc	r24, r24
    6d7c:	99 1f       	adc	r25, r25
    6d7e:	5a 95       	dec	r21
    6d80:	a9 f7       	brne	.-22     	; 0x6d6c <__udivmodhi4_loop>
    6d82:	80 95       	com	r24
    6d84:	90 95       	com	r25
    6d86:	bc 01       	movw	r22, r24
    6d88:	cd 01       	movw	r24, r26
    6d8a:	08 95       	ret

00006d8c <__udivmodsi4>:
    6d8c:	a1 e2       	ldi	r26, 0x21	; 33
    6d8e:	1a 2e       	mov	r1, r26
    6d90:	aa 1b       	sub	r26, r26
    6d92:	bb 1b       	sub	r27, r27
    6d94:	fd 01       	movw	r30, r26
    6d96:	0d c0       	rjmp	.+26     	; 0x6db2 <__udivmodsi4_ep>

00006d98 <__udivmodsi4_loop>:
    6d98:	aa 1f       	adc	r26, r26
    6d9a:	bb 1f       	adc	r27, r27
    6d9c:	ee 1f       	adc	r30, r30
    6d9e:	ff 1f       	adc	r31, r31
    6da0:	a2 17       	cp	r26, r18
    6da2:	b3 07       	cpc	r27, r19
    6da4:	e4 07       	cpc	r30, r20
    6da6:	f5 07       	cpc	r31, r21
    6da8:	20 f0       	brcs	.+8      	; 0x6db2 <__udivmodsi4_ep>
    6daa:	a2 1b       	sub	r26, r18
    6dac:	b3 0b       	sbc	r27, r19
    6dae:	e4 0b       	sbc	r30, r20
    6db0:	f5 0b       	sbc	r31, r21

00006db2 <__udivmodsi4_ep>:
    6db2:	66 1f       	adc	r22, r22
    6db4:	77 1f       	adc	r23, r23
    6db6:	88 1f       	adc	r24, r24
    6db8:	99 1f       	adc	r25, r25
    6dba:	1a 94       	dec	r1
    6dbc:	69 f7       	brne	.-38     	; 0x6d98 <__udivmodsi4_loop>
    6dbe:	60 95       	com	r22
    6dc0:	70 95       	com	r23
    6dc2:	80 95       	com	r24
    6dc4:	90 95       	com	r25
    6dc6:	9b 01       	movw	r18, r22
    6dc8:	ac 01       	movw	r20, r24
    6dca:	bd 01       	movw	r22, r26
    6dcc:	cf 01       	movw	r24, r30
    6dce:	08 95       	ret

00006dd0 <__prologue_saves__>:
    6dd0:	2f 92       	push	r2
    6dd2:	3f 92       	push	r3
    6dd4:	4f 92       	push	r4
    6dd6:	5f 92       	push	r5
    6dd8:	6f 92       	push	r6
    6dda:	7f 92       	push	r7
    6ddc:	8f 92       	push	r8
    6dde:	9f 92       	push	r9
    6de0:	af 92       	push	r10
    6de2:	bf 92       	push	r11
    6de4:	cf 92       	push	r12
    6de6:	df 92       	push	r13
    6de8:	ef 92       	push	r14
    6dea:	ff 92       	push	r15
    6dec:	0f 93       	push	r16
    6dee:	1f 93       	push	r17
    6df0:	cf 93       	push	r28
    6df2:	df 93       	push	r29
    6df4:	cd b7       	in	r28, 0x3d	; 61
    6df6:	de b7       	in	r29, 0x3e	; 62
    6df8:	ca 1b       	sub	r28, r26
    6dfa:	db 0b       	sbc	r29, r27
    6dfc:	0f b6       	in	r0, 0x3f	; 63
    6dfe:	f8 94       	cli
    6e00:	de bf       	out	0x3e, r29	; 62
    6e02:	0f be       	out	0x3f, r0	; 63
    6e04:	cd bf       	out	0x3d, r28	; 61
    6e06:	09 94       	ijmp

00006e08 <__epilogue_restores__>:
    6e08:	2a 88       	ldd	r2, Y+18	; 0x12
    6e0a:	39 88       	ldd	r3, Y+17	; 0x11
    6e0c:	48 88       	ldd	r4, Y+16	; 0x10
    6e0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6e10:	6e 84       	ldd	r6, Y+14	; 0x0e
    6e12:	7d 84       	ldd	r7, Y+13	; 0x0d
    6e14:	8c 84       	ldd	r8, Y+12	; 0x0c
    6e16:	9b 84       	ldd	r9, Y+11	; 0x0b
    6e18:	aa 84       	ldd	r10, Y+10	; 0x0a
    6e1a:	b9 84       	ldd	r11, Y+9	; 0x09
    6e1c:	c8 84       	ldd	r12, Y+8	; 0x08
    6e1e:	df 80       	ldd	r13, Y+7	; 0x07
    6e20:	ee 80       	ldd	r14, Y+6	; 0x06
    6e22:	fd 80       	ldd	r15, Y+5	; 0x05
    6e24:	0c 81       	ldd	r16, Y+4	; 0x04
    6e26:	1b 81       	ldd	r17, Y+3	; 0x03
    6e28:	aa 81       	ldd	r26, Y+2	; 0x02
    6e2a:	b9 81       	ldd	r27, Y+1	; 0x01
    6e2c:	ce 0f       	add	r28, r30
    6e2e:	d1 1d       	adc	r29, r1
    6e30:	0f b6       	in	r0, 0x3f	; 63
    6e32:	f8 94       	cli
    6e34:	de bf       	out	0x3e, r29	; 62
    6e36:	0f be       	out	0x3f, r0	; 63
    6e38:	cd bf       	out	0x3d, r28	; 61
    6e3a:	ed 01       	movw	r28, r26
    6e3c:	08 95       	ret

00006e3e <_exit>:
    6e3e:	f8 94       	cli

00006e40 <__stop_program>:
    6e40:	ff cf       	rjmp	.-2      	; 0x6e40 <__stop_program>
