
000-GENERATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  000062b8  0000634c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000078  008001a0  008001a0  0000648c  2**0
                  ALLOC
  3 .stab         00003594  00000000  00000000  0000648c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001493  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000aeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ce  00000000  00000000  0000b033  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002bc9  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001293  00000000  00000000  0000ddca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012d1  00000000  00000000  0000f05d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00010330  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031b  00000000  00000000  000104d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021c0  00000000  00000000  000107eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000129ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__vector_1>
       8:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__vector_2>
       c:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <main>
      8a:	0c 94 5a 31 	jmp	0x62b4	; 0x62b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 ae 13 	call	0x275c	; 0x275c <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 26 12 	call	0x244c	; 0x244c <__subsf3>
      be:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 0e 14 	call	0x281c	; 0x281c <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__divdi3>:
      ea:	a2 e7       	ldi	r26, 0x72	; 114
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 31 	jmp	0x6246	; 0x6246 <__prologue_saves__>
      f6:	98 2e       	mov	r9, r24
      f8:	89 2e       	mov	r8, r25
      fa:	71 2e       	mov	r7, r17
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	fe 01       	movw	r30, r28
     100:	31 96       	adiw	r30, 0x01	; 1
     102:	df 01       	movw	r26, r30
     104:	68 2e       	mov	r6, r24
     106:	1d 92       	st	X+, r1
     108:	6a 94       	dec	r6
     10a:	e9 f7       	brne	.-6      	; 0x106 <__divdi3+0x1c>
     10c:	29 83       	std	Y+1, r18	; 0x01
     10e:	3a 83       	std	Y+2, r19	; 0x02
     110:	4b 83       	std	Y+3, r20	; 0x03
     112:	5c 83       	std	Y+4, r21	; 0x04
     114:	6d 83       	std	Y+5, r22	; 0x05
     116:	7e 83       	std	Y+6, r23	; 0x06
     118:	9f 82       	std	Y+7, r9	; 0x07
     11a:	98 87       	std	Y+8, r25	; 0x08
     11c:	fe 01       	movw	r30, r28
     11e:	39 96       	adiw	r30, 0x09	; 9
     120:	df 01       	movw	r26, r30
     122:	1d 92       	st	X+, r1
     124:	8a 95       	dec	r24
     126:	e9 f7       	brne	.-6      	; 0x122 <__divdi3+0x38>
     128:	a9 86       	std	Y+9, r10	; 0x09
     12a:	ba 86       	std	Y+10, r11	; 0x0a
     12c:	cb 86       	std	Y+11, r12	; 0x0b
     12e:	dc 86       	std	Y+12, r13	; 0x0c
     130:	ed 86       	std	Y+13, r14	; 0x0d
     132:	fe 86       	std	Y+14, r15	; 0x0e
     134:	0f 87       	std	Y+15, r16	; 0x0f
     136:	18 8b       	std	Y+16, r17	; 0x10
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	9e 81       	ldd	r25, Y+6	; 0x06
     13c:	af 81       	ldd	r26, Y+7	; 0x07
     13e:	b8 85       	ldd	r27, Y+8	; 0x08
     140:	b7 fd       	sbrc	r27, 7
     142:	07 c0       	rjmp	.+14     	; 0x152 <__divdi3+0x68>
     144:	e1 96       	adiw	r28, 0x31	; 49
     146:	1c ae       	std	Y+60, r1	; 0x3c
     148:	1d ae       	std	Y+61, r1	; 0x3d
     14a:	1e ae       	std	Y+62, r1	; 0x3e
     14c:	1f ae       	std	Y+63, r1	; 0x3f
     14e:	e1 97       	sbiw	r28, 0x31	; 49
     150:	64 c0       	rjmp	.+200    	; 0x21a <__divdi3+0x130>
     152:	21 95       	neg	r18
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	12 16       	cp	r1, r18
     158:	08 f0       	brcs	.+2      	; 0x15c <__divdi3+0x72>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	31 95       	neg	r19
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	13 16       	cp	r1, r19
     162:	08 f0       	brcs	.+2      	; 0x166 <__divdi3+0x7c>
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	b3 2f       	mov	r27, r19
     168:	b8 1b       	sub	r27, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	3b 17       	cp	r19, r27
     16e:	08 f0       	brcs	.+2      	; 0x172 <__divdi3+0x88>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	98 2b       	or	r25, r24
     174:	41 95       	neg	r20
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	14 16       	cp	r1, r20
     17a:	08 f0       	brcs	.+2      	; 0x17e <__divdi3+0x94>
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a4 2f       	mov	r26, r20
     180:	a9 1b       	sub	r26, r25
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	4a 17       	cp	r20, r26
     186:	08 f0       	brcs	.+2      	; 0x18a <__divdi3+0xa0>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	38 2b       	or	r19, r24
     18c:	51 95       	neg	r21
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	15 16       	cp	r1, r21
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0xac>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	f5 2f       	mov	r31, r21
     198:	f3 1b       	sub	r31, r19
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	5f 17       	cp	r21, r31
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__divdi3+0xb8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	98 2b       	or	r25, r24
     1a4:	61 95       	neg	r22
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	16 16       	cp	r1, r22
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <__divdi3+0xc4>
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	e6 2f       	mov	r30, r22
     1b0:	e9 1b       	sub	r30, r25
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	6e 17       	cp	r22, r30
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <__divdi3+0xd0>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	38 2b       	or	r19, r24
     1bc:	71 95       	neg	r23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	17 16       	cp	r1, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__divdi3+0xdc>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	57 2f       	mov	r21, r23
     1c8:	53 1b       	sub	r21, r19
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	75 17       	cp	r23, r21
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__divdi3+0xe8>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	48 2b       	or	r20, r24
     1d4:	89 2d       	mov	r24, r9
     1d6:	81 95       	neg	r24
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	18 16       	cp	r1, r24
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__divdi3+0xf6>
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 2e       	mov	r6, r24
     1e2:	64 1a       	sub	r6, r20
     1e4:	46 2d       	mov	r20, r6
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	86 15       	cp	r24, r6
     1ea:	08 f0       	brcs	.+2      	; 0x1ee <__divdi3+0x104>
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	93 2b       	or	r25, r19
     1f0:	88 2d       	mov	r24, r8
     1f2:	81 95       	neg	r24
     1f4:	89 1b       	sub	r24, r25
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	ba 83       	std	Y+2, r27	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	fc 83       	std	Y+4, r31	; 0x04
     1fe:	ed 83       	std	Y+5, r30	; 0x05
     200:	5e 83       	std	Y+6, r21	; 0x06
     202:	4f 83       	std	Y+7, r20	; 0x07
     204:	88 87       	std	Y+8, r24	; 0x08
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	2c af       	std	Y+60, r18	; 0x3c
     212:	3d af       	std	Y+61, r19	; 0x3d
     214:	4e af       	std	Y+62, r20	; 0x3e
     216:	5f af       	std	Y+63, r21	; 0x3f
     218:	e1 97       	sbiw	r28, 0x31	; 49
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	af 85       	ldd	r26, Y+15	; 0x0f
     220:	b8 89       	ldd	r27, Y+16	; 0x10
     222:	b7 ff       	sbrs	r27, 7
     224:	6a c0       	rjmp	.+212    	; 0x2fa <__divdi3+0x210>
     226:	e1 96       	adiw	r28, 0x31	; 49
     228:	4c ad       	ldd	r20, Y+60	; 0x3c
     22a:	5d ad       	ldd	r21, Y+61	; 0x3d
     22c:	6e ad       	ldd	r22, Y+62	; 0x3e
     22e:	7f ad       	ldd	r23, Y+63	; 0x3f
     230:	e1 97       	sbiw	r28, 0x31	; 49
     232:	40 95       	com	r20
     234:	50 95       	com	r21
     236:	60 95       	com	r22
     238:	70 95       	com	r23
     23a:	e1 96       	adiw	r28, 0x31	; 49
     23c:	4c af       	std	Y+60, r20	; 0x3c
     23e:	5d af       	std	Y+61, r21	; 0x3d
     240:	6e af       	std	Y+62, r22	; 0x3e
     242:	7f af       	std	Y+63, r23	; 0x3f
     244:	e1 97       	sbiw	r28, 0x31	; 49
     246:	a1 94       	neg	r10
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	1a 14       	cp	r1, r10
     24c:	08 f0       	brcs	.+2      	; 0x250 <__divdi3+0x166>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	b1 94       	neg	r11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	1b 14       	cp	r1, r11
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x170>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b 2d       	mov	r22, r11
     25c:	68 1b       	sub	r22, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	b6 16       	cp	r11, r22
     262:	08 f0       	brcs	.+2      	; 0x266 <__divdi3+0x17c>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	98 2b       	or	r25, r24
     268:	c1 94       	neg	r12
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	1c 14       	cp	r1, r12
     26e:	08 f0       	brcs	.+2      	; 0x272 <__divdi3+0x188>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	5c 2d       	mov	r21, r12
     274:	59 1b       	sub	r21, r25
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	c5 16       	cp	r12, r21
     27a:	08 f0       	brcs	.+2      	; 0x27e <__divdi3+0x194>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	28 2b       	or	r18, r24
     280:	d1 94       	neg	r13
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	1d 14       	cp	r1, r13
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1a0>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	4d 2d       	mov	r20, r13
     28c:	42 1b       	sub	r20, r18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	d4 16       	cp	r13, r20
     292:	08 f0       	brcs	.+2      	; 0x296 <__divdi3+0x1ac>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	98 2b       	or	r25, r24
     298:	e1 94       	neg	r14
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	1e 14       	cp	r1, r14
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <__divdi3+0x1b8>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	3e 2d       	mov	r19, r14
     2a4:	39 1b       	sub	r19, r25
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	e3 16       	cp	r14, r19
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__divdi3+0x1c4>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	28 2b       	or	r18, r24
     2b0:	f1 94       	neg	r15
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	1f 14       	cp	r1, r15
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__divdi3+0x1d0>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	7f 2d       	mov	r23, r15
     2bc:	72 1b       	sub	r23, r18
     2be:	27 2f       	mov	r18, r23
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	f7 16       	cp	r15, r23
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__divdi3+0x1de>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	98 2b       	or	r25, r24
     2ca:	01 95       	neg	r16
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	10 16       	cp	r1, r16
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__divdi3+0x1ea>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	80 2f       	mov	r24, r16
     2d6:	89 1b       	sub	r24, r25
     2d8:	98 2f       	mov	r25, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	09 17       	cp	r16, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__divdi3+0x1f8>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	18 2b       	or	r17, r24
     2e4:	87 2d       	mov	r24, r7
     2e6:	81 95       	neg	r24
     2e8:	81 1b       	sub	r24, r17
     2ea:	a9 86       	std	Y+9, r10	; 0x09
     2ec:	6a 87       	std	Y+10, r22	; 0x0a
     2ee:	5b 87       	std	Y+11, r21	; 0x0b
     2f0:	4c 87       	std	Y+12, r20	; 0x0c
     2f2:	3d 87       	std	Y+13, r19	; 0x0d
     2f4:	2e 87       	std	Y+14, r18	; 0x0e
     2f6:	9f 87       	std	Y+15, r25	; 0x0f
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	4c 81       	ldd	r20, Y+4	; 0x04
     302:	5d 81       	ldd	r21, Y+5	; 0x05
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	a8 85       	ldd	r26, Y+8	; 0x08
     30a:	b9 85       	ldd	r27, Y+9	; 0x09
     30c:	1a 85       	ldd	r17, Y+10	; 0x0a
     30e:	0b 85       	ldd	r16, Y+11	; 0x0b
     310:	fc 84       	ldd	r15, Y+12	; 0x0c
     312:	ed 84       	ldd	r14, Y+13	; 0x0d
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	cf 84       	ldd	r12, Y+15	; 0x0f
     318:	b8 88       	ldd	r11, Y+16	; 0x10
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	e1 e1       	ldi	r30, 0x11	; 17
     31e:	8e 2e       	mov	r8, r30
     320:	91 2c       	mov	r9, r1
     322:	8c 0e       	add	r8, r28
     324:	9d 1e       	adc	r9, r29
     326:	f4 01       	movw	r30, r8
     328:	68 2e       	mov	r6, r24
     32a:	11 92       	st	Z+, r1
     32c:	6a 94       	dec	r6
     32e:	e9 f7       	brne	.-6      	; 0x32a <__divdi3+0x240>
     330:	99 8b       	std	Y+17, r25	; 0x11
     332:	2a 8b       	std	Y+18, r18	; 0x12
     334:	3b 8b       	std	Y+19, r19	; 0x13
     336:	4c 8b       	std	Y+20, r20	; 0x14
     338:	5d 8b       	std	Y+21, r21	; 0x15
     33a:	6e 8b       	std	Y+22, r22	; 0x16
     33c:	7f 8b       	std	Y+23, r23	; 0x17
     33e:	a8 8f       	std	Y+24, r26	; 0x18
     340:	9e 01       	movw	r18, r28
     342:	27 5e       	subi	r18, 0xE7	; 231
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	11 92       	st	Z+, r1
     34a:	8a 95       	dec	r24
     34c:	e9 f7       	brne	.-6      	; 0x348 <__divdi3+0x25e>
     34e:	b9 8f       	std	Y+25, r27	; 0x19
     350:	1a 8f       	std	Y+26, r17	; 0x1a
     352:	0b 8f       	std	Y+27, r16	; 0x1b
     354:	fc 8e       	std	Y+28, r15	; 0x1c
     356:	ed 8e       	std	Y+29, r14	; 0x1d
     358:	de 8e       	std	Y+30, r13	; 0x1e
     35a:	cf 8e       	std	Y+31, r12	; 0x1f
     35c:	b8 a2       	std	Y+32, r11	; 0x20
     35e:	29 8c       	ldd	r2, Y+25	; 0x19
     360:	3a 8c       	ldd	r3, Y+26	; 0x1a
     362:	4b 8c       	ldd	r4, Y+27	; 0x1b
     364:	5c 8c       	ldd	r5, Y+28	; 0x1c
     366:	ed 8c       	ldd	r14, Y+29	; 0x1d
     368:	fe 8c       	ldd	r15, Y+30	; 0x1e
     36a:	0f 8d       	ldd	r16, Y+31	; 0x1f
     36c:	18 a1       	ldd	r17, Y+32	; 0x20
     36e:	69 88       	ldd	r6, Y+17	; 0x11
     370:	7a 88       	ldd	r7, Y+18	; 0x12
     372:	8b 88       	ldd	r8, Y+19	; 0x13
     374:	9c 88       	ldd	r9, Y+20	; 0x14
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	6c ae       	std	Y+60, r6	; 0x3c
     37a:	7d ae       	std	Y+61, r7	; 0x3d
     37c:	8e ae       	std	Y+62, r8	; 0x3e
     37e:	9f ae       	std	Y+63, r9	; 0x3f
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	6d 88       	ldd	r6, Y+21	; 0x15
     384:	7e 88       	ldd	r7, Y+22	; 0x16
     386:	8f 88       	ldd	r8, Y+23	; 0x17
     388:	98 8c       	ldd	r9, Y+24	; 0x18
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__divdi3+0x2ac>
     394:	d9 c3       	rjmp	.+1970   	; 0xb48 <__stack+0x2e9>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__divdi3+0x2b8>
     3a0:	57 c1       	rjmp	.+686    	; 0x650 <__divdi3+0x566>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__divdi3+0x2ec>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__divdi3+0x2e4>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__divdi3+0x2e4>
     3c2:	48 e0       	ldi	r20, 0x08	; 8
     3c4:	e4 2e       	mov	r14, r20
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__divdi3+0x314>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__divdi3+0x314>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	22 16       	cp	r2, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	32 06       	cpc	r3, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	42 06       	cpc	r4, r18
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	52 06       	cpc	r5, r18
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__divdi3+0x30a>
     3e8:	38 e1       	ldi	r19, 0x18	; 24
     3ea:	e3 2e       	mov	r14, r19
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__divdi3+0x314>
     3f4:	20 e1       	ldi	r18, 0x10	; 16
     3f6:	e2 2e       	mov	r14, r18
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__divdi3+0x324>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__divdi3+0x31c>
     412:	83 58       	subi	r24, 0x83	; 131
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	7c 01       	movw	r14, r24
     42c:	8d 01       	movw	r16, r26
     42e:	e2 1a       	sub	r14, r18
     430:	f1 08       	sbc	r15, r1
     432:	01 09       	sbc	r16, r1
     434:	11 09       	sbc	r17, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	01 05       	cpc	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <__divdi3+0x3ca>
     440:	0e 2c       	mov	r0, r14
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x362>
     444:	22 0c       	add	r2, r2
     446:	33 1c       	adc	r3, r3
     448:	44 1c       	adc	r4, r4
     44a:	55 1c       	adc	r5, r5
     44c:	0a 94       	dec	r0
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x35a>
     450:	a4 01       	movw	r20, r8
     452:	93 01       	movw	r18, r6
     454:	0e 2c       	mov	r0, r14
     456:	04 c0       	rjmp	.+8      	; 0x460 <__divdi3+0x376>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	44 1f       	adc	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <__divdi3+0x36e>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8e 19       	sub	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	6c ac       	ldd	r6, Y+60	; 0x3c
     470:	7d ac       	ldd	r7, Y+61	; 0x3d
     472:	8e ac       	ldd	r8, Y+62	; 0x3e
     474:	9f ac       	ldd	r9, Y+63	; 0x3f
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	04 c0       	rjmp	.+8      	; 0x482 <__divdi3+0x398>
     47a:	96 94       	lsr	r9
     47c:	87 94       	ror	r8
     47e:	77 94       	ror	r7
     480:	67 94       	ror	r6
     482:	8a 95       	dec	r24
     484:	d2 f7       	brpl	.-12     	; 0x47a <__divdi3+0x390>
     486:	62 2a       	or	r6, r18
     488:	73 2a       	or	r7, r19
     48a:	84 2a       	or	r8, r20
     48c:	95 2a       	or	r9, r21
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	ac ac       	ldd	r10, Y+60	; 0x3c
     492:	bd ac       	ldd	r11, Y+61	; 0x3d
     494:	ce ac       	ldd	r12, Y+62	; 0x3e
     496:	df ac       	ldd	r13, Y+63	; 0x3f
     498:	21 97       	sbiw	r28, 0x01	; 1
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__divdi3+0x3ba>
     49c:	aa 0c       	add	r10, r10
     49e:	bb 1c       	adc	r11, r11
     4a0:	cc 1c       	adc	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ea 94       	dec	r14
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <__divdi3+0x3b2>
     4a8:	21 96       	adiw	r28, 0x01	; 1
     4aa:	ac ae       	std	Y+60, r10	; 0x3c
     4ac:	bd ae       	std	Y+61, r11	; 0x3d
     4ae:	ce ae       	std	Y+62, r12	; 0x3e
     4b0:	df ae       	std	Y+63, r13	; 0x3f
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	62 01       	movw	r12, r4
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	29 96       	adiw	r28, 0x09	; 9
     4bc:	cc ae       	std	Y+60, r12	; 0x3c
     4be:	dd ae       	std	Y+61, r13	; 0x3d
     4c0:	ee ae       	std	Y+62, r14	; 0x3e
     4c2:	ff ae       	std	Y+63, r15	; 0x3f
     4c4:	29 97       	sbiw	r28, 0x09	; 9
     4c6:	92 01       	movw	r18, r4
     4c8:	81 01       	movw	r16, r2
     4ca:	20 70       	andi	r18, 0x00	; 0
     4cc:	30 70       	andi	r19, 0x00	; 0
     4ce:	2d 96       	adiw	r28, 0x0d	; 13
     4d0:	0c af       	std	Y+60, r16	; 0x3c
     4d2:	1d af       	std	Y+61, r17	; 0x3d
     4d4:	2e af       	std	Y+62, r18	; 0x3e
     4d6:	3f af       	std	Y+63, r19	; 0x3f
     4d8:	2d 97       	sbiw	r28, 0x0d	; 13
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     4e6:	7b 01       	movw	r14, r22
     4e8:	8c 01       	movw	r16, r24
     4ea:	c4 01       	movw	r24, r8
     4ec:	b3 01       	movw	r22, r6
     4ee:	29 96       	adiw	r28, 0x09	; 9
     4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
     4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
     4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     4f8:	29 97       	sbiw	r28, 0x09	; 9
     4fa:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     4fe:	c9 01       	movw	r24, r18
     500:	da 01       	movw	r26, r20
     502:	3c 01       	movw	r6, r24
     504:	4d 01       	movw	r8, r26
     506:	c4 01       	movw	r24, r8
     508:	b3 01       	movw	r22, r6
     50a:	2d 96       	adiw	r28, 0x0d	; 13
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	2d 97       	sbiw	r28, 0x0d	; 13
     516:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	ac ac       	ldd	r10, Y+60	; 0x3c
     528:	bd ac       	ldd	r11, Y+61	; 0x3d
     52a:	ce ac       	ldd	r12, Y+62	; 0x3e
     52c:	df ac       	ldd	r13, Y+63	; 0x3f
     52e:	21 97       	sbiw	r28, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	aa 27       	eor	r26, r26
     534:	bb 27       	eor	r27, r27
     536:	57 01       	movw	r10, r14
     538:	68 01       	movw	r12, r16
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	a2 16       	cp	r10, r18
     544:	b3 06       	cpc	r11, r19
     546:	c4 06       	cpc	r12, r20
     548:	d5 06       	cpc	r13, r21
     54a:	e0 f4       	brcc	.+56     	; 0x584 <__divdi3+0x49a>
     54c:	08 94       	sec
     54e:	61 08       	sbc	r6, r1
     550:	71 08       	sbc	r7, r1
     552:	81 08       	sbc	r8, r1
     554:	91 08       	sbc	r9, r1
     556:	a2 0c       	add	r10, r2
     558:	b3 1c       	adc	r11, r3
     55a:	c4 1c       	adc	r12, r4
     55c:	d5 1c       	adc	r13, r5
     55e:	a2 14       	cp	r10, r2
     560:	b3 04       	cpc	r11, r3
     562:	c4 04       	cpc	r12, r4
     564:	d5 04       	cpc	r13, r5
     566:	70 f0       	brcs	.+28     	; 0x584 <__divdi3+0x49a>
     568:	a2 16       	cp	r10, r18
     56a:	b3 06       	cpc	r11, r19
     56c:	c4 06       	cpc	r12, r20
     56e:	d5 06       	cpc	r13, r21
     570:	48 f4       	brcc	.+18     	; 0x584 <__divdi3+0x49a>
     572:	08 94       	sec
     574:	61 08       	sbc	r6, r1
     576:	71 08       	sbc	r7, r1
     578:	81 08       	sbc	r8, r1
     57a:	91 08       	sbc	r9, r1
     57c:	a2 0c       	add	r10, r2
     57e:	b3 1c       	adc	r11, r3
     580:	c4 1c       	adc	r12, r4
     582:	d5 1c       	adc	r13, r5
     584:	a2 1a       	sub	r10, r18
     586:	b3 0a       	sbc	r11, r19
     588:	c4 0a       	sbc	r12, r20
     58a:	d5 0a       	sbc	r13, r21
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	29 96       	adiw	r28, 0x09	; 9
     592:	2c ad       	ldd	r18, Y+60	; 0x3c
     594:	3d ad       	ldd	r19, Y+61	; 0x3d
     596:	4e ad       	ldd	r20, Y+62	; 0x3e
     598:	5f ad       	ldd	r21, Y+63	; 0x3f
     59a:	29 97       	sbiw	r28, 0x09	; 9
     59c:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
     5a4:	c6 01       	movw	r24, r12
     5a6:	b5 01       	movw	r22, r10
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	2c ad       	ldd	r18, Y+60	; 0x3c
     5ac:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ae:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5b2:	29 97       	sbiw	r28, 0x09	; 9
     5b4:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     5b8:	c9 01       	movw	r24, r18
     5ba:	da 01       	movw	r26, r20
     5bc:	5c 01       	movw	r10, r24
     5be:	6d 01       	movw	r12, r26
     5c0:	c6 01       	movw	r24, r12
     5c2:	b5 01       	movw	r22, r10
     5c4:	2d 96       	adiw	r28, 0x0d	; 13
     5c6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     5cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ce:	2d 97       	sbiw	r28, 0x0d	; 13
     5d0:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	87 01       	movw	r16, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	ee 24       	eor	r14, r14
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e2:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e4:	ae ad       	ldd	r26, Y+62	; 0x3e
     5e6:	bf ad       	ldd	r27, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	e8 2a       	or	r14, r24
     5f0:	f9 2a       	or	r15, r25
     5f2:	0a 2b       	or	r16, r26
     5f4:	1b 2b       	or	r17, r27
     5f6:	e2 16       	cp	r14, r18
     5f8:	f3 06       	cpc	r15, r19
     5fa:	04 07       	cpc	r16, r20
     5fc:	15 07       	cpc	r17, r21
     5fe:	c0 f4       	brcc	.+48     	; 0x630 <__divdi3+0x546>
     600:	08 94       	sec
     602:	a1 08       	sbc	r10, r1
     604:	b1 08       	sbc	r11, r1
     606:	c1 08       	sbc	r12, r1
     608:	d1 08       	sbc	r13, r1
     60a:	e2 0c       	add	r14, r2
     60c:	f3 1c       	adc	r15, r3
     60e:	04 1d       	adc	r16, r4
     610:	15 1d       	adc	r17, r5
     612:	e2 14       	cp	r14, r2
     614:	f3 04       	cpc	r15, r3
     616:	04 05       	cpc	r16, r4
     618:	15 05       	cpc	r17, r5
     61a:	50 f0       	brcs	.+20     	; 0x630 <__divdi3+0x546>
     61c:	e2 16       	cp	r14, r18
     61e:	f3 06       	cpc	r15, r19
     620:	04 07       	cpc	r16, r20
     622:	15 07       	cpc	r17, r21
     624:	28 f4       	brcc	.+10     	; 0x630 <__divdi3+0x546>
     626:	08 94       	sec
     628:	a1 08       	sbc	r10, r1
     62a:	b1 08       	sbc	r11, r1
     62c:	c1 08       	sbc	r12, r1
     62e:	d1 08       	sbc	r13, r1
     630:	d3 01       	movw	r26, r6
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	86 01       	movw	r16, r12
     638:	75 01       	movw	r14, r10
     63a:	e8 2a       	or	r14, r24
     63c:	f9 2a       	or	r15, r25
     63e:	0a 2b       	or	r16, r26
     640:	1b 2b       	or	r17, r27
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	ec ae       	std	Y+60, r14	; 0x3c
     646:	fd ae       	std	Y+61, r15	; 0x3d
     648:	0e af       	std	Y+62, r16	; 0x3e
     64a:	1f af       	std	Y+63, r17	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	eb c4       	rjmp	.+2518   	; 0x1026 <__stack+0x7c7>
     650:	21 14       	cp	r2, r1
     652:	31 04       	cpc	r3, r1
     654:	41 04       	cpc	r4, r1
     656:	51 04       	cpc	r5, r1
     658:	71 f4       	brne	.+28     	; 0x676 <__divdi3+0x58c>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	1c 01       	movw	r2, r24
     674:	2d 01       	movw	r4, r26
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	20 16       	cp	r2, r16
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	30 06       	cpc	r3, r16
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	40 06       	cpc	r4, r16
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	50 06       	cpc	r5, r16
     686:	88 f4       	brcc	.+34     	; 0x6aa <__divdi3+0x5c0>
     688:	1f ef       	ldi	r17, 0xFF	; 255
     68a:	21 16       	cp	r2, r17
     68c:	31 04       	cpc	r3, r1
     68e:	41 04       	cpc	r4, r1
     690:	51 04       	cpc	r5, r1
     692:	31 f0       	breq	.+12     	; 0x6a0 <__divdi3+0x5b6>
     694:	28 f0       	brcs	.+10     	; 0x6a0 <__divdi3+0x5b6>
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <__divdi3+0x5e4>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__divdi3+0x5e4>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	22 16       	cp	r2, r18
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	32 06       	cpc	r3, r18
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	42 06       	cpc	r4, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	52 06       	cpc	r5, r18
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <__divdi3+0x5dc>
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divdi3+0x5e4>
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	d2 01       	movw	r26, r4
     6d0:	c1 01       	movw	r24, r2
     6d2:	04 2e       	mov	r0, r20
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__divdi3+0x5f4>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__divdi3+0x5ec>
     6e2:	83 58       	subi	r24, 0x83	; 131
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	dc 01       	movw	r26, r24
     6e8:	2c 91       	ld	r18, X
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	ee 2e       	mov	r14, r30
     6ee:	f1 2c       	mov	r15, r1
     6f0:	01 2d       	mov	r16, r1
     6f2:	11 2d       	mov	r17, r1
     6f4:	d8 01       	movw	r26, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	84 1b       	sub	r24, r20
     6fa:	95 0b       	sbc	r25, r21
     6fc:	a6 0b       	sbc	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	82 1b       	sub	r24, r18
     702:	91 09       	sbc	r25, r1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	61 f4       	brne	.+24     	; 0x728 <__divdi3+0x63e>
     710:	64 01       	movw	r12, r8
     712:	53 01       	movw	r10, r6
     714:	a2 18       	sub	r10, r2
     716:	b3 08       	sbc	r11, r3
     718:	c4 08       	sbc	r12, r4
     71a:	d5 08       	sbc	r13, r5
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	63 2e       	mov	r6, r19
     720:	71 2c       	mov	r7, r1
     722:	81 2c       	mov	r8, r1
     724:	91 2c       	mov	r9, r1
     726:	24 c1       	rjmp	.+584    	; 0x970 <__stack+0x111>
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	08 2e       	mov	r0, r24
     730:	04 c0       	rjmp	.+8      	; 0x73a <__divdi3+0x650>
     732:	22 0c       	add	r2, r2
     734:	33 1c       	adc	r3, r3
     736:	44 1c       	adc	r4, r4
     738:	55 1c       	adc	r5, r5
     73a:	0a 94       	dec	r0
     73c:	d2 f7       	brpl	.-12     	; 0x732 <__divdi3+0x648>
     73e:	ee 2d       	mov	r30, r14
     740:	e8 1b       	sub	r30, r24
     742:	64 01       	movw	r12, r8
     744:	53 01       	movw	r10, r6
     746:	0e 2e       	mov	r0, r30
     748:	04 c0       	rjmp	.+8      	; 0x752 <__divdi3+0x668>
     74a:	d6 94       	lsr	r13
     74c:	c7 94       	ror	r12
     74e:	b7 94       	ror	r11
     750:	a7 94       	ror	r10
     752:	0a 94       	dec	r0
     754:	d2 f7       	brpl	.-12     	; 0x74a <__divdi3+0x660>
     756:	a4 01       	movw	r20, r8
     758:	93 01       	movw	r18, r6
     75a:	e3 96       	adiw	r28, 0x33	; 51
     75c:	0f ac       	ldd	r0, Y+63	; 0x3f
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	04 c0       	rjmp	.+8      	; 0x76a <__divdi3+0x680>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__divdi3+0x678>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	6c ac       	ldd	r6, Y+60	; 0x3c
     772:	7d ac       	ldd	r7, Y+61	; 0x3d
     774:	8e ac       	ldd	r8, Y+62	; 0x3e
     776:	9f ac       	ldd	r9, Y+63	; 0x3f
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	0e 2e       	mov	r0, r30
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__divdi3+0x69c>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <__divdi3+0x694>
     78a:	84 01       	movw	r16, r8
     78c:	73 01       	movw	r14, r6
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	04 2b       	or	r16, r20
     794:	15 2b       	or	r17, r21
     796:	e9 ae       	std	Y+57, r14	; 0x39
     798:	fa ae       	std	Y+58, r15	; 0x3a
     79a:	0b af       	std	Y+59, r16	; 0x3b
     79c:	1c af       	std	Y+60, r17	; 0x3c
     79e:	32 01       	movw	r6, r4
     7a0:	88 24       	eor	r8, r8
     7a2:	99 24       	eor	r9, r9
     7a4:	92 01       	movw	r18, r4
     7a6:	81 01       	movw	r16, r2
     7a8:	20 70       	andi	r18, 0x00	; 0
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	61 96       	adiw	r28, 0x11	; 17
     7ae:	0c af       	std	Y+60, r16	; 0x3c
     7b0:	1d af       	std	Y+61, r17	; 0x3d
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	3f af       	std	Y+63, r19	; 0x3f
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	a4 01       	movw	r20, r8
     7be:	93 01       	movw	r18, r6
     7c0:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	c6 01       	movw	r24, r12
     7ca:	b5 01       	movw	r22, r10
     7cc:	a4 01       	movw	r20, r8
     7ce:	93 01       	movw	r18, r6
     7d0:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	8c af       	std	Y+60, r24	; 0x3c
     7dc:	9d af       	std	Y+61, r25	; 0x3d
     7de:	ae af       	std	Y+62, r26	; 0x3e
     7e0:	bf af       	std	Y+63, r27	; 0x3f
     7e2:	65 97       	sbiw	r28, 0x15	; 21
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	61 96       	adiw	r28, 0x11	; 17
     7ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f2:	61 97       	sbiw	r28, 0x11	; 17
     7f4:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	87 01       	movw	r16, r14
     7fe:	ff 24       	eor	r15, r15
     800:	ee 24       	eor	r14, r14
     802:	a9 ac       	ldd	r10, Y+57	; 0x39
     804:	ba ac       	ldd	r11, Y+58	; 0x3a
     806:	cb ac       	ldd	r12, Y+59	; 0x3b
     808:	dc ac       	ldd	r13, Y+60	; 0x3c
     80a:	c6 01       	movw	r24, r12
     80c:	aa 27       	eor	r26, r26
     80e:	bb 27       	eor	r27, r27
     810:	5c 01       	movw	r10, r24
     812:	6d 01       	movw	r12, r26
     814:	ae 28       	or	r10, r14
     816:	bf 28       	or	r11, r15
     818:	c0 2a       	or	r12, r16
     81a:	d1 2a       	or	r13, r17
     81c:	a2 16       	cp	r10, r18
     81e:	b3 06       	cpc	r11, r19
     820:	c4 06       	cpc	r12, r20
     822:	d5 06       	cpc	r13, r21
     824:	60 f5       	brcc	.+88     	; 0x87e <__stack+0x1f>
     826:	65 96       	adiw	r28, 0x15	; 21
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	65 97       	sbiw	r28, 0x15	; 21
     832:	61 50       	subi	r22, 0x01	; 1
     834:	70 40       	sbci	r23, 0x00	; 0
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	65 96       	adiw	r28, 0x15	; 21
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	65 97       	sbiw	r28, 0x15	; 21
     846:	a2 0c       	add	r10, r2
     848:	b3 1c       	adc	r11, r3
     84a:	c4 1c       	adc	r12, r4
     84c:	d5 1c       	adc	r13, r5
     84e:	a2 14       	cp	r10, r2
     850:	b3 04       	cpc	r11, r3
     852:	c4 04       	cpc	r12, r4
     854:	d5 04       	cpc	r13, r5
     856:	98 f0       	brcs	.+38     	; 0x87e <__stack+0x1f>
     858:	a2 16       	cp	r10, r18
     85a:	b3 06       	cpc	r11, r19
     85c:	c4 06       	cpc	r12, r20
     85e:	d5 06       	cpc	r13, r21
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
     862:	61 50       	subi	r22, 0x01	; 1
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	65 96       	adiw	r28, 0x15	; 21
     86c:	6c af       	std	Y+60, r22	; 0x3c
     86e:	7d af       	std	Y+61, r23	; 0x3d
     870:	8e af       	std	Y+62, r24	; 0x3e
     872:	9f af       	std	Y+63, r25	; 0x3f
     874:	65 97       	sbiw	r28, 0x15	; 21
     876:	a2 0c       	add	r10, r2
     878:	b3 1c       	adc	r11, r3
     87a:	c4 1c       	adc	r12, r4
     87c:	d5 1c       	adc	r13, r5
     87e:	a2 1a       	sub	r10, r18
     880:	b3 0a       	sbc	r11, r19
     882:	c4 0a       	sbc	r12, r20
     884:	d5 0a       	sbc	r13, r21
     886:	c6 01       	movw	r24, r12
     888:	b5 01       	movw	r22, r10
     88a:	a4 01       	movw	r20, r8
     88c:	93 01       	movw	r18, r6
     88e:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     892:	7b 01       	movw	r14, r22
     894:	8c 01       	movw	r16, r24
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	a4 01       	movw	r20, r8
     89c:	93 01       	movw	r18, r6
     89e:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	da 01       	movw	r26, r20
     8a6:	3c 01       	movw	r6, r24
     8a8:	4d 01       	movw	r8, r26
     8aa:	c4 01       	movw	r24, r8
     8ac:	b3 01       	movw	r22, r6
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b2:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     8b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     8b8:	61 97       	sbiw	r28, 0x11	; 17
     8ba:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	87 01       	movw	r16, r14
     8c4:	ff 24       	eor	r15, r15
     8c6:	ee 24       	eor	r14, r14
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     8cc:	ab ad       	ldd	r26, Y+59	; 0x3b
     8ce:	bc ad       	ldd	r27, Y+60	; 0x3c
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	57 01       	movw	r10, r14
     8d6:	68 01       	movw	r12, r16
     8d8:	a8 2a       	or	r10, r24
     8da:	b9 2a       	or	r11, r25
     8dc:	ca 2a       	or	r12, r26
     8de:	db 2a       	or	r13, r27
     8e0:	a2 16       	cp	r10, r18
     8e2:	b3 06       	cpc	r11, r19
     8e4:	c4 06       	cpc	r12, r20
     8e6:	d5 06       	cpc	r13, r21
     8e8:	e0 f4       	brcc	.+56     	; 0x922 <__stack+0xc3>
     8ea:	08 94       	sec
     8ec:	61 08       	sbc	r6, r1
     8ee:	71 08       	sbc	r7, r1
     8f0:	81 08       	sbc	r8, r1
     8f2:	91 08       	sbc	r9, r1
     8f4:	a2 0c       	add	r10, r2
     8f6:	b3 1c       	adc	r11, r3
     8f8:	c4 1c       	adc	r12, r4
     8fa:	d5 1c       	adc	r13, r5
     8fc:	a2 14       	cp	r10, r2
     8fe:	b3 04       	cpc	r11, r3
     900:	c4 04       	cpc	r12, r4
     902:	d5 04       	cpc	r13, r5
     904:	70 f0       	brcs	.+28     	; 0x922 <__stack+0xc3>
     906:	a2 16       	cp	r10, r18
     908:	b3 06       	cpc	r11, r19
     90a:	c4 06       	cpc	r12, r20
     90c:	d5 06       	cpc	r13, r21
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0xc3>
     910:	08 94       	sec
     912:	61 08       	sbc	r6, r1
     914:	71 08       	sbc	r7, r1
     916:	81 08       	sbc	r8, r1
     918:	91 08       	sbc	r9, r1
     91a:	a2 0c       	add	r10, r2
     91c:	b3 1c       	adc	r11, r3
     91e:	c4 1c       	adc	r12, r4
     920:	d5 1c       	adc	r13, r5
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	8c ad       	ldd	r24, Y+60	; 0x3c
     926:	9d ad       	ldd	r25, Y+61	; 0x3d
     928:	ae ad       	ldd	r26, Y+62	; 0x3e
     92a:	bf ad       	ldd	r27, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	e3 96       	adiw	r28, 0x33	; 51
     930:	0f ac       	ldd	r0, Y+63	; 0x3f
     932:	e3 97       	sbiw	r28, 0x33	; 51
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0xdf>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	aa 1f       	adc	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <__stack+0xd7>
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	8c af       	std	Y+60, r24	; 0x3c
     946:	9d af       	std	Y+61, r25	; 0x3d
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	bf af       	std	Y+63, r27	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	a2 1a       	sub	r10, r18
     950:	b3 0a       	sbc	r11, r19
     952:	c4 0a       	sbc	r12, r20
     954:	d5 0a       	sbc	r13, r21
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	ec ac       	ldd	r14, Y+60	; 0x3c
     95a:	fd ac       	ldd	r15, Y+61	; 0x3d
     95c:	0e ad       	ldd	r16, Y+62	; 0x3e
     95e:	1f ad       	ldd	r17, Y+63	; 0x3f
     960:	65 97       	sbiw	r28, 0x15	; 21
     962:	d7 01       	movw	r26, r14
     964:	99 27       	eor	r25, r25
     966:	88 27       	eor	r24, r24
     968:	68 2a       	or	r6, r24
     96a:	79 2a       	or	r7, r25
     96c:	8a 2a       	or	r8, r26
     96e:	9b 2a       	or	r9, r27
     970:	82 01       	movw	r16, r4
     972:	22 27       	eor	r18, r18
     974:	33 27       	eor	r19, r19
     976:	69 96       	adiw	r28, 0x19	; 25
     978:	0c af       	std	Y+60, r16	; 0x3c
     97a:	1d af       	std	Y+61, r17	; 0x3d
     97c:	2e af       	std	Y+62, r18	; 0x3e
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	69 97       	sbiw	r28, 0x19	; 25
     982:	a2 01       	movw	r20, r4
     984:	91 01       	movw	r18, r2
     986:	40 70       	andi	r20, 0x00	; 0
     988:	50 70       	andi	r21, 0x00	; 0
     98a:	6d 96       	adiw	r28, 0x1d	; 29
     98c:	2c af       	std	Y+60, r18	; 0x3c
     98e:	3d af       	std	Y+61, r19	; 0x3d
     990:	4e af       	std	Y+62, r20	; 0x3e
     992:	5f af       	std	Y+63, r21	; 0x3f
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	c6 01       	movw	r24, r12
     998:	b5 01       	movw	r22, r10
     99a:	69 96       	adiw	r28, 0x19	; 25
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	69 97       	sbiw	r28, 0x19	; 25
     9a6:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	69 96       	adiw	r28, 0x19	; 25
     9b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     9bc:	69 97       	sbiw	r28, 0x19	; 25
     9be:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     9c2:	c9 01       	movw	r24, r18
     9c4:	da 01       	movw	r26, r20
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	8c af       	std	Y+60, r24	; 0x3c
     9ca:	9d af       	std	Y+61, r25	; 0x3d
     9cc:	ae af       	std	Y+62, r26	; 0x3e
     9ce:	bf af       	std	Y+63, r27	; 0x3f
     9d0:	a1 97       	sbiw	r28, 0x21	; 33
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	6d 96       	adiw	r28, 0x1d	; 29
     9d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     9da:	3d ad       	ldd	r19, Y+61	; 0x3d
     9dc:	4e ad       	ldd	r20, Y+62	; 0x3e
     9de:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e0:	6d 97       	sbiw	r28, 0x1d	; 29
     9e2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	87 01       	movw	r16, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	ee 24       	eor	r14, r14
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ac ac       	ldd	r10, Y+60	; 0x3c
     9f4:	bd ac       	ldd	r11, Y+61	; 0x3d
     9f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     9f8:	df ac       	ldd	r13, Y+63	; 0x3f
     9fa:	21 97       	sbiw	r28, 0x01	; 1
     9fc:	c6 01       	movw	r24, r12
     9fe:	aa 27       	eor	r26, r26
     a00:	bb 27       	eor	r27, r27
     a02:	57 01       	movw	r10, r14
     a04:	68 01       	movw	r12, r16
     a06:	a8 2a       	or	r10, r24
     a08:	b9 2a       	or	r11, r25
     a0a:	ca 2a       	or	r12, r26
     a0c:	db 2a       	or	r13, r27
     a0e:	a2 16       	cp	r10, r18
     a10:	b3 06       	cpc	r11, r19
     a12:	c4 06       	cpc	r12, r20
     a14:	d5 06       	cpc	r13, r21
     a16:	60 f5       	brcc	.+88     	; 0xa70 <__stack+0x211>
     a18:	a1 96       	adiw	r28, 0x21	; 33
     a1a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a1c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a20:	9f ad       	ldd	r25, Y+63	; 0x3f
     a22:	a1 97       	sbiw	r28, 0x21	; 33
     a24:	61 50       	subi	r22, 0x01	; 1
     a26:	70 40       	sbci	r23, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a1 96       	adiw	r28, 0x21	; 33
     a2e:	6c af       	std	Y+60, r22	; 0x3c
     a30:	7d af       	std	Y+61, r23	; 0x3d
     a32:	8e af       	std	Y+62, r24	; 0x3e
     a34:	9f af       	std	Y+63, r25	; 0x3f
     a36:	a1 97       	sbiw	r28, 0x21	; 33
     a38:	a2 0c       	add	r10, r2
     a3a:	b3 1c       	adc	r11, r3
     a3c:	c4 1c       	adc	r12, r4
     a3e:	d5 1c       	adc	r13, r5
     a40:	a2 14       	cp	r10, r2
     a42:	b3 04       	cpc	r11, r3
     a44:	c4 04       	cpc	r12, r4
     a46:	d5 04       	cpc	r13, r5
     a48:	98 f0       	brcs	.+38     	; 0xa70 <__stack+0x211>
     a4a:	a2 16       	cp	r10, r18
     a4c:	b3 06       	cpc	r11, r19
     a4e:	c4 06       	cpc	r12, r20
     a50:	d5 06       	cpc	r13, r21
     a52:	70 f4       	brcc	.+28     	; 0xa70 <__stack+0x211>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	70 40       	sbci	r23, 0x00	; 0
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a1 96       	adiw	r28, 0x21	; 33
     a5e:	6c af       	std	Y+60, r22	; 0x3c
     a60:	7d af       	std	Y+61, r23	; 0x3d
     a62:	8e af       	std	Y+62, r24	; 0x3e
     a64:	9f af       	std	Y+63, r25	; 0x3f
     a66:	a1 97       	sbiw	r28, 0x21	; 33
     a68:	a2 0c       	add	r10, r2
     a6a:	b3 1c       	adc	r11, r3
     a6c:	c4 1c       	adc	r12, r4
     a6e:	d5 1c       	adc	r13, r5
     a70:	a2 1a       	sub	r10, r18
     a72:	b3 0a       	sbc	r11, r19
     a74:	c4 0a       	sbc	r12, r20
     a76:	d5 0a       	sbc	r13, r21
     a78:	c6 01       	movw	r24, r12
     a7a:	b5 01       	movw	r22, r10
     a7c:	69 96       	adiw	r28, 0x19	; 25
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	69 97       	sbiw	r28, 0x19	; 25
     a88:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     a8c:	7b 01       	movw	r14, r22
     a8e:	8c 01       	movw	r16, r24
     a90:	c6 01       	movw	r24, r12
     a92:	b5 01       	movw	r22, r10
     a94:	69 96       	adiw	r28, 0x19	; 25
     a96:	2c ad       	ldd	r18, Y+60	; 0x3c
     a98:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a9e:	69 97       	sbiw	r28, 0x19	; 25
     aa0:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     aa4:	c9 01       	movw	r24, r18
     aa6:	da 01       	movw	r26, r20
     aa8:	5c 01       	movw	r10, r24
     aaa:	6d 01       	movw	r12, r26
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	6d 96       	adiw	r28, 0x1d	; 29
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	6d 97       	sbiw	r28, 0x1d	; 29
     abc:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	87 01       	movw	r16, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	ee 24       	eor	r14, r14
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8c ad       	ldd	r24, Y+60	; 0x3c
     ace:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	21 97       	sbiw	r28, 0x01	; 1
     ad6:	a0 70       	andi	r26, 0x00	; 0
     ad8:	b0 70       	andi	r27, 0x00	; 0
     ada:	e8 2a       	or	r14, r24
     adc:	f9 2a       	or	r15, r25
     ade:	0a 2b       	or	r16, r26
     ae0:	1b 2b       	or	r17, r27
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	c0 f4       	brcc	.+48     	; 0xb1c <__stack+0x2bd>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	e2 0c       	add	r14, r2
     af8:	f3 1c       	adc	r15, r3
     afa:	04 1d       	adc	r16, r4
     afc:	15 1d       	adc	r17, r5
     afe:	e2 14       	cp	r14, r2
     b00:	f3 04       	cpc	r15, r3
     b02:	04 05       	cpc	r16, r4
     b04:	15 05       	cpc	r17, r5
     b06:	50 f0       	brcs	.+20     	; 0xb1c <__stack+0x2bd>
     b08:	e2 16       	cp	r14, r18
     b0a:	f3 06       	cpc	r15, r19
     b0c:	04 07       	cpc	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	28 f4       	brcc	.+10     	; 0xb1c <__stack+0x2bd>
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
     b18:	c1 08       	sbc	r12, r1
     b1a:	d1 08       	sbc	r13, r1
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b20:	fd ac       	ldd	r15, Y+61	; 0x3d
     b22:	0e ad       	ldd	r16, Y+62	; 0x3e
     b24:	1f ad       	ldd	r17, Y+63	; 0x3f
     b26:	a1 97       	sbiw	r28, 0x21	; 33
     b28:	d7 01       	movw	r26, r14
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	96 01       	movw	r18, r12
     b30:	85 01       	movw	r16, r10
     b32:	08 2b       	or	r16, r24
     b34:	19 2b       	or	r17, r25
     b36:	2a 2b       	or	r18, r26
     b38:	3b 2b       	or	r19, r27
     b3a:	25 96       	adiw	r28, 0x05	; 5
     b3c:	0c af       	std	Y+60, r16	; 0x3c
     b3e:	1d af       	std	Y+61, r17	; 0x3d
     b40:	2e af       	std	Y+62, r18	; 0x3e
     b42:	3f af       	std	Y+63, r19	; 0x3f
     b44:	25 97       	sbiw	r28, 0x05	; 5
     b46:	72 c2       	rjmp	.+1252   	; 0x102c <__stack+0x7cd>
     b48:	6e 14       	cp	r6, r14
     b4a:	7f 04       	cpc	r7, r15
     b4c:	80 06       	cpc	r8, r16
     b4e:	91 06       	cpc	r9, r17
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	5f c2       	rjmp	.+1214   	; 0x1012 <__stack+0x7b3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	e2 16       	cp	r14, r18
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	f2 06       	cpc	r15, r18
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	02 07       	cpc	r16, r18
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	12 07       	cpc	r17, r18
     b64:	88 f4       	brcc	.+34     	; 0xb88 <__stack+0x329>
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	e3 16       	cp	r14, r19
     b6a:	f1 04       	cpc	r15, r1
     b6c:	01 05       	cpc	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	31 f0       	breq	.+12     	; 0xb7e <__stack+0x31f>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <__stack+0x31f>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x34d>
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	12 c0       	rjmp	.+36     	; 0xbac <__stack+0x34d>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	e4 16       	cp	r14, r20
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	f4 06       	cpc	r15, r20
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	04 07       	cpc	r16, r20
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	14 07       	cpc	r17, r20
     b98:	28 f0       	brcs	.+10     	; 0xba4 <__stack+0x345>
     b9a:	48 e1       	ldi	r20, 0x18	; 24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__stack+0x34d>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	d8 01       	movw	r26, r16
     bae:	c7 01       	movw	r24, r14
     bb0:	04 2e       	mov	r0, r20
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	b6 95       	lsr	r27
     bb6:	a7 95       	ror	r26
     bb8:	97 95       	ror	r25
     bba:	87 95       	ror	r24
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__stack+0x355>
     bc0:	83 58       	subi	r24, 0x83	; 131
     bc2:	9f 4f       	sbci	r25, 0xFF	; 255
     bc4:	dc 01       	movw	r26, r24
     bc6:	2c 91       	ld	r18, X
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	a3 2e       	mov	r10, r19
     bcc:	b1 2c       	mov	r11, r1
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	d6 01       	movw	r26, r12
     bd4:	c5 01       	movw	r24, r10
     bd6:	84 1b       	sub	r24, r20
     bd8:	95 0b       	sbc	r25, r21
     bda:	a6 0b       	sbc	r26, r22
     bdc:	b7 0b       	sbc	r27, r23
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	99 f4       	brne	.+38     	; 0xc14 <__stack+0x3b5>
     bee:	e6 14       	cp	r14, r6
     bf0:	f7 04       	cpc	r15, r7
     bf2:	08 05       	cpc	r16, r8
     bf4:	19 05       	cpc	r17, r9
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	fe c1       	rjmp	.+1020   	; 0xff6 <__stack+0x797>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	6c ac       	ldd	r6, Y+60	; 0x3c
     bfe:	7d ac       	ldd	r7, Y+61	; 0x3d
     c00:	8e ac       	ldd	r8, Y+62	; 0x3e
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	21 97       	sbiw	r28, 0x01	; 1
     c06:	62 14       	cp	r6, r2
     c08:	73 04       	cpc	r7, r3
     c0a:	84 04       	cpc	r8, r4
     c0c:	95 04       	cpc	r9, r5
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x3b3>
     c10:	f2 c1       	rjmp	.+996    	; 0xff6 <__stack+0x797>
     c12:	ff c1       	rjmp	.+1022   	; 0x1012 <__stack+0x7b3>
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	8f af       	std	Y+63, r24	; 0x3f
     c18:	e2 97       	sbiw	r28, 0x32	; 50
     c1a:	08 2e       	mov	r0, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__stack+0x3c7>
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	00 1f       	adc	r16, r16
     c24:	11 1f       	adc	r17, r17
     c26:	0a 94       	dec	r0
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <__stack+0x3bf>
     c2a:	6a 2d       	mov	r22, r10
     c2c:	68 1b       	sub	r22, r24
     c2e:	d2 01       	movw	r26, r4
     c30:	c1 01       	movw	r24, r2
     c32:	06 2e       	mov	r0, r22
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__stack+0x3df>
     c36:	b6 95       	lsr	r27
     c38:	a7 95       	ror	r26
     c3a:	97 95       	ror	r25
     c3c:	87 95       	ror	r24
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__stack+0x3d7>
     c42:	5c 01       	movw	r10, r24
     c44:	6d 01       	movw	r12, r26
     c46:	ae 28       	or	r10, r14
     c48:	bf 28       	or	r11, r15
     c4a:	c0 2a       	or	r12, r16
     c4c:	d1 2a       	or	r13, r17
     c4e:	ad aa       	std	Y+53, r10	; 0x35
     c50:	be aa       	std	Y+54, r11	; 0x36
     c52:	cf aa       	std	Y+55, r12	; 0x37
     c54:	d8 ae       	std	Y+56, r13	; 0x38
     c56:	72 01       	movw	r14, r4
     c58:	61 01       	movw	r12, r2
     c5a:	e2 96       	adiw	r28, 0x32	; 50
     c5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c5e:	e2 97       	sbiw	r28, 0x32	; 50
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x40b>
     c62:	cc 0c       	add	r12, r12
     c64:	dd 1c       	adc	r13, r13
     c66:	ee 1c       	adc	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	0a 94       	dec	r0
     c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__stack+0x403>
     c6e:	c9 aa       	std	Y+49, r12	; 0x31
     c70:	da aa       	std	Y+50, r13	; 0x32
     c72:	eb aa       	std	Y+51, r14	; 0x33
     c74:	fc aa       	std	Y+52, r15	; 0x34
     c76:	64 01       	movw	r12, r8
     c78:	53 01       	movw	r10, r6
     c7a:	06 2e       	mov	r0, r22
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	d6 94       	lsr	r13
     c80:	c7 94       	ror	r12
     c82:	b7 94       	ror	r11
     c84:	a7 94       	ror	r10
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	d4 01       	movw	r26, r8
     c8c:	c3 01       	movw	r24, r6
     c8e:	e2 96       	adiw	r28, 0x32	; 50
     c90:	0f ac       	ldd	r0, Y+63	; 0x3f
     c92:	e2 97       	sbiw	r28, 0x32	; 50
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	ec ac       	ldd	r14, Y+60	; 0x3c
     ca6:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca8:	0e ad       	ldd	r16, Y+62	; 0x3e
     caa:	1f ad       	ldd	r17, Y+63	; 0x3f
     cac:	21 97       	sbiw	r28, 0x01	; 1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__stack+0x459>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	6a 95       	dec	r22
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__stack+0x451>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	68 2a       	or	r6, r24
     cc2:	79 2a       	or	r7, r25
     cc4:	8a 2a       	or	r8, r26
     cc6:	9b 2a       	or	r9, r27
     cc8:	6d a6       	std	Y+45, r6	; 0x2d
     cca:	7e a6       	std	Y+46, r7	; 0x2e
     ccc:	8f a6       	std	Y+47, r8	; 0x2f
     cce:	98 aa       	std	Y+48, r9	; 0x30
     cd0:	ed a8       	ldd	r14, Y+53	; 0x35
     cd2:	fe a8       	ldd	r15, Y+54	; 0x36
     cd4:	0f a9       	ldd	r16, Y+55	; 0x37
     cd6:	18 ad       	ldd	r17, Y+56	; 0x38
     cd8:	38 01       	movw	r6, r16
     cda:	88 24       	eor	r8, r8
     cdc:	99 24       	eor	r9, r9
     cde:	98 01       	movw	r18, r16
     ce0:	87 01       	movw	r16, r14
     ce2:	20 70       	andi	r18, 0x00	; 0
     ce4:	30 70       	andi	r19, 0x00	; 0
     ce6:	a5 96       	adiw	r28, 0x25	; 37
     ce8:	0c af       	std	Y+60, r16	; 0x3c
     cea:	1d af       	std	Y+61, r17	; 0x3d
     cec:	2e af       	std	Y+62, r18	; 0x3e
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	a5 97       	sbiw	r28, 0x25	; 37
     cf2:	c6 01       	movw	r24, r12
     cf4:	b5 01       	movw	r22, r10
     cf6:	a4 01       	movw	r20, r8
     cf8:	93 01       	movw	r18, r6
     cfa:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	c6 01       	movw	r24, r12
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	93 01       	movw	r18, r6
     d0a:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     d0e:	c9 01       	movw	r24, r18
     d10:	da 01       	movw	r26, r20
     d12:	1c 01       	movw	r2, r24
     d14:	2d 01       	movw	r4, r26
     d16:	c2 01       	movw	r24, r4
     d18:	b1 01       	movw	r22, r2
     d1a:	a5 96       	adiw	r28, 0x25	; 37
     d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d20:	4e ad       	ldd	r20, Y+62	; 0x3e
     d22:	5f ad       	ldd	r21, Y+63	; 0x3f
     d24:	a5 97       	sbiw	r28, 0x25	; 37
     d26:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	87 01       	movw	r16, r14
     d30:	ff 24       	eor	r15, r15
     d32:	ee 24       	eor	r14, r14
     d34:	ad a4       	ldd	r10, Y+45	; 0x2d
     d36:	be a4       	ldd	r11, Y+46	; 0x2e
     d38:	cf a4       	ldd	r12, Y+47	; 0x2f
     d3a:	d8 a8       	ldd	r13, Y+48	; 0x30
     d3c:	c6 01       	movw	r24, r12
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	57 01       	movw	r10, r14
     d44:	68 01       	movw	r12, r16
     d46:	a8 2a       	or	r10, r24
     d48:	b9 2a       	or	r11, r25
     d4a:	ca 2a       	or	r12, r26
     d4c:	db 2a       	or	r13, r27
     d4e:	a2 16       	cp	r10, r18
     d50:	b3 06       	cpc	r11, r19
     d52:	c4 06       	cpc	r12, r20
     d54:	d5 06       	cpc	r13, r21
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__stack+0x539>
     d58:	08 94       	sec
     d5a:	21 08       	sbc	r2, r1
     d5c:	31 08       	sbc	r3, r1
     d5e:	41 08       	sbc	r4, r1
     d60:	51 08       	sbc	r5, r1
     d62:	ed a8       	ldd	r14, Y+53	; 0x35
     d64:	fe a8       	ldd	r15, Y+54	; 0x36
     d66:	0f a9       	ldd	r16, Y+55	; 0x37
     d68:	18 ad       	ldd	r17, Y+56	; 0x38
     d6a:	ae 0c       	add	r10, r14
     d6c:	bf 1c       	adc	r11, r15
     d6e:	c0 1e       	adc	r12, r16
     d70:	d1 1e       	adc	r13, r17
     d72:	ae 14       	cp	r10, r14
     d74:	bf 04       	cpc	r11, r15
     d76:	c0 06       	cpc	r12, r16
     d78:	d1 06       	cpc	r13, r17
     d7a:	70 f0       	brcs	.+28     	; 0xd98 <__stack+0x539>
     d7c:	a2 16       	cp	r10, r18
     d7e:	b3 06       	cpc	r11, r19
     d80:	c4 06       	cpc	r12, r20
     d82:	d5 06       	cpc	r13, r21
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x539>
     d86:	08 94       	sec
     d88:	21 08       	sbc	r2, r1
     d8a:	31 08       	sbc	r3, r1
     d8c:	41 08       	sbc	r4, r1
     d8e:	51 08       	sbc	r5, r1
     d90:	ae 0c       	add	r10, r14
     d92:	bf 1c       	adc	r11, r15
     d94:	c0 1e       	adc	r12, r16
     d96:	d1 1e       	adc	r13, r17
     d98:	a2 1a       	sub	r10, r18
     d9a:	b3 0a       	sbc	r11, r19
     d9c:	c4 0a       	sbc	r12, r20
     d9e:	d5 0a       	sbc	r13, r21
     da0:	c6 01       	movw	r24, r12
     da2:	b5 01       	movw	r22, r10
     da4:	a4 01       	movw	r20, r8
     da6:	93 01       	movw	r18, r6
     da8:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     dac:	7b 01       	movw	r14, r22
     dae:	8c 01       	movw	r16, r24
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	a4 01       	movw	r20, r8
     db6:	93 01       	movw	r18, r6
     db8:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
     dbc:	c9 01       	movw	r24, r18
     dbe:	da 01       	movw	r26, r20
     dc0:	3c 01       	movw	r6, r24
     dc2:	4d 01       	movw	r8, r26
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	a5 96       	adiw	r28, 0x25	; 37
     dca:	2c ad       	ldd	r18, Y+60	; 0x3c
     dcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dce:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd2:	a5 97       	sbiw	r28, 0x25	; 37
     dd4:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	87 01       	movw	r16, r14
     dde:	ff 24       	eor	r15, r15
     de0:	ee 24       	eor	r14, r14
     de2:	8d a5       	ldd	r24, Y+45	; 0x2d
     de4:	9e a5       	ldd	r25, Y+46	; 0x2e
     de6:	af a5       	ldd	r26, Y+47	; 0x2f
     de8:	b8 a9       	ldd	r27, Y+48	; 0x30
     dea:	a0 70       	andi	r26, 0x00	; 0
     dec:	b0 70       	andi	r27, 0x00	; 0
     dee:	57 01       	movw	r10, r14
     df0:	68 01       	movw	r12, r16
     df2:	a8 2a       	or	r10, r24
     df4:	b9 2a       	or	r11, r25
     df6:	ca 2a       	or	r12, r26
     df8:	db 2a       	or	r13, r27
     dfa:	a2 16       	cp	r10, r18
     dfc:	b3 06       	cpc	r11, r19
     dfe:	c4 06       	cpc	r12, r20
     e00:	d5 06       	cpc	r13, r21
     e02:	00 f5       	brcc	.+64     	; 0xe44 <__stack+0x5e5>
     e04:	08 94       	sec
     e06:	61 08       	sbc	r6, r1
     e08:	71 08       	sbc	r7, r1
     e0a:	81 08       	sbc	r8, r1
     e0c:	91 08       	sbc	r9, r1
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	a6 0e       	add	r10, r22
     e18:	b7 1e       	adc	r11, r23
     e1a:	c8 1e       	adc	r12, r24
     e1c:	d9 1e       	adc	r13, r25
     e1e:	a6 16       	cp	r10, r22
     e20:	b7 06       	cpc	r11, r23
     e22:	c8 06       	cpc	r12, r24
     e24:	d9 06       	cpc	r13, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <__stack+0x5e5>
     e28:	a2 16       	cp	r10, r18
     e2a:	b3 06       	cpc	r11, r19
     e2c:	c4 06       	cpc	r12, r20
     e2e:	d5 06       	cpc	r13, r21
     e30:	48 f4       	brcc	.+18     	; 0xe44 <__stack+0x5e5>
     e32:	08 94       	sec
     e34:	61 08       	sbc	r6, r1
     e36:	71 08       	sbc	r7, r1
     e38:	81 08       	sbc	r8, r1
     e3a:	91 08       	sbc	r9, r1
     e3c:	a6 0e       	add	r10, r22
     e3e:	b7 1e       	adc	r11, r23
     e40:	c8 1e       	adc	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d6 01       	movw	r26, r12
     e46:	c5 01       	movw	r24, r10
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	a4 0b       	sbc	r26, r20
     e4e:	b5 0b       	sbc	r27, r21
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	9a a7       	std	Y+42, r25	; 0x2a
     e54:	ab a7       	std	Y+43, r26	; 0x2b
     e56:	bc a7       	std	Y+44, r27	; 0x2c
     e58:	d1 01       	movw	r26, r2
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	64 01       	movw	r12, r8
     e60:	53 01       	movw	r10, r6
     e62:	a8 2a       	or	r10, r24
     e64:	b9 2a       	or	r11, r25
     e66:	ca 2a       	or	r12, r26
     e68:	db 2a       	or	r13, r27
     e6a:	25 96       	adiw	r28, 0x05	; 5
     e6c:	ac ae       	std	Y+60, r10	; 0x3c
     e6e:	bd ae       	std	Y+61, r11	; 0x3d
     e70:	ce ae       	std	Y+62, r12	; 0x3e
     e72:	df ae       	std	Y+63, r13	; 0x3f
     e74:	25 97       	sbiw	r28, 0x05	; 5
     e76:	86 01       	movw	r16, r12
     e78:	75 01       	movw	r14, r10
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	e2 22       	and	r14, r18
     e84:	f3 22       	and	r15, r19
     e86:	04 23       	and	r16, r20
     e88:	15 23       	and	r17, r21
     e8a:	a6 01       	movw	r20, r12
     e8c:	66 27       	eor	r22, r22
     e8e:	77 27       	eor	r23, r23
     e90:	ad 96       	adiw	r28, 0x2d	; 45
     e92:	4c af       	std	Y+60, r20	; 0x3c
     e94:	5d af       	std	Y+61, r21	; 0x3d
     e96:	6e af       	std	Y+62, r22	; 0x3e
     e98:	7f af       	std	Y+63, r23	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	a9 a8       	ldd	r10, Y+49	; 0x31
     e9e:	ba a8       	ldd	r11, Y+50	; 0x32
     ea0:	cb a8       	ldd	r12, Y+51	; 0x33
     ea2:	dc a8       	ldd	r13, Y+52	; 0x34
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a6 22       	and	r10, r22
     eae:	b7 22       	and	r11, r23
     eb0:	c8 22       	and	r12, r24
     eb2:	d9 22       	and	r13, r25
     eb4:	89 a9       	ldd	r24, Y+49	; 0x31
     eb6:	9a a9       	ldd	r25, Y+50	; 0x32
     eb8:	ab a9       	ldd	r26, Y+51	; 0x33
     eba:	bc a9       	ldd	r27, Y+52	; 0x34
     ebc:	1d 01       	movw	r2, r26
     ebe:	44 24       	eor	r4, r4
     ec0:	55 24       	eor	r5, r5
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	a6 01       	movw	r20, r12
     ec8:	95 01       	movw	r18, r10
     eca:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c af       	std	Y+60, r22	; 0x3c
     ed2:	7d af       	std	Y+61, r23	; 0x3d
     ed4:	8e af       	std	Y+62, r24	; 0x3e
     ed6:	9f af       	std	Y+63, r25	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a2 01       	movw	r20, r4
     ee0:	91 01       	movw	r18, r2
     ee2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     ee6:	3b 01       	movw	r6, r22
     ee8:	4c 01       	movw	r8, r24
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	6c ad       	ldd	r22, Y+60	; 0x3c
     eee:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef4:	ad 97       	sbiw	r28, 0x2d	; 45
     ef6:	a6 01       	movw	r20, r12
     ef8:	95 01       	movw	r18, r10
     efa:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     efe:	7b 01       	movw	r14, r22
     f00:	8c 01       	movw	r16, r24
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	ad 97       	sbiw	r28, 0x2d	; 45
     f0e:	a2 01       	movw	r20, r4
     f10:	91 01       	movw	r18, r2
     f12:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
     f16:	5b 01       	movw	r10, r22
     f18:	6c 01       	movw	r12, r24
     f1a:	a8 01       	movw	r20, r16
     f1c:	97 01       	movw	r18, r14
     f1e:	26 0d       	add	r18, r6
     f20:	37 1d       	adc	r19, r7
     f22:	48 1d       	adc	r20, r8
     f24:	59 1d       	adc	r21, r9
     f26:	a9 96       	adiw	r28, 0x29	; 41
     f28:	6c ac       	ldd	r6, Y+60	; 0x3c
     f2a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f2c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f2e:	9f ac       	ldd	r9, Y+63	; 0x3f
     f30:	a9 97       	sbiw	r28, 0x29	; 41
     f32:	c4 01       	movw	r24, r8
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	4a 1f       	adc	r20, r26
     f3e:	5b 1f       	adc	r21, r27
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	40 07       	cpc	r20, r16
     f46:	51 07       	cpc	r21, r17
     f48:	48 f4       	brcc	.+18     	; 0xf5c <__stack+0x6fd>
     f4a:	e1 2c       	mov	r14, r1
     f4c:	f1 2c       	mov	r15, r1
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	06 2f       	mov	r16, r22
     f52:	11 2d       	mov	r17, r1
     f54:	ae 0c       	add	r10, r14
     f56:	bf 1c       	adc	r11, r15
     f58:	c0 1e       	adc	r12, r16
     f5a:	d1 1e       	adc	r13, r17
     f5c:	ca 01       	movw	r24, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	bb 27       	eor	r27, r27
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	6a 0d       	add	r22, r10
     f68:	7b 1d       	adc	r23, r11
     f6a:	8c 1d       	adc	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	69 a4       	ldd	r6, Y+41	; 0x29
     f70:	7a a4       	ldd	r7, Y+42	; 0x2a
     f72:	8b a4       	ldd	r8, Y+43	; 0x2b
     f74:	9c a4       	ldd	r9, Y+44	; 0x2c
     f76:	66 16       	cp	r6, r22
     f78:	77 06       	cpc	r7, r23
     f7a:	88 06       	cpc	r8, r24
     f7c:	99 06       	cpc	r9, r25
     f7e:	50 f1       	brcs	.+84     	; 0xfd4 <__stack+0x775>
     f80:	66 15       	cp	r22, r6
     f82:	77 05       	cpc	r23, r7
     f84:	88 05       	cpc	r24, r8
     f86:	99 05       	cpc	r25, r9
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0x72d>
     f8a:	4d c0       	rjmp	.+154    	; 0x1026 <__stack+0x7c7>
     f8c:	d9 01       	movw	r26, r18
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2c ad       	ldd	r18, Y+60	; 0x3c
     f96:	3d ad       	ldd	r19, Y+61	; 0x3d
     f98:	4e ad       	ldd	r20, Y+62	; 0x3e
     f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f9c:	a9 97       	sbiw	r28, 0x29	; 41
     f9e:	40 70       	andi	r20, 0x00	; 0
     fa0:	50 70       	andi	r21, 0x00	; 0
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a4 1f       	adc	r26, r20
     fa8:	b5 1f       	adc	r27, r21
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	e2 96       	adiw	r28, 0x32	; 50
     fb8:	0f ac       	ldd	r0, Y+63	; 0x3f
     fba:	e2 97       	sbiw	r28, 0x32	; 50
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <__stack+0x767>
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <__stack+0x75f>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	4a 07       	cpc	r20, r26
     fd0:	5b 07       	cpc	r21, r27
     fd2:	48 f5       	brcc	.+82     	; 0x1026 <__stack+0x7c7>
     fd4:	25 96       	adiw	r28, 0x05	; 5
     fd6:	0c ad       	ldd	r16, Y+60	; 0x3c
     fd8:	1d ad       	ldd	r17, Y+61	; 0x3d
     fda:	2e ad       	ldd	r18, Y+62	; 0x3e
     fdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     fde:	25 97       	sbiw	r28, 0x05	; 5
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	10 40       	sbci	r17, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	0c af       	std	Y+60, r16	; 0x3c
     fec:	1d af       	std	Y+61, r17	; 0x3d
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	3f af       	std	Y+63, r19	; 0x3f
     ff2:	25 97       	sbiw	r28, 0x05	; 5
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__stack+0x7c7>
     ff6:	66 24       	eor	r6, r6
     ff8:	77 24       	eor	r7, r7
     ffa:	43 01       	movw	r8, r6
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	25 96       	adiw	r28, 0x05	; 5
    1006:	2c af       	std	Y+60, r18	; 0x3c
    1008:	3d af       	std	Y+61, r19	; 0x3d
    100a:	4e af       	std	Y+62, r20	; 0x3e
    100c:	5f af       	std	Y+63, r21	; 0x3f
    100e:	25 97       	sbiw	r28, 0x05	; 5
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__stack+0x7cd>
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
    1016:	43 01       	movw	r8, r6
    1018:	25 96       	adiw	r28, 0x05	; 5
    101a:	1c ae       	std	Y+60, r1	; 0x3c
    101c:	1d ae       	std	Y+61, r1	; 0x3d
    101e:	1e ae       	std	Y+62, r1	; 0x3e
    1020:	1f ae       	std	Y+63, r1	; 0x3f
    1022:	25 97       	sbiw	r28, 0x05	; 5
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__stack+0x7cd>
    1026:	66 24       	eor	r6, r6
    1028:	77 24       	eor	r7, r7
    102a:	43 01       	movw	r8, r6
    102c:	fe 01       	movw	r30, r28
    102e:	b1 96       	adiw	r30, 0x21	; 33
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <__stack+0x7d5>
    103a:	25 96       	adiw	r28, 0x05	; 5
    103c:	ac ac       	ldd	r10, Y+60	; 0x3c
    103e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1040:	ce ac       	ldd	r12, Y+62	; 0x3e
    1042:	df ac       	ldd	r13, Y+63	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	a9 a2       	std	Y+33, r10	; 0x21
    1048:	ba a2       	std	Y+34, r11	; 0x22
    104a:	cb a2       	std	Y+35, r12	; 0x23
    104c:	dc a2       	std	Y+36, r13	; 0x24
    104e:	6d a2       	std	Y+37, r6	; 0x25
    1050:	7e a2       	std	Y+38, r7	; 0x26
    1052:	8f a2       	std	Y+39, r8	; 0x27
    1054:	98 a6       	std	Y+40, r9	; 0x28
    1056:	22 96       	adiw	r28, 0x02	; 2
    1058:	2f ad       	ldd	r18, Y+63	; 0x3f
    105a:	22 97       	sbiw	r28, 0x02	; 2
    105c:	3a a1       	ldd	r19, Y+34	; 0x22
    105e:	4b a1       	ldd	r20, Y+35	; 0x23
    1060:	5c a1       	ldd	r21, Y+36	; 0x24
    1062:	66 2d       	mov	r22, r6
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	df a0       	ldd	r13, Y+39	; 0x27
    1068:	98 a5       	ldd	r25, Y+40	; 0x28
    106a:	e1 96       	adiw	r28, 0x31	; 49
    106c:	ec ac       	ldd	r14, Y+60	; 0x3c
    106e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1070:	0e ad       	ldd	r16, Y+62	; 0x3e
    1072:	1f ad       	ldd	r17, Y+63	; 0x3f
    1074:	e1 97       	sbiw	r28, 0x31	; 49
    1076:	e1 14       	cp	r14, r1
    1078:	f1 04       	cpc	r15, r1
    107a:	01 05       	cpc	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0x823>
    1080:	56 c0       	rjmp	.+172    	; 0x112e <__stack+0x8cf>
    1082:	21 95       	neg	r18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	12 16       	cp	r1, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <__stack+0x82d>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	31 95       	neg	r19
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	13 16       	cp	r1, r19
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__stack+0x837>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	93 2e       	mov	r9, r19
    1098:	98 1a       	sub	r9, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	39 15       	cp	r19, r9
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__stack+0x843>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e8 2b       	or	r30, r24
    10a4:	41 95       	neg	r20
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	14 16       	cp	r1, r20
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__stack+0x84f>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	a4 2e       	mov	r10, r20
    10b0:	ae 1a       	sub	r10, r30
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	4a 15       	cp	r20, r10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__stack+0x85b>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	f8 2b       	or	r31, r24
    10bc:	51 95       	neg	r21
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	15 16       	cp	r1, r21
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__stack+0x867>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	b5 2e       	mov	r11, r21
    10c8:	bf 1a       	sub	r11, r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	5b 15       	cp	r21, r11
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__stack+0x873>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	e8 2b       	or	r30, r24
    10d4:	61 95       	neg	r22
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	16 16       	cp	r1, r22
    10da:	08 f0       	brcs	.+2      	; 0x10de <__stack+0x87f>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	a6 2f       	mov	r26, r22
    10e0:	ae 1b       	sub	r26, r30
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	6a 17       	cp	r22, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__stack+0x88b>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f8 2b       	or	r31, r24
    10ec:	71 95       	neg	r23
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	17 16       	cp	r1, r23
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0x897>
    10f4:	e0 e0       	ldi	r30, 0x00	; 0
    10f6:	c7 2e       	mov	r12, r23
    10f8:	cf 1a       	sub	r12, r31
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	7c 15       	cp	r23, r12
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x8a3>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	e8 2b       	or	r30, r24
    1104:	8d 2d       	mov	r24, r13
    1106:	81 95       	neg	r24
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	18 16       	cp	r1, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0x8b1>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	d8 2e       	mov	r13, r24
    1112:	de 1a       	sub	r13, r30
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	8d 15       	cp	r24, r13
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0x8bd>
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	fe 2b       	or	r31, r30
    111e:	89 2f       	mov	r24, r25
    1120:	81 95       	neg	r24
    1122:	39 2d       	mov	r19, r9
    1124:	a5 01       	movw	r20, r10
    1126:	6a 2f       	mov	r22, r26
    1128:	7c 2d       	mov	r23, r12
    112a:	98 2f       	mov	r25, r24
    112c:	9f 1b       	sub	r25, r31
    112e:	8d 2d       	mov	r24, r13
    1130:	ce 58       	subi	r28, 0x8E	; 142
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	e2 e1       	ldi	r30, 0x12	; 18
    1136:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__epilogue_restores__>

0000113a <__moddi3>:
    113a:	a7 e7       	ldi	r26, 0x77	; 119
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 23 31 	jmp	0x6246	; 0x6246 <__prologue_saves__>
    1146:	98 2e       	mov	r9, r24
    1148:	89 2e       	mov	r8, r25
    114a:	71 2e       	mov	r7, r17
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	fe 01       	movw	r30, r28
    1150:	31 96       	adiw	r30, 0x01	; 1
    1152:	df 01       	movw	r26, r30
    1154:	68 2e       	mov	r6, r24
    1156:	1d 92       	st	X+, r1
    1158:	6a 94       	dec	r6
    115a:	e9 f7       	brne	.-6      	; 0x1156 <__moddi3+0x1c>
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	3a 83       	std	Y+2, r19	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	6d 83       	std	Y+5, r22	; 0x05
    1166:	7e 83       	std	Y+6, r23	; 0x06
    1168:	9f 82       	std	Y+7, r9	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	fe 01       	movw	r30, r28
    116e:	39 96       	adiw	r30, 0x09	; 9
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <__moddi3+0x38>
    1178:	a9 86       	std	Y+9, r10	; 0x09
    117a:	ba 86       	std	Y+10, r11	; 0x0a
    117c:	cb 86       	std	Y+11, r12	; 0x0b
    117e:	dc 86       	std	Y+12, r13	; 0x0c
    1180:	ed 86       	std	Y+13, r14	; 0x0d
    1182:	fe 86       	std	Y+14, r15	; 0x0e
    1184:	0f 87       	std	Y+15, r16	; 0x0f
    1186:	18 8b       	std	Y+16, r17	; 0x10
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	af 81       	ldd	r26, Y+7	; 0x07
    118e:	b8 85       	ldd	r27, Y+8	; 0x08
    1190:	b7 fd       	sbrc	r27, 7
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__moddi3+0x68>
    1194:	e1 96       	adiw	r28, 0x31	; 49
    1196:	1c ae       	std	Y+60, r1	; 0x3c
    1198:	1d ae       	std	Y+61, r1	; 0x3d
    119a:	1e ae       	std	Y+62, r1	; 0x3e
    119c:	1f ae       	std	Y+63, r1	; 0x3f
    119e:	e1 97       	sbiw	r28, 0x31	; 49
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <__moddi3+0x130>
    11a2:	21 95       	neg	r18
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	12 16       	cp	r1, r18
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__moddi3+0x72>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	31 95       	neg	r19
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	13 16       	cp	r1, r19
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__moddi3+0x7c>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b3 2f       	mov	r27, r19
    11b8:	b8 1b       	sub	r27, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	3b 17       	cp	r19, r27
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__moddi3+0x88>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	98 2b       	or	r25, r24
    11c4:	41 95       	neg	r20
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	14 16       	cp	r1, r20
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__moddi3+0x94>
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a4 2f       	mov	r26, r20
    11d0:	a9 1b       	sub	r26, r25
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	4a 17       	cp	r20, r26
    11d6:	08 f0       	brcs	.+2      	; 0x11da <__moddi3+0xa0>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	38 2b       	or	r19, r24
    11dc:	51 95       	neg	r21
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	15 16       	cp	r1, r21
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__moddi3+0xac>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	f5 2f       	mov	r31, r21
    11e8:	f3 1b       	sub	r31, r19
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	5f 17       	cp	r21, r31
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__moddi3+0xb8>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	98 2b       	or	r25, r24
    11f4:	61 95       	neg	r22
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	16 16       	cp	r1, r22
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__moddi3+0xc4>
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	e6 2f       	mov	r30, r22
    1200:	e9 1b       	sub	r30, r25
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	6e 17       	cp	r22, r30
    1206:	08 f0       	brcs	.+2      	; 0x120a <__moddi3+0xd0>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	38 2b       	or	r19, r24
    120c:	71 95       	neg	r23
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	17 16       	cp	r1, r23
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__moddi3+0xdc>
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	57 2f       	mov	r21, r23
    1218:	53 1b       	sub	r21, r19
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	75 17       	cp	r23, r21
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__moddi3+0xe8>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	48 2b       	or	r20, r24
    1224:	89 2d       	mov	r24, r9
    1226:	81 95       	neg	r24
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	18 16       	cp	r1, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__moddi3+0xf6>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	68 2e       	mov	r6, r24
    1232:	64 1a       	sub	r6, r20
    1234:	46 2d       	mov	r20, r6
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	86 15       	cp	r24, r6
    123a:	08 f0       	brcs	.+2      	; 0x123e <__moddi3+0x104>
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	93 2b       	or	r25, r19
    1240:	88 2d       	mov	r24, r8
    1242:	81 95       	neg	r24
    1244:	89 1b       	sub	r24, r25
    1246:	29 83       	std	Y+1, r18	; 0x01
    1248:	ba 83       	std	Y+2, r27	; 0x02
    124a:	ab 83       	std	Y+3, r26	; 0x03
    124c:	fc 83       	std	Y+4, r31	; 0x04
    124e:	ed 83       	std	Y+5, r30	; 0x05
    1250:	5e 83       	std	Y+6, r21	; 0x06
    1252:	4f 83       	std	Y+7, r20	; 0x07
    1254:	88 87       	std	Y+8, r24	; 0x08
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f ef       	ldi	r20, 0xFF	; 255
    125c:	5f ef       	ldi	r21, 0xFF	; 255
    125e:	e1 96       	adiw	r28, 0x31	; 49
    1260:	2c af       	std	Y+60, r18	; 0x3c
    1262:	3d af       	std	Y+61, r19	; 0x3d
    1264:	4e af       	std	Y+62, r20	; 0x3e
    1266:	5f af       	std	Y+63, r21	; 0x3f
    1268:	e1 97       	sbiw	r28, 0x31	; 49
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	af 85       	ldd	r26, Y+15	; 0x0f
    1270:	b8 89       	ldd	r27, Y+16	; 0x10
    1272:	b7 ff       	sbrs	r27, 7
    1274:	5a c0       	rjmp	.+180    	; 0x132a <__moddi3+0x1f0>
    1276:	a1 94       	neg	r10
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	1a 14       	cp	r1, r10
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0x146>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	b1 94       	neg	r11
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	1b 14       	cp	r1, r11
    1286:	08 f0       	brcs	.+2      	; 0x128a <__moddi3+0x150>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	6b 2d       	mov	r22, r11
    128c:	68 1b       	sub	r22, r24
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	b6 16       	cp	r11, r22
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__moddi3+0x15c>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	98 2b       	or	r25, r24
    1298:	c1 94       	neg	r12
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	1c 14       	cp	r1, r12
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__moddi3+0x168>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	5c 2d       	mov	r21, r12
    12a4:	59 1b       	sub	r21, r25
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	c5 16       	cp	r12, r21
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__moddi3+0x174>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	28 2b       	or	r18, r24
    12b0:	d1 94       	neg	r13
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	1d 14       	cp	r1, r13
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__moddi3+0x180>
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	4d 2d       	mov	r20, r13
    12bc:	42 1b       	sub	r20, r18
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	d4 16       	cp	r13, r20
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__moddi3+0x18c>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	98 2b       	or	r25, r24
    12c8:	e1 94       	neg	r14
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	1e 14       	cp	r1, r14
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__moddi3+0x198>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3e 2d       	mov	r19, r14
    12d4:	39 1b       	sub	r19, r25
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	e3 16       	cp	r14, r19
    12da:	08 f0       	brcs	.+2      	; 0x12de <__moddi3+0x1a4>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	28 2b       	or	r18, r24
    12e0:	f1 94       	neg	r15
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	1f 14       	cp	r1, r15
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__moddi3+0x1b0>
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	7f 2d       	mov	r23, r15
    12ec:	72 1b       	sub	r23, r18
    12ee:	27 2f       	mov	r18, r23
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	f7 16       	cp	r15, r23
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__moddi3+0x1be>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	98 2b       	or	r25, r24
    12fa:	01 95       	neg	r16
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	10 16       	cp	r1, r16
    1300:	08 f0       	brcs	.+2      	; 0x1304 <__moddi3+0x1ca>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	80 2f       	mov	r24, r16
    1306:	89 1b       	sub	r24, r25
    1308:	98 2f       	mov	r25, r24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	09 17       	cp	r16, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__moddi3+0x1d8>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	18 2b       	or	r17, r24
    1314:	87 2d       	mov	r24, r7
    1316:	81 95       	neg	r24
    1318:	81 1b       	sub	r24, r17
    131a:	a9 86       	std	Y+9, r10	; 0x09
    131c:	6a 87       	std	Y+10, r22	; 0x0a
    131e:	5b 87       	std	Y+11, r21	; 0x0b
    1320:	4c 87       	std	Y+12, r20	; 0x0c
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2e 87       	std	Y+14, r18	; 0x0e
    1326:	9f 87       	std	Y+15, r25	; 0x0f
    1328:	88 8b       	std	Y+16, r24	; 0x10
    132a:	99 81       	ldd	r25, Y+1	; 0x01
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	6e 81       	ldd	r22, Y+6	; 0x06
    1336:	7f 81       	ldd	r23, Y+7	; 0x07
    1338:	a8 85       	ldd	r26, Y+8	; 0x08
    133a:	b9 85       	ldd	r27, Y+9	; 0x09
    133c:	1a 85       	ldd	r17, Y+10	; 0x0a
    133e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1340:	fc 84       	ldd	r15, Y+12	; 0x0c
    1342:	ed 84       	ldd	r14, Y+13	; 0x0d
    1344:	de 84       	ldd	r13, Y+14	; 0x0e
    1346:	cf 84       	ldd	r12, Y+15	; 0x0f
    1348:	b8 88       	ldd	r11, Y+16	; 0x10
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	e9 e1       	ldi	r30, 0x19	; 25
    134e:	8e 2e       	mov	r8, r30
    1350:	91 2c       	mov	r9, r1
    1352:	8c 0e       	add	r8, r28
    1354:	9d 1e       	adc	r9, r29
    1356:	f4 01       	movw	r30, r8
    1358:	68 2e       	mov	r6, r24
    135a:	11 92       	st	Z+, r1
    135c:	6a 94       	dec	r6
    135e:	e9 f7       	brne	.-6      	; 0x135a <__moddi3+0x220>
    1360:	99 8f       	std	Y+25, r25	; 0x19
    1362:	2a 8f       	std	Y+26, r18	; 0x1a
    1364:	3b 8f       	std	Y+27, r19	; 0x1b
    1366:	4c 8f       	std	Y+28, r20	; 0x1c
    1368:	5d 8f       	std	Y+29, r21	; 0x1d
    136a:	6e 8f       	std	Y+30, r22	; 0x1e
    136c:	7f 8f       	std	Y+31, r23	; 0x1f
    136e:	a8 a3       	std	Y+32, r26	; 0x20
    1370:	9e 01       	movw	r18, r28
    1372:	2f 5d       	subi	r18, 0xDF	; 223
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	f9 01       	movw	r30, r18
    1378:	11 92       	st	Z+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <__moddi3+0x23e>
    137e:	b9 a3       	std	Y+33, r27	; 0x21
    1380:	1a a3       	std	Y+34, r17	; 0x22
    1382:	0b a3       	std	Y+35, r16	; 0x23
    1384:	fc a2       	std	Y+36, r15	; 0x24
    1386:	ed a2       	std	Y+37, r14	; 0x25
    1388:	de a2       	std	Y+38, r13	; 0x26
    138a:	cf a2       	std	Y+39, r12	; 0x27
    138c:	b8 a6       	std	Y+40, r11	; 0x28
    138e:	29 a0       	ldd	r2, Y+33	; 0x21
    1390:	3a a0       	ldd	r3, Y+34	; 0x22
    1392:	4b a0       	ldd	r4, Y+35	; 0x23
    1394:	5c a0       	ldd	r5, Y+36	; 0x24
    1396:	ad a0       	ldd	r10, Y+37	; 0x25
    1398:	be a0       	ldd	r11, Y+38	; 0x26
    139a:	cf a0       	ldd	r12, Y+39	; 0x27
    139c:	d8 a4       	ldd	r13, Y+40	; 0x28
    139e:	49 8d       	ldd	r20, Y+25	; 0x19
    13a0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    13a6:	e5 96       	adiw	r28, 0x35	; 53
    13a8:	4f af       	std	Y+63, r20	; 0x3f
    13aa:	e5 97       	sbiw	r28, 0x35	; 53
    13ac:	e6 96       	adiw	r28, 0x36	; 54
    13ae:	5f af       	std	Y+63, r21	; 0x3f
    13b0:	e6 97       	sbiw	r28, 0x36	; 54
    13b2:	e7 96       	adiw	r28, 0x37	; 55
    13b4:	6f af       	std	Y+63, r22	; 0x3f
    13b6:	e7 97       	sbiw	r28, 0x37	; 55
    13b8:	e8 96       	adiw	r28, 0x38	; 56
    13ba:	7f af       	std	Y+63, r23	; 0x3f
    13bc:	e8 97       	sbiw	r28, 0x38	; 56
    13be:	e8 96       	adiw	r28, 0x38	; 56
    13c0:	6c ac       	ldd	r6, Y+60	; 0x3c
    13c2:	7d ac       	ldd	r7, Y+61	; 0x3d
    13c4:	8e ac       	ldd	r8, Y+62	; 0x3e
    13c6:	9f ac       	ldd	r9, Y+63	; 0x3f
    13c8:	e8 97       	sbiw	r28, 0x38	; 56
    13ca:	2d 96       	adiw	r28, 0x0d	; 13
    13cc:	6c ae       	std	Y+60, r6	; 0x3c
    13ce:	7d ae       	std	Y+61, r7	; 0x3d
    13d0:	8e ae       	std	Y+62, r8	; 0x3e
    13d2:	9f ae       	std	Y+63, r9	; 0x3f
    13d4:	2d 97       	sbiw	r28, 0x0d	; 13
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13da:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13dc:	38 a1       	ldd	r19, Y+32	; 0x20
    13de:	3c 01       	movw	r6, r24
    13e0:	49 01       	movw	r8, r18
    13e2:	61 96       	adiw	r28, 0x11	; 17
    13e4:	6c ae       	std	Y+60, r6	; 0x3c
    13e6:	7d ae       	std	Y+61, r7	; 0x3d
    13e8:	8e ae       	std	Y+62, r8	; 0x3e
    13ea:	9f ae       	std	Y+63, r9	; 0x3f
    13ec:	61 97       	sbiw	r28, 0x11	; 17
    13ee:	a1 14       	cp	r10, r1
    13f0:	b1 04       	cpc	r11, r1
    13f2:	c1 04       	cpc	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__moddi3+0x2c0>
    13f8:	28 c3       	rjmp	.+1616   	; 0x1a4a <__moddi3+0x910>
    13fa:	62 14       	cp	r6, r2
    13fc:	73 04       	cpc	r7, r3
    13fe:	84 04       	cpc	r8, r4
    1400:	95 04       	cpc	r9, r5
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__moddi3+0x2cc>
    1404:	0e c1       	rjmp	.+540    	; 0x1622 <__moddi3+0x4e8>
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	20 16       	cp	r2, r16
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	30 06       	cpc	r3, r16
    140e:	01 e0       	ldi	r16, 0x01	; 1
    1410:	40 06       	cpc	r4, r16
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	50 06       	cpc	r5, r16
    1416:	88 f4       	brcc	.+34     	; 0x143a <__moddi3+0x300>
    1418:	1f ef       	ldi	r17, 0xFF	; 255
    141a:	21 16       	cp	r2, r17
    141c:	31 04       	cpc	r3, r1
    141e:	41 04       	cpc	r4, r1
    1420:	51 04       	cpc	r5, r1
    1422:	39 f0       	breq	.+14     	; 0x1432 <__moddi3+0x2f8>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__moddi3+0x2f8>
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	e8 2e       	mov	r14, r24
    142a:	f1 2c       	mov	r15, r1
    142c:	01 2d       	mov	r16, r1
    142e:	11 2d       	mov	r17, r1
    1430:	18 c0       	rjmp	.+48     	; 0x1462 <__moddi3+0x328>
    1432:	ee 24       	eor	r14, r14
    1434:	ff 24       	eor	r15, r15
    1436:	87 01       	movw	r16, r14
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__moddi3+0x328>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	22 16       	cp	r2, r18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	32 06       	cpc	r3, r18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	42 06       	cpc	r4, r18
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	52 06       	cpc	r5, r18
    144a:	30 f0       	brcs	.+12     	; 0x1458 <__moddi3+0x31e>
    144c:	b8 e1       	ldi	r27, 0x18	; 24
    144e:	eb 2e       	mov	r14, r27
    1450:	f1 2c       	mov	r15, r1
    1452:	01 2d       	mov	r16, r1
    1454:	11 2d       	mov	r17, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__moddi3+0x328>
    1458:	a0 e1       	ldi	r26, 0x10	; 16
    145a:	ea 2e       	mov	r14, r26
    145c:	f1 2c       	mov	r15, r1
    145e:	01 2d       	mov	r16, r1
    1460:	11 2d       	mov	r17, r1
    1462:	d2 01       	movw	r26, r4
    1464:	c1 01       	movw	r24, r2
    1466:	0e 2c       	mov	r0, r14
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__moddi3+0x338>
    146a:	b6 95       	lsr	r27
    146c:	a7 95       	ror	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	0a 94       	dec	r0
    1474:	d2 f7       	brpl	.-12     	; 0x146a <__moddi3+0x330>
    1476:	83 58       	subi	r24, 0x83	; 131
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	dc 01       	movw	r26, r24
    147c:	2c 91       	ld	r18, X
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8e 19       	sub	r24, r14
    1488:	9f 09       	sbc	r25, r15
    148a:	a0 0b       	sbc	r26, r16
    148c:	b1 0b       	sbc	r27, r17
    148e:	5c 01       	movw	r10, r24
    1490:	6d 01       	movw	r12, r26
    1492:	a2 1a       	sub	r10, r18
    1494:	b1 08       	sbc	r11, r1
    1496:	c1 08       	sbc	r12, r1
    1498:	d1 08       	sbc	r13, r1
    149a:	65 96       	adiw	r28, 0x15	; 21
    149c:	ac ae       	std	Y+60, r10	; 0x3c
    149e:	bd ae       	std	Y+61, r11	; 0x3d
    14a0:	ce ae       	std	Y+62, r12	; 0x3e
    14a2:	df ae       	std	Y+63, r13	; 0x3f
    14a4:	65 97       	sbiw	r28, 0x15	; 21
    14a6:	a1 14       	cp	r10, r1
    14a8:	b1 04       	cpc	r11, r1
    14aa:	c1 04       	cpc	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__moddi3+0x378>
    14b0:	45 c0       	rjmp	.+138    	; 0x153c <__moddi3+0x402>
    14b2:	62 96       	adiw	r28, 0x12	; 18
    14b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    14b6:	62 97       	sbiw	r28, 0x12	; 18
    14b8:	06 2e       	mov	r0, r22
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <__moddi3+0x38a>
    14bc:	22 0c       	add	r2, r2
    14be:	33 1c       	adc	r3, r3
    14c0:	44 1c       	adc	r4, r4
    14c2:	55 1c       	adc	r5, r5
    14c4:	0a 94       	dec	r0
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <__moddi3+0x382>
    14c8:	a4 01       	movw	r20, r8
    14ca:	93 01       	movw	r18, r6
    14cc:	06 2e       	mov	r0, r22
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__moddi3+0x39e>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <__moddi3+0x396>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	8a 19       	sub	r24, r10
    14e2:	9b 09       	sbc	r25, r11
    14e4:	e8 96       	adiw	r28, 0x38	; 56
    14e6:	cc ac       	ldd	r12, Y+60	; 0x3c
    14e8:	dd ac       	ldd	r13, Y+61	; 0x3d
    14ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    14ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    14ee:	e8 97       	sbiw	r28, 0x38	; 56
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__moddi3+0x3c0>
    14f2:	f6 94       	lsr	r15
    14f4:	e7 94       	ror	r14
    14f6:	d7 94       	ror	r13
    14f8:	c7 94       	ror	r12
    14fa:	8a 95       	dec	r24
    14fc:	d2 f7       	brpl	.-12     	; 0x14f2 <__moddi3+0x3b8>
    14fe:	87 01       	movw	r16, r14
    1500:	76 01       	movw	r14, r12
    1502:	e2 2a       	or	r14, r18
    1504:	f3 2a       	or	r15, r19
    1506:	04 2b       	or	r16, r20
    1508:	15 2b       	or	r17, r21
    150a:	61 96       	adiw	r28, 0x11	; 17
    150c:	ec ae       	std	Y+60, r14	; 0x3c
    150e:	fd ae       	std	Y+61, r15	; 0x3d
    1510:	0e af       	std	Y+62, r16	; 0x3e
    1512:	1f af       	std	Y+63, r17	; 0x3f
    1514:	61 97       	sbiw	r28, 0x11	; 17
    1516:	e8 96       	adiw	r28, 0x38	; 56
    1518:	0c ad       	ldd	r16, Y+60	; 0x3c
    151a:	1d ad       	ldd	r17, Y+61	; 0x3d
    151c:	2e ad       	ldd	r18, Y+62	; 0x3e
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	e8 97       	sbiw	r28, 0x38	; 56
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__moddi3+0x3f2>
    1524:	00 0f       	add	r16, r16
    1526:	11 1f       	adc	r17, r17
    1528:	22 1f       	adc	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	6a 95       	dec	r22
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__moddi3+0x3ea>
    1530:	2d 96       	adiw	r28, 0x0d	; 13
    1532:	0c af       	std	Y+60, r16	; 0x3c
    1534:	1d af       	std	Y+61, r17	; 0x3d
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	3f af       	std	Y+63, r19	; 0x3f
    153a:	2d 97       	sbiw	r28, 0x0d	; 13
    153c:	32 01       	movw	r6, r4
    153e:	88 24       	eor	r8, r8
    1540:	99 24       	eor	r9, r9
    1542:	a2 01       	movw	r20, r4
    1544:	91 01       	movw	r18, r2
    1546:	40 70       	andi	r20, 0x00	; 0
    1548:	50 70       	andi	r21, 0x00	; 0
    154a:	69 96       	adiw	r28, 0x19	; 25
    154c:	2c af       	std	Y+60, r18	; 0x3c
    154e:	3d af       	std	Y+61, r19	; 0x3d
    1550:	4e af       	std	Y+62, r20	; 0x3e
    1552:	5f af       	std	Y+63, r21	; 0x3f
    1554:	69 97       	sbiw	r28, 0x19	; 25
    1556:	61 96       	adiw	r28, 0x11	; 17
    1558:	6c ad       	ldd	r22, Y+60	; 0x3c
    155a:	7d ad       	ldd	r23, Y+61	; 0x3d
    155c:	8e ad       	ldd	r24, Y+62	; 0x3e
    155e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1560:	61 97       	sbiw	r28, 0x11	; 17
    1562:	a4 01       	movw	r20, r8
    1564:	93 01       	movw	r18, r6
    1566:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    156a:	7b 01       	movw	r14, r22
    156c:	8c 01       	movw	r16, r24
    156e:	61 96       	adiw	r28, 0x11	; 17
    1570:	6c ad       	ldd	r22, Y+60	; 0x3c
    1572:	7d ad       	ldd	r23, Y+61	; 0x3d
    1574:	8e ad       	ldd	r24, Y+62	; 0x3e
    1576:	9f ad       	ldd	r25, Y+63	; 0x3f
    1578:	61 97       	sbiw	r28, 0x11	; 17
    157a:	a4 01       	movw	r20, r8
    157c:	93 01       	movw	r18, r6
    157e:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1582:	ca 01       	movw	r24, r20
    1584:	b9 01       	movw	r22, r18
    1586:	69 96       	adiw	r28, 0x19	; 25
    1588:	2c ad       	ldd	r18, Y+60	; 0x3c
    158a:	3d ad       	ldd	r19, Y+61	; 0x3d
    158c:	4e ad       	ldd	r20, Y+62	; 0x3e
    158e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1590:	69 97       	sbiw	r28, 0x19	; 25
    1592:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	87 01       	movw	r16, r14
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	2d 96       	adiw	r28, 0x0d	; 13
    15a2:	ac ac       	ldd	r10, Y+60	; 0x3c
    15a4:	bd ac       	ldd	r11, Y+61	; 0x3d
    15a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    15a8:	df ac       	ldd	r13, Y+63	; 0x3f
    15aa:	2d 97       	sbiw	r28, 0x0d	; 13
    15ac:	c6 01       	movw	r24, r12
    15ae:	aa 27       	eor	r26, r26
    15b0:	bb 27       	eor	r27, r27
    15b2:	57 01       	movw	r10, r14
    15b4:	68 01       	movw	r12, r16
    15b6:	a8 2a       	or	r10, r24
    15b8:	b9 2a       	or	r11, r25
    15ba:	ca 2a       	or	r12, r26
    15bc:	db 2a       	or	r13, r27
    15be:	a2 16       	cp	r10, r18
    15c0:	b3 06       	cpc	r11, r19
    15c2:	c4 06       	cpc	r12, r20
    15c4:	d5 06       	cpc	r13, r21
    15c6:	90 f4       	brcc	.+36     	; 0x15ec <__moddi3+0x4b2>
    15c8:	a2 0c       	add	r10, r2
    15ca:	b3 1c       	adc	r11, r3
    15cc:	c4 1c       	adc	r12, r4
    15ce:	d5 1c       	adc	r13, r5
    15d0:	a2 14       	cp	r10, r2
    15d2:	b3 04       	cpc	r11, r3
    15d4:	c4 04       	cpc	r12, r4
    15d6:	d5 04       	cpc	r13, r5
    15d8:	48 f0       	brcs	.+18     	; 0x15ec <__moddi3+0x4b2>
    15da:	a2 16       	cp	r10, r18
    15dc:	b3 06       	cpc	r11, r19
    15de:	c4 06       	cpc	r12, r20
    15e0:	d5 06       	cpc	r13, r21
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <__moddi3+0x4b2>
    15e4:	a2 0c       	add	r10, r2
    15e6:	b3 1c       	adc	r11, r3
    15e8:	c4 1c       	adc	r12, r4
    15ea:	d5 1c       	adc	r13, r5
    15ec:	a2 1a       	sub	r10, r18
    15ee:	b3 0a       	sbc	r11, r19
    15f0:	c4 0a       	sbc	r12, r20
    15f2:	d5 0a       	sbc	r13, r21
    15f4:	c6 01       	movw	r24, r12
    15f6:	b5 01       	movw	r22, r10
    15f8:	a4 01       	movw	r20, r8
    15fa:	93 01       	movw	r18, r6
    15fc:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1600:	7b 01       	movw	r14, r22
    1602:	8c 01       	movw	r16, r24
    1604:	c6 01       	movw	r24, r12
    1606:	b5 01       	movw	r22, r10
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1610:	ca 01       	movw	r24, r20
    1612:	b9 01       	movw	r22, r18
    1614:	69 96       	adiw	r28, 0x19	; 25
    1616:	2c ad       	ldd	r18, Y+60	; 0x3c
    1618:	3d ad       	ldd	r19, Y+61	; 0x3d
    161a:	4e ad       	ldd	r20, Y+62	; 0x3e
    161c:	5f ad       	ldd	r21, Y+63	; 0x3f
    161e:	69 97       	sbiw	r28, 0x19	; 25
    1620:	c8 c1       	rjmp	.+912    	; 0x19b2 <__moddi3+0x878>
    1622:	21 14       	cp	r2, r1
    1624:	31 04       	cpc	r3, r1
    1626:	41 04       	cpc	r4, r1
    1628:	51 04       	cpc	r5, r1
    162a:	71 f4       	brne	.+28     	; 0x1648 <__moddi3+0x50e>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1640:	c9 01       	movw	r24, r18
    1642:	da 01       	movw	r26, r20
    1644:	1c 01       	movw	r2, r24
    1646:	2d 01       	movw	r4, r26
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	20 16       	cp	r2, r16
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	30 06       	cpc	r3, r16
    1650:	01 e0       	ldi	r16, 0x01	; 1
    1652:	40 06       	cpc	r4, r16
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	50 06       	cpc	r5, r16
    1658:	88 f4       	brcc	.+34     	; 0x167c <__moddi3+0x542>
    165a:	1f ef       	ldi	r17, 0xFF	; 255
    165c:	21 16       	cp	r2, r17
    165e:	31 04       	cpc	r3, r1
    1660:	41 04       	cpc	r4, r1
    1662:	51 04       	cpc	r5, r1
    1664:	39 f0       	breq	.+14     	; 0x1674 <__moddi3+0x53a>
    1666:	30 f0       	brcs	.+12     	; 0x1674 <__moddi3+0x53a>
    1668:	68 e0       	ldi	r22, 0x08	; 8
    166a:	e6 2e       	mov	r14, r22
    166c:	f1 2c       	mov	r15, r1
    166e:	01 2d       	mov	r16, r1
    1670:	11 2d       	mov	r17, r1
    1672:	18 c0       	rjmp	.+48     	; 0x16a4 <__moddi3+0x56a>
    1674:	ee 24       	eor	r14, r14
    1676:	ff 24       	eor	r15, r15
    1678:	87 01       	movw	r16, r14
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <__moddi3+0x56a>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	22 16       	cp	r2, r18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	32 06       	cpc	r3, r18
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	42 06       	cpc	r4, r18
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	52 06       	cpc	r5, r18
    168c:	30 f0       	brcs	.+12     	; 0x169a <__moddi3+0x560>
    168e:	58 e1       	ldi	r21, 0x18	; 24
    1690:	e5 2e       	mov	r14, r21
    1692:	f1 2c       	mov	r15, r1
    1694:	01 2d       	mov	r16, r1
    1696:	11 2d       	mov	r17, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__moddi3+0x56a>
    169a:	40 e1       	ldi	r20, 0x10	; 16
    169c:	e4 2e       	mov	r14, r20
    169e:	f1 2c       	mov	r15, r1
    16a0:	01 2d       	mov	r16, r1
    16a2:	11 2d       	mov	r17, r1
    16a4:	d2 01       	movw	r26, r4
    16a6:	c1 01       	movw	r24, r2
    16a8:	0e 2c       	mov	r0, r14
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <__moddi3+0x57a>
    16ac:	b6 95       	lsr	r27
    16ae:	a7 95       	ror	r26
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	0a 94       	dec	r0
    16b6:	d2 f7       	brpl	.-12     	; 0x16ac <__moddi3+0x572>
    16b8:	83 58       	subi	r24, 0x83	; 131
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	dc 01       	movw	r26, r24
    16be:	2c 91       	ld	r18, X
    16c0:	30 e2       	ldi	r19, 0x20	; 32
    16c2:	a3 2e       	mov	r10, r19
    16c4:	b1 2c       	mov	r11, r1
    16c6:	c1 2c       	mov	r12, r1
    16c8:	d1 2c       	mov	r13, r1
    16ca:	d6 01       	movw	r26, r12
    16cc:	c5 01       	movw	r24, r10
    16ce:	8e 19       	sub	r24, r14
    16d0:	9f 09       	sbc	r25, r15
    16d2:	a0 0b       	sbc	r26, r16
    16d4:	b1 0b       	sbc	r27, r17
    16d6:	7c 01       	movw	r14, r24
    16d8:	8d 01       	movw	r16, r26
    16da:	e2 1a       	sub	r14, r18
    16dc:	f1 08       	sbc	r15, r1
    16de:	01 09       	sbc	r16, r1
    16e0:	11 09       	sbc	r17, r1
    16e2:	65 96       	adiw	r28, 0x15	; 21
    16e4:	ec ae       	std	Y+60, r14	; 0x3c
    16e6:	fd ae       	std	Y+61, r15	; 0x3d
    16e8:	0e af       	std	Y+62, r16	; 0x3e
    16ea:	1f af       	std	Y+63, r17	; 0x3f
    16ec:	65 97       	sbiw	r28, 0x15	; 21
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__moddi3+0x5cc>
    16f8:	64 01       	movw	r12, r8
    16fa:	53 01       	movw	r10, r6
    16fc:	a2 18       	sub	r10, r2
    16fe:	b3 08       	sbc	r11, r3
    1700:	c4 08       	sbc	r12, r4
    1702:	d5 08       	sbc	r13, r5
    1704:	ec c0       	rjmp	.+472    	; 0x18de <__moddi3+0x7a4>
    1706:	62 96       	adiw	r28, 0x12	; 18
    1708:	ff ac       	ldd	r15, Y+63	; 0x3f
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	e4 96       	adiw	r28, 0x34	; 52
    170e:	ff ae       	std	Y+63, r15	; 0x3f
    1710:	e4 97       	sbiw	r28, 0x34	; 52
    1712:	0f 2c       	mov	r0, r15
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__moddi3+0x5e4>
    1716:	22 0c       	add	r2, r2
    1718:	33 1c       	adc	r3, r3
    171a:	44 1c       	adc	r4, r4
    171c:	55 1c       	adc	r5, r5
    171e:	0a 94       	dec	r0
    1720:	d2 f7       	brpl	.-12     	; 0x1716 <__moddi3+0x5dc>
    1722:	8a 2d       	mov	r24, r10
    1724:	8f 19       	sub	r24, r15
    1726:	64 01       	movw	r12, r8
    1728:	53 01       	movw	r10, r6
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__moddi3+0x5fc>
    172e:	d6 94       	lsr	r13
    1730:	c7 94       	ror	r12
    1732:	b7 94       	ror	r11
    1734:	a7 94       	ror	r10
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__moddi3+0x5f4>
    173a:	a4 01       	movw	r20, r8
    173c:	93 01       	movw	r18, r6
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__moddi3+0x60e>
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	44 1f       	adc	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	fa 94       	dec	r15
    174a:	d2 f7       	brpl	.-12     	; 0x1740 <__moddi3+0x606>
    174c:	e8 96       	adiw	r28, 0x38	; 56
    174e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1750:	7d ac       	ldd	r7, Y+61	; 0x3d
    1752:	8e ac       	ldd	r8, Y+62	; 0x3e
    1754:	9f ac       	ldd	r9, Y+63	; 0x3f
    1756:	e8 97       	sbiw	r28, 0x38	; 56
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__moddi3+0x628>
    175a:	96 94       	lsr	r9
    175c:	87 94       	ror	r8
    175e:	77 94       	ror	r7
    1760:	67 94       	ror	r6
    1762:	8a 95       	dec	r24
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__moddi3+0x620>
    1766:	84 01       	movw	r16, r8
    1768:	73 01       	movw	r14, r6
    176a:	e2 2a       	or	r14, r18
    176c:	f3 2a       	or	r15, r19
    176e:	04 2b       	or	r16, r20
    1770:	15 2b       	or	r17, r21
    1772:	29 96       	adiw	r28, 0x09	; 9
    1774:	ec ae       	std	Y+60, r14	; 0x3c
    1776:	fd ae       	std	Y+61, r15	; 0x3d
    1778:	0e af       	std	Y+62, r16	; 0x3e
    177a:	1f af       	std	Y+63, r17	; 0x3f
    177c:	29 97       	sbiw	r28, 0x09	; 9
    177e:	32 01       	movw	r6, r4
    1780:	88 24       	eor	r8, r8
    1782:	99 24       	eor	r9, r9
    1784:	92 01       	movw	r18, r4
    1786:	81 01       	movw	r16, r2
    1788:	20 70       	andi	r18, 0x00	; 0
    178a:	30 70       	andi	r19, 0x00	; 0
    178c:	6d 96       	adiw	r28, 0x1d	; 29
    178e:	0c af       	std	Y+60, r16	; 0x3c
    1790:	1d af       	std	Y+61, r17	; 0x3d
    1792:	2e af       	std	Y+62, r18	; 0x3e
    1794:	3f af       	std	Y+63, r19	; 0x3f
    1796:	6d 97       	sbiw	r28, 0x1d	; 29
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	a4 01       	movw	r20, r8
    179e:	93 01       	movw	r18, r6
    17a0:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    17a4:	7b 01       	movw	r14, r22
    17a6:	8c 01       	movw	r16, r24
    17a8:	c6 01       	movw	r24, r12
    17aa:	b5 01       	movw	r22, r10
    17ac:	a4 01       	movw	r20, r8
    17ae:	93 01       	movw	r18, r6
    17b0:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    17b4:	ca 01       	movw	r24, r20
    17b6:	b9 01       	movw	r22, r18
    17b8:	6d 96       	adiw	r28, 0x1d	; 29
    17ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    17bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17be:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c2:	6d 97       	sbiw	r28, 0x1d	; 29
    17c4:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	87 01       	movw	r16, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	ee 24       	eor	r14, r14
    17d2:	29 96       	adiw	r28, 0x09	; 9
    17d4:	ac ac       	ldd	r10, Y+60	; 0x3c
    17d6:	bd ac       	ldd	r11, Y+61	; 0x3d
    17d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    17da:	df ac       	ldd	r13, Y+63	; 0x3f
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	c6 01       	movw	r24, r12
    17e0:	aa 27       	eor	r26, r26
    17e2:	bb 27       	eor	r27, r27
    17e4:	5c 01       	movw	r10, r24
    17e6:	6d 01       	movw	r12, r26
    17e8:	ae 28       	or	r10, r14
    17ea:	bf 28       	or	r11, r15
    17ec:	c0 2a       	or	r12, r16
    17ee:	d1 2a       	or	r13, r17
    17f0:	a2 16       	cp	r10, r18
    17f2:	b3 06       	cpc	r11, r19
    17f4:	c4 06       	cpc	r12, r20
    17f6:	d5 06       	cpc	r13, r21
    17f8:	90 f4       	brcc	.+36     	; 0x181e <__moddi3+0x6e4>
    17fa:	a2 0c       	add	r10, r2
    17fc:	b3 1c       	adc	r11, r3
    17fe:	c4 1c       	adc	r12, r4
    1800:	d5 1c       	adc	r13, r5
    1802:	a2 14       	cp	r10, r2
    1804:	b3 04       	cpc	r11, r3
    1806:	c4 04       	cpc	r12, r4
    1808:	d5 04       	cpc	r13, r5
    180a:	48 f0       	brcs	.+18     	; 0x181e <__moddi3+0x6e4>
    180c:	a2 16       	cp	r10, r18
    180e:	b3 06       	cpc	r11, r19
    1810:	c4 06       	cpc	r12, r20
    1812:	d5 06       	cpc	r13, r21
    1814:	20 f4       	brcc	.+8      	; 0x181e <__moddi3+0x6e4>
    1816:	a2 0c       	add	r10, r2
    1818:	b3 1c       	adc	r11, r3
    181a:	c4 1c       	adc	r12, r4
    181c:	d5 1c       	adc	r13, r5
    181e:	a2 1a       	sub	r10, r18
    1820:	b3 0a       	sbc	r11, r19
    1822:	c4 0a       	sbc	r12, r20
    1824:	d5 0a       	sbc	r13, r21
    1826:	c6 01       	movw	r24, r12
    1828:	b5 01       	movw	r22, r10
    182a:	a4 01       	movw	r20, r8
    182c:	93 01       	movw	r18, r6
    182e:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1842:	ca 01       	movw	r24, r20
    1844:	b9 01       	movw	r22, r18
    1846:	6d 96       	adiw	r28, 0x1d	; 29
    1848:	2c ad       	ldd	r18, Y+60	; 0x3c
    184a:	3d ad       	ldd	r19, Y+61	; 0x3d
    184c:	4e ad       	ldd	r20, Y+62	; 0x3e
    184e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1850:	6d 97       	sbiw	r28, 0x1d	; 29
    1852:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	87 01       	movw	r16, r14
    185c:	ff 24       	eor	r15, r15
    185e:	ee 24       	eor	r14, r14
    1860:	29 96       	adiw	r28, 0x09	; 9
    1862:	8c ad       	ldd	r24, Y+60	; 0x3c
    1864:	9d ad       	ldd	r25, Y+61	; 0x3d
    1866:	ae ad       	ldd	r26, Y+62	; 0x3e
    1868:	bf ad       	ldd	r27, Y+63	; 0x3f
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	a0 70       	andi	r26, 0x00	; 0
    186e:	b0 70       	andi	r27, 0x00	; 0
    1870:	57 01       	movw	r10, r14
    1872:	68 01       	movw	r12, r16
    1874:	a8 2a       	or	r10, r24
    1876:	b9 2a       	or	r11, r25
    1878:	ca 2a       	or	r12, r26
    187a:	db 2a       	or	r13, r27
    187c:	a2 16       	cp	r10, r18
    187e:	b3 06       	cpc	r11, r19
    1880:	c4 06       	cpc	r12, r20
    1882:	d5 06       	cpc	r13, r21
    1884:	90 f4       	brcc	.+36     	; 0x18aa <__moddi3+0x770>
    1886:	a2 0c       	add	r10, r2
    1888:	b3 1c       	adc	r11, r3
    188a:	c4 1c       	adc	r12, r4
    188c:	d5 1c       	adc	r13, r5
    188e:	a2 14       	cp	r10, r2
    1890:	b3 04       	cpc	r11, r3
    1892:	c4 04       	cpc	r12, r4
    1894:	d5 04       	cpc	r13, r5
    1896:	48 f0       	brcs	.+18     	; 0x18aa <__moddi3+0x770>
    1898:	a2 16       	cp	r10, r18
    189a:	b3 06       	cpc	r11, r19
    189c:	c4 06       	cpc	r12, r20
    189e:	d5 06       	cpc	r13, r21
    18a0:	20 f4       	brcc	.+8      	; 0x18aa <__moddi3+0x770>
    18a2:	a2 0c       	add	r10, r2
    18a4:	b3 1c       	adc	r11, r3
    18a6:	c4 1c       	adc	r12, r4
    18a8:	d5 1c       	adc	r13, r5
    18aa:	e8 96       	adiw	r28, 0x38	; 56
    18ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    18ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    18b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    18b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    18b4:	e8 97       	sbiw	r28, 0x38	; 56
    18b6:	e4 96       	adiw	r28, 0x34	; 52
    18b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ba:	e4 97       	sbiw	r28, 0x34	; 52
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__moddi3+0x78c>
    18be:	ee 0c       	add	r14, r14
    18c0:	ff 1c       	adc	r15, r15
    18c2:	00 1f       	adc	r16, r16
    18c4:	11 1f       	adc	r17, r17
    18c6:	0a 94       	dec	r0
    18c8:	d2 f7       	brpl	.-12     	; 0x18be <__moddi3+0x784>
    18ca:	2d 96       	adiw	r28, 0x0d	; 13
    18cc:	ec ae       	std	Y+60, r14	; 0x3c
    18ce:	fd ae       	std	Y+61, r15	; 0x3d
    18d0:	0e af       	std	Y+62, r16	; 0x3e
    18d2:	1f af       	std	Y+63, r17	; 0x3f
    18d4:	2d 97       	sbiw	r28, 0x0d	; 13
    18d6:	a2 1a       	sub	r10, r18
    18d8:	b3 0a       	sbc	r11, r19
    18da:	c4 0a       	sbc	r12, r20
    18dc:	d5 0a       	sbc	r13, r21
    18de:	32 01       	movw	r6, r4
    18e0:	88 24       	eor	r8, r8
    18e2:	99 24       	eor	r9, r9
    18e4:	92 01       	movw	r18, r4
    18e6:	81 01       	movw	r16, r2
    18e8:	20 70       	andi	r18, 0x00	; 0
    18ea:	30 70       	andi	r19, 0x00	; 0
    18ec:	a1 96       	adiw	r28, 0x21	; 33
    18ee:	0c af       	std	Y+60, r16	; 0x3c
    18f0:	1d af       	std	Y+61, r17	; 0x3d
    18f2:	2e af       	std	Y+62, r18	; 0x3e
    18f4:	3f af       	std	Y+63, r19	; 0x3f
    18f6:	a1 97       	sbiw	r28, 0x21	; 33
    18f8:	c6 01       	movw	r24, r12
    18fa:	b5 01       	movw	r22, r10
    18fc:	a4 01       	movw	r20, r8
    18fe:	93 01       	movw	r18, r6
    1900:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1904:	7b 01       	movw	r14, r22
    1906:	8c 01       	movw	r16, r24
    1908:	c6 01       	movw	r24, r12
    190a:	b5 01       	movw	r22, r10
    190c:	a4 01       	movw	r20, r8
    190e:	93 01       	movw	r18, r6
    1910:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1914:	ca 01       	movw	r24, r20
    1916:	b9 01       	movw	r22, r18
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	2c ad       	ldd	r18, Y+60	; 0x3c
    191c:	3d ad       	ldd	r19, Y+61	; 0x3d
    191e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1920:	5f ad       	ldd	r21, Y+63	; 0x3f
    1922:	a1 97       	sbiw	r28, 0x21	; 33
    1924:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	87 01       	movw	r16, r14
    192e:	ff 24       	eor	r15, r15
    1930:	ee 24       	eor	r14, r14
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	ac ac       	ldd	r10, Y+60	; 0x3c
    1936:	bd ac       	ldd	r11, Y+61	; 0x3d
    1938:	ce ac       	ldd	r12, Y+62	; 0x3e
    193a:	df ac       	ldd	r13, Y+63	; 0x3f
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	c6 01       	movw	r24, r12
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	57 01       	movw	r10, r14
    1946:	68 01       	movw	r12, r16
    1948:	a8 2a       	or	r10, r24
    194a:	b9 2a       	or	r11, r25
    194c:	ca 2a       	or	r12, r26
    194e:	db 2a       	or	r13, r27
    1950:	a2 16       	cp	r10, r18
    1952:	b3 06       	cpc	r11, r19
    1954:	c4 06       	cpc	r12, r20
    1956:	d5 06       	cpc	r13, r21
    1958:	90 f4       	brcc	.+36     	; 0x197e <__moddi3+0x844>
    195a:	a2 0c       	add	r10, r2
    195c:	b3 1c       	adc	r11, r3
    195e:	c4 1c       	adc	r12, r4
    1960:	d5 1c       	adc	r13, r5
    1962:	a2 14       	cp	r10, r2
    1964:	b3 04       	cpc	r11, r3
    1966:	c4 04       	cpc	r12, r4
    1968:	d5 04       	cpc	r13, r5
    196a:	48 f0       	brcs	.+18     	; 0x197e <__moddi3+0x844>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	20 f4       	brcc	.+8      	; 0x197e <__moddi3+0x844>
    1976:	a2 0c       	add	r10, r2
    1978:	b3 1c       	adc	r11, r3
    197a:	c4 1c       	adc	r12, r4
    197c:	d5 1c       	adc	r13, r5
    197e:	a2 1a       	sub	r10, r18
    1980:	b3 0a       	sbc	r11, r19
    1982:	c4 0a       	sbc	r12, r20
    1984:	d5 0a       	sbc	r13, r21
    1986:	c6 01       	movw	r24, r12
    1988:	b5 01       	movw	r22, r10
    198a:	a4 01       	movw	r20, r8
    198c:	93 01       	movw	r18, r6
    198e:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1992:	7b 01       	movw	r14, r22
    1994:	8c 01       	movw	r16, r24
    1996:	c6 01       	movw	r24, r12
    1998:	b5 01       	movw	r22, r10
    199a:	a4 01       	movw	r20, r8
    199c:	93 01       	movw	r18, r6
    199e:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    19a2:	ca 01       	movw	r24, r20
    19a4:	b9 01       	movw	r22, r18
    19a6:	a1 96       	adiw	r28, 0x21	; 33
    19a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b0:	a1 97       	sbiw	r28, 0x21	; 33
    19b2:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	87 01       	movw	r16, r14
    19bc:	ff 24       	eor	r15, r15
    19be:	ee 24       	eor	r14, r14
    19c0:	2d 96       	adiw	r28, 0x0d	; 13
    19c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    19c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    19ca:	2d 97       	sbiw	r28, 0x0d	; 13
    19cc:	a0 70       	andi	r26, 0x00	; 0
    19ce:	b0 70       	andi	r27, 0x00	; 0
    19d0:	e8 2a       	or	r14, r24
    19d2:	f9 2a       	or	r15, r25
    19d4:	0a 2b       	or	r16, r26
    19d6:	1b 2b       	or	r17, r27
    19d8:	e2 16       	cp	r14, r18
    19da:	f3 06       	cpc	r15, r19
    19dc:	04 07       	cpc	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	90 f4       	brcc	.+36     	; 0x1a06 <__moddi3+0x8cc>
    19e2:	e2 0c       	add	r14, r2
    19e4:	f3 1c       	adc	r15, r3
    19e6:	04 1d       	adc	r16, r4
    19e8:	15 1d       	adc	r17, r5
    19ea:	e2 14       	cp	r14, r2
    19ec:	f3 04       	cpc	r15, r3
    19ee:	04 05       	cpc	r16, r4
    19f0:	15 05       	cpc	r17, r5
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <__moddi3+0x8cc>
    19f4:	e2 16       	cp	r14, r18
    19f6:	f3 06       	cpc	r15, r19
    19f8:	04 07       	cpc	r16, r20
    19fa:	15 07       	cpc	r17, r21
    19fc:	20 f4       	brcc	.+8      	; 0x1a06 <__moddi3+0x8cc>
    19fe:	e2 0c       	add	r14, r2
    1a00:	f3 1c       	adc	r15, r3
    1a02:	04 1d       	adc	r16, r4
    1a04:	15 1d       	adc	r17, r5
    1a06:	e2 1a       	sub	r14, r18
    1a08:	f3 0a       	sbc	r15, r19
    1a0a:	04 0b       	sbc	r16, r20
    1a0c:	15 0b       	sbc	r17, r21
    1a0e:	d8 01       	movw	r26, r16
    1a10:	c7 01       	movw	r24, r14
    1a12:	62 96       	adiw	r28, 0x12	; 18
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	62 97       	sbiw	r28, 0x12	; 18
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__moddi3+0x8e8>
    1a1a:	b6 95       	lsr	r27
    1a1c:	a7 95       	ror	r26
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__moddi3+0x8e0>
    1a26:	89 a7       	std	Y+41, r24	; 0x29
    1a28:	9a a7       	std	Y+42, r25	; 0x2a
    1a2a:	ab a7       	std	Y+43, r26	; 0x2b
    1a2c:	bc a7       	std	Y+44, r27	; 0x2c
    1a2e:	1d a6       	std	Y+45, r1	; 0x2d
    1a30:	1e a6       	std	Y+46, r1	; 0x2e
    1a32:	1f a6       	std	Y+47, r1	; 0x2f
    1a34:	18 aa       	std	Y+48, r1	; 0x30
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3a:	8a 8b       	std	Y+18, r24	; 0x12
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a42:	8c 8b       	std	Y+20, r24	; 0x14
    1a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	2f c3       	rjmp	.+1630   	; 0x20a8 <__moddi3+0xf6e>
    1a4a:	6a 14       	cp	r6, r10
    1a4c:	7b 04       	cpc	r7, r11
    1a4e:	8c 04       	cpc	r8, r12
    1a50:	9d 04       	cpc	r9, r13
    1a52:	48 f4       	brcc	.+18     	; 0x1a66 <__moddi3+0x92c>
    1a54:	49 8b       	std	Y+17, r20	; 0x11
    1a56:	5a 8b       	std	Y+18, r21	; 0x12
    1a58:	6b 8b       	std	Y+19, r22	; 0x13
    1a5a:	7c 8b       	std	Y+20, r23	; 0x14
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	2f 8b       	std	Y+23, r18	; 0x17
    1a62:	38 8f       	std	Y+24, r19	; 0x18
    1a64:	27 c3       	rjmp	.+1614   	; 0x20b4 <__moddi3+0xf7a>
    1a66:	00 e0       	ldi	r16, 0x00	; 0
    1a68:	a0 16       	cp	r10, r16
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	b0 06       	cpc	r11, r16
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	c0 06       	cpc	r12, r16
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	d0 06       	cpc	r13, r16
    1a76:	88 f4       	brcc	.+34     	; 0x1a9a <__moddi3+0x960>
    1a78:	1f ef       	ldi	r17, 0xFF	; 255
    1a7a:	a1 16       	cp	r10, r17
    1a7c:	b1 04       	cpc	r11, r1
    1a7e:	c1 04       	cpc	r12, r1
    1a80:	d1 04       	cpc	r13, r1
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__moddi3+0x958>
    1a84:	30 f0       	brcs	.+12     	; 0x1a92 <__moddi3+0x958>
    1a86:	28 e0       	ldi	r18, 0x08	; 8
    1a88:	e2 2e       	mov	r14, r18
    1a8a:	f1 2c       	mov	r15, r1
    1a8c:	01 2d       	mov	r16, r1
    1a8e:	11 2d       	mov	r17, r1
    1a90:	18 c0       	rjmp	.+48     	; 0x1ac2 <__moddi3+0x988>
    1a92:	ee 24       	eor	r14, r14
    1a94:	ff 24       	eor	r15, r15
    1a96:	87 01       	movw	r16, r14
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <__moddi3+0x988>
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	a2 16       	cp	r10, r18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	b2 06       	cpc	r11, r18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	c2 06       	cpc	r12, r18
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	d2 06       	cpc	r13, r18
    1aaa:	30 f0       	brcs	.+12     	; 0x1ab8 <__moddi3+0x97e>
    1aac:	98 e1       	ldi	r25, 0x18	; 24
    1aae:	e9 2e       	mov	r14, r25
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	01 2d       	mov	r16, r1
    1ab4:	11 2d       	mov	r17, r1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <__moddi3+0x988>
    1ab8:	80 e1       	ldi	r24, 0x10	; 16
    1aba:	e8 2e       	mov	r14, r24
    1abc:	f1 2c       	mov	r15, r1
    1abe:	01 2d       	mov	r16, r1
    1ac0:	11 2d       	mov	r17, r1
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 2c       	mov	r0, r14
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__moddi3+0x998>
    1aca:	b6 95       	lsr	r27
    1acc:	a7 95       	ror	r26
    1ace:	97 95       	ror	r25
    1ad0:	87 95       	ror	r24
    1ad2:	0a 94       	dec	r0
    1ad4:	d2 f7       	brpl	.-12     	; 0x1aca <__moddi3+0x990>
    1ad6:	83 58       	subi	r24, 0x83	; 131
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	dc 01       	movw	r26, r24
    1adc:	2c 91       	ld	r18, X
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	8e 19       	sub	r24, r14
    1ae8:	9f 09       	sbc	r25, r15
    1aea:	a0 0b       	sbc	r26, r16
    1aec:	b1 0b       	sbc	r27, r17
    1aee:	82 1b       	sub	r24, r18
    1af0:	91 09       	sbc	r25, r1
    1af2:	a1 09       	sbc	r26, r1
    1af4:	b1 09       	sbc	r27, r1
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__moddi3+0x9c6>
    1afe:	59 c0       	rjmp	.+178    	; 0x1bb2 <__moddi3+0xa78>
    1b00:	a6 14       	cp	r10, r6
    1b02:	b7 04       	cpc	r11, r7
    1b04:	c8 04       	cpc	r12, r8
    1b06:	d9 04       	cpc	r13, r9
    1b08:	70 f0       	brcs	.+28     	; 0x1b26 <__moddi3+0x9ec>
    1b0a:	e8 96       	adiw	r28, 0x38	; 56
    1b0c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b0e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b10:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b12:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b14:	e8 97       	sbiw	r28, 0x38	; 56
    1b16:	e2 14       	cp	r14, r2
    1b18:	f3 04       	cpc	r15, r3
    1b1a:	04 05       	cpc	r16, r4
    1b1c:	15 05       	cpc	r17, r5
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <__moddi3+0x9ec>
    1b20:	d8 01       	movw	r26, r16
    1b22:	c7 01       	movw	r24, r14
    1b24:	2f c0       	rjmp	.+94     	; 0x1b84 <__moddi3+0xa4a>
    1b26:	e8 96       	adiw	r28, 0x38	; 56
    1b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b30:	e8 97       	sbiw	r28, 0x38	; 56
    1b32:	82 19       	sub	r24, r2
    1b34:	93 09       	sbc	r25, r3
    1b36:	a4 09       	sbc	r26, r4
    1b38:	b5 09       	sbc	r27, r5
    1b3a:	a4 01       	movw	r20, r8
    1b3c:	93 01       	movw	r18, r6
    1b3e:	2a 19       	sub	r18, r10
    1b40:	3b 09       	sbc	r19, r11
    1b42:	4c 09       	sbc	r20, r12
    1b44:	5d 09       	sbc	r21, r13
    1b46:	aa 24       	eor	r10, r10
    1b48:	bb 24       	eor	r11, r11
    1b4a:	65 01       	movw	r12, r10
    1b4c:	e8 96       	adiw	r28, 0x38	; 56
    1b4e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b50:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b52:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b54:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b56:	e8 97       	sbiw	r28, 0x38	; 56
    1b58:	68 16       	cp	r6, r24
    1b5a:	79 06       	cpc	r7, r25
    1b5c:	8a 06       	cpc	r8, r26
    1b5e:	9b 06       	cpc	r9, r27
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <__moddi3+0xa32>
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	a1 2e       	mov	r10, r17
    1b66:	b1 2c       	mov	r11, r1
    1b68:	c1 2c       	mov	r12, r1
    1b6a:	d1 2c       	mov	r13, r1
    1b6c:	79 01       	movw	r14, r18
    1b6e:	8a 01       	movw	r16, r20
    1b70:	ea 18       	sub	r14, r10
    1b72:	fb 08       	sbc	r15, r11
    1b74:	0c 09       	sbc	r16, r12
    1b76:	1d 09       	sbc	r17, r13
    1b78:	61 96       	adiw	r28, 0x11	; 17
    1b7a:	ec ae       	std	Y+60, r14	; 0x3c
    1b7c:	fd ae       	std	Y+61, r15	; 0x3d
    1b7e:	0e af       	std	Y+62, r16	; 0x3e
    1b80:	1f af       	std	Y+63, r17	; 0x3f
    1b82:	61 97       	sbiw	r28, 0x11	; 17
    1b84:	89 a7       	std	Y+41, r24	; 0x29
    1b86:	9a a7       	std	Y+42, r25	; 0x2a
    1b88:	ab a7       	std	Y+43, r26	; 0x2b
    1b8a:	bc a7       	std	Y+44, r27	; 0x2c
    1b8c:	61 96       	adiw	r28, 0x11	; 17
    1b8e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1b90:	1d ad       	ldd	r17, Y+61	; 0x3d
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	61 97       	sbiw	r28, 0x11	; 17
    1b98:	0d a7       	std	Y+45, r16	; 0x2d
    1b9a:	1e a7       	std	Y+46, r17	; 0x2e
    1b9c:	2f a7       	std	Y+47, r18	; 0x2f
    1b9e:	38 ab       	std	Y+48, r19	; 0x30
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
    1ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba4:	8a 8b       	std	Y+18, r24	; 0x12
    1ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	0d 8b       	std	Y+21, r16	; 0x15
    1bb0:	7b c2       	rjmp	.+1270   	; 0x20a8 <__moddi3+0xf6e>
    1bb2:	e3 96       	adiw	r28, 0x33	; 51
    1bb4:	8f af       	std	Y+63, r24	; 0x3f
    1bb6:	e3 97       	sbiw	r28, 0x33	; 51
    1bb8:	a6 01       	movw	r20, r12
    1bba:	95 01       	movw	r18, r10
    1bbc:	08 2e       	mov	r0, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <__moddi3+0xa8e>
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	0a 94       	dec	r0
    1bca:	d2 f7       	brpl	.-12     	; 0x1bc0 <__moddi3+0xa86>
    1bcc:	10 e2       	ldi	r17, 0x20	; 32
    1bce:	18 1b       	sub	r17, r24
    1bd0:	e2 96       	adiw	r28, 0x32	; 50
    1bd2:	1f af       	std	Y+63, r17	; 0x3f
    1bd4:	e2 97       	sbiw	r28, 0x32	; 50
    1bd6:	d2 01       	movw	r26, r4
    1bd8:	c1 01       	movw	r24, r2
    1bda:	01 2e       	mov	r0, r17
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__moddi3+0xaac>
    1bde:	b6 95       	lsr	r27
    1be0:	a7 95       	ror	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <__moddi3+0xaa4>
    1bea:	5c 01       	movw	r10, r24
    1bec:	6d 01       	movw	r12, r26
    1bee:	a2 2a       	or	r10, r18
    1bf0:	b3 2a       	or	r11, r19
    1bf2:	c4 2a       	or	r12, r20
    1bf4:	d5 2a       	or	r13, r21
    1bf6:	25 96       	adiw	r28, 0x05	; 5
    1bf8:	ac ae       	std	Y+60, r10	; 0x3c
    1bfa:	bd ae       	std	Y+61, r11	; 0x3d
    1bfc:	ce ae       	std	Y+62, r12	; 0x3e
    1bfe:	df ae       	std	Y+63, r13	; 0x3f
    1c00:	25 97       	sbiw	r28, 0x05	; 5
    1c02:	72 01       	movw	r14, r4
    1c04:	61 01       	movw	r12, r2
    1c06:	e3 96       	adiw	r28, 0x33	; 51
    1c08:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c0a:	e3 97       	sbiw	r28, 0x33	; 51
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__moddi3+0xadc>
    1c0e:	cc 0c       	add	r12, r12
    1c10:	dd 1c       	adc	r13, r13
    1c12:	ee 1c       	adc	r14, r14
    1c14:	ff 1c       	adc	r15, r15
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <__moddi3+0xad4>
    1c1a:	21 96       	adiw	r28, 0x01	; 1
    1c1c:	cc ae       	std	Y+60, r12	; 0x3c
    1c1e:	dd ae       	std	Y+61, r13	; 0x3d
    1c20:	ee ae       	std	Y+62, r14	; 0x3e
    1c22:	ff ae       	std	Y+63, r15	; 0x3f
    1c24:	21 97       	sbiw	r28, 0x01	; 1
    1c26:	64 01       	movw	r12, r8
    1c28:	53 01       	movw	r10, r6
    1c2a:	01 2e       	mov	r0, r17
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0xafc>
    1c2e:	d6 94       	lsr	r13
    1c30:	c7 94       	ror	r12
    1c32:	b7 94       	ror	r11
    1c34:	a7 94       	ror	r10
    1c36:	0a 94       	dec	r0
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0xaf4>
    1c3a:	a4 01       	movw	r20, r8
    1c3c:	93 01       	movw	r18, r6
    1c3e:	e3 96       	adiw	r28, 0x33	; 51
    1c40:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c42:	e3 97       	sbiw	r28, 0x33	; 51
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__moddi3+0xb14>
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	44 1f       	adc	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	0a 94       	dec	r0
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <__moddi3+0xb0c>
    1c52:	e8 96       	adiw	r28, 0x38	; 56
    1c54:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c56:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c5c:	e8 97       	sbiw	r28, 0x38	; 56
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <__moddi3+0xb2e>
    1c60:	b6 95       	lsr	r27
    1c62:	a7 95       	ror	r26
    1c64:	97 95       	ror	r25
    1c66:	87 95       	ror	r24
    1c68:	1a 95       	dec	r17
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <__moddi3+0xb26>
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	8d 01       	movw	r16, r26
    1c70:	e2 2a       	or	r14, r18
    1c72:	f3 2a       	or	r15, r19
    1c74:	04 2b       	or	r16, r20
    1c76:	15 2b       	or	r17, r21
    1c78:	e9 ae       	std	Y+57, r14	; 0x39
    1c7a:	fa ae       	std	Y+58, r15	; 0x3a
    1c7c:	0b af       	std	Y+59, r16	; 0x3b
    1c7e:	1c af       	std	Y+60, r17	; 0x3c
    1c80:	e8 96       	adiw	r28, 0x38	; 56
    1c82:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c84:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c86:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c88:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c8a:	e8 97       	sbiw	r28, 0x38	; 56
    1c8c:	e3 96       	adiw	r28, 0x33	; 51
    1c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c90:	e3 97       	sbiw	r28, 0x33	; 51
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <__moddi3+0xb62>
    1c94:	00 0f       	add	r16, r16
    1c96:	11 1f       	adc	r17, r17
    1c98:	22 1f       	adc	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	0a 94       	dec	r0
    1c9e:	d2 f7       	brpl	.-12     	; 0x1c94 <__moddi3+0xb5a>
    1ca0:	0d ab       	std	Y+53, r16	; 0x35
    1ca2:	1e ab       	std	Y+54, r17	; 0x36
    1ca4:	2f ab       	std	Y+55, r18	; 0x37
    1ca6:	38 af       	std	Y+56, r19	; 0x38
    1ca8:	25 96       	adiw	r28, 0x05	; 5
    1caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb2:	25 97       	sbiw	r28, 0x05	; 5
    1cb4:	3a 01       	movw	r6, r20
    1cb6:	88 24       	eor	r8, r8
    1cb8:	99 24       	eor	r9, r9
    1cba:	40 70       	andi	r20, 0x00	; 0
    1cbc:	50 70       	andi	r21, 0x00	; 0
    1cbe:	a5 96       	adiw	r28, 0x25	; 37
    1cc0:	2c af       	std	Y+60, r18	; 0x3c
    1cc2:	3d af       	std	Y+61, r19	; 0x3d
    1cc4:	4e af       	std	Y+62, r20	; 0x3e
    1cc6:	5f af       	std	Y+63, r21	; 0x3f
    1cc8:	a5 97       	sbiw	r28, 0x25	; 37
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	a4 01       	movw	r20, r8
    1cd0:	93 01       	movw	r18, r6
    1cd2:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8c 01       	movw	r16, r24
    1cda:	c6 01       	movw	r24, r12
    1cdc:	b5 01       	movw	r22, r10
    1cde:	a4 01       	movw	r20, r8
    1ce0:	93 01       	movw	r18, r6
    1ce2:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	da 01       	movw	r26, r20
    1cea:	1c 01       	movw	r2, r24
    1cec:	2d 01       	movw	r4, r26
    1cee:	c2 01       	movw	r24, r4
    1cf0:	b1 01       	movw	r22, r2
    1cf2:	a5 96       	adiw	r28, 0x25	; 37
    1cf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cfc:	a5 97       	sbiw	r28, 0x25	; 37
    1cfe:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	87 01       	movw	r16, r14
    1d08:	ff 24       	eor	r15, r15
    1d0a:	ee 24       	eor	r14, r14
    1d0c:	a9 ac       	ldd	r10, Y+57	; 0x39
    1d0e:	ba ac       	ldd	r11, Y+58	; 0x3a
    1d10:	cb ac       	ldd	r12, Y+59	; 0x3b
    1d12:	dc ac       	ldd	r13, Y+60	; 0x3c
    1d14:	c6 01       	movw	r24, r12
    1d16:	aa 27       	eor	r26, r26
    1d18:	bb 27       	eor	r27, r27
    1d1a:	57 01       	movw	r10, r14
    1d1c:	68 01       	movw	r12, r16
    1d1e:	a8 2a       	or	r10, r24
    1d20:	b9 2a       	or	r11, r25
    1d22:	ca 2a       	or	r12, r26
    1d24:	db 2a       	or	r13, r27
    1d26:	a2 16       	cp	r10, r18
    1d28:	b3 06       	cpc	r11, r19
    1d2a:	c4 06       	cpc	r12, r20
    1d2c:	d5 06       	cpc	r13, r21
    1d2e:	10 f5       	brcc	.+68     	; 0x1d74 <__moddi3+0xc3a>
    1d30:	08 94       	sec
    1d32:	21 08       	sbc	r2, r1
    1d34:	31 08       	sbc	r3, r1
    1d36:	41 08       	sbc	r4, r1
    1d38:	51 08       	sbc	r5, r1
    1d3a:	25 96       	adiw	r28, 0x05	; 5
    1d3c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d3e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d40:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d42:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d44:	25 97       	sbiw	r28, 0x05	; 5
    1d46:	ae 0c       	add	r10, r14
    1d48:	bf 1c       	adc	r11, r15
    1d4a:	c0 1e       	adc	r12, r16
    1d4c:	d1 1e       	adc	r13, r17
    1d4e:	ae 14       	cp	r10, r14
    1d50:	bf 04       	cpc	r11, r15
    1d52:	c0 06       	cpc	r12, r16
    1d54:	d1 06       	cpc	r13, r17
    1d56:	70 f0       	brcs	.+28     	; 0x1d74 <__moddi3+0xc3a>
    1d58:	a2 16       	cp	r10, r18
    1d5a:	b3 06       	cpc	r11, r19
    1d5c:	c4 06       	cpc	r12, r20
    1d5e:	d5 06       	cpc	r13, r21
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__moddi3+0xc3a>
    1d62:	08 94       	sec
    1d64:	21 08       	sbc	r2, r1
    1d66:	31 08       	sbc	r3, r1
    1d68:	41 08       	sbc	r4, r1
    1d6a:	51 08       	sbc	r5, r1
    1d6c:	ae 0c       	add	r10, r14
    1d6e:	bf 1c       	adc	r11, r15
    1d70:	c0 1e       	adc	r12, r16
    1d72:	d1 1e       	adc	r13, r17
    1d74:	a2 1a       	sub	r10, r18
    1d76:	b3 0a       	sbc	r11, r19
    1d78:	c4 0a       	sbc	r12, r20
    1d7a:	d5 0a       	sbc	r13, r21
    1d7c:	c6 01       	movw	r24, r12
    1d7e:	b5 01       	movw	r22, r10
    1d80:	a4 01       	movw	r20, r8
    1d82:	93 01       	movw	r18, r6
    1d84:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	c6 01       	movw	r24, r12
    1d8e:	b5 01       	movw	r22, r10
    1d90:	a4 01       	movw	r20, r8
    1d92:	93 01       	movw	r18, r6
    1d94:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    1d98:	c9 01       	movw	r24, r18
    1d9a:	da 01       	movw	r26, r20
    1d9c:	3c 01       	movw	r6, r24
    1d9e:	4d 01       	movw	r8, r26
    1da0:	c4 01       	movw	r24, r8
    1da2:	b3 01       	movw	r22, r6
    1da4:	a5 96       	adiw	r28, 0x25	; 37
    1da6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1da8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1daa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dae:	a5 97       	sbiw	r28, 0x25	; 37
    1db0:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	87 01       	movw	r16, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	ee 24       	eor	r14, r14
    1dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dc2:	ab ad       	ldd	r26, Y+59	; 0x3b
    1dc4:	bc ad       	ldd	r27, Y+60	; 0x3c
    1dc6:	a0 70       	andi	r26, 0x00	; 0
    1dc8:	b0 70       	andi	r27, 0x00	; 0
    1dca:	57 01       	movw	r10, r14
    1dcc:	68 01       	movw	r12, r16
    1dce:	a8 2a       	or	r10, r24
    1dd0:	b9 2a       	or	r11, r25
    1dd2:	ca 2a       	or	r12, r26
    1dd4:	db 2a       	or	r13, r27
    1dd6:	a2 16       	cp	r10, r18
    1dd8:	b3 06       	cpc	r11, r19
    1dda:	c4 06       	cpc	r12, r20
    1ddc:	d5 06       	cpc	r13, r21
    1dde:	10 f5       	brcc	.+68     	; 0x1e24 <__moddi3+0xcea>
    1de0:	08 94       	sec
    1de2:	61 08       	sbc	r6, r1
    1de4:	71 08       	sbc	r7, r1
    1de6:	81 08       	sbc	r8, r1
    1de8:	91 08       	sbc	r9, r1
    1dea:	25 96       	adiw	r28, 0x05	; 5
    1dec:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dee:	7d ad       	ldd	r23, Y+61	; 0x3d
    1df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df4:	25 97       	sbiw	r28, 0x05	; 5
    1df6:	a6 0e       	add	r10, r22
    1df8:	b7 1e       	adc	r11, r23
    1dfa:	c8 1e       	adc	r12, r24
    1dfc:	d9 1e       	adc	r13, r25
    1dfe:	a6 16       	cp	r10, r22
    1e00:	b7 06       	cpc	r11, r23
    1e02:	c8 06       	cpc	r12, r24
    1e04:	d9 06       	cpc	r13, r25
    1e06:	70 f0       	brcs	.+28     	; 0x1e24 <__moddi3+0xcea>
    1e08:	a2 16       	cp	r10, r18
    1e0a:	b3 06       	cpc	r11, r19
    1e0c:	c4 06       	cpc	r12, r20
    1e0e:	d5 06       	cpc	r13, r21
    1e10:	48 f4       	brcc	.+18     	; 0x1e24 <__moddi3+0xcea>
    1e12:	08 94       	sec
    1e14:	61 08       	sbc	r6, r1
    1e16:	71 08       	sbc	r7, r1
    1e18:	81 08       	sbc	r8, r1
    1e1a:	91 08       	sbc	r9, r1
    1e1c:	a6 0e       	add	r10, r22
    1e1e:	b7 1e       	adc	r11, r23
    1e20:	c8 1e       	adc	r12, r24
    1e22:	d9 1e       	adc	r13, r25
    1e24:	d6 01       	movw	r26, r12
    1e26:	c5 01       	movw	r24, r10
    1e28:	82 1b       	sub	r24, r18
    1e2a:	93 0b       	sbc	r25, r19
    1e2c:	a4 0b       	sbc	r26, r20
    1e2e:	b5 0b       	sbc	r27, r21
    1e30:	89 ab       	std	Y+49, r24	; 0x31
    1e32:	9a ab       	std	Y+50, r25	; 0x32
    1e34:	ab ab       	std	Y+51, r26	; 0x33
    1e36:	bc ab       	std	Y+52, r27	; 0x34
    1e38:	d1 01       	movw	r26, r2
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	84 01       	movw	r16, r8
    1e40:	73 01       	movw	r14, r6
    1e42:	e8 2a       	or	r14, r24
    1e44:	f9 2a       	or	r15, r25
    1e46:	0a 2b       	or	r16, r26
    1e48:	1b 2b       	or	r17, r27
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	a8 2e       	mov	r10, r24
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	b8 2e       	mov	r11, r24
    1e52:	c1 2c       	mov	r12, r1
    1e54:	d1 2c       	mov	r13, r1
    1e56:	ae 20       	and	r10, r14
    1e58:	bf 20       	and	r11, r15
    1e5a:	c0 22       	and	r12, r16
    1e5c:	d1 22       	and	r13, r17
    1e5e:	78 01       	movw	r14, r16
    1e60:	00 27       	eor	r16, r16
    1e62:	11 27       	eor	r17, r17
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	6c ac       	ldd	r6, Y+60	; 0x3c
    1e68:	7d ac       	ldd	r7, Y+61	; 0x3d
    1e6a:	8e ac       	ldd	r8, Y+62	; 0x3e
    1e6c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1e6e:	21 97       	sbiw	r28, 0x01	; 1
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	62 22       	and	r6, r18
    1e7a:	73 22       	and	r7, r19
    1e7c:	84 22       	and	r8, r20
    1e7e:	95 22       	and	r9, r21
    1e80:	21 96       	adiw	r28, 0x01	; 1
    1e82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e8a:	21 97       	sbiw	r28, 0x01	; 1
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	66 27       	eor	r22, r22
    1e90:	77 27       	eor	r23, r23
    1e92:	ad 96       	adiw	r28, 0x2d	; 45
    1e94:	4c af       	std	Y+60, r20	; 0x3c
    1e96:	5d af       	std	Y+61, r21	; 0x3d
    1e98:	6e af       	std	Y+62, r22	; 0x3e
    1e9a:	7f af       	std	Y+63, r23	; 0x3f
    1e9c:	ad 97       	sbiw	r28, 0x2d	; 45
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	b5 01       	movw	r22, r10
    1ea2:	a4 01       	movw	r20, r8
    1ea4:	93 01       	movw	r18, r6
    1ea6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1eaa:	a9 96       	adiw	r28, 0x29	; 41
    1eac:	6c af       	std	Y+60, r22	; 0x3c
    1eae:	7d af       	std	Y+61, r23	; 0x3d
    1eb0:	8e af       	std	Y+62, r24	; 0x3e
    1eb2:	9f af       	std	Y+63, r25	; 0x3f
    1eb4:	a9 97       	sbiw	r28, 0x29	; 41
    1eb6:	c6 01       	movw	r24, r12
    1eb8:	b5 01       	movw	r22, r10
    1eba:	ad 96       	adiw	r28, 0x2d	; 45
    1ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ec0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ec4:	ad 97       	sbiw	r28, 0x2d	; 45
    1ec6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1eca:	1b 01       	movw	r2, r22
    1ecc:	2c 01       	movw	r4, r24
    1ece:	c8 01       	movw	r24, r16
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	a4 01       	movw	r20, r8
    1ed4:	93 01       	movw	r18, r6
    1ed6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1eda:	5b 01       	movw	r10, r22
    1edc:	6c 01       	movw	r12, r24
    1ede:	c8 01       	movw	r24, r16
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	ad 96       	adiw	r28, 0x2d	; 45
    1ee4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ee8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eec:	ad 97       	sbiw	r28, 0x2d	; 45
    1eee:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    1ef2:	7b 01       	movw	r14, r22
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	a6 01       	movw	r20, r12
    1ef8:	95 01       	movw	r18, r10
    1efa:	22 0d       	add	r18, r2
    1efc:	33 1d       	adc	r19, r3
    1efe:	44 1d       	adc	r20, r4
    1f00:	55 1d       	adc	r21, r5
    1f02:	a9 96       	adiw	r28, 0x29	; 41
    1f04:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f06:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f08:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f0a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f0c:	a9 97       	sbiw	r28, 0x29	; 41
    1f0e:	c4 01       	movw	r24, r8
    1f10:	aa 27       	eor	r26, r26
    1f12:	bb 27       	eor	r27, r27
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	4a 1f       	adc	r20, r26
    1f1a:	5b 1f       	adc	r21, r27
    1f1c:	2a 15       	cp	r18, r10
    1f1e:	3b 05       	cpc	r19, r11
    1f20:	4c 05       	cpc	r20, r12
    1f22:	5d 05       	cpc	r21, r13
    1f24:	48 f4       	brcc	.+18     	; 0x1f38 <__moddi3+0xdfe>
    1f26:	81 2c       	mov	r8, r1
    1f28:	91 2c       	mov	r9, r1
    1f2a:	e1 e0       	ldi	r30, 0x01	; 1
    1f2c:	ae 2e       	mov	r10, r30
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	e8 0c       	add	r14, r8
    1f32:	f9 1c       	adc	r15, r9
    1f34:	0a 1d       	adc	r16, r10
    1f36:	1b 1d       	adc	r17, r11
    1f38:	ca 01       	movw	r24, r20
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	57 01       	movw	r10, r14
    1f40:	68 01       	movw	r12, r16
    1f42:	a8 0e       	add	r10, r24
    1f44:	b9 1e       	adc	r11, r25
    1f46:	ca 1e       	adc	r12, r26
    1f48:	db 1e       	adc	r13, r27
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	33 27       	eor	r19, r19
    1f4e:	22 27       	eor	r18, r18
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	a0 70       	andi	r26, 0x00	; 0
    1f5e:	b0 70       	andi	r27, 0x00	; 0
    1f60:	28 0f       	add	r18, r24
    1f62:	39 1f       	adc	r19, r25
    1f64:	4a 1f       	adc	r20, r26
    1f66:	5b 1f       	adc	r21, r27
    1f68:	e9 a8       	ldd	r14, Y+49	; 0x31
    1f6a:	fa a8       	ldd	r15, Y+50	; 0x32
    1f6c:	0b a9       	ldd	r16, Y+51	; 0x33
    1f6e:	1c a9       	ldd	r17, Y+52	; 0x34
    1f70:	ea 14       	cp	r14, r10
    1f72:	fb 04       	cpc	r15, r11
    1f74:	0c 05       	cpc	r16, r12
    1f76:	1d 05       	cpc	r17, r13
    1f78:	70 f0       	brcs	.+28     	; 0x1f96 <__moddi3+0xe5c>
    1f7a:	ae 14       	cp	r10, r14
    1f7c:	bf 04       	cpc	r11, r15
    1f7e:	c0 06       	cpc	r12, r16
    1f80:	d1 06       	cpc	r13, r17
    1f82:	89 f5       	brne	.+98     	; 0x1fe6 <__moddi3+0xeac>
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	84 07       	cpc	r24, r20
    1f92:	95 07       	cpc	r25, r21
    1f94:	40 f5       	brcc	.+80     	; 0x1fe6 <__moddi3+0xeac>
    1f96:	da 01       	movw	r26, r20
    1f98:	c9 01       	movw	r24, r18
    1f9a:	21 96       	adiw	r28, 0x01	; 1
    1f9c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f9e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fa0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fa2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fa4:	21 97       	sbiw	r28, 0x01	; 1
    1fa6:	86 19       	sub	r24, r6
    1fa8:	97 09       	sbc	r25, r7
    1faa:	a8 09       	sbc	r26, r8
    1fac:	b9 09       	sbc	r27, r9
    1fae:	25 96       	adiw	r28, 0x05	; 5
    1fb0:	ec ac       	ldd	r14, Y+60	; 0x3c
    1fb2:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb8:	25 97       	sbiw	r28, 0x05	; 5
    1fba:	ae 18       	sub	r10, r14
    1fbc:	bf 08       	sbc	r11, r15
    1fbe:	c0 0a       	sbc	r12, r16
    1fc0:	d1 0a       	sbc	r13, r17
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	4a 07       	cpc	r20, r26
    1fce:	5b 07       	cpc	r21, r27
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__moddi3+0xea2>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	e2 2e       	mov	r14, r18
    1fd6:	f1 2c       	mov	r15, r1
    1fd8:	01 2d       	mov	r16, r1
    1fda:	11 2d       	mov	r17, r1
    1fdc:	ae 18       	sub	r10, r14
    1fde:	bf 08       	sbc	r11, r15
    1fe0:	c0 0a       	sbc	r12, r16
    1fe2:	d1 0a       	sbc	r13, r17
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <__moddi3+0xeb0>
    1fe6:	da 01       	movw	r26, r20
    1fe8:	c9 01       	movw	r24, r18
    1fea:	6d a8       	ldd	r6, Y+53	; 0x35
    1fec:	7e a8       	ldd	r7, Y+54	; 0x36
    1fee:	8f a8       	ldd	r8, Y+55	; 0x37
    1ff0:	98 ac       	ldd	r9, Y+56	; 0x38
    1ff2:	68 1a       	sub	r6, r24
    1ff4:	79 0a       	sbc	r7, r25
    1ff6:	8a 0a       	sbc	r8, r26
    1ff8:	9b 0a       	sbc	r9, r27
    1ffa:	09 a9       	ldd	r16, Y+49	; 0x31
    1ffc:	1a a9       	ldd	r17, Y+50	; 0x32
    1ffe:	2b a9       	ldd	r18, Y+51	; 0x33
    2000:	3c a9       	ldd	r19, Y+52	; 0x34
    2002:	0a 19       	sub	r16, r10
    2004:	1b 09       	sbc	r17, r11
    2006:	2c 09       	sbc	r18, r12
    2008:	3d 09       	sbc	r19, r13
    200a:	58 01       	movw	r10, r16
    200c:	69 01       	movw	r12, r18
    200e:	22 24       	eor	r2, r2
    2010:	33 24       	eor	r3, r3
    2012:	21 01       	movw	r4, r2
    2014:	2d a9       	ldd	r18, Y+53	; 0x35
    2016:	3e a9       	ldd	r19, Y+54	; 0x36
    2018:	4f a9       	ldd	r20, Y+55	; 0x37
    201a:	58 ad       	ldd	r21, Y+56	; 0x38
    201c:	26 15       	cp	r18, r6
    201e:	37 05       	cpc	r19, r7
    2020:	48 05       	cpc	r20, r8
    2022:	59 05       	cpc	r21, r9
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__moddi3+0xef6>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	28 2e       	mov	r2, r24
    202a:	31 2c       	mov	r3, r1
    202c:	41 2c       	mov	r4, r1
    202e:	51 2c       	mov	r5, r1
    2030:	86 01       	movw	r16, r12
    2032:	75 01       	movw	r14, r10
    2034:	e2 18       	sub	r14, r2
    2036:	f3 08       	sbc	r15, r3
    2038:	04 09       	sbc	r16, r4
    203a:	15 09       	sbc	r17, r5
    203c:	a8 01       	movw	r20, r16
    203e:	97 01       	movw	r18, r14
    2040:	e2 96       	adiw	r28, 0x32	; 50
    2042:	0f ac       	ldd	r0, Y+63	; 0x3f
    2044:	e2 97       	sbiw	r28, 0x32	; 50
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__moddi3+0xf16>
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	44 1f       	adc	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	0a 94       	dec	r0
    2052:	d2 f7       	brpl	.-12     	; 0x2048 <__moddi3+0xf0e>
    2054:	d4 01       	movw	r26, r8
    2056:	c3 01       	movw	r24, r6
    2058:	e3 96       	adiw	r28, 0x33	; 51
    205a:	0f ac       	ldd	r0, Y+63	; 0x3f
    205c:	e3 97       	sbiw	r28, 0x33	; 51
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__moddi3+0xf2e>
    2060:	b6 95       	lsr	r27
    2062:	a7 95       	ror	r26
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	0a 94       	dec	r0
    206a:	d2 f7       	brpl	.-12     	; 0x2060 <__moddi3+0xf26>
    206c:	28 2b       	or	r18, r24
    206e:	39 2b       	or	r19, r25
    2070:	4a 2b       	or	r20, r26
    2072:	5b 2b       	or	r21, r27
    2074:	29 a7       	std	Y+41, r18	; 0x29
    2076:	3a a7       	std	Y+42, r19	; 0x2a
    2078:	4b a7       	std	Y+43, r20	; 0x2b
    207a:	5c a7       	std	Y+44, r21	; 0x2c
    207c:	e3 96       	adiw	r28, 0x33	; 51
    207e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2080:	e3 97       	sbiw	r28, 0x33	; 51
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__moddi3+0xf52>
    2084:	16 95       	lsr	r17
    2086:	07 95       	ror	r16
    2088:	f7 94       	ror	r15
    208a:	e7 94       	ror	r14
    208c:	0a 94       	dec	r0
    208e:	d2 f7       	brpl	.-12     	; 0x2084 <__moddi3+0xf4a>
    2090:	ed a6       	std	Y+45, r14	; 0x2d
    2092:	fe a6       	std	Y+46, r15	; 0x2e
    2094:	0f a7       	std	Y+47, r16	; 0x2f
    2096:	18 ab       	std	Y+48, r17	; 0x30
    2098:	29 8b       	std	Y+17, r18	; 0x11
    209a:	8a a5       	ldd	r24, Y+42	; 0x2a
    209c:	8a 8b       	std	Y+18, r24	; 0x12
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a4:	8c 8b       	std	Y+20, r24	; 0x14
    20a6:	ed 8a       	std	Y+21, r14	; 0x15
    20a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    20aa:	8e 8b       	std	Y+22, r24	; 0x16
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	8f 8b       	std	Y+23, r24	; 0x17
    20b0:	88 a9       	ldd	r24, Y+48	; 0x30
    20b2:	88 8f       	std	Y+24, r24	; 0x18
    20b4:	e1 96       	adiw	r28, 0x31	; 49
    20b6:	4c ad       	ldd	r20, Y+60	; 0x3c
    20b8:	5d ad       	ldd	r21, Y+61	; 0x3d
    20ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    20bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    20be:	e1 97       	sbiw	r28, 0x31	; 49
    20c0:	41 15       	cp	r20, r1
    20c2:	51 05       	cpc	r21, r1
    20c4:	61 05       	cpc	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__moddi3+0xf92>
    20ca:	67 c0       	rjmp	.+206    	; 0x219a <__moddi3+0x1060>
    20cc:	89 89       	ldd	r24, Y+17	; 0x11
    20ce:	2a 89       	ldd	r18, Y+18	; 0x12
    20d0:	3b 89       	ldd	r19, Y+19	; 0x13
    20d2:	4c 89       	ldd	r20, Y+20	; 0x14
    20d4:	5d 89       	ldd	r21, Y+21	; 0x15
    20d6:	ae 89       	ldd	r26, Y+22	; 0x16
    20d8:	bf 89       	ldd	r27, Y+23	; 0x17
    20da:	18 8d       	ldd	r17, Y+24	; 0x18
    20dc:	f8 2f       	mov	r31, r24
    20de:	f1 95       	neg	r31
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	1f 16       	cp	r1, r31
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <__moddi3+0xfae>
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 2f       	mov	r24, r18
    20ea:	81 95       	neg	r24
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	18 16       	cp	r1, r24
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__moddi3+0xfba>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	e8 2f       	mov	r30, r24
    20f6:	e9 1b       	sub	r30, r25
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	8e 17       	cp	r24, r30
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__moddi3+0xfc6>
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	29 2b       	or	r18, r25
    2102:	83 2f       	mov	r24, r19
    2104:	81 95       	neg	r24
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	18 16       	cp	r1, r24
    210a:	08 f0       	brcs	.+2      	; 0x210e <__moddi3+0xfd4>
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	78 2f       	mov	r23, r24
    2110:	72 1b       	sub	r23, r18
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	87 17       	cp	r24, r23
    2116:	08 f0       	brcs	.+2      	; 0x211a <__moddi3+0xfe0>
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	39 2b       	or	r19, r25
    211c:	84 2f       	mov	r24, r20
    211e:	81 95       	neg	r24
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	18 16       	cp	r1, r24
    2124:	08 f0       	brcs	.+2      	; 0x2128 <__moddi3+0xfee>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	68 2f       	mov	r22, r24
    212a:	63 1b       	sub	r22, r19
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	86 17       	cp	r24, r22
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__moddi3+0xffa>
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	29 2b       	or	r18, r25
    2136:	85 2f       	mov	r24, r21
    2138:	81 95       	neg	r24
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	18 16       	cp	r1, r24
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__moddi3+0x1008>
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	58 2f       	mov	r21, r24
    2144:	52 1b       	sub	r21, r18
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	85 17       	cp	r24, r21
    214a:	08 f0       	brcs	.+2      	; 0x214e <__moddi3+0x1014>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	39 2b       	or	r19, r25
    2150:	8a 2f       	mov	r24, r26
    2152:	81 95       	neg	r24
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	18 16       	cp	r1, r24
    2158:	08 f0       	brcs	.+2      	; 0x215c <__moddi3+0x1022>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	48 2f       	mov	r20, r24
    215e:	43 1b       	sub	r20, r19
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	84 17       	cp	r24, r20
    2164:	08 f0       	brcs	.+2      	; 0x2168 <__moddi3+0x102e>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	29 2b       	or	r18, r25
    216a:	8b 2f       	mov	r24, r27
    216c:	81 95       	neg	r24
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	18 16       	cp	r1, r24
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__moddi3+0x103c>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	38 2f       	mov	r19, r24
    2178:	32 1b       	sub	r19, r18
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	83 17       	cp	r24, r19
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__moddi3+0x1048>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	92 2b       	or	r25, r18
    2184:	81 2f       	mov	r24, r17
    2186:	81 95       	neg	r24
    2188:	89 1b       	sub	r24, r25
    218a:	f9 8b       	std	Y+17, r31	; 0x11
    218c:	ea 8b       	std	Y+18, r30	; 0x12
    218e:	7b 8b       	std	Y+19, r23	; 0x13
    2190:	6c 8b       	std	Y+20, r22	; 0x14
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4e 8b       	std	Y+22, r20	; 0x16
    2196:	3f 8b       	std	Y+23, r19	; 0x17
    2198:	88 8f       	std	Y+24, r24	; 0x18
    219a:	29 89       	ldd	r18, Y+17	; 0x11
    219c:	3a 89       	ldd	r19, Y+18	; 0x12
    219e:	4b 89       	ldd	r20, Y+19	; 0x13
    21a0:	5c 89       	ldd	r21, Y+20	; 0x14
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	c9 58       	subi	r28, 0x89	; 137
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	e2 e1       	ldi	r30, 0x12	; 18
    21b0:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__epilogue_restores__>

000021b4 <_fpadd_parts>:
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 23 31 	jmp	0x6246	; 0x6246 <__prologue_saves__>
    21c0:	dc 01       	movw	r26, r24
    21c2:	2b 01       	movw	r4, r22
    21c4:	fa 01       	movw	r30, r20
    21c6:	9c 91       	ld	r25, X
    21c8:	92 30       	cpi	r25, 0x02	; 2
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <_fpadd_parts+0x1a>
    21cc:	39 c1       	rjmp	.+626    	; 0x2440 <_fpadd_parts+0x28c>
    21ce:	eb 01       	movw	r28, r22
    21d0:	88 81       	ld	r24, Y
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <_fpadd_parts+0x24>
    21d6:	33 c1       	rjmp	.+614    	; 0x243e <_fpadd_parts+0x28a>
    21d8:	94 30       	cpi	r25, 0x04	; 4
    21da:	69 f4       	brne	.+26     	; 0x21f6 <_fpadd_parts+0x42>
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <_fpadd_parts+0x2e>
    21e0:	2f c1       	rjmp	.+606    	; 0x2440 <_fpadd_parts+0x28c>
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 91       	ld	r25, X
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	98 17       	cp	r25, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <_fpadd_parts+0x3c>
    21ee:	28 c1       	rjmp	.+592    	; 0x2440 <_fpadd_parts+0x28c>
    21f0:	a5 e7       	ldi	r26, 0x75	; 117
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	25 c1       	rjmp	.+586    	; 0x2440 <_fpadd_parts+0x28c>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	09 f4       	brne	.+2      	; 0x21fc <_fpadd_parts+0x48>
    21fa:	21 c1       	rjmp	.+578    	; 0x243e <_fpadd_parts+0x28a>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	a9 f4       	brne	.+42     	; 0x222a <_fpadd_parts+0x76>
    2200:	92 30       	cpi	r25, 0x02	; 2
    2202:	09 f0       	breq	.+2      	; 0x2206 <_fpadd_parts+0x52>
    2204:	1d c1       	rjmp	.+570    	; 0x2440 <_fpadd_parts+0x28c>
    2206:	9a 01       	movw	r18, r20
    2208:	ad 01       	movw	r20, r26
    220a:	88 e0       	ldi	r24, 0x08	; 8
    220c:	ea 01       	movw	r28, r20
    220e:	09 90       	ld	r0, Y+
    2210:	ae 01       	movw	r20, r28
    2212:	e9 01       	movw	r28, r18
    2214:	09 92       	st	Y+, r0
    2216:	9e 01       	movw	r18, r28
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	c1 f7       	brne	.-16     	; 0x220c <_fpadd_parts+0x58>
    221c:	e2 01       	movw	r28, r4
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 91       	ld	r25, X
    2224:	89 23       	and	r24, r25
    2226:	81 83       	std	Z+1, r24	; 0x01
    2228:	08 c1       	rjmp	.+528    	; 0x243a <_fpadd_parts+0x286>
    222a:	92 30       	cpi	r25, 0x02	; 2
    222c:	09 f4       	brne	.+2      	; 0x2230 <_fpadd_parts+0x7c>
    222e:	07 c1       	rjmp	.+526    	; 0x243e <_fpadd_parts+0x28a>
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	2d 90       	ld	r2, X+
    2234:	3c 90       	ld	r3, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	eb 01       	movw	r28, r22
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	ad 90       	ld	r10, X+
    2242:	bd 90       	ld	r11, X+
    2244:	cd 90       	ld	r12, X+
    2246:	dc 90       	ld	r13, X
    2248:	17 97       	sbiw	r26, 0x07	; 7
    224a:	ec 80       	ldd	r14, Y+4	; 0x04
    224c:	fd 80       	ldd	r15, Y+5	; 0x05
    224e:	0e 81       	ldd	r16, Y+6	; 0x06
    2250:	1f 81       	ldd	r17, Y+7	; 0x07
    2252:	91 01       	movw	r18, r2
    2254:	28 1b       	sub	r18, r24
    2256:	39 0b       	sbc	r19, r25
    2258:	b9 01       	movw	r22, r18
    225a:	37 ff       	sbrs	r19, 7
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <_fpadd_parts+0xb2>
    225e:	66 27       	eor	r22, r22
    2260:	77 27       	eor	r23, r23
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	60 32       	cpi	r22, 0x20	; 32
    2268:	71 05       	cpc	r23, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <_fpadd_parts+0xba>
    226c:	61 c0       	rjmp	.+194    	; 0x2330 <_fpadd_parts+0x17c>
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	6c f5       	brge	.+90     	; 0x22ce <_fpadd_parts+0x11a>
    2274:	37 01       	movw	r6, r14
    2276:	48 01       	movw	r8, r16
    2278:	06 2e       	mov	r0, r22
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <_fpadd_parts+0xd0>
    227c:	96 94       	lsr	r9
    227e:	87 94       	ror	r8
    2280:	77 94       	ror	r7
    2282:	67 94       	ror	r6
    2284:	0a 94       	dec	r0
    2286:	d2 f7       	brpl	.-12     	; 0x227c <_fpadd_parts+0xc8>
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <_fpadd_parts+0xe6>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	44 1f       	adc	r20, r20
    2298:	55 1f       	adc	r21, r21
    229a:	6a 95       	dec	r22
    229c:	d2 f7       	brpl	.-12     	; 0x2292 <_fpadd_parts+0xde>
    229e:	21 50       	subi	r18, 0x01	; 1
    22a0:	30 40       	sbci	r19, 0x00	; 0
    22a2:	40 40       	sbci	r20, 0x00	; 0
    22a4:	50 40       	sbci	r21, 0x00	; 0
    22a6:	2e 21       	and	r18, r14
    22a8:	3f 21       	and	r19, r15
    22aa:	40 23       	and	r20, r16
    22ac:	51 23       	and	r21, r17
    22ae:	21 15       	cp	r18, r1
    22b0:	31 05       	cpc	r19, r1
    22b2:	41 05       	cpc	r20, r1
    22b4:	51 05       	cpc	r21, r1
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <_fpadd_parts+0x10c>
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	79 01       	movw	r14, r18
    22c2:	8a 01       	movw	r16, r20
    22c4:	e6 28       	or	r14, r6
    22c6:	f7 28       	or	r15, r7
    22c8:	08 29       	or	r16, r8
    22ca:	19 29       	or	r17, r9
    22cc:	3c c0       	rjmp	.+120    	; 0x2346 <_fpadd_parts+0x192>
    22ce:	23 2b       	or	r18, r19
    22d0:	d1 f1       	breq	.+116    	; 0x2346 <_fpadd_parts+0x192>
    22d2:	26 0e       	add	r2, r22
    22d4:	37 1e       	adc	r3, r23
    22d6:	35 01       	movw	r6, r10
    22d8:	46 01       	movw	r8, r12
    22da:	06 2e       	mov	r0, r22
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <_fpadd_parts+0x132>
    22de:	96 94       	lsr	r9
    22e0:	87 94       	ror	r8
    22e2:	77 94       	ror	r7
    22e4:	67 94       	ror	r6
    22e6:	0a 94       	dec	r0
    22e8:	d2 f7       	brpl	.-12     	; 0x22de <_fpadd_parts+0x12a>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <_fpadd_parts+0x148>
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	44 1f       	adc	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	6a 95       	dec	r22
    22fe:	d2 f7       	brpl	.-12     	; 0x22f4 <_fpadd_parts+0x140>
    2300:	21 50       	subi	r18, 0x01	; 1
    2302:	30 40       	sbci	r19, 0x00	; 0
    2304:	40 40       	sbci	r20, 0x00	; 0
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	2a 21       	and	r18, r10
    230a:	3b 21       	and	r19, r11
    230c:	4c 21       	and	r20, r12
    230e:	5d 21       	and	r21, r13
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	41 05       	cpc	r20, r1
    2316:	51 05       	cpc	r21, r1
    2318:	21 f0       	breq	.+8      	; 0x2322 <_fpadd_parts+0x16e>
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	59 01       	movw	r10, r18
    2324:	6a 01       	movw	r12, r20
    2326:	a6 28       	or	r10, r6
    2328:	b7 28       	or	r11, r7
    232a:	c8 28       	or	r12, r8
    232c:	d9 28       	or	r13, r9
    232e:	0b c0       	rjmp	.+22     	; 0x2346 <_fpadd_parts+0x192>
    2330:	82 15       	cp	r24, r2
    2332:	93 05       	cpc	r25, r3
    2334:	2c f0       	brlt	.+10     	; 0x2340 <_fpadd_parts+0x18c>
    2336:	1c 01       	movw	r2, r24
    2338:	aa 24       	eor	r10, r10
    233a:	bb 24       	eor	r11, r11
    233c:	65 01       	movw	r12, r10
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <_fpadd_parts+0x192>
    2340:	ee 24       	eor	r14, r14
    2342:	ff 24       	eor	r15, r15
    2344:	87 01       	movw	r16, r14
    2346:	11 96       	adiw	r26, 0x01	; 1
    2348:	9c 91       	ld	r25, X
    234a:	d2 01       	movw	r26, r4
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	8c 91       	ld	r24, X
    2350:	98 17       	cp	r25, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <_fpadd_parts+0x1a2>
    2354:	45 c0       	rjmp	.+138    	; 0x23e0 <_fpadd_parts+0x22c>
    2356:	99 23       	and	r25, r25
    2358:	39 f0       	breq	.+14     	; 0x2368 <_fpadd_parts+0x1b4>
    235a:	a8 01       	movw	r20, r16
    235c:	97 01       	movw	r18, r14
    235e:	2a 19       	sub	r18, r10
    2360:	3b 09       	sbc	r19, r11
    2362:	4c 09       	sbc	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <_fpadd_parts+0x1c0>
    2368:	a6 01       	movw	r20, r12
    236a:	95 01       	movw	r18, r10
    236c:	2e 19       	sub	r18, r14
    236e:	3f 09       	sbc	r19, r15
    2370:	40 0b       	sbc	r20, r16
    2372:	51 0b       	sbc	r21, r17
    2374:	57 fd       	sbrc	r21, 7
    2376:	08 c0       	rjmp	.+16     	; 0x2388 <_fpadd_parts+0x1d4>
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	33 82       	std	Z+3, r3	; 0x03
    237c:	22 82       	std	Z+2, r2	; 0x02
    237e:	24 83       	std	Z+4, r18	; 0x04
    2380:	35 83       	std	Z+5, r19	; 0x05
    2382:	46 83       	std	Z+6, r20	; 0x06
    2384:	57 83       	std	Z+7, r21	; 0x07
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <_fpadd_parts+0x20e>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	81 83       	std	Z+1, r24	; 0x01
    238c:	33 82       	std	Z+3, r3	; 0x03
    238e:	22 82       	std	Z+2, r2	; 0x02
    2390:	88 27       	eor	r24, r24
    2392:	99 27       	eor	r25, r25
    2394:	dc 01       	movw	r26, r24
    2396:	82 1b       	sub	r24, r18
    2398:	93 0b       	sbc	r25, r19
    239a:	a4 0b       	sbc	r26, r20
    239c:	b5 0b       	sbc	r27, r21
    239e:	84 83       	std	Z+4, r24	; 0x04
    23a0:	95 83       	std	Z+5, r25	; 0x05
    23a2:	a6 83       	std	Z+6, r26	; 0x06
    23a4:	b7 83       	std	Z+7, r27	; 0x07
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <_fpadd_parts+0x20e>
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	44 1f       	adc	r20, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	24 83       	std	Z+4, r18	; 0x04
    23b2:	35 83       	std	Z+5, r19	; 0x05
    23b4:	46 83       	std	Z+6, r20	; 0x06
    23b6:	57 83       	std	Z+7, r21	; 0x07
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	24 81       	ldd	r18, Z+4	; 0x04
    23c4:	35 81       	ldd	r19, Z+5	; 0x05
    23c6:	46 81       	ldd	r20, Z+6	; 0x06
    23c8:	57 81       	ldd	r21, Z+7	; 0x07
    23ca:	da 01       	movw	r26, r20
    23cc:	c9 01       	movw	r24, r18
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	a1 09       	sbc	r26, r1
    23d2:	b1 09       	sbc	r27, r1
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	af 4f       	sbci	r26, 0xFF	; 255
    23da:	bf 43       	sbci	r27, 0x3F	; 63
    23dc:	28 f3       	brcs	.-54     	; 0x23a8 <_fpadd_parts+0x1f4>
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <_fpadd_parts+0x242>
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	33 82       	std	Z+3, r3	; 0x03
    23e4:	22 82       	std	Z+2, r2	; 0x02
    23e6:	ea 0c       	add	r14, r10
    23e8:	fb 1c       	adc	r15, r11
    23ea:	0c 1d       	adc	r16, r12
    23ec:	1d 1d       	adc	r17, r13
    23ee:	e4 82       	std	Z+4, r14	; 0x04
    23f0:	f5 82       	std	Z+5, r15	; 0x05
    23f2:	06 83       	std	Z+6, r16	; 0x06
    23f4:	17 83       	std	Z+7, r17	; 0x07
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	80 83       	st	Z, r24
    23fa:	24 81       	ldd	r18, Z+4	; 0x04
    23fc:	35 81       	ldd	r19, Z+5	; 0x05
    23fe:	46 81       	ldd	r20, Z+6	; 0x06
    2400:	57 81       	ldd	r21, Z+7	; 0x07
    2402:	57 ff       	sbrs	r21, 7
    2404:	1a c0       	rjmp	.+52     	; 0x243a <_fpadd_parts+0x286>
    2406:	c9 01       	movw	r24, r18
    2408:	aa 27       	eor	r26, r26
    240a:	97 fd       	sbrc	r25, 7
    240c:	a0 95       	com	r26
    240e:	ba 2f       	mov	r27, r26
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	a0 70       	andi	r26, 0x00	; 0
    2416:	b0 70       	andi	r27, 0x00	; 0
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	82 2b       	or	r24, r18
    2422:	93 2b       	or	r25, r19
    2424:	a4 2b       	or	r26, r20
    2426:	b5 2b       	or	r27, r21
    2428:	84 83       	std	Z+4, r24	; 0x04
    242a:	95 83       	std	Z+5, r25	; 0x05
    242c:	a6 83       	std	Z+6, r26	; 0x06
    242e:	b7 83       	std	Z+7, r27	; 0x07
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	df 01       	movw	r26, r30
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_fpadd_parts+0x28c>
    243e:	d2 01       	movw	r26, r4
    2440:	cd 01       	movw	r24, r26
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	e2 e1       	ldi	r30, 0x12	; 18
    2448:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__epilogue_restores__>

0000244c <__subsf3>:
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ec e2       	ldi	r30, 0x2C	; 44
    2452:	f2 e1       	ldi	r31, 0x12	; 18
    2454:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__prologue_saves__+0x18>
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	7a 83       	std	Y+2, r23	; 0x02
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	2d 83       	std	Y+5, r18	; 0x05
    2462:	3e 83       	std	Y+6, r19	; 0x06
    2464:	4f 83       	std	Y+7, r20	; 0x07
    2466:	58 87       	std	Y+8, r21	; 0x08
    2468:	e9 e0       	ldi	r30, 0x09	; 9
    246a:	ee 2e       	mov	r14, r30
    246c:	f1 2c       	mov	r15, r1
    246e:	ec 0e       	add	r14, r28
    2470:	fd 1e       	adc	r15, r29
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    247c:	8e 01       	movw	r16, r28
    247e:	0f 5e       	subi	r16, 0xEF	; 239
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	ce 01       	movw	r24, r28
    2484:	05 96       	adiw	r24, 0x05	; 5
    2486:	b8 01       	movw	r22, r16
    2488:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    248c:	8a 89       	ldd	r24, Y+18	; 0x12
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	89 27       	eor	r24, r25
    2492:	8a 8b       	std	Y+18, r24	; 0x12
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	ae 01       	movw	r20, r28
    249a:	47 5e       	subi	r20, 0xE7	; 231
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24a2:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	e6 e0       	ldi	r30, 0x06	; 6
    24aa:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <__epilogue_restores__+0x18>

000024ae <__addsf3>:
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__prologue_saves__+0x18>
    24ba:	69 83       	std	Y+1, r22	; 0x01
    24bc:	7a 83       	std	Y+2, r23	; 0x02
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08
    24ca:	f9 e0       	ldi	r31, 0x09	; 9
    24cc:	ef 2e       	mov	r14, r31
    24ce:	f1 2c       	mov	r15, r1
    24d0:	ec 0e       	add	r14, r28
    24d2:	fd 1e       	adc	r15, r29
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24de:	8e 01       	movw	r16, r28
    24e0:	0f 5e       	subi	r16, 0xEF	; 239
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	ce 01       	movw	r24, r28
    24e6:	05 96       	adiw	r24, 0x05	; 5
    24e8:	b8 01       	movw	r22, r16
    24ea:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    24ee:	c7 01       	movw	r24, r14
    24f0:	b8 01       	movw	r22, r16
    24f2:	ae 01       	movw	r20, r28
    24f4:	47 5e       	subi	r20, 0xE7	; 231
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24fc:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    2500:	a0 96       	adiw	r28, 0x20	; 32
    2502:	e6 e0       	ldi	r30, 0x06	; 6
    2504:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <__epilogue_restores__+0x18>

00002508 <__mulsf3>:
    2508:	a0 e2       	ldi	r26, 0x20	; 32
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 23 31 	jmp	0x6246	; 0x6246 <__prologue_saves__>
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	4f 83       	std	Y+7, r20	; 0x07
    2522:	58 87       	std	Y+8, r21	; 0x08
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	be 01       	movw	r22, r28
    252a:	67 5f       	subi	r22, 0xF7	; 247
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2532:	ce 01       	movw	r24, r28
    2534:	05 96       	adiw	r24, 0x05	; 5
    2536:	be 01       	movw	r22, r28
    2538:	6f 5e       	subi	r22, 0xEF	; 239
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    2540:	99 85       	ldd	r25, Y+9	; 0x09
    2542:	92 30       	cpi	r25, 0x02	; 2
    2544:	88 f0       	brcs	.+34     	; 0x2568 <__mulsf3+0x60>
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	c8 f0       	brcs	.+50     	; 0x257e <__mulsf3+0x76>
    254c:	94 30       	cpi	r25, 0x04	; 4
    254e:	19 f4       	brne	.+6      	; 0x2556 <__mulsf3+0x4e>
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	51 f4       	brne	.+20     	; 0x2568 <__mulsf3+0x60>
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__mulsf3+0x56>
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	29 f4       	brne	.+10     	; 0x2564 <__mulsf3+0x5c>
    255a:	92 30       	cpi	r25, 0x02	; 2
    255c:	81 f4       	brne	.+32     	; 0x257e <__mulsf3+0x76>
    255e:	85 e7       	ldi	r24, 0x75	; 117
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	c6 c0       	rjmp	.+396    	; 0x26f0 <__mulsf3+0x1e8>
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	49 f4       	brne	.+18     	; 0x257a <__mulsf3+0x72>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	8a 89       	ldd	r24, Y+18	; 0x12
    256e:	98 13       	cpse	r25, r24
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	2a 87       	std	Y+10, r18	; 0x0a
    2574:	ce 01       	movw	r24, r28
    2576:	09 96       	adiw	r24, 0x09	; 9
    2578:	bb c0       	rjmp	.+374    	; 0x26f0 <__mulsf3+0x1e8>
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	49 f4       	brne	.+18     	; 0x2590 <__mulsf3+0x88>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	98 13       	cpse	r25, r24
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	2a 8b       	std	Y+18, r18	; 0x12
    258a:	ce 01       	movw	r24, r28
    258c:	41 96       	adiw	r24, 0x11	; 17
    258e:	b0 c0       	rjmp	.+352    	; 0x26f0 <__mulsf3+0x1e8>
    2590:	2d 84       	ldd	r2, Y+13	; 0x0d
    2592:	3e 84       	ldd	r3, Y+14	; 0x0e
    2594:	4f 84       	ldd	r4, Y+15	; 0x0f
    2596:	58 88       	ldd	r5, Y+16	; 0x10
    2598:	6d 88       	ldd	r6, Y+21	; 0x15
    259a:	7e 88       	ldd	r7, Y+22	; 0x16
    259c:	8f 88       	ldd	r8, Y+23	; 0x17
    259e:	98 8c       	ldd	r9, Y+24	; 0x18
    25a0:	ee 24       	eor	r14, r14
    25a2:	ff 24       	eor	r15, r15
    25a4:	87 01       	movw	r16, r14
    25a6:	aa 24       	eor	r10, r10
    25a8:	bb 24       	eor	r11, r11
    25aa:	65 01       	movw	r12, r10
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	e0 e0       	ldi	r30, 0x00	; 0
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	c1 01       	movw	r24, r2
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	90 70       	andi	r25, 0x00	; 0
    25be:	89 2b       	or	r24, r25
    25c0:	e9 f0       	breq	.+58     	; 0x25fc <__mulsf3+0xf4>
    25c2:	e6 0c       	add	r14, r6
    25c4:	f7 1c       	adc	r15, r7
    25c6:	08 1d       	adc	r16, r8
    25c8:	19 1d       	adc	r17, r9
    25ca:	9a 01       	movw	r18, r20
    25cc:	ab 01       	movw	r20, r22
    25ce:	2a 0d       	add	r18, r10
    25d0:	3b 1d       	adc	r19, r11
    25d2:	4c 1d       	adc	r20, r12
    25d4:	5d 1d       	adc	r21, r13
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e6 14       	cp	r14, r6
    25e0:	f7 04       	cpc	r15, r7
    25e2:	08 05       	cpc	r16, r8
    25e4:	19 05       	cpc	r17, r9
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <__mulsf3+0xe8>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ba 01       	movw	r22, r20
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 0f       	add	r20, r24
    25f6:	59 1f       	adc	r21, r25
    25f8:	6a 1f       	adc	r22, r26
    25fa:	7b 1f       	adc	r23, r27
    25fc:	aa 0c       	add	r10, r10
    25fe:	bb 1c       	adc	r11, r11
    2600:	cc 1c       	adc	r12, r12
    2602:	dd 1c       	adc	r13, r13
    2604:	97 fe       	sbrs	r9, 7
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <__mulsf3+0x110>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	a8 2a       	or	r10, r24
    2612:	b9 2a       	or	r11, r25
    2614:	ca 2a       	or	r12, r26
    2616:	db 2a       	or	r13, r27
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	e0 32       	cpi	r30, 0x20	; 32
    261c:	f1 05       	cpc	r31, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <__mulsf3+0x12a>
    2620:	66 0c       	add	r6, r6
    2622:	77 1c       	adc	r7, r7
    2624:	88 1c       	adc	r8, r8
    2626:	99 1c       	adc	r9, r9
    2628:	56 94       	lsr	r5
    262a:	47 94       	ror	r4
    262c:	37 94       	ror	r3
    262e:	27 94       	ror	r2
    2630:	c3 cf       	rjmp	.-122    	; 0x25b8 <__mulsf3+0xb0>
    2632:	fa 85       	ldd	r31, Y+10	; 0x0a
    2634:	ea 89       	ldd	r30, Y+18	; 0x12
    2636:	2b 89       	ldd	r18, Y+19	; 0x13
    2638:	3c 89       	ldd	r19, Y+20	; 0x14
    263a:	8b 85       	ldd	r24, Y+11	; 0x0b
    263c:	9c 85       	ldd	r25, Y+12	; 0x0c
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	2e 5f       	subi	r18, 0xFE	; 254
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	17 c0       	rjmp	.+46     	; 0x2676 <__mulsf3+0x16e>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	89 2b       	or	r24, r25
    2650:	61 f0       	breq	.+24     	; 0x266a <__mulsf3+0x162>
    2652:	16 95       	lsr	r17
    2654:	07 95       	ror	r16
    2656:	f7 94       	ror	r15
    2658:	e7 94       	ror	r14
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e0       	ldi	r26, 0x00	; 0
    2660:	b0 e8       	ldi	r27, 0x80	; 128
    2662:	e8 2a       	or	r14, r24
    2664:	f9 2a       	or	r15, r25
    2666:	0a 2b       	or	r16, r26
    2668:	1b 2b       	or	r17, r27
    266a:	76 95       	lsr	r23
    266c:	67 95       	ror	r22
    266e:	57 95       	ror	r21
    2670:	47 95       	ror	r20
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	77 fd       	sbrc	r23, 7
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <__mulsf3+0x140>
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <__mulsf3+0x18c>
    267c:	44 0f       	add	r20, r20
    267e:	55 1f       	adc	r21, r21
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	17 fd       	sbrc	r17, 7
    2686:	41 60       	ori	r20, 0x01	; 1
    2688:	ee 0c       	add	r14, r14
    268a:	ff 1c       	adc	r15, r15
    268c:	00 1f       	adc	r16, r16
    268e:	11 1f       	adc	r17, r17
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	30 40       	sbci	r19, 0x00	; 0
    2694:	40 30       	cpi	r20, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	59 07       	cpc	r21, r25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	69 07       	cpc	r22, r25
    269e:	90 e4       	ldi	r25, 0x40	; 64
    26a0:	79 07       	cpc	r23, r25
    26a2:	60 f3       	brcs	.-40     	; 0x267c <__mulsf3+0x174>
    26a4:	2b 8f       	std	Y+27, r18	; 0x1b
    26a6:	3c 8f       	std	Y+28, r19	; 0x1c
    26a8:	db 01       	movw	r26, r22
    26aa:	ca 01       	movw	r24, r20
    26ac:	8f 77       	andi	r24, 0x7F	; 127
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	a0 70       	andi	r26, 0x00	; 0
    26b2:	b0 70       	andi	r27, 0x00	; 0
    26b4:	80 34       	cpi	r24, 0x40	; 64
    26b6:	91 05       	cpc	r25, r1
    26b8:	a1 05       	cpc	r26, r1
    26ba:	b1 05       	cpc	r27, r1
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <__mulsf3+0x1ce>
    26be:	47 fd       	sbrc	r20, 7
    26c0:	0a c0       	rjmp	.+20     	; 0x26d6 <__mulsf3+0x1ce>
    26c2:	e1 14       	cp	r14, r1
    26c4:	f1 04       	cpc	r15, r1
    26c6:	01 05       	cpc	r16, r1
    26c8:	11 05       	cpc	r17, r1
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <__mulsf3+0x1ce>
    26cc:	40 5c       	subi	r20, 0xC0	; 192
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	6f 4f       	sbci	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	40 78       	andi	r20, 0x80	; 128
    26d6:	1a 8e       	std	Y+26, r1	; 0x1a
    26d8:	fe 17       	cp	r31, r30
    26da:	11 f0       	breq	.+4      	; 0x26e0 <__mulsf3+0x1d8>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	8a 8f       	std	Y+26, r24	; 0x1a
    26e0:	4d 8f       	std	Y+29, r20	; 0x1d
    26e2:	5e 8f       	std	Y+30, r21	; 0x1e
    26e4:	6f 8f       	std	Y+31, r22	; 0x1f
    26e6:	78 a3       	std	Y+32, r23	; 0x20
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	ce 01       	movw	r24, r28
    26ee:	49 96       	adiw	r24, 0x19	; 25
    26f0:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__pack_f>
    26f4:	a0 96       	adiw	r28, 0x20	; 32
    26f6:	e2 e1       	ldi	r30, 0x12	; 18
    26f8:	0c 94 3f 31 	jmp	0x627e	; 0x627e <__epilogue_restores__>

000026fc <__gtsf2>:
    26fc:	a8 e1       	ldi	r26, 0x18	; 24
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__prologue_saves__+0x18>
    2708:	69 83       	std	Y+1, r22	; 0x01
    270a:	7a 83       	std	Y+2, r23	; 0x02
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	2d 83       	std	Y+5, r18	; 0x05
    2712:	3e 83       	std	Y+6, r19	; 0x06
    2714:	4f 83       	std	Y+7, r20	; 0x07
    2716:	58 87       	std	Y+8, r21	; 0x08
    2718:	89 e0       	ldi	r24, 0x09	; 9
    271a:	e8 2e       	mov	r14, r24
    271c:	f1 2c       	mov	r15, r1
    271e:	ec 0e       	add	r14, r28
    2720:	fd 1e       	adc	r15, r29
    2722:	ce 01       	movw	r24, r28
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    272c:	8e 01       	movw	r16, r28
    272e:	0f 5e       	subi	r16, 0xEF	; 239
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	ce 01       	movw	r24, r28
    2734:	05 96       	adiw	r24, 0x05	; 5
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    273c:	89 85       	ldd	r24, Y+9	; 0x09
    273e:	82 30       	cpi	r24, 0x02	; 2
    2740:	40 f0       	brcs	.+16     	; 0x2752 <__gtsf2+0x56>
    2742:	89 89       	ldd	r24, Y+17	; 0x11
    2744:	82 30       	cpi	r24, 0x02	; 2
    2746:	28 f0       	brcs	.+10     	; 0x2752 <__gtsf2+0x56>
    2748:	c7 01       	movw	r24, r14
    274a:	b8 01       	movw	r22, r16
    274c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <__gtsf2+0x58>
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	68 96       	adiw	r28, 0x18	; 24
    2756:	e6 e0       	ldi	r30, 0x06	; 6
    2758:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <__epilogue_restores__+0x18>

0000275c <__gesf2>:
    275c:	a8 e1       	ldi	r26, 0x18	; 24
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e4 eb       	ldi	r30, 0xB4	; 180
    2762:	f3 e1       	ldi	r31, 0x13	; 19
    2764:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__prologue_saves__+0x18>
    2768:	69 83       	std	Y+1, r22	; 0x01
    276a:	7a 83       	std	Y+2, r23	; 0x02
    276c:	8b 83       	std	Y+3, r24	; 0x03
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	2d 83       	std	Y+5, r18	; 0x05
    2772:	3e 83       	std	Y+6, r19	; 0x06
    2774:	4f 83       	std	Y+7, r20	; 0x07
    2776:	58 87       	std	Y+8, r21	; 0x08
    2778:	89 e0       	ldi	r24, 0x09	; 9
    277a:	e8 2e       	mov	r14, r24
    277c:	f1 2c       	mov	r15, r1
    277e:	ec 0e       	add	r14, r28
    2780:	fd 1e       	adc	r15, r29
    2782:	ce 01       	movw	r24, r28
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	b7 01       	movw	r22, r14
    2788:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    278c:	8e 01       	movw	r16, r28
    278e:	0f 5e       	subi	r16, 0xEF	; 239
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	ce 01       	movw	r24, r28
    2794:	05 96       	adiw	r24, 0x05	; 5
    2796:	b8 01       	movw	r22, r16
    2798:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	40 f0       	brcs	.+16     	; 0x27b2 <__gesf2+0x56>
    27a2:	89 89       	ldd	r24, Y+17	; 0x11
    27a4:	82 30       	cpi	r24, 0x02	; 2
    27a6:	28 f0       	brcs	.+10     	; 0x27b2 <__gesf2+0x56>
    27a8:	c7 01       	movw	r24, r14
    27aa:	b8 01       	movw	r22, r16
    27ac:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    27b0:	01 c0       	rjmp	.+2      	; 0x27b4 <__gesf2+0x58>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	68 96       	adiw	r28, 0x18	; 24
    27b6:	e6 e0       	ldi	r30, 0x06	; 6
    27b8:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <__epilogue_restores__+0x18>

000027bc <__ltsf2>:
    27bc:	a8 e1       	ldi	r26, 0x18	; 24
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e4 ee       	ldi	r30, 0xE4	; 228
    27c2:	f3 e1       	ldi	r31, 0x13	; 19
    27c4:	0c 94 2f 31 	jmp	0x625e	; 0x625e <__prologue_saves__+0x18>
    27c8:	69 83       	std	Y+1, r22	; 0x01
    27ca:	7a 83       	std	Y+2, r23	; 0x02
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	2d 83       	std	Y+5, r18	; 0x05
    27d2:	3e 83       	std	Y+6, r19	; 0x06
    27d4:	4f 83       	std	Y+7, r20	; 0x07
    27d6:	58 87       	std	Y+8, r21	; 0x08
    27d8:	89 e0       	ldi	r24, 0x09	; 9
    27da:	e8 2e       	mov	r14, r24
    27dc:	f1 2c       	mov	r15, r1
    27de:	ec 0e       	add	r14, r28
    27e0:	fd 1e       	adc	r15, r29
    27e2:	ce 01       	movw	r24, r28
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	b7 01       	movw	r22, r14
    27e8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27ec:	8e 01       	movw	r16, r28
    27ee:	0f 5e       	subi	r16, 0xEF	; 239
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	ce 01       	movw	r24, r28
    27f4:	05 96       	adiw	r24, 0x05	; 5
    27f6:	b8 01       	movw	r22, r16
    27f8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    27fc:	89 85       	ldd	r24, Y+9	; 0x09
    27fe:	82 30       	cpi	r24, 0x02	; 2
    2800:	40 f0       	brcs	.+16     	; 0x2812 <__ltsf2+0x56>
    2802:	89 89       	ldd	r24, Y+17	; 0x11
    2804:	82 30       	cpi	r24, 0x02	; 2
    2806:	28 f0       	brcs	.+10     	; 0x2812 <__ltsf2+0x56>
    2808:	c7 01       	movw	r24, r14
    280a:	b8 01       	movw	r22, r16
    280c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <__fpcmp_parts_f>
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <__ltsf2+0x58>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	68 96       	adiw	r28, 0x18	; 24
    2816:	e6 e0       	ldi	r30, 0x06	; 6
    2818:	0c 94 4b 31 	jmp	0x6296	; 0x6296 <__epilogue_restores__+0x18>

0000281c <__fixsfsi>:
    281c:	ac e0       	ldi	r26, 0x0C	; 12
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e4 e1       	ldi	r30, 0x14	; 20
    2822:	f4 e1       	ldi	r31, 0x14	; 20
    2824:	0c 94 33 31 	jmp	0x6266	; 0x6266 <__prologue_saves__+0x20>
    2828:	69 83       	std	Y+1, r22	; 0x01
    282a:	7a 83       	std	Y+2, r23	; 0x02
    282c:	8b 83       	std	Y+3, r24	; 0x03
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	be 01       	movw	r22, r28
    2836:	6b 5f       	subi	r22, 0xFB	; 251
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__unpack_f>
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	61 f1       	breq	.+88     	; 0x289c <__fixsfsi+0x80>
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	50 f1       	brcs	.+84     	; 0x289c <__fixsfsi+0x80>
    2848:	84 30       	cpi	r24, 0x04	; 4
    284a:	21 f4       	brne	.+8      	; 0x2854 <__fixsfsi+0x38>
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	88 23       	and	r24, r24
    2850:	51 f1       	breq	.+84     	; 0x28a6 <__fixsfsi+0x8a>
    2852:	2e c0       	rjmp	.+92     	; 0x28b0 <__fixsfsi+0x94>
    2854:	2f 81       	ldd	r18, Y+7	; 0x07
    2856:	38 85       	ldd	r19, Y+8	; 0x08
    2858:	37 fd       	sbrc	r19, 7
    285a:	20 c0       	rjmp	.+64     	; 0x289c <__fixsfsi+0x80>
    285c:	6e 81       	ldd	r22, Y+6	; 0x06
    285e:	2f 31       	cpi	r18, 0x1F	; 31
    2860:	31 05       	cpc	r19, r1
    2862:	1c f0       	brlt	.+6      	; 0x286a <__fixsfsi+0x4e>
    2864:	66 23       	and	r22, r22
    2866:	f9 f0       	breq	.+62     	; 0x28a6 <__fixsfsi+0x8a>
    2868:	23 c0       	rjmp	.+70     	; 0x28b0 <__fixsfsi+0x94>
    286a:	8e e1       	ldi	r24, 0x1E	; 30
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	82 1b       	sub	r24, r18
    2870:	93 0b       	sbc	r25, r19
    2872:	29 85       	ldd	r18, Y+9	; 0x09
    2874:	3a 85       	ldd	r19, Y+10	; 0x0a
    2876:	4b 85       	ldd	r20, Y+11	; 0x0b
    2878:	5c 85       	ldd	r21, Y+12	; 0x0c
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <__fixsfsi+0x68>
    287c:	56 95       	lsr	r21
    287e:	47 95       	ror	r20
    2880:	37 95       	ror	r19
    2882:	27 95       	ror	r18
    2884:	8a 95       	dec	r24
    2886:	d2 f7       	brpl	.-12     	; 0x287c <__fixsfsi+0x60>
    2888:	66 23       	and	r22, r22
    288a:	b1 f0       	breq	.+44     	; 0x28b8 <__fixsfsi+0x9c>
    288c:	50 95       	com	r21
    288e:	40 95       	com	r20
    2890:	30 95       	com	r19
    2892:	21 95       	neg	r18
    2894:	3f 4f       	sbci	r19, 0xFF	; 255
    2896:	4f 4f       	sbci	r20, 0xFF	; 255
    2898:	5f 4f       	sbci	r21, 0xFF	; 255
    289a:	0e c0       	rjmp	.+28     	; 0x28b8 <__fixsfsi+0x9c>
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	09 c0       	rjmp	.+18     	; 0x28b8 <__fixsfsi+0x9c>
    28a6:	2f ef       	ldi	r18, 0xFF	; 255
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f ef       	ldi	r20, 0xFF	; 255
    28ac:	5f e7       	ldi	r21, 0x7F	; 127
    28ae:	04 c0       	rjmp	.+8      	; 0x28b8 <__fixsfsi+0x9c>
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	50 e8       	ldi	r21, 0x80	; 128
    28b8:	b9 01       	movw	r22, r18
    28ba:	ca 01       	movw	r24, r20
    28bc:	2c 96       	adiw	r28, 0x0c	; 12
    28be:	e2 e0       	ldi	r30, 0x02	; 2
    28c0:	0c 94 4f 31 	jmp	0x629e	; 0x629e <__epilogue_restores__+0x20>

000028c4 <__pack_f>:
    28c4:	df 92       	push	r13
    28c6:	ef 92       	push	r14
    28c8:	ff 92       	push	r15
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	fc 01       	movw	r30, r24
    28d0:	e4 80       	ldd	r14, Z+4	; 0x04
    28d2:	f5 80       	ldd	r15, Z+5	; 0x05
    28d4:	06 81       	ldd	r16, Z+6	; 0x06
    28d6:	17 81       	ldd	r17, Z+7	; 0x07
    28d8:	d1 80       	ldd	r13, Z+1	; 0x01
    28da:	80 81       	ld	r24, Z
    28dc:	82 30       	cpi	r24, 0x02	; 2
    28de:	48 f4       	brcc	.+18     	; 0x28f2 <__pack_f+0x2e>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e1       	ldi	r26, 0x10	; 16
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e8 2a       	or	r14, r24
    28ea:	f9 2a       	or	r15, r25
    28ec:	0a 2b       	or	r16, r26
    28ee:	1b 2b       	or	r17, r27
    28f0:	a5 c0       	rjmp	.+330    	; 0x2a3c <__pack_f+0x178>
    28f2:	84 30       	cpi	r24, 0x04	; 4
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__pack_f+0x34>
    28f6:	9f c0       	rjmp	.+318    	; 0x2a36 <__pack_f+0x172>
    28f8:	82 30       	cpi	r24, 0x02	; 2
    28fa:	21 f4       	brne	.+8      	; 0x2904 <__pack_f+0x40>
    28fc:	ee 24       	eor	r14, r14
    28fe:	ff 24       	eor	r15, r15
    2900:	87 01       	movw	r16, r14
    2902:	05 c0       	rjmp	.+10     	; 0x290e <__pack_f+0x4a>
    2904:	e1 14       	cp	r14, r1
    2906:	f1 04       	cpc	r15, r1
    2908:	01 05       	cpc	r16, r1
    290a:	11 05       	cpc	r17, r1
    290c:	19 f4       	brne	.+6      	; 0x2914 <__pack_f+0x50>
    290e:	e0 e0       	ldi	r30, 0x00	; 0
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	96 c0       	rjmp	.+300    	; 0x2a40 <__pack_f+0x17c>
    2914:	62 81       	ldd	r22, Z+2	; 0x02
    2916:	73 81       	ldd	r23, Z+3	; 0x03
    2918:	9f ef       	ldi	r25, 0xFF	; 255
    291a:	62 38       	cpi	r22, 0x82	; 130
    291c:	79 07       	cpc	r23, r25
    291e:	0c f0       	brlt	.+2      	; 0x2922 <__pack_f+0x5e>
    2920:	5b c0       	rjmp	.+182    	; 0x29d8 <__pack_f+0x114>
    2922:	22 e8       	ldi	r18, 0x82	; 130
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	26 1b       	sub	r18, r22
    2928:	37 0b       	sbc	r19, r23
    292a:	2a 31       	cpi	r18, 0x1A	; 26
    292c:	31 05       	cpc	r19, r1
    292e:	2c f0       	brlt	.+10     	; 0x293a <__pack_f+0x76>
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	2a c0       	rjmp	.+84     	; 0x298e <__pack_f+0xca>
    293a:	b8 01       	movw	r22, r16
    293c:	a7 01       	movw	r20, r14
    293e:	02 2e       	mov	r0, r18
    2940:	04 c0       	rjmp	.+8      	; 0x294a <__pack_f+0x86>
    2942:	76 95       	lsr	r23
    2944:	67 95       	ror	r22
    2946:	57 95       	ror	r21
    2948:	47 95       	ror	r20
    294a:	0a 94       	dec	r0
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <__pack_f+0x7e>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a0 e0       	ldi	r26, 0x00	; 0
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <__pack_f+0x9c>
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	aa 1f       	adc	r26, r26
    295e:	bb 1f       	adc	r27, r27
    2960:	2a 95       	dec	r18
    2962:	d2 f7       	brpl	.-12     	; 0x2958 <__pack_f+0x94>
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	a1 09       	sbc	r26, r1
    2968:	b1 09       	sbc	r27, r1
    296a:	8e 21       	and	r24, r14
    296c:	9f 21       	and	r25, r15
    296e:	a0 23       	and	r26, r16
    2970:	b1 23       	and	r27, r17
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	a1 05       	cpc	r26, r1
    2976:	b1 05       	cpc	r27, r1
    2978:	21 f0       	breq	.+8      	; 0x2982 <__pack_f+0xbe>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	a0 e0       	ldi	r26, 0x00	; 0
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	9a 01       	movw	r18, r20
    2984:	ab 01       	movw	r20, r22
    2986:	28 2b       	or	r18, r24
    2988:	39 2b       	or	r19, r25
    298a:	4a 2b       	or	r20, r26
    298c:	5b 2b       	or	r21, r27
    298e:	da 01       	movw	r26, r20
    2990:	c9 01       	movw	r24, r18
    2992:	8f 77       	andi	r24, 0x7F	; 127
    2994:	90 70       	andi	r25, 0x00	; 0
    2996:	a0 70       	andi	r26, 0x00	; 0
    2998:	b0 70       	andi	r27, 0x00	; 0
    299a:	80 34       	cpi	r24, 0x40	; 64
    299c:	91 05       	cpc	r25, r1
    299e:	a1 05       	cpc	r26, r1
    29a0:	b1 05       	cpc	r27, r1
    29a2:	39 f4       	brne	.+14     	; 0x29b2 <__pack_f+0xee>
    29a4:	27 ff       	sbrs	r18, 7
    29a6:	09 c0       	rjmp	.+18     	; 0x29ba <__pack_f+0xf6>
    29a8:	20 5c       	subi	r18, 0xC0	; 192
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	4f 4f       	sbci	r20, 0xFF	; 255
    29ae:	5f 4f       	sbci	r21, 0xFF	; 255
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <__pack_f+0xf6>
    29b2:	21 5c       	subi	r18, 0xC1	; 193
    29b4:	3f 4f       	sbci	r19, 0xFF	; 255
    29b6:	4f 4f       	sbci	r20, 0xFF	; 255
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	e0 e0       	ldi	r30, 0x00	; 0
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	20 30       	cpi	r18, 0x00	; 0
    29c0:	a0 e0       	ldi	r26, 0x00	; 0
    29c2:	3a 07       	cpc	r19, r26
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	4a 07       	cpc	r20, r26
    29c8:	a0 e4       	ldi	r26, 0x40	; 64
    29ca:	5a 07       	cpc	r21, r26
    29cc:	10 f0       	brcs	.+4      	; 0x29d2 <__pack_f+0x10e>
    29ce:	e1 e0       	ldi	r30, 0x01	; 1
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	79 01       	movw	r14, r18
    29d4:	8a 01       	movw	r16, r20
    29d6:	27 c0       	rjmp	.+78     	; 0x2a26 <__pack_f+0x162>
    29d8:	60 38       	cpi	r22, 0x80	; 128
    29da:	71 05       	cpc	r23, r1
    29dc:	64 f5       	brge	.+88     	; 0x2a36 <__pack_f+0x172>
    29de:	fb 01       	movw	r30, r22
    29e0:	e1 58       	subi	r30, 0x81	; 129
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	d8 01       	movw	r26, r16
    29e6:	c7 01       	movw	r24, r14
    29e8:	8f 77       	andi	r24, 0x7F	; 127
    29ea:	90 70       	andi	r25, 0x00	; 0
    29ec:	a0 70       	andi	r26, 0x00	; 0
    29ee:	b0 70       	andi	r27, 0x00	; 0
    29f0:	80 34       	cpi	r24, 0x40	; 64
    29f2:	91 05       	cpc	r25, r1
    29f4:	a1 05       	cpc	r26, r1
    29f6:	b1 05       	cpc	r27, r1
    29f8:	39 f4       	brne	.+14     	; 0x2a08 <__pack_f+0x144>
    29fa:	e7 fe       	sbrs	r14, 7
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <__pack_f+0x154>
    29fe:	80 e4       	ldi	r24, 0x40	; 64
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__pack_f+0x14c>
    2a08:	8f e3       	ldi	r24, 0x3F	; 63
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e8 0e       	add	r14, r24
    2a12:	f9 1e       	adc	r15, r25
    2a14:	0a 1f       	adc	r16, r26
    2a16:	1b 1f       	adc	r17, r27
    2a18:	17 ff       	sbrs	r17, 7
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__pack_f+0x162>
    2a1c:	16 95       	lsr	r17
    2a1e:	07 95       	ror	r16
    2a20:	f7 94       	ror	r15
    2a22:	e7 94       	ror	r14
    2a24:	31 96       	adiw	r30, 0x01	; 1
    2a26:	87 e0       	ldi	r24, 0x07	; 7
    2a28:	16 95       	lsr	r17
    2a2a:	07 95       	ror	r16
    2a2c:	f7 94       	ror	r15
    2a2e:	e7 94       	ror	r14
    2a30:	8a 95       	dec	r24
    2a32:	d1 f7       	brne	.-12     	; 0x2a28 <__pack_f+0x164>
    2a34:	05 c0       	rjmp	.+10     	; 0x2a40 <__pack_f+0x17c>
    2a36:	ee 24       	eor	r14, r14
    2a38:	ff 24       	eor	r15, r15
    2a3a:	87 01       	movw	r16, r14
    2a3c:	ef ef       	ldi	r30, 0xFF	; 255
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	6e 2f       	mov	r22, r30
    2a42:	67 95       	ror	r22
    2a44:	66 27       	eor	r22, r22
    2a46:	67 95       	ror	r22
    2a48:	90 2f       	mov	r25, r16
    2a4a:	9f 77       	andi	r25, 0x7F	; 127
    2a4c:	d7 94       	ror	r13
    2a4e:	dd 24       	eor	r13, r13
    2a50:	d7 94       	ror	r13
    2a52:	8e 2f       	mov	r24, r30
    2a54:	86 95       	lsr	r24
    2a56:	49 2f       	mov	r20, r25
    2a58:	46 2b       	or	r20, r22
    2a5a:	58 2f       	mov	r21, r24
    2a5c:	5d 29       	or	r21, r13
    2a5e:	b7 01       	movw	r22, r14
    2a60:	ca 01       	movw	r24, r20
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	08 95       	ret

00002a6e <__unpack_f>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	db 01       	movw	r26, r22
    2a72:	40 81       	ld	r20, Z
    2a74:	51 81       	ldd	r21, Z+1	; 0x01
    2a76:	22 81       	ldd	r18, Z+2	; 0x02
    2a78:	62 2f       	mov	r22, r18
    2a7a:	6f 77       	andi	r22, 0x7F	; 127
    2a7c:	70 e0       	ldi	r23, 0x00	; 0
    2a7e:	22 1f       	adc	r18, r18
    2a80:	22 27       	eor	r18, r18
    2a82:	22 1f       	adc	r18, r18
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	89 2f       	mov	r24, r25
    2a88:	88 0f       	add	r24, r24
    2a8a:	82 2b       	or	r24, r18
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	99 1f       	adc	r25, r25
    2a92:	99 27       	eor	r25, r25
    2a94:	99 1f       	adc	r25, r25
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	9c 93       	st	X, r25
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
    2a9c:	21 15       	cp	r18, r1
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	a9 f5       	brne	.+106    	; 0x2b0c <__unpack_f+0x9e>
    2aa2:	41 15       	cp	r20, r1
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	61 05       	cpc	r22, r1
    2aa8:	71 05       	cpc	r23, r1
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <__unpack_f+0x42>
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	37 c0       	rjmp	.+110    	; 0x2b1e <__unpack_f+0xb0>
    2ab0:	82 e8       	ldi	r24, 0x82	; 130
    2ab2:	9f ef       	ldi	r25, 0xFF	; 255
    2ab4:	13 96       	adiw	r26, 0x03	; 3
    2ab6:	9c 93       	st	X, r25
    2ab8:	8e 93       	st	-X, r24
    2aba:	12 97       	sbiw	r26, 0x02	; 2
    2abc:	9a 01       	movw	r18, r20
    2abe:	ab 01       	movw	r20, r22
    2ac0:	67 e0       	ldi	r22, 0x07	; 7
    2ac2:	22 0f       	add	r18, r18
    2ac4:	33 1f       	adc	r19, r19
    2ac6:	44 1f       	adc	r20, r20
    2ac8:	55 1f       	adc	r21, r21
    2aca:	6a 95       	dec	r22
    2acc:	d1 f7       	brne	.-12     	; 0x2ac2 <__unpack_f+0x54>
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	8c 93       	st	X, r24
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <__unpack_f+0x80>
    2ad4:	22 0f       	add	r18, r18
    2ad6:	33 1f       	adc	r19, r19
    2ad8:	44 1f       	adc	r20, r20
    2ada:	55 1f       	adc	r21, r21
    2adc:	12 96       	adiw	r26, 0x02	; 2
    2ade:	8d 91       	ld	r24, X+
    2ae0:	9c 91       	ld	r25, X
    2ae2:	13 97       	sbiw	r26, 0x03	; 3
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	13 96       	adiw	r26, 0x03	; 3
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24
    2aec:	12 97       	sbiw	r26, 0x02	; 2
    2aee:	20 30       	cpi	r18, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	38 07       	cpc	r19, r24
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	48 07       	cpc	r20, r24
    2af8:	80 e4       	ldi	r24, 0x40	; 64
    2afa:	58 07       	cpc	r21, r24
    2afc:	58 f3       	brcs	.-42     	; 0x2ad4 <__unpack_f+0x66>
    2afe:	14 96       	adiw	r26, 0x04	; 4
    2b00:	2d 93       	st	X+, r18
    2b02:	3d 93       	st	X+, r19
    2b04:	4d 93       	st	X+, r20
    2b06:	5c 93       	st	X, r21
    2b08:	17 97       	sbiw	r26, 0x07	; 7
    2b0a:	08 95       	ret
    2b0c:	2f 3f       	cpi	r18, 0xFF	; 255
    2b0e:	31 05       	cpc	r19, r1
    2b10:	79 f4       	brne	.+30     	; 0x2b30 <__unpack_f+0xc2>
    2b12:	41 15       	cp	r20, r1
    2b14:	51 05       	cpc	r21, r1
    2b16:	61 05       	cpc	r22, r1
    2b18:	71 05       	cpc	r23, r1
    2b1a:	19 f4       	brne	.+6      	; 0x2b22 <__unpack_f+0xb4>
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	8c 93       	st	X, r24
    2b20:	08 95       	ret
    2b22:	64 ff       	sbrs	r22, 4
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <__unpack_f+0xbe>
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	8c 93       	st	X, r24
    2b2a:	12 c0       	rjmp	.+36     	; 0x2b50 <__unpack_f+0xe2>
    2b2c:	1c 92       	st	X, r1
    2b2e:	10 c0       	rjmp	.+32     	; 0x2b50 <__unpack_f+0xe2>
    2b30:	2f 57       	subi	r18, 0x7F	; 127
    2b32:	30 40       	sbci	r19, 0x00	; 0
    2b34:	13 96       	adiw	r26, 0x03	; 3
    2b36:	3c 93       	st	X, r19
    2b38:	2e 93       	st	-X, r18
    2b3a:	12 97       	sbiw	r26, 0x02	; 2
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	8c 93       	st	X, r24
    2b40:	87 e0       	ldi	r24, 0x07	; 7
    2b42:	44 0f       	add	r20, r20
    2b44:	55 1f       	adc	r21, r21
    2b46:	66 1f       	adc	r22, r22
    2b48:	77 1f       	adc	r23, r23
    2b4a:	8a 95       	dec	r24
    2b4c:	d1 f7       	brne	.-12     	; 0x2b42 <__unpack_f+0xd4>
    2b4e:	70 64       	ori	r23, 0x40	; 64
    2b50:	14 96       	adiw	r26, 0x04	; 4
    2b52:	4d 93       	st	X+, r20
    2b54:	5d 93       	st	X+, r21
    2b56:	6d 93       	st	X+, r22
    2b58:	7c 93       	st	X, r23
    2b5a:	17 97       	sbiw	r26, 0x07	; 7
    2b5c:	08 95       	ret

00002b5e <__fpcmp_parts_f>:
    2b5e:	1f 93       	push	r17
    2b60:	dc 01       	movw	r26, r24
    2b62:	fb 01       	movw	r30, r22
    2b64:	9c 91       	ld	r25, X
    2b66:	92 30       	cpi	r25, 0x02	; 2
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <__fpcmp_parts_f+0xe>
    2b6a:	47 c0       	rjmp	.+142    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b6c:	80 81       	ld	r24, Z
    2b6e:	82 30       	cpi	r24, 0x02	; 2
    2b70:	08 f4       	brcc	.+2      	; 0x2b74 <__fpcmp_parts_f+0x16>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2b74:	94 30       	cpi	r25, 0x04	; 4
    2b76:	51 f4       	brne	.+20     	; 0x2b8c <__fpcmp_parts_f+0x2e>
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	1c 91       	ld	r17, X
    2b7c:	84 30       	cpi	r24, 0x04	; 4
    2b7e:	99 f5       	brne	.+102    	; 0x2be6 <__fpcmp_parts_f+0x88>
    2b80:	81 81       	ldd	r24, Z+1	; 0x01
    2b82:	68 2f       	mov	r22, r24
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	61 1b       	sub	r22, r17
    2b88:	71 09       	sbc	r23, r1
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <__fpcmp_parts_f+0xac>
    2b8c:	84 30       	cpi	r24, 0x04	; 4
    2b8e:	21 f0       	breq	.+8      	; 0x2b98 <__fpcmp_parts_f+0x3a>
    2b90:	92 30       	cpi	r25, 0x02	; 2
    2b92:	31 f4       	brne	.+12     	; 0x2ba0 <__fpcmp_parts_f+0x42>
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	b9 f1       	breq	.+110    	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2b98:	81 81       	ldd	r24, Z+1	; 0x01
    2b9a:	88 23       	and	r24, r24
    2b9c:	89 f1       	breq	.+98     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2b9e:	2d c0       	rjmp	.+90     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2ba0:	11 96       	adiw	r26, 0x01	; 1
    2ba2:	1c 91       	ld	r17, X
    2ba4:	11 97       	sbiw	r26, 0x01	; 1
    2ba6:	82 30       	cpi	r24, 0x02	; 2
    2ba8:	f1 f0       	breq	.+60     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2baa:	81 81       	ldd	r24, Z+1	; 0x01
    2bac:	18 17       	cp	r17, r24
    2bae:	d9 f4       	brne	.+54     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bb0:	12 96       	adiw	r26, 0x02	; 2
    2bb2:	2d 91       	ld	r18, X+
    2bb4:	3c 91       	ld	r19, X
    2bb6:	13 97       	sbiw	r26, 0x03	; 3
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	82 17       	cp	r24, r18
    2bbe:	93 07       	cpc	r25, r19
    2bc0:	94 f0       	brlt	.+36     	; 0x2be6 <__fpcmp_parts_f+0x88>
    2bc2:	28 17       	cp	r18, r24
    2bc4:	39 07       	cpc	r19, r25
    2bc6:	bc f0       	brlt	.+46     	; 0x2bf6 <__fpcmp_parts_f+0x98>
    2bc8:	14 96       	adiw	r26, 0x04	; 4
    2bca:	8d 91       	ld	r24, X+
    2bcc:	9d 91       	ld	r25, X+
    2bce:	0d 90       	ld	r0, X+
    2bd0:	bc 91       	ld	r27, X
    2bd2:	a0 2d       	mov	r26, r0
    2bd4:	24 81       	ldd	r18, Z+4	; 0x04
    2bd6:	35 81       	ldd	r19, Z+5	; 0x05
    2bd8:	46 81       	ldd	r20, Z+6	; 0x06
    2bda:	57 81       	ldd	r21, Z+7	; 0x07
    2bdc:	28 17       	cp	r18, r24
    2bde:	39 07       	cpc	r19, r25
    2be0:	4a 07       	cpc	r20, r26
    2be2:	5b 07       	cpc	r21, r27
    2be4:	18 f4       	brcc	.+6      	; 0x2bec <__fpcmp_parts_f+0x8e>
    2be6:	11 23       	and	r17, r17
    2be8:	41 f0       	breq	.+16     	; 0x2bfa <__fpcmp_parts_f+0x9c>
    2bea:	0a c0       	rjmp	.+20     	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bec:	82 17       	cp	r24, r18
    2bee:	93 07       	cpc	r25, r19
    2bf0:	a4 07       	cpc	r26, r20
    2bf2:	b5 07       	cpc	r27, r21
    2bf4:	40 f4       	brcc	.+16     	; 0x2c06 <__fpcmp_parts_f+0xa8>
    2bf6:	11 23       	and	r17, r17
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <__fpcmp_parts_f+0xa2>
    2bfa:	61 e0       	ldi	r22, 0x01	; 1
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	7f ef       	ldi	r23, 0xFF	; 255
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <__fpcmp_parts_f+0xac>
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	70 e0       	ldi	r23, 0x00	; 0
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	1f 91       	pop	r17
    2c0e:	08 95       	ret

00002c10 <ADC_Init>:
#include "StdTypes.h"

static u8 Read_Flag = 1 ;

void ADC_Init(ADC_Vref_type vref ,ADC_Scaler_type scaler) 
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <ADC_Init+0x6>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <ADC_Init+0x8>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	6a 83       	std	Y+2, r22	; 0x02
	switch(vref)
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	3c 83       	std	Y+4, r19	; 0x04
    2c28:	2b 83       	std	Y+3, r18	; 0x03
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2e:	81 30       	cpi	r24, 0x01	; 1
    2c30:	91 05       	cpc	r25, r1
    2c32:	c1 f0       	breq	.+48     	; 0x2c64 <ADC_Init+0x54>
    2c34:	2b 81       	ldd	r18, Y+3	; 0x03
    2c36:	3c 81       	ldd	r19, Y+4	; 0x04
    2c38:	22 30       	cpi	r18, 0x02	; 2
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	11 f1       	breq	.+68     	; 0x2c82 <ADC_Init+0x72>
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	61 f5       	brne	.+88     	; 0x2c9e <ADC_Init+0x8e>
	{
		case VREF_AREF :
		CLEAR_BIT(ADMUX , REFS0) ;
    2c46:	a7 e2       	ldi	r26, 0x27	; 39
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	e7 e2       	ldi	r30, 0x27	; 39
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8f 7b       	andi	r24, 0xBF	; 191
    2c52:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX , REFS1) ; 
    2c54:	a7 e2       	ldi	r26, 0x27	; 39
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e7 e2       	ldi	r30, 0x27	; 39
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	8f 77       	andi	r24, 0x7F	; 127
    2c60:	8c 93       	st	X, r24
    2c62:	1d c0       	rjmp	.+58     	; 0x2c9e <ADC_Init+0x8e>
		break ;
		case VREF_AVCC :
        SET_BIT(ADMUX , REFS0) ;
    2c64:	a7 e2       	ldi	r26, 0x27	; 39
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e7 e2       	ldi	r30, 0x27	; 39
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	80 64       	ori	r24, 0x40	; 64
    2c70:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX , REFS1) ;
    2c72:	a7 e2       	ldi	r26, 0x27	; 39
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e7 e2       	ldi	r30, 0x27	; 39
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
    2c7e:	8c 93       	st	X, r24
    2c80:	0e c0       	rjmp	.+28     	; 0x2c9e <ADC_Init+0x8e>
		break ;
		case VREF_256 :
		SET_BIT(ADMUX , REFS0) ;
    2c82:	a7 e2       	ldi	r26, 0x27	; 39
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e7 e2       	ldi	r30, 0x27	; 39
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	80 64       	ori	r24, 0x40	; 64
    2c8e:	8c 93       	st	X, r24
		SET_BIT(ADMUX , REFS1) ;
    2c90:	a7 e2       	ldi	r26, 0x27	; 39
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	e7 e2       	ldi	r30, 0x27	; 39
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	80 68       	ori	r24, 0x80	; 128
    2c9c:	8c 93       	st	X, r24
		
	}
	// prescaler 
	/* if we use switch case we have 8 probablities  and every one take  3 instruction so make 24 instruction
	  we can replace it for  speed  */ 
	ADCSRA &= 0xf8 ; // here we clear first 3 bits that responsible for prescaler to avoid or with one 
    2c9e:	a6 e2       	ldi	r26, 0x26	; 38
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	e6 e2       	ldi	r30, 0x26	; 38
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 7f       	andi	r24, 0xF8	; 248
    2caa:	8c 93       	st	X, r24
	ADCSRA |= scaler ;
    2cac:	a6 e2       	ldi	r26, 0x26	; 38
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e6 e2       	ldi	r30, 0x26	; 38
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	90 81       	ld	r25, Z
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	89 2b       	or	r24, r25
    2cba:	8c 93       	st	X, r24
	
	//READING ADJUST 
	CLEAR_BIT(ADMUX ,ADLAR) ;  // ordinary way
    2cbc:	a7 e2       	ldi	r26, 0x27	; 39
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	e7 e2       	ldi	r30, 0x27	; 39
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 7d       	andi	r24, 0xDF	; 223
    2cc8:	8c 93       	st	X, r24
	//enable
	SET_BIT(ADCSRA , ADEN) ;
    2cca:	a6 e2       	ldi	r26, 0x26	; 38
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e6 e2       	ldi	r30, 0x26	; 38
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	80 68       	ori	r24, 0x80	; 128
    2cd6:	8c 93       	st	X, r24
	
	
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <ADC_Read>:

u16 ADC_Read(ADC_Channel_type channel ) 
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	//select channel 
	ADMUX &= 0xe0 ; //0b111
    2cf2:	a7 e2       	ldi	r26, 0x27	; 39
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e7 e2       	ldi	r30, 0x27	; 39
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 7e       	andi	r24, 0xE0	; 224
    2cfe:	8c 93       	st	X, r24
	ADMUX |= channel ;
    2d00:	a7 e2       	ldi	r26, 0x27	; 39
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e7 e2       	ldi	r30, 0x27	; 39
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	90 81       	ld	r25, Z
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	89 2b       	or	r24, r25
    2d0e:	8c 93       	st	X, r24
	// start conversion 
	SET_BIT(ADCSRA , ADSC) ;
    2d10:	a6 e2       	ldi	r26, 0x26	; 38
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	e6 e2       	ldi	r30, 0x26	; 38
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	80 64       	ori	r24, 0x40	; 64
    2d1c:	8c 93       	st	X, r24
	while(READ_BIT(ADCSRA , ADSC)) ; //busy wait polling
    2d1e:	e6 e2       	ldi	r30, 0x26	; 38
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	82 95       	swap	r24
    2d26:	86 95       	lsr	r24
    2d28:	86 95       	lsr	r24
    2d2a:	83 70       	andi	r24, 0x03	; 3
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	81 70       	andi	r24, 0x01	; 1
    2d32:	90 70       	andi	r25, 0x00	; 0
    2d34:	88 23       	and	r24, r24
    2d36:	99 f7       	brne	.-26     	; 0x2d1e <ADC_Read+0x38>
	//reading 
	return ADC ;
    2d38:	e4 e2       	ldi	r30, 0x24	; 36
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <DIO_InitPin>:
	
	
}*/

static void DIO_InitPin (DIO_Pin_type pin , DIO_Pin_Status_Type status)  
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	2c 97       	sbiw	r28, 0x0c	; 12
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
    2d5e:	6c 83       	std	Y+4, r22	; 0x04
	  void DIO_InitPin (DIO_Port_type port , u8 pnum , DIO_Pin_Status_Type status) to
	  void DIO_InitPin (DIO_Pin_type pin , DIO_Pin_Status_Type status)
	  without changing implementation   */


	u8 pnum = pin %8 ;
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	87 70       	andi	r24, 0x07	; 7
    2d64:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin /8 ;
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	86 95       	lsr	r24
    2d6a:	86 95       	lsr	r24
    2d6c:	86 95       	lsr	r24
    2d6e:	89 83       	std	Y+1, r24	; 0x01
	
	switch(status)
    2d70:	8c 81       	ldd	r24, Y+4	; 0x04
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	3c 87       	std	Y+12, r19	; 0x0c
    2d78:	2b 87       	std	Y+11, r18	; 0x0b
    2d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	91 05       	cpc	r25, r1
    2d82:	09 f4       	brne	.+2      	; 0x2d86 <DIO_InitPin+0x3e>
    2d84:	7a c0       	rjmp	.+244    	; 0x2e7a <DIO_InitPin+0x132>
    2d86:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d88:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d8a:	22 30       	cpi	r18, 0x02	; 2
    2d8c:	31 05       	cpc	r19, r1
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <DIO_InitPin+0x4a>
    2d90:	36 c1       	rjmp	.+620    	; 0x2ffe <DIO_InitPin+0x2b6>
    2d92:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d94:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <DIO_InitPin+0x54>
    2d9a:	ee c1       	rjmp	.+988    	; 0x3178 <DIO_InitPin+0x430>
	{
		case OUTPUT :
		switch(port)
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	3a 87       	std	Y+10, r19	; 0x0a
    2da4:	29 87       	std	Y+9, r18	; 0x09
    2da6:	89 85       	ldd	r24, Y+9	; 0x09
    2da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2daa:	81 30       	cpi	r24, 0x01	; 1
    2dac:	91 05       	cpc	r25, r1
    2dae:	49 f1       	breq	.+82     	; 0x2e02 <DIO_InitPin+0xba>
    2db0:	29 85       	ldd	r18, Y+9	; 0x09
    2db2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2db4:	22 30       	cpi	r18, 0x02	; 2
    2db6:	31 05       	cpc	r19, r1
    2db8:	2c f4       	brge	.+10     	; 0x2dc4 <DIO_InitPin+0x7c>
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	61 f0       	breq	.+24     	; 0x2dda <DIO_InitPin+0x92>
    2dc2:	da c1       	rjmp	.+948    	; 0x3178 <DIO_InitPin+0x430>
    2dc4:	29 85       	ldd	r18, Y+9	; 0x09
    2dc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2dc8:	22 30       	cpi	r18, 0x02	; 2
    2dca:	31 05       	cpc	r19, r1
    2dcc:	71 f1       	breq	.+92     	; 0x2e2a <DIO_InitPin+0xe2>
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	83 30       	cpi	r24, 0x03	; 3
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	e9 f1       	breq	.+122    	; 0x2e52 <DIO_InitPin+0x10a>
    2dd8:	cf c1       	rjmp	.+926    	; 0x3178 <DIO_InitPin+0x430>
		{
			case PA :
			SET_BIT(DDRA , pnum) ;
    2dda:	aa e3       	ldi	r26, 0x3A	; 58
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	ea e3       	ldi	r30, 0x3A	; 58
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	48 2f       	mov	r20, r24
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	02 2e       	mov	r0, r18
    2df2:	02 c0       	rjmp	.+4      	; 0x2df8 <DIO_InitPin+0xb0>
    2df4:	88 0f       	add	r24, r24
    2df6:	99 1f       	adc	r25, r25
    2df8:	0a 94       	dec	r0
    2dfa:	e2 f7       	brpl	.-8      	; 0x2df4 <DIO_InitPin+0xac>
    2dfc:	84 2b       	or	r24, r20
    2dfe:	8c 93       	st	X, r24
    2e00:	bb c1       	rjmp	.+886    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PB :
			SET_BIT(DDRB , pnum) ;
    2e02:	a7 e3       	ldi	r26, 0x37	; 55
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e7 e3       	ldi	r30, 0x37	; 55
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	48 2f       	mov	r20, r24
    2e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	02 2e       	mov	r0, r18
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <DIO_InitPin+0xd8>
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	0a 94       	dec	r0
    2e22:	e2 f7       	brpl	.-8      	; 0x2e1c <DIO_InitPin+0xd4>
    2e24:	84 2b       	or	r24, r20
    2e26:	8c 93       	st	X, r24
    2e28:	a7 c1       	rjmp	.+846    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PC :
			SET_BIT(DDRC , pnum) ;
    2e2a:	a4 e3       	ldi	r26, 0x34	; 52
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e4 e3       	ldi	r30, 0x34	; 52
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	48 2f       	mov	r20, r24
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	02 2e       	mov	r0, r18
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <DIO_InitPin+0x100>
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	0a 94       	dec	r0
    2e4a:	e2 f7       	brpl	.-8      	; 0x2e44 <DIO_InitPin+0xfc>
    2e4c:	84 2b       	or	r24, r20
    2e4e:	8c 93       	st	X, r24
    2e50:	93 c1       	rjmp	.+806    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PD :
			SET_BIT(DDRD , pnum) ;
    2e52:	a1 e3       	ldi	r26, 0x31	; 49
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e1 e3       	ldi	r30, 0x31	; 49
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	48 2f       	mov	r20, r24
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	28 2f       	mov	r18, r24
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	02 2e       	mov	r0, r18
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <DIO_InitPin+0x128>
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	0a 94       	dec	r0
    2e72:	e2 f7       	brpl	.-8      	; 0x2e6c <DIO_InitPin+0x124>
    2e74:	84 2b       	or	r24, r20
    2e76:	8c 93       	st	X, r24
    2e78:	7f c1       	rjmp	.+766    	; 0x3178 <DIO_InitPin+0x430>
			break ;
		}
		break ;
		
		case INFREE :
		switch(port)
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	38 87       	std	Y+8, r19	; 0x08
    2e82:	2f 83       	std	Y+7, r18	; 0x07
    2e84:	8f 81       	ldd	r24, Y+7	; 0x07
    2e86:	98 85       	ldd	r25, Y+8	; 0x08
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <DIO_InitPin+0x148>
    2e8e:	3f c0       	rjmp	.+126    	; 0x2f0e <DIO_InitPin+0x1c6>
    2e90:	2f 81       	ldd	r18, Y+7	; 0x07
    2e92:	38 85       	ldd	r19, Y+8	; 0x08
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <DIO_InitPin+0x15c>
    2e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9c:	98 85       	ldd	r25, Y+8	; 0x08
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	71 f0       	breq	.+28     	; 0x2ebe <DIO_InitPin+0x176>
    2ea2:	6a c1       	rjmp	.+724    	; 0x3178 <DIO_InitPin+0x430>
    2ea4:	2f 81       	ldd	r18, Y+7	; 0x07
    2ea6:	38 85       	ldd	r19, Y+8	; 0x08
    2ea8:	22 30       	cpi	r18, 0x02	; 2
    2eaa:	31 05       	cpc	r19, r1
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <DIO_InitPin+0x168>
    2eae:	57 c0       	rjmp	.+174    	; 0x2f5e <DIO_InitPin+0x216>
    2eb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2eb2:	98 85       	ldd	r25, Y+8	; 0x08
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <DIO_InitPin+0x174>
    2eba:	79 c0       	rjmp	.+242    	; 0x2fae <DIO_InitPin+0x266>
    2ebc:	5d c1       	rjmp	.+698    	; 0x3178 <DIO_InitPin+0x430>
		{
			case PA :
			CLEAR_BIT(DDRA , pnum) ;
    2ebe:	aa e3       	ldi	r26, 0x3A	; 58
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	ea e3       	ldi	r30, 0x3A	; 58
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	48 2f       	mov	r20, r24
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	02 c0       	rjmp	.+4      	; 0x2eda <DIO_InitPin+0x192>
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	2a 95       	dec	r18
    2edc:	e2 f7       	brpl	.-8      	; 0x2ed6 <DIO_InitPin+0x18e>
    2ede:	80 95       	com	r24
    2ee0:	84 23       	and	r24, r20
    2ee2:	8c 93       	st	X, r24
			//i do not depend on initial status because may be changed in other place
			CLEAR_BIT(PORTA , pnum) ;
    2ee4:	ab e3       	ldi	r26, 0x3B	; 59
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	eb e3       	ldi	r30, 0x3B	; 59
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	48 2f       	mov	r20, r24
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	02 2e       	mov	r0, r18
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <DIO_InitPin+0x1ba>
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	0a 94       	dec	r0
    2f04:	e2 f7       	brpl	.-8      	; 0x2efe <DIO_InitPin+0x1b6>
    2f06:	80 95       	com	r24
    2f08:	84 23       	and	r24, r20
    2f0a:	8c 93       	st	X, r24
    2f0c:	35 c1       	rjmp	.+618    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PB :
			CLEAR_BIT(DDRB , pnum) ;
    2f0e:	a7 e3       	ldi	r26, 0x37	; 55
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e7 e3       	ldi	r30, 0x37	; 55
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	48 2f       	mov	r20, r24
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	02 c0       	rjmp	.+4      	; 0x2f2a <DIO_InitPin+0x1e2>
    2f26:	88 0f       	add	r24, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	2a 95       	dec	r18
    2f2c:	e2 f7       	brpl	.-8      	; 0x2f26 <DIO_InitPin+0x1de>
    2f2e:	80 95       	com	r24
    2f30:	84 23       	and	r24, r20
    2f32:	8c 93       	st	X, r24
			CLEAR_BIT(PORTB , pnum) ;
    2f34:	a8 e3       	ldi	r26, 0x38	; 56
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e8 e3       	ldi	r30, 0x38	; 56
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	48 2f       	mov	r20, r24
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	28 2f       	mov	r18, r24
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	02 2e       	mov	r0, r18
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <DIO_InitPin+0x20a>
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	0a 94       	dec	r0
    2f54:	e2 f7       	brpl	.-8      	; 0x2f4e <DIO_InitPin+0x206>
    2f56:	80 95       	com	r24
    2f58:	84 23       	and	r24, r20
    2f5a:	8c 93       	st	X, r24
    2f5c:	0d c1       	rjmp	.+538    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PC :
			CLEAR_BIT(DDRC , pnum) ;
    2f5e:	a4 e3       	ldi	r26, 0x34	; 52
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e4 e3       	ldi	r30, 0x34	; 52
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	48 2f       	mov	r20, r24
    2f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <DIO_InitPin+0x232>
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	2a 95       	dec	r18
    2f7c:	e2 f7       	brpl	.-8      	; 0x2f76 <DIO_InitPin+0x22e>
    2f7e:	80 95       	com	r24
    2f80:	84 23       	and	r24, r20
    2f82:	8c 93       	st	X, r24
			CLEAR_BIT(PORTC , pnum) ;
    2f84:	a5 e3       	ldi	r26, 0x35	; 53
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e5 e3       	ldi	r30, 0x35	; 53
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	48 2f       	mov	r20, r24
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	28 2f       	mov	r18, r24
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	02 2e       	mov	r0, r18
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <DIO_InitPin+0x25a>
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	0a 94       	dec	r0
    2fa4:	e2 f7       	brpl	.-8      	; 0x2f9e <DIO_InitPin+0x256>
    2fa6:	80 95       	com	r24
    2fa8:	84 23       	and	r24, r20
    2faa:	8c 93       	st	X, r24
    2fac:	e5 c0       	rjmp	.+458    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PD :
	        CLEAR_BIT(DDRD , pnum) ;
    2fae:	a1 e3       	ldi	r26, 0x31	; 49
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e1 e3       	ldi	r30, 0x31	; 49
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	48 2f       	mov	r20, r24
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	28 2f       	mov	r18, r24
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <DIO_InitPin+0x282>
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	2a 95       	dec	r18
    2fcc:	e2 f7       	brpl	.-8      	; 0x2fc6 <DIO_InitPin+0x27e>
    2fce:	80 95       	com	r24
    2fd0:	84 23       	and	r24, r20
    2fd2:	8c 93       	st	X, r24
			CLEAR_BIT(PORTD , pnum) ;
    2fd4:	a2 e3       	ldi	r26, 0x32	; 50
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e2 e3       	ldi	r30, 0x32	; 50
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	48 2f       	mov	r20, r24
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	02 2e       	mov	r0, r18
    2fec:	02 c0       	rjmp	.+4      	; 0x2ff2 <DIO_InitPin+0x2aa>
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	0a 94       	dec	r0
    2ff4:	e2 f7       	brpl	.-8      	; 0x2fee <DIO_InitPin+0x2a6>
    2ff6:	80 95       	com	r24
    2ff8:	84 23       	and	r24, r20
    2ffa:	8c 93       	st	X, r24
    2ffc:	bd c0       	rjmp	.+378    	; 0x3178 <DIO_InitPin+0x430>
			break ;
		}
		break ;
		case INPULL :
		switch(port)
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	3e 83       	std	Y+6, r19	; 0x06
    3006:	2d 83       	std	Y+5, r18	; 0x05
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	81 30       	cpi	r24, 0x01	; 1
    300e:	91 05       	cpc	r25, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <DIO_InitPin+0x2cc>
    3012:	3e c0       	rjmp	.+124    	; 0x3090 <DIO_InitPin+0x348>
    3014:	2d 81       	ldd	r18, Y+5	; 0x05
    3016:	3e 81       	ldd	r19, Y+6	; 0x06
    3018:	22 30       	cpi	r18, 0x02	; 2
    301a:	31 05       	cpc	r19, r1
    301c:	2c f4       	brge	.+10     	; 0x3028 <DIO_InitPin+0x2e0>
    301e:	8d 81       	ldd	r24, Y+5	; 0x05
    3020:	9e 81       	ldd	r25, Y+6	; 0x06
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	71 f0       	breq	.+28     	; 0x3042 <DIO_InitPin+0x2fa>
    3026:	a8 c0       	rjmp	.+336    	; 0x3178 <DIO_InitPin+0x430>
    3028:	2d 81       	ldd	r18, Y+5	; 0x05
    302a:	3e 81       	ldd	r19, Y+6	; 0x06
    302c:	22 30       	cpi	r18, 0x02	; 2
    302e:	31 05       	cpc	r19, r1
    3030:	09 f4       	brne	.+2      	; 0x3034 <DIO_InitPin+0x2ec>
    3032:	55 c0       	rjmp	.+170    	; 0x30de <DIO_InitPin+0x396>
    3034:	8d 81       	ldd	r24, Y+5	; 0x05
    3036:	9e 81       	ldd	r25, Y+6	; 0x06
    3038:	83 30       	cpi	r24, 0x03	; 3
    303a:	91 05       	cpc	r25, r1
    303c:	09 f4       	brne	.+2      	; 0x3040 <DIO_InitPin+0x2f8>
    303e:	76 c0       	rjmp	.+236    	; 0x312c <DIO_InitPin+0x3e4>
    3040:	9b c0       	rjmp	.+310    	; 0x3178 <DIO_InitPin+0x430>
		{
			case PA :
			CLEAR_BIT(DDRA , pnum) ;
    3042:	aa e3       	ldi	r26, 0x3A	; 58
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	ea e3       	ldi	r30, 0x3A	; 58
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	48 2f       	mov	r20, r24
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	28 2f       	mov	r18, r24
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	02 c0       	rjmp	.+4      	; 0x305e <DIO_InitPin+0x316>
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	2a 95       	dec	r18
    3060:	e2 f7       	brpl	.-8      	; 0x305a <DIO_InitPin+0x312>
    3062:	80 95       	com	r24
    3064:	84 23       	and	r24, r20
    3066:	8c 93       	st	X, r24
			SET_BIT(PORTA , pnum) ;
    3068:	ab e3       	ldi	r26, 0x3B	; 59
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	eb e3       	ldi	r30, 0x3B	; 59
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	48 2f       	mov	r20, r24
    3074:	8a 81       	ldd	r24, Y+2	; 0x02
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	02 2e       	mov	r0, r18
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <DIO_InitPin+0x33e>
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	0a 94       	dec	r0
    3088:	e2 f7       	brpl	.-8      	; 0x3082 <DIO_InitPin+0x33a>
    308a:	84 2b       	or	r24, r20
    308c:	8c 93       	st	X, r24
    308e:	74 c0       	rjmp	.+232    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PB :
			CLEAR_BIT(DDRB , pnum) ;
    3090:	a7 e3       	ldi	r26, 0x37	; 55
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e7 e3       	ldi	r30, 0x37	; 55
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	48 2f       	mov	r20, r24
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	28 2f       	mov	r18, r24
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <DIO_InitPin+0x364>
    30a8:	88 0f       	add	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	2a 95       	dec	r18
    30ae:	e2 f7       	brpl	.-8      	; 0x30a8 <DIO_InitPin+0x360>
    30b0:	80 95       	com	r24
    30b2:	84 23       	and	r24, r20
    30b4:	8c 93       	st	X, r24
			SET_BIT(PORTB , pnum) ;
    30b6:	a8 e3       	ldi	r26, 0x38	; 56
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	e8 e3       	ldi	r30, 0x38	; 56
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	48 2f       	mov	r20, r24
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	28 2f       	mov	r18, r24
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	02 2e       	mov	r0, r18
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <DIO_InitPin+0x38c>
    30d0:	88 0f       	add	r24, r24
    30d2:	99 1f       	adc	r25, r25
    30d4:	0a 94       	dec	r0
    30d6:	e2 f7       	brpl	.-8      	; 0x30d0 <DIO_InitPin+0x388>
    30d8:	84 2b       	or	r24, r20
    30da:	8c 93       	st	X, r24
    30dc:	4d c0       	rjmp	.+154    	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PC :
			CLEAR_BIT(DDRC , pnum) ;
    30de:	a4 e3       	ldi	r26, 0x34	; 52
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e4 e3       	ldi	r30, 0x34	; 52
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	48 2f       	mov	r20, r24
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	28 2f       	mov	r18, r24
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <DIO_InitPin+0x3b2>
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	2a 95       	dec	r18
    30fc:	e2 f7       	brpl	.-8      	; 0x30f6 <DIO_InitPin+0x3ae>
    30fe:	80 95       	com	r24
    3100:	84 23       	and	r24, r20
    3102:	8c 93       	st	X, r24
			SET_BIT(PORTC , pnum) ;
    3104:	a5 e3       	ldi	r26, 0x35	; 53
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e5 e3       	ldi	r30, 0x35	; 53
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	48 2f       	mov	r20, r24
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	28 2f       	mov	r18, r24
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	02 2e       	mov	r0, r18
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <DIO_InitPin+0x3da>
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	0a 94       	dec	r0
    3124:	e2 f7       	brpl	.-8      	; 0x311e <DIO_InitPin+0x3d6>
    3126:	84 2b       	or	r24, r20
    3128:	8c 93       	st	X, r24
    312a:	26 c0       	rjmp	.+76     	; 0x3178 <DIO_InitPin+0x430>
			break ;
			case PD :
			CLEAR_BIT(DDRD , pnum) ;
    312c:	a1 e3       	ldi	r26, 0x31	; 49
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	e1 e3       	ldi	r30, 0x31	; 49
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	48 2f       	mov	r20, r24
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <DIO_InitPin+0x400>
    3144:	88 0f       	add	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	2a 95       	dec	r18
    314a:	e2 f7       	brpl	.-8      	; 0x3144 <DIO_InitPin+0x3fc>
    314c:	80 95       	com	r24
    314e:	84 23       	and	r24, r20
    3150:	8c 93       	st	X, r24
			SET_BIT(PORTD , pnum) ;
    3152:	a2 e3       	ldi	r26, 0x32	; 50
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e2 e3       	ldi	r30, 0x32	; 50
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	48 2f       	mov	r20, r24
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	02 2e       	mov	r0, r18
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <DIO_InitPin+0x428>
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	0a 94       	dec	r0
    3172:	e2 f7       	brpl	.-8      	; 0x316c <DIO_InitPin+0x424>
    3174:	84 2b       	or	r24, r20
    3176:	8c 93       	st	X, r24
	DIO_InitPin(PC,1,INPULL) ;
	DIO_InitPin(PD ,0,INPULL) ;
	old design.....       */
	
	
}
    3178:	2c 96       	adiw	r28, 0x0c	; 12
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <DIO_WritePIN>:




void DIO_WritePIN (DIO_Pin_type pin ,DIO_PinVoltage_type volt) 
{
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	28 97       	sbiw	r28, 0x08	; 8
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	8b 83       	std	Y+3, r24	; 0x03
    31a0:	6c 83       	std	Y+4, r22	; 0x04
	  i only add these two lines to change design from 
      void DIO_WritePIN (DIO_Port_type port ,u8 pnum ,DIO_PinVoltage_type volt) to
      void DIO_WritePIN (DIO_Pin_type pin ,DIO_PinVoltage_type volt)
	  without changing implementation   */

	u8 pnum = pin %8 ;
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	87 70       	andi	r24, 0x07	; 7
    31a6:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin/8 ;
    31a8:	8b 81       	ldd	r24, Y+3	; 0x03
    31aa:	86 95       	lsr	r24
    31ac:	86 95       	lsr	r24
    31ae:	86 95       	lsr	r24
    31b0:	89 83       	std	Y+1, r24	; 0x01
	
	//when you using a pin you need a volt 
	// here i use to make volt to be a main checker because it has a less probablities and use if without switch because it has only 2 porabablitity
	if(volt == HIGH)
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	09 f0       	breq	.+2      	; 0x31ba <DIO_WritePIN+0x30>
    31b8:	6f c0       	rjmp	.+222    	; 0x3298 <DIO_WritePIN+0x10e>
	{
		switch(port)
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	28 2f       	mov	r18, r24
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	38 87       	std	Y+8, r19	; 0x08
    31c2:	2f 83       	std	Y+7, r18	; 0x07
    31c4:	8f 81       	ldd	r24, Y+7	; 0x07
    31c6:	98 85       	ldd	r25, Y+8	; 0x08
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	91 05       	cpc	r25, r1
    31cc:	49 f1       	breq	.+82     	; 0x3220 <DIO_WritePIN+0x96>
    31ce:	2f 81       	ldd	r18, Y+7	; 0x07
    31d0:	38 85       	ldd	r19, Y+8	; 0x08
    31d2:	22 30       	cpi	r18, 0x02	; 2
    31d4:	31 05       	cpc	r19, r1
    31d6:	2c f4       	brge	.+10     	; 0x31e2 <DIO_WritePIN+0x58>
    31d8:	8f 81       	ldd	r24, Y+7	; 0x07
    31da:	98 85       	ldd	r25, Y+8	; 0x08
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	61 f0       	breq	.+24     	; 0x31f8 <DIO_WritePIN+0x6e>
    31e0:	d2 c0       	rjmp	.+420    	; 0x3386 <DIO_WritePIN+0x1fc>
    31e2:	2f 81       	ldd	r18, Y+7	; 0x07
    31e4:	38 85       	ldd	r19, Y+8	; 0x08
    31e6:	22 30       	cpi	r18, 0x02	; 2
    31e8:	31 05       	cpc	r19, r1
    31ea:	71 f1       	breq	.+92     	; 0x3248 <DIO_WritePIN+0xbe>
    31ec:	8f 81       	ldd	r24, Y+7	; 0x07
    31ee:	98 85       	ldd	r25, Y+8	; 0x08
    31f0:	83 30       	cpi	r24, 0x03	; 3
    31f2:	91 05       	cpc	r25, r1
    31f4:	e9 f1       	breq	.+122    	; 0x3270 <DIO_WritePIN+0xe6>
    31f6:	c7 c0       	rjmp	.+398    	; 0x3386 <DIO_WritePIN+0x1fc>
		{
			case PA :
			SET_BIT(PORTA , pnum) ;
    31f8:	ab e3       	ldi	r26, 0x3B	; 59
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	eb e3       	ldi	r30, 0x3B	; 59
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	48 2f       	mov	r20, r24
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	28 2f       	mov	r18, r24
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	02 2e       	mov	r0, r18
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <DIO_WritePIN+0x8c>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	0a 94       	dec	r0
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <DIO_WritePIN+0x88>
    321a:	84 2b       	or	r24, r20
    321c:	8c 93       	st	X, r24
    321e:	b3 c0       	rjmp	.+358    	; 0x3386 <DIO_WritePIN+0x1fc>
			break ;
			case PB :
			SET_BIT(PORTB , pnum) ;
    3220:	a8 e3       	ldi	r26, 0x38	; 56
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e8 e3       	ldi	r30, 0x38	; 56
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	48 2f       	mov	r20, r24
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	02 2e       	mov	r0, r18
    3238:	02 c0       	rjmp	.+4      	; 0x323e <DIO_WritePIN+0xb4>
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	0a 94       	dec	r0
    3240:	e2 f7       	brpl	.-8      	; 0x323a <DIO_WritePIN+0xb0>
    3242:	84 2b       	or	r24, r20
    3244:	8c 93       	st	X, r24
    3246:	9f c0       	rjmp	.+318    	; 0x3386 <DIO_WritePIN+0x1fc>
			break ;
			case PC :
			SET_BIT(PORTC , pnum) ;
    3248:	a5 e3       	ldi	r26, 0x35	; 53
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e5 e3       	ldi	r30, 0x35	; 53
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	48 2f       	mov	r20, r24
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	02 2e       	mov	r0, r18
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <DIO_WritePIN+0xdc>
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	0a 94       	dec	r0
    3268:	e2 f7       	brpl	.-8      	; 0x3262 <DIO_WritePIN+0xd8>
    326a:	84 2b       	or	r24, r20
    326c:	8c 93       	st	X, r24
    326e:	8b c0       	rjmp	.+278    	; 0x3386 <DIO_WritePIN+0x1fc>
			break ;
			case PD :
			SET_BIT(PORTD , pnum) ;
    3270:	a2 e3       	ldi	r26, 0x32	; 50
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	e2 e3       	ldi	r30, 0x32	; 50
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	48 2f       	mov	r20, r24
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	02 2e       	mov	r0, r18
    3288:	02 c0       	rjmp	.+4      	; 0x328e <DIO_WritePIN+0x104>
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	0a 94       	dec	r0
    3290:	e2 f7       	brpl	.-8      	; 0x328a <DIO_WritePIN+0x100>
    3292:	84 2b       	or	r24, r20
    3294:	8c 93       	st	X, r24
    3296:	77 c0       	rjmp	.+238    	; 0x3386 <DIO_WritePIN+0x1fc>
			break ;
		}
	}
	else if (volt == LOW)
    3298:	8c 81       	ldd	r24, Y+4	; 0x04
    329a:	88 23       	and	r24, r24
    329c:	09 f0       	breq	.+2      	; 0x32a0 <DIO_WritePIN+0x116>
    329e:	73 c0       	rjmp	.+230    	; 0x3386 <DIO_WritePIN+0x1fc>
	{
		switch(port)
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	3e 83       	std	Y+6, r19	; 0x06
    32a8:	2d 83       	std	Y+5, r18	; 0x05
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	91 05       	cpc	r25, r1
    32b2:	59 f1       	breq	.+86     	; 0x330a <DIO_WritePIN+0x180>
    32b4:	2d 81       	ldd	r18, Y+5	; 0x05
    32b6:	3e 81       	ldd	r19, Y+6	; 0x06
    32b8:	22 30       	cpi	r18, 0x02	; 2
    32ba:	31 05       	cpc	r19, r1
    32bc:	2c f4       	brge	.+10     	; 0x32c8 <DIO_WritePIN+0x13e>
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	9e 81       	ldd	r25, Y+6	; 0x06
    32c2:	00 97       	sbiw	r24, 0x00	; 0
    32c4:	69 f0       	breq	.+26     	; 0x32e0 <DIO_WritePIN+0x156>
    32c6:	5f c0       	rjmp	.+190    	; 0x3386 <DIO_WritePIN+0x1fc>
    32c8:	2d 81       	ldd	r18, Y+5	; 0x05
    32ca:	3e 81       	ldd	r19, Y+6	; 0x06
    32cc:	22 30       	cpi	r18, 0x02	; 2
    32ce:	31 05       	cpc	r19, r1
    32d0:	89 f1       	breq	.+98     	; 0x3334 <DIO_WritePIN+0x1aa>
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	83 30       	cpi	r24, 0x03	; 3
    32d8:	91 05       	cpc	r25, r1
    32da:	09 f4       	brne	.+2      	; 0x32de <DIO_WritePIN+0x154>
    32dc:	40 c0       	rjmp	.+128    	; 0x335e <DIO_WritePIN+0x1d4>
    32de:	53 c0       	rjmp	.+166    	; 0x3386 <DIO_WritePIN+0x1fc>
		{
			case PA :
			CLEAR_BIT(PORTA , pnum) ;
    32e0:	ab e3       	ldi	r26, 0x3B	; 59
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	eb e3       	ldi	r30, 0x3B	; 59
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	48 2f       	mov	r20, r24
    32ec:	8a 81       	ldd	r24, Y+2	; 0x02
    32ee:	28 2f       	mov	r18, r24
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	02 2e       	mov	r0, r18
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <DIO_WritePIN+0x174>
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	0a 94       	dec	r0
    3300:	e2 f7       	brpl	.-8      	; 0x32fa <DIO_WritePIN+0x170>
    3302:	80 95       	com	r24
    3304:	84 23       	and	r24, r20
    3306:	8c 93       	st	X, r24
    3308:	3e c0       	rjmp	.+124    	; 0x3386 <DIO_WritePIN+0x1fc>
			break ;
			case PB :
			CLEAR_BIT(PORTB , pnum) ;
    330a:	a8 e3       	ldi	r26, 0x38	; 56
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	e8 e3       	ldi	r30, 0x38	; 56
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	48 2f       	mov	r20, r24
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	02 2e       	mov	r0, r18
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <DIO_WritePIN+0x19e>
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	0a 94       	dec	r0
    332a:	e2 f7       	brpl	.-8      	; 0x3324 <DIO_WritePIN+0x19a>
    332c:	80 95       	com	r24
    332e:	84 23       	and	r24, r20
    3330:	8c 93       	st	X, r24
    3332:	29 c0       	rjmp	.+82     	; 0x3386 <DIO_WritePIN+0x1fc>
			break ;
			case PC :
			CLEAR_BIT(PORTC , pnum) ;
    3334:	a5 e3       	ldi	r26, 0x35	; 53
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e5 e3       	ldi	r30, 0x35	; 53
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	48 2f       	mov	r20, r24
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	02 2e       	mov	r0, r18
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <DIO_WritePIN+0x1c8>
    334e:	88 0f       	add	r24, r24
    3350:	99 1f       	adc	r25, r25
    3352:	0a 94       	dec	r0
    3354:	e2 f7       	brpl	.-8      	; 0x334e <DIO_WritePIN+0x1c4>
    3356:	80 95       	com	r24
    3358:	84 23       	and	r24, r20
    335a:	8c 93       	st	X, r24
    335c:	14 c0       	rjmp	.+40     	; 0x3386 <DIO_WritePIN+0x1fc>
			break ;
			case PD :
			CLEAR_BIT(PORTD , pnum) ;
    335e:	a2 e3       	ldi	r26, 0x32	; 50
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e2 e3       	ldi	r30, 0x32	; 50
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	48 2f       	mov	r20, r24
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	02 2e       	mov	r0, r18
    3376:	02 c0       	rjmp	.+4      	; 0x337c <DIO_WritePIN+0x1f2>
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	0a 94       	dec	r0
    337e:	e2 f7       	brpl	.-8      	; 0x3378 <DIO_WritePIN+0x1ee>
    3380:	80 95       	com	r24
    3382:	84 23       	and	r24, r20
    3384:	8c 93       	st	X, r24
	/* in new design i need to define only one thing and api know port and pin 
	   #define  RED_LED PINA5 
	    DIO_WritePIN(RED_LED,HIGH) ; */

	
}
    3386:	28 96       	adiw	r28, 0x08	; 8
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <DIO_ReadPIN>:
DIO_PinVoltage_type DIO_ReadPIN (DIO_Pin_type pin) 
{
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	00 d0       	rcall	.+0      	; 0x339e <DIO_ReadPIN+0x6>
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <DIO_ReadPIN+0x8>
    33a0:	00 d0       	rcall	.+0      	; 0x33a2 <DIO_ReadPIN+0xa>
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	8c 83       	std	Y+4, r24	; 0x04
	u8 pnum = pin %8 ;
    33a8:	8c 81       	ldd	r24, Y+4	; 0x04
    33aa:	87 70       	andi	r24, 0x07	; 7
    33ac:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin /8 ;
    33ae:	8c 81       	ldd	r24, Y+4	; 0x04
    33b0:	86 95       	lsr	r24
    33b2:	86 95       	lsr	r24
    33b4:	86 95       	lsr	r24
    33b6:	8a 83       	std	Y+2, r24	; 0x02
	
	
	DIO_PinVoltage_type volt = LOW ; 
    33b8:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	3e 83       	std	Y+6, r19	; 0x06
    33c2:	2d 83       	std	Y+5, r18	; 0x05
    33c4:	4d 81       	ldd	r20, Y+5	; 0x05
    33c6:	5e 81       	ldd	r21, Y+6	; 0x06
    33c8:	41 30       	cpi	r20, 0x01	; 1
    33ca:	51 05       	cpc	r21, r1
    33cc:	41 f1       	breq	.+80     	; 0x341e <DIO_ReadPIN+0x86>
    33ce:	8d 81       	ldd	r24, Y+5	; 0x05
    33d0:	9e 81       	ldd	r25, Y+6	; 0x06
    33d2:	82 30       	cpi	r24, 0x02	; 2
    33d4:	91 05       	cpc	r25, r1
    33d6:	34 f4       	brge	.+12     	; 0x33e4 <DIO_ReadPIN+0x4c>
    33d8:	2d 81       	ldd	r18, Y+5	; 0x05
    33da:	3e 81       	ldd	r19, Y+6	; 0x06
    33dc:	21 15       	cp	r18, r1
    33de:	31 05       	cpc	r19, r1
    33e0:	61 f0       	breq	.+24     	; 0x33fa <DIO_ReadPIN+0x62>
    33e2:	52 c0       	rjmp	.+164    	; 0x3488 <DIO_ReadPIN+0xf0>
    33e4:	4d 81       	ldd	r20, Y+5	; 0x05
    33e6:	5e 81       	ldd	r21, Y+6	; 0x06
    33e8:	42 30       	cpi	r20, 0x02	; 2
    33ea:	51 05       	cpc	r21, r1
    33ec:	51 f1       	breq	.+84     	; 0x3442 <DIO_ReadPIN+0xaa>
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	83 30       	cpi	r24, 0x03	; 3
    33f4:	91 05       	cpc	r25, r1
    33f6:	b9 f1       	breq	.+110    	; 0x3466 <DIO_ReadPIN+0xce>
    33f8:	47 c0       	rjmp	.+142    	; 0x3488 <DIO_ReadPIN+0xf0>
		/* we can return in each case 
		   return READ_BIT(PINA , pnum) ; 
		   but it is not suitable for misra rule that state to avoid logical error and provide portabality and readability 
		   here for readability and also if we do not write return below produce warning */
		    
		volt = READ_BIT(PINA , pnum) ;
    33fa:	e9 e3       	ldi	r30, 0x39	; 57
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	28 2f       	mov	r18, r24
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	88 2f       	mov	r24, r24
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	a9 01       	movw	r20, r18
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <DIO_ReadPIN+0x7a>
    340e:	55 95       	asr	r21
    3410:	47 95       	ror	r20
    3412:	8a 95       	dec	r24
    3414:	e2 f7       	brpl	.-8      	; 0x340e <DIO_ReadPIN+0x76>
    3416:	ca 01       	movw	r24, r20
    3418:	81 70       	andi	r24, 0x01	; 1
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	35 c0       	rjmp	.+106    	; 0x3488 <DIO_ReadPIN+0xf0>
		break ;
		case PB :
		volt = READ_BIT(PINB , pnum) ;
    341e:	e6 e3       	ldi	r30, 0x36	; 54
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a9 01       	movw	r20, r18
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <DIO_ReadPIN+0x9e>
    3432:	55 95       	asr	r21
    3434:	47 95       	ror	r20
    3436:	8a 95       	dec	r24
    3438:	e2 f7       	brpl	.-8      	; 0x3432 <DIO_ReadPIN+0x9a>
    343a:	ca 01       	movw	r24, r20
    343c:	81 70       	andi	r24, 0x01	; 1
    343e:	89 83       	std	Y+1, r24	; 0x01
    3440:	23 c0       	rjmp	.+70     	; 0x3488 <DIO_ReadPIN+0xf0>
		break ;
		case PC :
		volt = READ_BIT(PINC , pnum) ;
    3442:	e3 e3       	ldi	r30, 0x33	; 51
    3444:	f0 e0       	ldi	r31, 0x00	; 0
    3446:	80 81       	ld	r24, Z
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	88 2f       	mov	r24, r24
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	a9 01       	movw	r20, r18
    3454:	02 c0       	rjmp	.+4      	; 0x345a <DIO_ReadPIN+0xc2>
    3456:	55 95       	asr	r21
    3458:	47 95       	ror	r20
    345a:	8a 95       	dec	r24
    345c:	e2 f7       	brpl	.-8      	; 0x3456 <DIO_ReadPIN+0xbe>
    345e:	ca 01       	movw	r24, r20
    3460:	81 70       	andi	r24, 0x01	; 1
    3462:	89 83       	std	Y+1, r24	; 0x01
    3464:	11 c0       	rjmp	.+34     	; 0x3488 <DIO_ReadPIN+0xf0>
		break ;
		case PD :
		volt = READ_BIT(PIND , pnum) ;
    3466:	e0 e3       	ldi	r30, 0x30	; 48
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	8b 81       	ldd	r24, Y+3	; 0x03
    3472:	88 2f       	mov	r24, r24
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	a9 01       	movw	r20, r18
    3478:	02 c0       	rjmp	.+4      	; 0x347e <DIO_ReadPIN+0xe6>
    347a:	55 95       	asr	r21
    347c:	47 95       	ror	r20
    347e:	8a 95       	dec	r24
    3480:	e2 f7       	brpl	.-8      	; 0x347a <DIO_ReadPIN+0xe2>
    3482:	ca 01       	movw	r24, r20
    3484:	81 70       	andi	r24, 0x01	; 1
    3486:	89 83       	std	Y+1, r24	; 0x01
		break ;
	}
	return volt ;
    3488:	89 81       	ldd	r24, Y+1	; 0x01
	   {}
	 */
	   
	
	
}
    348a:	26 96       	adiw	r28, 0x06	; 6
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <DIO_Init>:

void DIO_Init (void)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	0f 92       	push	r0
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
	/*
	  here i init all pin with only one function without calling 32 function
	  and if i want to change status of pin i only change in configuration file*/
	
	DIO_Pin_type i ;
	for(i = PINA0 ; i < TOTAL_PINS ; ++i)
    34a6:	19 82       	std	Y+1, r1	; 0x01
    34a8:	0e c0       	rjmp	.+28     	; 0x34c6 <DIO_Init+0x2a>
	{
		DIO_InitPin(i,PinsStatusArray[i]) ;
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	88 2f       	mov	r24, r24
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	fc 01       	movw	r30, r24
    34b2:	e0 58       	subi	r30, 0x80	; 128
    34b4:	fe 4f       	sbci	r31, 0xFE	; 254
    34b6:	90 81       	ld	r25, Z
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	69 2f       	mov	r22, r25
    34bc:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <DIO_InitPin>
	/*
	  here i init all pin with only one function without calling 32 function
	  and if i want to change status of pin i only change in configuration file*/
	
	DIO_Pin_type i ;
	for(i = PINA0 ; i < TOTAL_PINS ; ++i)
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	8f 5f       	subi	r24, 0xFF	; 255
    34c4:	89 83       	std	Y+1, r24	; 0x01
    34c6:	89 81       	ldd	r24, Y+1	; 0x01
    34c8:	80 32       	cpi	r24, 0x20	; 32
    34ca:	78 f3       	brcs	.-34     	; 0x34aa <DIO_Init+0xe>
	{
		DIO_InitPin(i,PinsStatusArray[i]) ;
	}
	
}
    34cc:	0f 90       	pop	r0
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <DIO_WritePort>:

void DIO_WritePort (DIO_Port_type port , u8 value) 
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <DIO_WritePort+0x6>
    34da:	00 d0       	rcall	.+0      	; 0x34dc <DIO_WritePort+0x8>
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	3c 83       	std	Y+4, r19	; 0x04
    34ec:	2b 83       	std	Y+3, r18	; 0x03
    34ee:	8b 81       	ldd	r24, Y+3	; 0x03
    34f0:	9c 81       	ldd	r25, Y+4	; 0x04
    34f2:	81 30       	cpi	r24, 0x01	; 1
    34f4:	91 05       	cpc	r25, r1
    34f6:	d1 f0       	breq	.+52     	; 0x352c <DIO_WritePort+0x58>
    34f8:	2b 81       	ldd	r18, Y+3	; 0x03
    34fa:	3c 81       	ldd	r19, Y+4	; 0x04
    34fc:	22 30       	cpi	r18, 0x02	; 2
    34fe:	31 05       	cpc	r19, r1
    3500:	2c f4       	brge	.+10     	; 0x350c <DIO_WritePort+0x38>
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c 81       	ldd	r25, Y+4	; 0x04
    3506:	00 97       	sbiw	r24, 0x00	; 0
    3508:	61 f0       	breq	.+24     	; 0x3522 <DIO_WritePort+0x4e>
    350a:	1e c0       	rjmp	.+60     	; 0x3548 <DIO_WritePort+0x74>
    350c:	2b 81       	ldd	r18, Y+3	; 0x03
    350e:	3c 81       	ldd	r19, Y+4	; 0x04
    3510:	22 30       	cpi	r18, 0x02	; 2
    3512:	31 05       	cpc	r19, r1
    3514:	81 f0       	breq	.+32     	; 0x3536 <DIO_WritePort+0x62>
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	9c 81       	ldd	r25, Y+4	; 0x04
    351a:	83 30       	cpi	r24, 0x03	; 3
    351c:	91 05       	cpc	r25, r1
    351e:	81 f0       	breq	.+32     	; 0x3540 <DIO_WritePort+0x6c>
    3520:	13 c0       	rjmp	.+38     	; 0x3548 <DIO_WritePort+0x74>
	{
		case PA :
		PORTA = value ;
    3522:	eb e3       	ldi	r30, 0x3B	; 59
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	8a 81       	ldd	r24, Y+2	; 0x02
    3528:	80 83       	st	Z, r24
    352a:	0e c0       	rjmp	.+28     	; 0x3548 <DIO_WritePort+0x74>
		break ;
		case PB :
		PORTB = value ;
    352c:	e8 e3       	ldi	r30, 0x38	; 56
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	80 83       	st	Z, r24
    3534:	09 c0       	rjmp	.+18     	; 0x3548 <DIO_WritePort+0x74>
		break ;
		case PC :
		PORTC = value ;
    3536:	e5 e3       	ldi	r30, 0x35	; 53
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	80 83       	st	Z, r24
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <DIO_WritePort+0x74>
		break ;
		case PD :
		PORTD = value ;
    3540:	e2 e3       	ldi	r30, 0x32	; 50
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	80 83       	st	Z, r24
		break ;
	}
}
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	08 95       	ret

00003556 <DIO_TogglePIN>:


void DIO_TogglePIN (DIO_Pin_type pin) 
{
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	00 d0       	rcall	.+0      	; 0x355c <DIO_TogglePIN+0x6>
    355c:	00 d0       	rcall	.+0      	; 0x355e <DIO_TogglePIN+0x8>
    355e:	0f 92       	push	r0
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	8b 83       	std	Y+3, r24	; 0x03
	u8 pnum = pin %8 ;
    3566:	8b 81       	ldd	r24, Y+3	; 0x03
    3568:	87 70       	andi	r24, 0x07	; 7
    356a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_Port_type port = pin /8 ;
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	86 95       	lsr	r24
    3570:	86 95       	lsr	r24
    3572:	86 95       	lsr	r24
    3574:	89 83       	std	Y+1, r24	; 0x01
	switch(port)
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	3d 83       	std	Y+5, r19	; 0x05
    357e:	2c 83       	std	Y+4, r18	; 0x04
    3580:	8c 81       	ldd	r24, Y+4	; 0x04
    3582:	9d 81       	ldd	r25, Y+5	; 0x05
    3584:	81 30       	cpi	r24, 0x01	; 1
    3586:	91 05       	cpc	r25, r1
    3588:	49 f1       	breq	.+82     	; 0x35dc <DIO_TogglePIN+0x86>
    358a:	2c 81       	ldd	r18, Y+4	; 0x04
    358c:	3d 81       	ldd	r19, Y+5	; 0x05
    358e:	22 30       	cpi	r18, 0x02	; 2
    3590:	31 05       	cpc	r19, r1
    3592:	2c f4       	brge	.+10     	; 0x359e <DIO_TogglePIN+0x48>
    3594:	8c 81       	ldd	r24, Y+4	; 0x04
    3596:	9d 81       	ldd	r25, Y+5	; 0x05
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	61 f0       	breq	.+24     	; 0x35b4 <DIO_TogglePIN+0x5e>
    359c:	5a c0       	rjmp	.+180    	; 0x3652 <DIO_TogglePIN+0xfc>
    359e:	2c 81       	ldd	r18, Y+4	; 0x04
    35a0:	3d 81       	ldd	r19, Y+5	; 0x05
    35a2:	22 30       	cpi	r18, 0x02	; 2
    35a4:	31 05       	cpc	r19, r1
    35a6:	71 f1       	breq	.+92     	; 0x3604 <DIO_TogglePIN+0xae>
    35a8:	8c 81       	ldd	r24, Y+4	; 0x04
    35aa:	9d 81       	ldd	r25, Y+5	; 0x05
    35ac:	83 30       	cpi	r24, 0x03	; 3
    35ae:	91 05       	cpc	r25, r1
    35b0:	e9 f1       	breq	.+122    	; 0x362c <DIO_TogglePIN+0xd6>
    35b2:	4f c0       	rjmp	.+158    	; 0x3652 <DIO_TogglePIN+0xfc>
	{
		case PA :
		TOGGLE_BIT(PORTA , pnum) ;
    35b4:	ab e3       	ldi	r26, 0x3B	; 59
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	eb e3       	ldi	r30, 0x3B	; 59
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	48 2f       	mov	r20, r24
    35c0:	8a 81       	ldd	r24, Y+2	; 0x02
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	02 2e       	mov	r0, r18
    35cc:	02 c0       	rjmp	.+4      	; 0x35d2 <DIO_TogglePIN+0x7c>
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	0a 94       	dec	r0
    35d4:	e2 f7       	brpl	.-8      	; 0x35ce <DIO_TogglePIN+0x78>
    35d6:	84 27       	eor	r24, r20
    35d8:	8c 93       	st	X, r24
    35da:	3b c0       	rjmp	.+118    	; 0x3652 <DIO_TogglePIN+0xfc>
		break ;
		case PB :
		TOGGLE_BIT(PORTB , pnum) ;
    35dc:	a8 e3       	ldi	r26, 0x38	; 56
    35de:	b0 e0       	ldi	r27, 0x00	; 0
    35e0:	e8 e3       	ldi	r30, 0x38	; 56
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	48 2f       	mov	r20, r24
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	02 2e       	mov	r0, r18
    35f4:	02 c0       	rjmp	.+4      	; 0x35fa <DIO_TogglePIN+0xa4>
    35f6:	88 0f       	add	r24, r24
    35f8:	99 1f       	adc	r25, r25
    35fa:	0a 94       	dec	r0
    35fc:	e2 f7       	brpl	.-8      	; 0x35f6 <DIO_TogglePIN+0xa0>
    35fe:	84 27       	eor	r24, r20
    3600:	8c 93       	st	X, r24
    3602:	27 c0       	rjmp	.+78     	; 0x3652 <DIO_TogglePIN+0xfc>
		break ;
		case PC :
	   TOGGLE_BIT(PORTC , pnum) ;
    3604:	a5 e3       	ldi	r26, 0x35	; 53
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	e5 e3       	ldi	r30, 0x35	; 53
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	48 2f       	mov	r20, r24
    3610:	8a 81       	ldd	r24, Y+2	; 0x02
    3612:	28 2f       	mov	r18, r24
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	02 2e       	mov	r0, r18
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <DIO_TogglePIN+0xcc>
    361e:	88 0f       	add	r24, r24
    3620:	99 1f       	adc	r25, r25
    3622:	0a 94       	dec	r0
    3624:	e2 f7       	brpl	.-8      	; 0x361e <DIO_TogglePIN+0xc8>
    3626:	84 27       	eor	r24, r20
    3628:	8c 93       	st	X, r24
    362a:	13 c0       	rjmp	.+38     	; 0x3652 <DIO_TogglePIN+0xfc>
		break ;
		case PD :
		TOGGLE_BIT(PORTD , pnum) ;
    362c:	a2 e3       	ldi	r26, 0x32	; 50
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	e2 e3       	ldi	r30, 0x32	; 50
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	48 2f       	mov	r20, r24
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	02 2e       	mov	r0, r18
    3644:	02 c0       	rjmp	.+4      	; 0x364a <DIO_TogglePIN+0xf4>
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	0a 94       	dec	r0
    364c:	e2 f7       	brpl	.-8      	; 0x3646 <DIO_TogglePIN+0xf0>
    364e:	84 27       	eor	r24, r20
    3650:	8c 93       	st	X, r24
		break ;
	}
	
	
}
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <EXI_Enable>:
static void (*INT1_Fptr) (void)=NULLPTR;
static void (*INT2_Fptr) (void)=NULLPTR;

/************************************Enable/Disable functions***********************************/
void EXI_Enable(ExInterruptSource_type Interrupt)
{
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <EXI_Enable+0x6>
    3668:	0f 92       	push	r0
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	3b 83       	std	Y+3, r19	; 0x03
    3678:	2a 83       	std	Y+2, r18	; 0x02
    367a:	8a 81       	ldd	r24, Y+2	; 0x02
    367c:	9b 81       	ldd	r25, Y+3	; 0x03
    367e:	81 30       	cpi	r24, 0x01	; 1
    3680:	91 05       	cpc	r25, r1
    3682:	89 f0       	breq	.+34     	; 0x36a6 <EXI_Enable+0x44>
    3684:	2a 81       	ldd	r18, Y+2	; 0x02
    3686:	3b 81       	ldd	r19, Y+3	; 0x03
    3688:	22 30       	cpi	r18, 0x02	; 2
    368a:	31 05       	cpc	r19, r1
    368c:	a1 f0       	breq	.+40     	; 0x36b6 <EXI_Enable+0x54>
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	9b 81       	ldd	r25, Y+3	; 0x03
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	b9 f4       	brne	.+46     	; 0x36c4 <EXI_Enable+0x62>
		case EX_INT0:
		SET_BIT(GICR,INT0);
    3696:	ab e5       	ldi	r26, 0x5B	; 91
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	eb e5       	ldi	r30, 0x5B	; 91
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	80 64       	ori	r24, 0x40	; 64
    36a2:	8c 93       	st	X, r24
    36a4:	0f c0       	rjmp	.+30     	; 0x36c4 <EXI_Enable+0x62>
		break;
		case EX_INT1:
		SET_BIT(GICR,INT1);
    36a6:	ab e5       	ldi	r26, 0x5B	; 91
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	eb e5       	ldi	r30, 0x5B	; 91
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	80 81       	ld	r24, Z
    36b0:	80 68       	ori	r24, 0x80	; 128
    36b2:	8c 93       	st	X, r24
    36b4:	07 c0       	rjmp	.+14     	; 0x36c4 <EXI_Enable+0x62>
		break;
		case EX_INT2:
		SET_BIT(GICR,INT2);
    36b6:	ab e5       	ldi	r26, 0x5B	; 91
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	eb e5       	ldi	r30, 0x5B	; 91
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	80 62       	ori	r24, 0x20	; 32
    36c2:	8c 93       	st	X, r24
		break;
	}
}
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	08 95       	ret

000036d0 <EXI_Disable>:

void EXI_Disable(ExInterruptSource_type Interrupt)
{
    36d0:	df 93       	push	r29
    36d2:	cf 93       	push	r28
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <EXI_Disable+0x6>
    36d6:	0f 92       	push	r0
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	28 2f       	mov	r18, r24
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	3b 83       	std	Y+3, r19	; 0x03
    36e6:	2a 83       	std	Y+2, r18	; 0x02
    36e8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ea:	9b 81       	ldd	r25, Y+3	; 0x03
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	91 05       	cpc	r25, r1
    36f0:	89 f0       	breq	.+34     	; 0x3714 <EXI_Disable+0x44>
    36f2:	2a 81       	ldd	r18, Y+2	; 0x02
    36f4:	3b 81       	ldd	r19, Y+3	; 0x03
    36f6:	22 30       	cpi	r18, 0x02	; 2
    36f8:	31 05       	cpc	r19, r1
    36fa:	a1 f0       	breq	.+40     	; 0x3724 <EXI_Disable+0x54>
    36fc:	8a 81       	ldd	r24, Y+2	; 0x02
    36fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	b9 f4       	brne	.+46     	; 0x3732 <EXI_Disable+0x62>
		case EX_INT0:
		CLEAR_BIT(GICR,INT0);
    3704:	ab e5       	ldi	r26, 0x5B	; 91
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	eb e5       	ldi	r30, 0x5B	; 91
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	8f 7b       	andi	r24, 0xBF	; 191
    3710:	8c 93       	st	X, r24
    3712:	0f c0       	rjmp	.+30     	; 0x3732 <EXI_Disable+0x62>
		break;
		case EX_INT1:
		CLEAR_BIT(GICR,INT1);
    3714:	ab e5       	ldi	r26, 0x5B	; 91
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	eb e5       	ldi	r30, 0x5B	; 91
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	80 81       	ld	r24, Z
    371e:	8f 77       	andi	r24, 0x7F	; 127
    3720:	8c 93       	st	X, r24
    3722:	07 c0       	rjmp	.+14     	; 0x3732 <EXI_Disable+0x62>
		break;
		case EX_INT2:
		CLEAR_BIT(GICR,INT2);
    3724:	ab e5       	ldi	r26, 0x5B	; 91
    3726:	b0 e0       	ldi	r27, 0x00	; 0
    3728:	eb e5       	ldi	r30, 0x5B	; 91
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	8f 7d       	andi	r24, 0xDF	; 223
    3730:	8c 93       	st	X, r24
		break;
	}
}
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <EXI_TriggerEdge>:
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	2a 97       	sbiw	r28, 0x0a	; 10
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	89 83       	std	Y+1, r24	; 0x01
    3754:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	28 2f       	mov	r18, r24
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	3a 87       	std	Y+10, r19	; 0x0a
    375e:	29 87       	std	Y+9, r18	; 0x09
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	81 30       	cpi	r24, 0x01	; 1
    3766:	91 05       	cpc	r25, r1
    3768:	09 f4       	brne	.+2      	; 0x376c <EXI_TriggerEdge+0x2e>
    376a:	66 c0       	rjmp	.+204    	; 0x3838 <EXI_TriggerEdge+0xfa>
    376c:	29 85       	ldd	r18, Y+9	; 0x09
    376e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3770:	22 30       	cpi	r18, 0x02	; 2
    3772:	31 05       	cpc	r19, r1
    3774:	09 f4       	brne	.+2      	; 0x3778 <EXI_TriggerEdge+0x3a>
    3776:	bb c0       	rjmp	.+374    	; 0x38ee <EXI_TriggerEdge+0x1b0>
    3778:	89 85       	ldd	r24, Y+9	; 0x09
    377a:	9a 85       	ldd	r25, Y+10	; 0x0a
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	09 f0       	breq	.+2      	; 0x3782 <EXI_TriggerEdge+0x44>
    3780:	dd c0       	rjmp	.+442    	; 0x393c <EXI_TriggerEdge+0x1fe>
		case EX_INT0:
		switch(Edge){
    3782:	8a 81       	ldd	r24, Y+2	; 0x02
    3784:	28 2f       	mov	r18, r24
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	38 87       	std	Y+8, r19	; 0x08
    378a:	2f 83       	std	Y+7, r18	; 0x07
    378c:	8f 81       	ldd	r24, Y+7	; 0x07
    378e:	98 85       	ldd	r25, Y+8	; 0x08
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	91 05       	cpc	r25, r1
    3794:	21 f1       	breq	.+72     	; 0x37de <EXI_TriggerEdge+0xa0>
    3796:	2f 81       	ldd	r18, Y+7	; 0x07
    3798:	38 85       	ldd	r19, Y+8	; 0x08
    379a:	22 30       	cpi	r18, 0x02	; 2
    379c:	31 05       	cpc	r19, r1
    379e:	2c f4       	brge	.+10     	; 0x37aa <EXI_TriggerEdge+0x6c>
    37a0:	8f 81       	ldd	r24, Y+7	; 0x07
    37a2:	98 85       	ldd	r25, Y+8	; 0x08
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	61 f0       	breq	.+24     	; 0x37c0 <EXI_TriggerEdge+0x82>
    37a8:	c9 c0       	rjmp	.+402    	; 0x393c <EXI_TriggerEdge+0x1fe>
    37aa:	2f 81       	ldd	r18, Y+7	; 0x07
    37ac:	38 85       	ldd	r19, Y+8	; 0x08
    37ae:	22 30       	cpi	r18, 0x02	; 2
    37b0:	31 05       	cpc	r19, r1
    37b2:	21 f1       	breq	.+72     	; 0x37fc <EXI_TriggerEdge+0xbe>
    37b4:	8f 81       	ldd	r24, Y+7	; 0x07
    37b6:	98 85       	ldd	r25, Y+8	; 0x08
    37b8:	83 30       	cpi	r24, 0x03	; 3
    37ba:	91 05       	cpc	r25, r1
    37bc:	71 f1       	breq	.+92     	; 0x381a <EXI_TriggerEdge+0xdc>
    37be:	be c0       	rjmp	.+380    	; 0x393c <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    37c0:	a5 e5       	ldi	r26, 0x55	; 85
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e5 e5       	ldi	r30, 0x55	; 85
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	8e 7f       	andi	r24, 0xFE	; 254
    37cc:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    37ce:	a5 e5       	ldi	r26, 0x55	; 85
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	e5 e5       	ldi	r30, 0x55	; 85
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	80 81       	ld	r24, Z
    37d8:	8d 7f       	andi	r24, 0xFD	; 253
    37da:	8c 93       	st	X, r24
    37dc:	af c0       	rjmp	.+350    	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    37de:	a5 e5       	ldi	r26, 0x55	; 85
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	e5 e5       	ldi	r30, 0x55	; 85
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	80 81       	ld	r24, Z
    37e8:	81 60       	ori	r24, 0x01	; 1
    37ea:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    37ec:	a5 e5       	ldi	r26, 0x55	; 85
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	e5 e5       	ldi	r30, 0x55	; 85
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	8d 7f       	andi	r24, 0xFD	; 253
    37f8:	8c 93       	st	X, r24
    37fa:	a0 c0       	rjmp	.+320    	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
    37fc:	a5 e5       	ldi	r26, 0x55	; 85
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	e5 e5       	ldi	r30, 0x55	; 85
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	80 81       	ld	r24, Z
    3806:	8e 7f       	andi	r24, 0xFE	; 254
    3808:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    380a:	a5 e5       	ldi	r26, 0x55	; 85
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e5 e5       	ldi	r30, 0x55	; 85
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	82 60       	ori	r24, 0x02	; 2
    3816:	8c 93       	st	X, r24
    3818:	91 c0       	rjmp	.+290    	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    381a:	a5 e5       	ldi	r26, 0x55	; 85
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	e5 e5       	ldi	r30, 0x55	; 85
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	80 81       	ld	r24, Z
    3824:	81 60       	ori	r24, 0x01	; 1
    3826:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    3828:	a5 e5       	ldi	r26, 0x55	; 85
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	e5 e5       	ldi	r30, 0x55	; 85
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	82 60       	ori	r24, 0x02	; 2
    3834:	8c 93       	st	X, r24
    3836:	82 c0       	rjmp	.+260    	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT1:
		switch(Edge){
    3838:	8a 81       	ldd	r24, Y+2	; 0x02
    383a:	28 2f       	mov	r18, r24
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	3e 83       	std	Y+6, r19	; 0x06
    3840:	2d 83       	std	Y+5, r18	; 0x05
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	9e 81       	ldd	r25, Y+6	; 0x06
    3846:	81 30       	cpi	r24, 0x01	; 1
    3848:	91 05       	cpc	r25, r1
    384a:	21 f1       	breq	.+72     	; 0x3894 <EXI_TriggerEdge+0x156>
    384c:	2d 81       	ldd	r18, Y+5	; 0x05
    384e:	3e 81       	ldd	r19, Y+6	; 0x06
    3850:	22 30       	cpi	r18, 0x02	; 2
    3852:	31 05       	cpc	r19, r1
    3854:	2c f4       	brge	.+10     	; 0x3860 <EXI_TriggerEdge+0x122>
    3856:	8d 81       	ldd	r24, Y+5	; 0x05
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	61 f0       	breq	.+24     	; 0x3876 <EXI_TriggerEdge+0x138>
    385e:	6e c0       	rjmp	.+220    	; 0x393c <EXI_TriggerEdge+0x1fe>
    3860:	2d 81       	ldd	r18, Y+5	; 0x05
    3862:	3e 81       	ldd	r19, Y+6	; 0x06
    3864:	22 30       	cpi	r18, 0x02	; 2
    3866:	31 05       	cpc	r19, r1
    3868:	21 f1       	breq	.+72     	; 0x38b2 <EXI_TriggerEdge+0x174>
    386a:	8d 81       	ldd	r24, Y+5	; 0x05
    386c:	9e 81       	ldd	r25, Y+6	; 0x06
    386e:	83 30       	cpi	r24, 0x03	; 3
    3870:	91 05       	cpc	r25, r1
    3872:	71 f1       	breq	.+92     	; 0x38d0 <EXI_TriggerEdge+0x192>
    3874:	63 c0       	rjmp	.+198    	; 0x393c <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
    3876:	a5 e5       	ldi	r26, 0x55	; 85
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	e5 e5       	ldi	r30, 0x55	; 85
    387c:	f0 e0       	ldi	r31, 0x00	; 0
    387e:	80 81       	ld	r24, Z
    3880:	8b 7f       	andi	r24, 0xFB	; 251
    3882:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    3884:	a5 e5       	ldi	r26, 0x55	; 85
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e5 e5       	ldi	r30, 0x55	; 85
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	87 7f       	andi	r24, 0xF7	; 247
    3890:	8c 93       	st	X, r24
    3892:	54 c0       	rjmp	.+168    	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
    3894:	a5 e5       	ldi	r26, 0x55	; 85
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e5 e5       	ldi	r30, 0x55	; 85
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	80 81       	ld	r24, Z
    389e:	84 60       	ori	r24, 0x04	; 4
    38a0:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    38a2:	a5 e5       	ldi	r26, 0x55	; 85
    38a4:	b0 e0       	ldi	r27, 0x00	; 0
    38a6:	e5 e5       	ldi	r30, 0x55	; 85
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 81       	ld	r24, Z
    38ac:	87 7f       	andi	r24, 0xF7	; 247
    38ae:	8c 93       	st	X, r24
    38b0:	45 c0       	rjmp	.+138    	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
    38b2:	a5 e5       	ldi	r26, 0x55	; 85
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e5 e5       	ldi	r30, 0x55	; 85
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	8b 7f       	andi	r24, 0xFB	; 251
    38be:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    38c0:	a5 e5       	ldi	r26, 0x55	; 85
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	e5 e5       	ldi	r30, 0x55	; 85
    38c6:	f0 e0       	ldi	r31, 0x00	; 0
    38c8:	80 81       	ld	r24, Z
    38ca:	88 60       	ori	r24, 0x08	; 8
    38cc:	8c 93       	st	X, r24
    38ce:	36 c0       	rjmp	.+108    	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    38d0:	a5 e5       	ldi	r26, 0x55	; 85
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	e5 e5       	ldi	r30, 0x55	; 85
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	84 60       	ori	r24, 0x04	; 4
    38dc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    38de:	a5 e5       	ldi	r26, 0x55	; 85
    38e0:	b0 e0       	ldi	r27, 0x00	; 0
    38e2:	e5 e5       	ldi	r30, 0x55	; 85
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	80 81       	ld	r24, Z
    38e8:	88 60       	ori	r24, 0x08	; 8
    38ea:	8c 93       	st	X, r24
    38ec:	27 c0       	rjmp	.+78     	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT2:
		switch(Edge){
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	28 2f       	mov	r18, r24
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	3c 83       	std	Y+4, r19	; 0x04
    38f6:	2b 83       	std	Y+3, r18	; 0x03
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	9c 81       	ldd	r25, Y+4	; 0x04
    38fc:	82 30       	cpi	r24, 0x02	; 2
    38fe:	91 05       	cpc	r25, r1
    3900:	31 f0       	breq	.+12     	; 0x390e <EXI_TriggerEdge+0x1d0>
    3902:	2b 81       	ldd	r18, Y+3	; 0x03
    3904:	3c 81       	ldd	r19, Y+4	; 0x04
    3906:	23 30       	cpi	r18, 0x03	; 3
    3908:	31 05       	cpc	r19, r1
    390a:	49 f0       	breq	.+18     	; 0x391e <EXI_TriggerEdge+0x1e0>
    390c:	10 c0       	rjmp	.+32     	; 0x392e <EXI_TriggerEdge+0x1f0>
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
    390e:	a4 e5       	ldi	r26, 0x54	; 84
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e4 e5       	ldi	r30, 0x54	; 84
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	8f 7b       	andi	r24, 0xBF	; 191
    391a:	8c 93       	st	X, r24
    391c:	0f c0       	rjmp	.+30     	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    391e:	a4 e5       	ldi	r26, 0x54	; 84
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	e4 e5       	ldi	r30, 0x54	; 84
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	80 64       	ori	r24, 0x40	; 64
    392a:	8c 93       	st	X, r24
    392c:	07 c0       	rjmp	.+14     	; 0x393c <EXI_TriggerEdge+0x1fe>
			break;
			default:
			CLEAR_BIT(MCUCSR,ISC2);
    392e:	a4 e5       	ldi	r26, 0x54	; 84
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	e4 e5       	ldi	r30, 0x54	; 84
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	8f 7b       	andi	r24, 0xBF	; 191
    393a:	8c 93       	st	X, r24
		}
		break;
	}
}
    393c:	2a 96       	adiw	r28, 0x0a	; 10
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	08 95       	ret

0000394e <EXI_SetCallBack>:
/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
    394e:	df 93       	push	r29
    3950:	cf 93       	push	r28
    3952:	00 d0       	rcall	.+0      	; 0x3954 <EXI_SetCallBack+0x6>
    3954:	00 d0       	rcall	.+0      	; 0x3956 <EXI_SetCallBack+0x8>
    3956:	0f 92       	push	r0
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	89 83       	std	Y+1, r24	; 0x01
    395e:	7b 83       	std	Y+3, r23	; 0x03
    3960:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	28 2f       	mov	r18, r24
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	3d 83       	std	Y+5, r19	; 0x05
    396a:	2c 83       	std	Y+4, r18	; 0x04
    396c:	8c 81       	ldd	r24, Y+4	; 0x04
    396e:	9d 81       	ldd	r25, Y+5	; 0x05
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	91 05       	cpc	r25, r1
    3974:	81 f0       	breq	.+32     	; 0x3996 <EXI_SetCallBack+0x48>
    3976:	2c 81       	ldd	r18, Y+4	; 0x04
    3978:	3d 81       	ldd	r19, Y+5	; 0x05
    397a:	22 30       	cpi	r18, 0x02	; 2
    397c:	31 05       	cpc	r19, r1
    397e:	91 f0       	breq	.+36     	; 0x39a4 <EXI_SetCallBack+0x56>
    3980:	8c 81       	ldd	r24, Y+4	; 0x04
    3982:	9d 81       	ldd	r25, Y+5	; 0x05
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	a1 f4       	brne	.+40     	; 0x39b0 <EXI_SetCallBack+0x62>
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    3988:	8a 81       	ldd	r24, Y+2	; 0x02
    398a:	9b 81       	ldd	r25, Y+3	; 0x03
    398c:	90 93 a1 01 	sts	0x01A1, r25
    3990:	80 93 a0 01 	sts	0x01A0, r24
    3994:	0d c0       	rjmp	.+26     	; 0x39b0 <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	90 93 a3 01 	sts	0x01A3, r25
    399e:	80 93 a2 01 	sts	0x01A2, r24
    39a2:	06 c0       	rjmp	.+12     	; 0x39b0 <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    39a4:	8a 81       	ldd	r24, Y+2	; 0x02
    39a6:	9b 81       	ldd	r25, Y+3	; 0x03
    39a8:	90 93 a5 01 	sts	0x01A5, r25
    39ac:	80 93 a4 01 	sts	0x01A4, r24
		break;
	}
}
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	08 95       	ret

000039c0 <__vector_1>:


/*******************************ISR********************************/

ISR(INT0_vect)
{
    39c0:	1f 92       	push	r1
    39c2:	0f 92       	push	r0
    39c4:	0f b6       	in	r0, 0x3f	; 63
    39c6:	0f 92       	push	r0
    39c8:	11 24       	eor	r1, r1
    39ca:	2f 93       	push	r18
    39cc:	3f 93       	push	r19
    39ce:	4f 93       	push	r20
    39d0:	5f 93       	push	r21
    39d2:	6f 93       	push	r22
    39d4:	7f 93       	push	r23
    39d6:	8f 93       	push	r24
    39d8:	9f 93       	push	r25
    39da:	af 93       	push	r26
    39dc:	bf 93       	push	r27
    39de:	ef 93       	push	r30
    39e0:	ff 93       	push	r31
    39e2:	df 93       	push	r29
    39e4:	cf 93       	push	r28
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
	
	if (INT0_Fptr!=NULLPTR)
    39ea:	80 91 a0 01 	lds	r24, 0x01A0
    39ee:	90 91 a1 01 	lds	r25, 0x01A1
    39f2:	00 97       	sbiw	r24, 0x00	; 0
    39f4:	29 f0       	breq	.+10     	; 0x3a00 <__vector_1+0x40>
	{
		INT0_Fptr();
    39f6:	e0 91 a0 01 	lds	r30, 0x01A0
    39fa:	f0 91 a1 01 	lds	r31, 0x01A1
    39fe:	09 95       	icall
	}
}
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	ff 91       	pop	r31
    3a06:	ef 91       	pop	r30
    3a08:	bf 91       	pop	r27
    3a0a:	af 91       	pop	r26
    3a0c:	9f 91       	pop	r25
    3a0e:	8f 91       	pop	r24
    3a10:	7f 91       	pop	r23
    3a12:	6f 91       	pop	r22
    3a14:	5f 91       	pop	r21
    3a16:	4f 91       	pop	r20
    3a18:	3f 91       	pop	r19
    3a1a:	2f 91       	pop	r18
    3a1c:	0f 90       	pop	r0
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	0f 90       	pop	r0
    3a22:	1f 90       	pop	r1
    3a24:	18 95       	reti

00003a26 <__vector_2>:
ISR(INT1_vect)
{
    3a26:	1f 92       	push	r1
    3a28:	0f 92       	push	r0
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	0f 92       	push	r0
    3a2e:	11 24       	eor	r1, r1
    3a30:	2f 93       	push	r18
    3a32:	3f 93       	push	r19
    3a34:	4f 93       	push	r20
    3a36:	5f 93       	push	r21
    3a38:	6f 93       	push	r22
    3a3a:	7f 93       	push	r23
    3a3c:	8f 93       	push	r24
    3a3e:	9f 93       	push	r25
    3a40:	af 93       	push	r26
    3a42:	bf 93       	push	r27
    3a44:	ef 93       	push	r30
    3a46:	ff 93       	push	r31
    3a48:	df 93       	push	r29
    3a4a:	cf 93       	push	r28
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
	if (INT1_Fptr!=NULLPTR)
    3a50:	80 91 a2 01 	lds	r24, 0x01A2
    3a54:	90 91 a3 01 	lds	r25, 0x01A3
    3a58:	00 97       	sbiw	r24, 0x00	; 0
    3a5a:	29 f0       	breq	.+10     	; 0x3a66 <__vector_2+0x40>
	{
		INT1_Fptr();
    3a5c:	e0 91 a2 01 	lds	r30, 0x01A2
    3a60:	f0 91 a3 01 	lds	r31, 0x01A3
    3a64:	09 95       	icall
	}
}
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	ff 91       	pop	r31
    3a6c:	ef 91       	pop	r30
    3a6e:	bf 91       	pop	r27
    3a70:	af 91       	pop	r26
    3a72:	9f 91       	pop	r25
    3a74:	8f 91       	pop	r24
    3a76:	7f 91       	pop	r23
    3a78:	6f 91       	pop	r22
    3a7a:	5f 91       	pop	r21
    3a7c:	4f 91       	pop	r20
    3a7e:	3f 91       	pop	r19
    3a80:	2f 91       	pop	r18
    3a82:	0f 90       	pop	r0
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	0f 90       	pop	r0
    3a88:	1f 90       	pop	r1
    3a8a:	18 95       	reti

00003a8c <__vector_3>:
ISR(INT2_vect)
{
    3a8c:	1f 92       	push	r1
    3a8e:	0f 92       	push	r0
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	0f 92       	push	r0
    3a94:	11 24       	eor	r1, r1
    3a96:	2f 93       	push	r18
    3a98:	3f 93       	push	r19
    3a9a:	4f 93       	push	r20
    3a9c:	5f 93       	push	r21
    3a9e:	6f 93       	push	r22
    3aa0:	7f 93       	push	r23
    3aa2:	8f 93       	push	r24
    3aa4:	9f 93       	push	r25
    3aa6:	af 93       	push	r26
    3aa8:	bf 93       	push	r27
    3aaa:	ef 93       	push	r30
    3aac:	ff 93       	push	r31
    3aae:	df 93       	push	r29
    3ab0:	cf 93       	push	r28
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
	if (INT2_Fptr!=NULLPTR)
    3ab6:	80 91 a4 01 	lds	r24, 0x01A4
    3aba:	90 91 a5 01 	lds	r25, 0x01A5
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	29 f0       	breq	.+10     	; 0x3acc <__vector_3+0x40>
	{
		INT2_Fptr();
    3ac2:	e0 91 a4 01 	lds	r30, 0x01A4
    3ac6:	f0 91 a5 01 	lds	r31, 0x01A5
    3aca:	09 95       	icall
	}
}
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	ff 91       	pop	r31
    3ad2:	ef 91       	pop	r30
    3ad4:	bf 91       	pop	r27
    3ad6:	af 91       	pop	r26
    3ad8:	9f 91       	pop	r25
    3ada:	8f 91       	pop	r24
    3adc:	7f 91       	pop	r23
    3ade:	6f 91       	pop	r22
    3ae0:	5f 91       	pop	r21
    3ae2:	4f 91       	pop	r20
    3ae4:	3f 91       	pop	r19
    3ae6:	2f 91       	pop	r18
    3ae8:	0f 90       	pop	r0
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	0f 90       	pop	r0
    3aee:	1f 90       	pop	r1
    3af0:	18 95       	reti

00003af2 <LCD_WriteCommand>:
	_delay_ms(2) ;
	LCD_WriteCommand(0x06) ; // Address increase no shift
}
#elif (LCD_MODE==_4_BIT)
static void LCD_WriteCommand(u8 command)
{
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	cd b7       	in	r28, 0x3d	; 61
    3af8:	de b7       	in	r29, 0x3e	; 62
    3afa:	e9 97       	sbiw	r28, 0x39	; 57
    3afc:	0f b6       	in	r0, 0x3f	; 63
    3afe:	f8 94       	cli
    3b00:	de bf       	out	0x3e, r29	; 62
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePIN (RS,LOW) ;
    3b08:	82 e1       	ldi	r24, 0x12	; 18
    3b0a:	60 e0       	ldi	r22, 0x00	; 0
    3b0c:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D7 , READ_BIT(command , 7)) ;
    3b10:	89 ad       	ldd	r24, Y+57	; 0x39
    3b12:	98 2f       	mov	r25, r24
    3b14:	99 1f       	adc	r25, r25
    3b16:	99 27       	eor	r25, r25
    3b18:	99 1f       	adc	r25, r25
    3b1a:	87 e1       	ldi	r24, 0x17	; 23
    3b1c:	69 2f       	mov	r22, r25
    3b1e:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(command , 6)) ;
    3b22:	89 ad       	ldd	r24, Y+57	; 0x39
    3b24:	82 95       	swap	r24
    3b26:	86 95       	lsr	r24
    3b28:	86 95       	lsr	r24
    3b2a:	83 70       	andi	r24, 0x03	; 3
    3b2c:	98 2f       	mov	r25, r24
    3b2e:	91 70       	andi	r25, 0x01	; 1
    3b30:	86 e1       	ldi	r24, 0x16	; 22
    3b32:	69 2f       	mov	r22, r25
    3b34:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(command , 5)) ;
    3b38:	89 ad       	ldd	r24, Y+57	; 0x39
    3b3a:	82 95       	swap	r24
    3b3c:	86 95       	lsr	r24
    3b3e:	87 70       	andi	r24, 0x07	; 7
    3b40:	98 2f       	mov	r25, r24
    3b42:	91 70       	andi	r25, 0x01	; 1
    3b44:	85 e1       	ldi	r24, 0x15	; 21
    3b46:	69 2f       	mov	r22, r25
    3b48:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(command , 4)) ;
    3b4c:	89 ad       	ldd	r24, Y+57	; 0x39
    3b4e:	82 95       	swap	r24
    3b50:	8f 70       	andi	r24, 0x0F	; 15
    3b52:	98 2f       	mov	r25, r24
    3b54:	91 70       	andi	r25, 0x01	; 1
    3b56:	84 e1       	ldi	r24, 0x14	; 20
    3b58:	69 2f       	mov	r22, r25
    3b5a:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    3b5e:	83 e1       	ldi	r24, 0x13	; 19
    3b60:	61 e0       	ldi	r22, 0x01	; 1
    3b62:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	a0 e8       	ldi	r26, 0x80	; 128
    3b6c:	bf e3       	ldi	r27, 0x3F	; 63
    3b6e:	8d ab       	std	Y+53, r24	; 0x35
    3b70:	9e ab       	std	Y+54, r25	; 0x36
    3b72:	af ab       	std	Y+55, r26	; 0x37
    3b74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b76:	6d a9       	ldd	r22, Y+53	; 0x35
    3b78:	7e a9       	ldd	r23, Y+54	; 0x36
    3b7a:	8f a9       	ldd	r24, Y+55	; 0x37
    3b7c:	98 ad       	ldd	r25, Y+56	; 0x38
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	30 e0       	ldi	r19, 0x00	; 0
    3b82:	4a ef       	ldi	r20, 0xFA	; 250
    3b84:	54 e4       	ldi	r21, 0x44	; 68
    3b86:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	89 ab       	std	Y+49, r24	; 0x31
    3b90:	9a ab       	std	Y+50, r25	; 0x32
    3b92:	ab ab       	std	Y+51, r26	; 0x33
    3b94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b96:	69 a9       	ldd	r22, Y+49	; 0x31
    3b98:	7a a9       	ldd	r23, Y+50	; 0x32
    3b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    3b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	5f e3       	ldi	r21, 0x3F	; 63
    3ba6:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3baa:	88 23       	and	r24, r24
    3bac:	2c f4       	brge	.+10     	; 0x3bb8 <LCD_WriteCommand+0xc6>
		__ticks = 1;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	98 ab       	std	Y+48, r25	; 0x30
    3bb4:	8f a7       	std	Y+47, r24	; 0x2f
    3bb6:	3f c0       	rjmp	.+126    	; 0x3c36 <LCD_WriteCommand+0x144>
	else if (__tmp > 65535)
    3bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    3bba:	7a a9       	ldd	r23, Y+50	; 0x32
    3bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    3bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	3f ef       	ldi	r19, 0xFF	; 255
    3bc4:	4f e7       	ldi	r20, 0x7F	; 127
    3bc6:	57 e4       	ldi	r21, 0x47	; 71
    3bc8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3bcc:	18 16       	cp	r1, r24
    3bce:	4c f5       	brge	.+82     	; 0x3c22 <LCD_WriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd0:	6d a9       	ldd	r22, Y+53	; 0x35
    3bd2:	7e a9       	ldd	r23, Y+54	; 0x36
    3bd4:	8f a9       	ldd	r24, Y+55	; 0x37
    3bd6:	98 ad       	ldd	r25, Y+56	; 0x38
    3bd8:	20 e0       	ldi	r18, 0x00	; 0
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	40 e2       	ldi	r20, 0x20	; 32
    3bde:	51 e4       	ldi	r21, 0x41	; 65
    3be0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	98 ab       	std	Y+48, r25	; 0x30
    3bf6:	8f a7       	std	Y+47, r24	; 0x2f
    3bf8:	0f c0       	rjmp	.+30     	; 0x3c18 <LCD_WriteCommand+0x126>
    3bfa:	88 ec       	ldi	r24, 0xC8	; 200
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	9e a7       	std	Y+46, r25	; 0x2e
    3c00:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c02:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c04:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	f1 f7       	brne	.-4      	; 0x3c06 <LCD_WriteCommand+0x114>
    3c0a:	9e a7       	std	Y+46, r25	; 0x2e
    3c0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c10:	98 a9       	ldd	r25, Y+48	; 0x30
    3c12:	01 97       	sbiw	r24, 0x01	; 1
    3c14:	98 ab       	std	Y+48, r25	; 0x30
    3c16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	69 f7       	brne	.-38     	; 0x3bfa <LCD_WriteCommand+0x108>
    3c20:	14 c0       	rjmp	.+40     	; 0x3c4a <LCD_WriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c22:	69 a9       	ldd	r22, Y+49	; 0x31
    3c24:	7a a9       	ldd	r23, Y+50	; 0x32
    3c26:	8b a9       	ldd	r24, Y+51	; 0x33
    3c28:	9c a9       	ldd	r25, Y+52	; 0x34
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	98 ab       	std	Y+48, r25	; 0x30
    3c34:	8f a7       	std	Y+47, r24	; 0x2f
    3c36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c38:	98 a9       	ldd	r25, Y+48	; 0x30
    3c3a:	9c a7       	std	Y+44, r25	; 0x2c
    3c3c:	8b a7       	std	Y+43, r24	; 0x2b
    3c3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c40:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c42:	01 97       	sbiw	r24, 0x01	; 1
    3c44:	f1 f7       	brne	.-4      	; 0x3c42 <LCD_WriteCommand+0x150>
    3c46:	9c a7       	std	Y+44, r25	; 0x2c
    3c48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    3c4a:	83 e1       	ldi	r24, 0x13	; 19
    3c4c:	60 e0       	ldi	r22, 0x00	; 0
    3c4e:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	a0 e8       	ldi	r26, 0x80	; 128
    3c58:	bf e3       	ldi	r27, 0x3F	; 63
    3c5a:	8f a3       	std	Y+39, r24	; 0x27
    3c5c:	98 a7       	std	Y+40, r25	; 0x28
    3c5e:	a9 a7       	std	Y+41, r26	; 0x29
    3c60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c62:	6f a1       	ldd	r22, Y+39	; 0x27
    3c64:	78 a5       	ldd	r23, Y+40	; 0x28
    3c66:	89 a5       	ldd	r24, Y+41	; 0x29
    3c68:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	4a ef       	ldi	r20, 0xFA	; 250
    3c70:	54 e4       	ldi	r21, 0x44	; 68
    3c72:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	8b a3       	std	Y+35, r24	; 0x23
    3c7c:	9c a3       	std	Y+36, r25	; 0x24
    3c7e:	ad a3       	std	Y+37, r26	; 0x25
    3c80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c82:	6b a1       	ldd	r22, Y+35	; 0x23
    3c84:	7c a1       	ldd	r23, Y+36	; 0x24
    3c86:	8d a1       	ldd	r24, Y+37	; 0x25
    3c88:	9e a1       	ldd	r25, Y+38	; 0x26
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	40 e8       	ldi	r20, 0x80	; 128
    3c90:	5f e3       	ldi	r21, 0x3F	; 63
    3c92:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3c96:	88 23       	and	r24, r24
    3c98:	2c f4       	brge	.+10     	; 0x3ca4 <LCD_WriteCommand+0x1b2>
		__ticks = 1;
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	9a a3       	std	Y+34, r25	; 0x22
    3ca0:	89 a3       	std	Y+33, r24	; 0x21
    3ca2:	3f c0       	rjmp	.+126    	; 0x3d22 <LCD_WriteCommand+0x230>
	else if (__tmp > 65535)
    3ca4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ca6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ca8:	8d a1       	ldd	r24, Y+37	; 0x25
    3caa:	9e a1       	ldd	r25, Y+38	; 0x26
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	3f ef       	ldi	r19, 0xFF	; 255
    3cb0:	4f e7       	ldi	r20, 0x7F	; 127
    3cb2:	57 e4       	ldi	r21, 0x47	; 71
    3cb4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3cb8:	18 16       	cp	r1, r24
    3cba:	4c f5       	brge	.+82     	; 0x3d0e <LCD_WriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cbc:	6f a1       	ldd	r22, Y+39	; 0x27
    3cbe:	78 a5       	ldd	r23, Y+40	; 0x28
    3cc0:	89 a5       	ldd	r24, Y+41	; 0x29
    3cc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e2       	ldi	r20, 0x20	; 32
    3cca:	51 e4       	ldi	r21, 0x41	; 65
    3ccc:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	bc 01       	movw	r22, r24
    3cd6:	cd 01       	movw	r24, r26
    3cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cdc:	dc 01       	movw	r26, r24
    3cde:	cb 01       	movw	r24, r22
    3ce0:	9a a3       	std	Y+34, r25	; 0x22
    3ce2:	89 a3       	std	Y+33, r24	; 0x21
    3ce4:	0f c0       	rjmp	.+30     	; 0x3d04 <LCD_WriteCommand+0x212>
    3ce6:	88 ec       	ldi	r24, 0xC8	; 200
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	98 a3       	std	Y+32, r25	; 0x20
    3cec:	8f 8f       	std	Y+31, r24	; 0x1f
    3cee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3cf0:	98 a1       	ldd	r25, Y+32	; 0x20
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <LCD_WriteCommand+0x200>
    3cf6:	98 a3       	std	Y+32, r25	; 0x20
    3cf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    3cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	9a a3       	std	Y+34, r25	; 0x22
    3d02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d04:	89 a1       	ldd	r24, Y+33	; 0x21
    3d06:	9a a1       	ldd	r25, Y+34	; 0x22
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	69 f7       	brne	.-38     	; 0x3ce6 <LCD_WriteCommand+0x1f4>
    3d0c:	14 c0       	rjmp	.+40     	; 0x3d36 <LCD_WriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d10:	7c a1       	ldd	r23, Y+36	; 0x24
    3d12:	8d a1       	ldd	r24, Y+37	; 0x25
    3d14:	9e a1       	ldd	r25, Y+38	; 0x26
    3d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	9a a3       	std	Y+34, r25	; 0x22
    3d20:	89 a3       	std	Y+33, r24	; 0x21
    3d22:	89 a1       	ldd	r24, Y+33	; 0x21
    3d24:	9a a1       	ldd	r25, Y+34	; 0x22
    3d26:	9e 8f       	std	Y+30, r25	; 0x1e
    3d28:	8d 8f       	std	Y+29, r24	; 0x1d
    3d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	f1 f7       	brne	.-4      	; 0x3d2e <LCD_WriteCommand+0x23c>
    3d32:	9e 8f       	std	Y+30, r25	; 0x1e
    3d34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	DIO_WritePIN(D7 , READ_BIT(command , 3)) ;
    3d36:	89 ad       	ldd	r24, Y+57	; 0x39
    3d38:	86 95       	lsr	r24
    3d3a:	86 95       	lsr	r24
    3d3c:	86 95       	lsr	r24
    3d3e:	98 2f       	mov	r25, r24
    3d40:	91 70       	andi	r25, 0x01	; 1
    3d42:	87 e1       	ldi	r24, 0x17	; 23
    3d44:	69 2f       	mov	r22, r25
    3d46:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(command , 2)) ;
    3d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    3d4c:	86 95       	lsr	r24
    3d4e:	86 95       	lsr	r24
    3d50:	98 2f       	mov	r25, r24
    3d52:	91 70       	andi	r25, 0x01	; 1
    3d54:	86 e1       	ldi	r24, 0x16	; 22
    3d56:	69 2f       	mov	r22, r25
    3d58:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(command , 1)) ;
    3d5c:	89 ad       	ldd	r24, Y+57	; 0x39
    3d5e:	86 95       	lsr	r24
    3d60:	98 2f       	mov	r25, r24
    3d62:	91 70       	andi	r25, 0x01	; 1
    3d64:	85 e1       	ldi	r24, 0x15	; 21
    3d66:	69 2f       	mov	r22, r25
    3d68:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(command , 0)) ;
    3d6c:	89 ad       	ldd	r24, Y+57	; 0x39
    3d6e:	98 2f       	mov	r25, r24
    3d70:	91 70       	andi	r25, 0x01	; 1
    3d72:	84 e1       	ldi	r24, 0x14	; 20
    3d74:	69 2f       	mov	r22, r25
    3d76:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    3d7a:	83 e1       	ldi	r24, 0x13	; 19
    3d7c:	61 e0       	ldi	r22, 0x01	; 1
    3d7e:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	a0 e8       	ldi	r26, 0x80	; 128
    3d88:	bf e3       	ldi	r27, 0x3F	; 63
    3d8a:	89 8f       	std	Y+25, r24	; 0x19
    3d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    3d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    3d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d92:	69 8d       	ldd	r22, Y+25	; 0x19
    3d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	4a ef       	ldi	r20, 0xFA	; 250
    3da0:	54 e4       	ldi	r21, 0x44	; 68
    3da2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	8d 8b       	std	Y+21, r24	; 0x15
    3dac:	9e 8b       	std	Y+22, r25	; 0x16
    3dae:	af 8b       	std	Y+23, r26	; 0x17
    3db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3db2:	6d 89       	ldd	r22, Y+21	; 0x15
    3db4:	7e 89       	ldd	r23, Y+22	; 0x16
    3db6:	8f 89       	ldd	r24, Y+23	; 0x17
    3db8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	40 e8       	ldi	r20, 0x80	; 128
    3dc0:	5f e3       	ldi	r21, 0x3F	; 63
    3dc2:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3dc6:	88 23       	and	r24, r24
    3dc8:	2c f4       	brge	.+10     	; 0x3dd4 <LCD_WriteCommand+0x2e2>
		__ticks = 1;
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	9c 8b       	std	Y+20, r25	; 0x14
    3dd0:	8b 8b       	std	Y+19, r24	; 0x13
    3dd2:	3f c0       	rjmp	.+126    	; 0x3e52 <LCD_WriteCommand+0x360>
	else if (__tmp > 65535)
    3dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    3dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    3dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    3dda:	98 8d       	ldd	r25, Y+24	; 0x18
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	3f ef       	ldi	r19, 0xFF	; 255
    3de0:	4f e7       	ldi	r20, 0x7F	; 127
    3de2:	57 e4       	ldi	r21, 0x47	; 71
    3de4:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3de8:	18 16       	cp	r1, r24
    3dea:	4c f5       	brge	.+82     	; 0x3e3e <LCD_WriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dec:	69 8d       	ldd	r22, Y+25	; 0x19
    3dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	40 e2       	ldi	r20, 0x20	; 32
    3dfa:	51 e4       	ldi	r21, 0x41	; 65
    3dfc:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	bc 01       	movw	r22, r24
    3e06:	cd 01       	movw	r24, r26
    3e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	9c 8b       	std	Y+20, r25	; 0x14
    3e12:	8b 8b       	std	Y+19, r24	; 0x13
    3e14:	0f c0       	rjmp	.+30     	; 0x3e34 <LCD_WriteCommand+0x342>
    3e16:	88 ec       	ldi	r24, 0xC8	; 200
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	9a 8b       	std	Y+18, r25	; 0x12
    3e1c:	89 8b       	std	Y+17, r24	; 0x11
    3e1e:	89 89       	ldd	r24, Y+17	; 0x11
    3e20:	9a 89       	ldd	r25, Y+18	; 0x12
    3e22:	01 97       	sbiw	r24, 0x01	; 1
    3e24:	f1 f7       	brne	.-4      	; 0x3e22 <LCD_WriteCommand+0x330>
    3e26:	9a 8b       	std	Y+18, r25	; 0x12
    3e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	9c 8b       	std	Y+20, r25	; 0x14
    3e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e34:	8b 89       	ldd	r24, Y+19	; 0x13
    3e36:	9c 89       	ldd	r25, Y+20	; 0x14
    3e38:	00 97       	sbiw	r24, 0x00	; 0
    3e3a:	69 f7       	brne	.-38     	; 0x3e16 <LCD_WriteCommand+0x324>
    3e3c:	14 c0       	rjmp	.+40     	; 0x3e66 <LCD_WriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e40:	7e 89       	ldd	r23, Y+22	; 0x16
    3e42:	8f 89       	ldd	r24, Y+23	; 0x17
    3e44:	98 8d       	ldd	r25, Y+24	; 0x18
    3e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	9c 8b       	std	Y+20, r25	; 0x14
    3e50:	8b 8b       	std	Y+19, r24	; 0x13
    3e52:	8b 89       	ldd	r24, Y+19	; 0x13
    3e54:	9c 89       	ldd	r25, Y+20	; 0x14
    3e56:	98 8b       	std	Y+16, r25	; 0x10
    3e58:	8f 87       	std	Y+15, r24	; 0x0f
    3e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e5c:	98 89       	ldd	r25, Y+16	; 0x10
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <LCD_WriteCommand+0x36c>
    3e62:	98 8b       	std	Y+16, r25	; 0x10
    3e64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    3e66:	83 e1       	ldi	r24, 0x13	; 19
    3e68:	60 e0       	ldi	r22, 0x00	; 0
    3e6a:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	a0 e8       	ldi	r26, 0x80	; 128
    3e74:	bf e3       	ldi	r27, 0x3F	; 63
    3e76:	8b 87       	std	Y+11, r24	; 0x0b
    3e78:	9c 87       	std	Y+12, r25	; 0x0c
    3e7a:	ad 87       	std	Y+13, r26	; 0x0d
    3e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	4a ef       	ldi	r20, 0xFA	; 250
    3e8c:	54 e4       	ldi	r21, 0x44	; 68
    3e8e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	8f 83       	std	Y+7, r24	; 0x07
    3e98:	98 87       	std	Y+8, r25	; 0x08
    3e9a:	a9 87       	std	Y+9, r26	; 0x09
    3e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea0:	78 85       	ldd	r23, Y+8	; 0x08
    3ea2:	89 85       	ldd	r24, Y+9	; 0x09
    3ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e8       	ldi	r20, 0x80	; 128
    3eac:	5f e3       	ldi	r21, 0x3F	; 63
    3eae:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    3eb2:	88 23       	and	r24, r24
    3eb4:	2c f4       	brge	.+10     	; 0x3ec0 <LCD_WriteCommand+0x3ce>
		__ticks = 1;
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	9e 83       	std	Y+6, r25	; 0x06
    3ebc:	8d 83       	std	Y+5, r24	; 0x05
    3ebe:	3f c0       	rjmp	.+126    	; 0x3f3e <LCD_WriteCommand+0x44c>
	else if (__tmp > 65535)
    3ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec2:	78 85       	ldd	r23, Y+8	; 0x08
    3ec4:	89 85       	ldd	r24, Y+9	; 0x09
    3ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	3f ef       	ldi	r19, 0xFF	; 255
    3ecc:	4f e7       	ldi	r20, 0x7F	; 127
    3ece:	57 e4       	ldi	r21, 0x47	; 71
    3ed0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    3ed4:	18 16       	cp	r1, r24
    3ed6:	4c f5       	brge	.+82     	; 0x3f2a <LCD_WriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	40 e2       	ldi	r20, 0x20	; 32
    3ee6:	51 e4       	ldi	r21, 0x41	; 65
    3ee8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	cd 01       	movw	r24, r26
    3ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	9e 83       	std	Y+6, r25	; 0x06
    3efe:	8d 83       	std	Y+5, r24	; 0x05
    3f00:	0f c0       	rjmp	.+30     	; 0x3f20 <LCD_WriteCommand+0x42e>
    3f02:	88 ec       	ldi	r24, 0xC8	; 200
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	9c 83       	std	Y+4, r25	; 0x04
    3f08:	8b 83       	std	Y+3, r24	; 0x03
    3f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	f1 f7       	brne	.-4      	; 0x3f0e <LCD_WriteCommand+0x41c>
    3f12:	9c 83       	std	Y+4, r25	; 0x04
    3f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f16:	8d 81       	ldd	r24, Y+5	; 0x05
    3f18:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	9e 83       	std	Y+6, r25	; 0x06
    3f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f20:	8d 81       	ldd	r24, Y+5	; 0x05
    3f22:	9e 81       	ldd	r25, Y+6	; 0x06
    3f24:	00 97       	sbiw	r24, 0x00	; 0
    3f26:	69 f7       	brne	.-38     	; 0x3f02 <LCD_WriteCommand+0x410>
    3f28:	14 c0       	rjmp	.+40     	; 0x3f52 <LCD_WriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f2c:	78 85       	ldd	r23, Y+8	; 0x08
    3f2e:	89 85       	ldd	r24, Y+9	; 0x09
    3f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	8d 83       	std	Y+5, r24	; 0x05
    3f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f40:	9e 81       	ldd	r25, Y+6	; 0x06
    3f42:	9a 83       	std	Y+2, r25	; 0x02
    3f44:	89 83       	std	Y+1, r24	; 0x01
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4a:	01 97       	sbiw	r24, 0x01	; 1
    3f4c:	f1 f7       	brne	.-4      	; 0x3f4a <LCD_WriteCommand+0x458>
    3f4e:	9a 83       	std	Y+2, r25	; 0x02
    3f50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;
	

}
    3f52:	e9 96       	adiw	r28, 0x39	; 57
    3f54:	0f b6       	in	r0, 0x3f	; 63
    3f56:	f8 94       	cli
    3f58:	de bf       	out	0x3e, r29	; 62
    3f5a:	0f be       	out	0x3f, r0	; 63
    3f5c:	cd bf       	out	0x3d, r28	; 61
    3f5e:	cf 91       	pop	r28
    3f60:	df 91       	pop	r29
    3f62:	08 95       	ret

00003f64 <LCD_WriteData>:

static void LCD_WriteData (u8 data)
{
    3f64:	df 93       	push	r29
    3f66:	cf 93       	push	r28
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	e9 97       	sbiw	r28, 0x39	; 57
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    3f70:	f8 94       	cli
    3f72:	de bf       	out	0x3e, r29	; 62
    3f74:	0f be       	out	0x3f, r0	; 63
    3f76:	cd bf       	out	0x3d, r28	; 61
    3f78:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePIN(RS , HIGH) ;
    3f7a:	82 e1       	ldi	r24, 0x12	; 18
    3f7c:	61 e0       	ldi	r22, 0x01	; 1
    3f7e:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D7 , READ_BIT(data , 7)) ;
    3f82:	89 ad       	ldd	r24, Y+57	; 0x39
    3f84:	98 2f       	mov	r25, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	99 27       	eor	r25, r25
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	87 e1       	ldi	r24, 0x17	; 23
    3f8e:	69 2f       	mov	r22, r25
    3f90:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(data , 6)) ;
    3f94:	89 ad       	ldd	r24, Y+57	; 0x39
    3f96:	82 95       	swap	r24
    3f98:	86 95       	lsr	r24
    3f9a:	86 95       	lsr	r24
    3f9c:	83 70       	andi	r24, 0x03	; 3
    3f9e:	98 2f       	mov	r25, r24
    3fa0:	91 70       	andi	r25, 0x01	; 1
    3fa2:	86 e1       	ldi	r24, 0x16	; 22
    3fa4:	69 2f       	mov	r22, r25
    3fa6:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(data , 5)) ;
    3faa:	89 ad       	ldd	r24, Y+57	; 0x39
    3fac:	82 95       	swap	r24
    3fae:	86 95       	lsr	r24
    3fb0:	87 70       	andi	r24, 0x07	; 7
    3fb2:	98 2f       	mov	r25, r24
    3fb4:	91 70       	andi	r25, 0x01	; 1
    3fb6:	85 e1       	ldi	r24, 0x15	; 21
    3fb8:	69 2f       	mov	r22, r25
    3fba:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(data , 4)) ;
    3fbe:	89 ad       	ldd	r24, Y+57	; 0x39
    3fc0:	82 95       	swap	r24
    3fc2:	8f 70       	andi	r24, 0x0F	; 15
    3fc4:	98 2f       	mov	r25, r24
    3fc6:	91 70       	andi	r25, 0x01	; 1
    3fc8:	84 e1       	ldi	r24, 0x14	; 20
    3fca:	69 2f       	mov	r22, r25
    3fcc:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    3fd0:	83 e1       	ldi	r24, 0x13	; 19
    3fd2:	61 e0       	ldi	r22, 0x01	; 1
    3fd4:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	a0 e8       	ldi	r26, 0x80	; 128
    3fde:	bf e3       	ldi	r27, 0x3F	; 63
    3fe0:	8d ab       	std	Y+53, r24	; 0x35
    3fe2:	9e ab       	std	Y+54, r25	; 0x36
    3fe4:	af ab       	std	Y+55, r26	; 0x37
    3fe6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe8:	6d a9       	ldd	r22, Y+53	; 0x35
    3fea:	7e a9       	ldd	r23, Y+54	; 0x36
    3fec:	8f a9       	ldd	r24, Y+55	; 0x37
    3fee:	98 ad       	ldd	r25, Y+56	; 0x38
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	4a ef       	ldi	r20, 0xFA	; 250
    3ff6:	54 e4       	ldi	r21, 0x44	; 68
    3ff8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	89 ab       	std	Y+49, r24	; 0x31
    4002:	9a ab       	std	Y+50, r25	; 0x32
    4004:	ab ab       	std	Y+51, r26	; 0x33
    4006:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4008:	69 a9       	ldd	r22, Y+49	; 0x31
    400a:	7a a9       	ldd	r23, Y+50	; 0x32
    400c:	8b a9       	ldd	r24, Y+51	; 0x33
    400e:	9c a9       	ldd	r25, Y+52	; 0x34
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e8       	ldi	r20, 0x80	; 128
    4016:	5f e3       	ldi	r21, 0x3F	; 63
    4018:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    401c:	88 23       	and	r24, r24
    401e:	2c f4       	brge	.+10     	; 0x402a <LCD_WriteData+0xc6>
		__ticks = 1;
    4020:	81 e0       	ldi	r24, 0x01	; 1
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	98 ab       	std	Y+48, r25	; 0x30
    4026:	8f a7       	std	Y+47, r24	; 0x2f
    4028:	3f c0       	rjmp	.+126    	; 0x40a8 <LCD_WriteData+0x144>
	else if (__tmp > 65535)
    402a:	69 a9       	ldd	r22, Y+49	; 0x31
    402c:	7a a9       	ldd	r23, Y+50	; 0x32
    402e:	8b a9       	ldd	r24, Y+51	; 0x33
    4030:	9c a9       	ldd	r25, Y+52	; 0x34
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	3f ef       	ldi	r19, 0xFF	; 255
    4036:	4f e7       	ldi	r20, 0x7F	; 127
    4038:	57 e4       	ldi	r21, 0x47	; 71
    403a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    403e:	18 16       	cp	r1, r24
    4040:	4c f5       	brge	.+82     	; 0x4094 <LCD_WriteData+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4042:	6d a9       	ldd	r22, Y+53	; 0x35
    4044:	7e a9       	ldd	r23, Y+54	; 0x36
    4046:	8f a9       	ldd	r24, Y+55	; 0x37
    4048:	98 ad       	ldd	r25, Y+56	; 0x38
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e2       	ldi	r20, 0x20	; 32
    4050:	51 e4       	ldi	r21, 0x41	; 65
    4052:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	bc 01       	movw	r22, r24
    405c:	cd 01       	movw	r24, r26
    405e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	98 ab       	std	Y+48, r25	; 0x30
    4068:	8f a7       	std	Y+47, r24	; 0x2f
    406a:	0f c0       	rjmp	.+30     	; 0x408a <LCD_WriteData+0x126>
    406c:	88 ec       	ldi	r24, 0xC8	; 200
    406e:	90 e0       	ldi	r25, 0x00	; 0
    4070:	9e a7       	std	Y+46, r25	; 0x2e
    4072:	8d a7       	std	Y+45, r24	; 0x2d
    4074:	8d a5       	ldd	r24, Y+45	; 0x2d
    4076:	9e a5       	ldd	r25, Y+46	; 0x2e
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <LCD_WriteData+0x114>
    407c:	9e a7       	std	Y+46, r25	; 0x2e
    407e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4080:	8f a5       	ldd	r24, Y+47	; 0x2f
    4082:	98 a9       	ldd	r25, Y+48	; 0x30
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	98 ab       	std	Y+48, r25	; 0x30
    4088:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408a:	8f a5       	ldd	r24, Y+47	; 0x2f
    408c:	98 a9       	ldd	r25, Y+48	; 0x30
    408e:	00 97       	sbiw	r24, 0x00	; 0
    4090:	69 f7       	brne	.-38     	; 0x406c <LCD_WriteData+0x108>
    4092:	14 c0       	rjmp	.+40     	; 0x40bc <LCD_WriteData+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4094:	69 a9       	ldd	r22, Y+49	; 0x31
    4096:	7a a9       	ldd	r23, Y+50	; 0x32
    4098:	8b a9       	ldd	r24, Y+51	; 0x33
    409a:	9c a9       	ldd	r25, Y+52	; 0x34
    409c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a0:	dc 01       	movw	r26, r24
    40a2:	cb 01       	movw	r24, r22
    40a4:	98 ab       	std	Y+48, r25	; 0x30
    40a6:	8f a7       	std	Y+47, r24	; 0x2f
    40a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40aa:	98 a9       	ldd	r25, Y+48	; 0x30
    40ac:	9c a7       	std	Y+44, r25	; 0x2c
    40ae:	8b a7       	std	Y+43, r24	; 0x2b
    40b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    40b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <LCD_WriteData+0x150>
    40b8:	9c a7       	std	Y+44, r25	; 0x2c
    40ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    40bc:	83 e1       	ldi	r24, 0x13	; 19
    40be:	60 e0       	ldi	r22, 0x00	; 0
    40c0:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	a0 e8       	ldi	r26, 0x80	; 128
    40ca:	bf e3       	ldi	r27, 0x3F	; 63
    40cc:	8f a3       	std	Y+39, r24	; 0x27
    40ce:	98 a7       	std	Y+40, r25	; 0x28
    40d0:	a9 a7       	std	Y+41, r26	; 0x29
    40d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d4:	6f a1       	ldd	r22, Y+39	; 0x27
    40d6:	78 a5       	ldd	r23, Y+40	; 0x28
    40d8:	89 a5       	ldd	r24, Y+41	; 0x29
    40da:	9a a5       	ldd	r25, Y+42	; 0x2a
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	4a ef       	ldi	r20, 0xFA	; 250
    40e2:	54 e4       	ldi	r21, 0x44	; 68
    40e4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	8b a3       	std	Y+35, r24	; 0x23
    40ee:	9c a3       	std	Y+36, r25	; 0x24
    40f0:	ad a3       	std	Y+37, r26	; 0x25
    40f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40f4:	6b a1       	ldd	r22, Y+35	; 0x23
    40f6:	7c a1       	ldd	r23, Y+36	; 0x24
    40f8:	8d a1       	ldd	r24, Y+37	; 0x25
    40fa:	9e a1       	ldd	r25, Y+38	; 0x26
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	40 e8       	ldi	r20, 0x80	; 128
    4102:	5f e3       	ldi	r21, 0x3F	; 63
    4104:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4108:	88 23       	and	r24, r24
    410a:	2c f4       	brge	.+10     	; 0x4116 <LCD_WriteData+0x1b2>
		__ticks = 1;
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	9a a3       	std	Y+34, r25	; 0x22
    4112:	89 a3       	std	Y+33, r24	; 0x21
    4114:	3f c0       	rjmp	.+126    	; 0x4194 <LCD_WriteData+0x230>
	else if (__tmp > 65535)
    4116:	6b a1       	ldd	r22, Y+35	; 0x23
    4118:	7c a1       	ldd	r23, Y+36	; 0x24
    411a:	8d a1       	ldd	r24, Y+37	; 0x25
    411c:	9e a1       	ldd	r25, Y+38	; 0x26
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	3f ef       	ldi	r19, 0xFF	; 255
    4122:	4f e7       	ldi	r20, 0x7F	; 127
    4124:	57 e4       	ldi	r21, 0x47	; 71
    4126:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    412a:	18 16       	cp	r1, r24
    412c:	4c f5       	brge	.+82     	; 0x4180 <LCD_WriteData+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    412e:	6f a1       	ldd	r22, Y+39	; 0x27
    4130:	78 a5       	ldd	r23, Y+40	; 0x28
    4132:	89 a5       	ldd	r24, Y+41	; 0x29
    4134:	9a a5       	ldd	r25, Y+42	; 0x2a
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	40 e2       	ldi	r20, 0x20	; 32
    413c:	51 e4       	ldi	r21, 0x41	; 65
    413e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	bc 01       	movw	r22, r24
    4148:	cd 01       	movw	r24, r26
    414a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414e:	dc 01       	movw	r26, r24
    4150:	cb 01       	movw	r24, r22
    4152:	9a a3       	std	Y+34, r25	; 0x22
    4154:	89 a3       	std	Y+33, r24	; 0x21
    4156:	0f c0       	rjmp	.+30     	; 0x4176 <LCD_WriteData+0x212>
    4158:	88 ec       	ldi	r24, 0xC8	; 200
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	98 a3       	std	Y+32, r25	; 0x20
    415e:	8f 8f       	std	Y+31, r24	; 0x1f
    4160:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4162:	98 a1       	ldd	r25, Y+32	; 0x20
    4164:	01 97       	sbiw	r24, 0x01	; 1
    4166:	f1 f7       	brne	.-4      	; 0x4164 <LCD_WriteData+0x200>
    4168:	98 a3       	std	Y+32, r25	; 0x20
    416a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    416c:	89 a1       	ldd	r24, Y+33	; 0x21
    416e:	9a a1       	ldd	r25, Y+34	; 0x22
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	9a a3       	std	Y+34, r25	; 0x22
    4174:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4176:	89 a1       	ldd	r24, Y+33	; 0x21
    4178:	9a a1       	ldd	r25, Y+34	; 0x22
    417a:	00 97       	sbiw	r24, 0x00	; 0
    417c:	69 f7       	brne	.-38     	; 0x4158 <LCD_WriteData+0x1f4>
    417e:	14 c0       	rjmp	.+40     	; 0x41a8 <LCD_WriteData+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4180:	6b a1       	ldd	r22, Y+35	; 0x23
    4182:	7c a1       	ldd	r23, Y+36	; 0x24
    4184:	8d a1       	ldd	r24, Y+37	; 0x25
    4186:	9e a1       	ldd	r25, Y+38	; 0x26
    4188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418c:	dc 01       	movw	r26, r24
    418e:	cb 01       	movw	r24, r22
    4190:	9a a3       	std	Y+34, r25	; 0x22
    4192:	89 a3       	std	Y+33, r24	; 0x21
    4194:	89 a1       	ldd	r24, Y+33	; 0x21
    4196:	9a a1       	ldd	r25, Y+34	; 0x22
    4198:	9e 8f       	std	Y+30, r25	; 0x1e
    419a:	8d 8f       	std	Y+29, r24	; 0x1d
    419c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    419e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41a0:	01 97       	sbiw	r24, 0x01	; 1
    41a2:	f1 f7       	brne	.-4      	; 0x41a0 <LCD_WriteData+0x23c>
    41a4:	9e 8f       	std	Y+30, r25	; 0x1e
    41a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	DIO_WritePIN(D7 , READ_BIT(data , 3)) ;
    41a8:	89 ad       	ldd	r24, Y+57	; 0x39
    41aa:	86 95       	lsr	r24
    41ac:	86 95       	lsr	r24
    41ae:	86 95       	lsr	r24
    41b0:	98 2f       	mov	r25, r24
    41b2:	91 70       	andi	r25, 0x01	; 1
    41b4:	87 e1       	ldi	r24, 0x17	; 23
    41b6:	69 2f       	mov	r22, r25
    41b8:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D6 , READ_BIT(data , 2)) ;
    41bc:	89 ad       	ldd	r24, Y+57	; 0x39
    41be:	86 95       	lsr	r24
    41c0:	86 95       	lsr	r24
    41c2:	98 2f       	mov	r25, r24
    41c4:	91 70       	andi	r25, 0x01	; 1
    41c6:	86 e1       	ldi	r24, 0x16	; 22
    41c8:	69 2f       	mov	r22, r25
    41ca:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D5 , READ_BIT(data , 1)) ;
    41ce:	89 ad       	ldd	r24, Y+57	; 0x39
    41d0:	86 95       	lsr	r24
    41d2:	98 2f       	mov	r25, r24
    41d4:	91 70       	andi	r25, 0x01	; 1
    41d6:	85 e1       	ldi	r24, 0x15	; 21
    41d8:	69 2f       	mov	r22, r25
    41da:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(D4 , READ_BIT(data , 0)) ;
    41de:	89 ad       	ldd	r24, Y+57	; 0x39
    41e0:	98 2f       	mov	r25, r24
    41e2:	91 70       	andi	r25, 0x01	; 1
    41e4:	84 e1       	ldi	r24, 0x14	; 20
    41e6:	69 2f       	mov	r22, r25
    41e8:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	DIO_WritePIN(EN , HIGH) ;
    41ec:	83 e1       	ldi	r24, 0x13	; 19
    41ee:	61 e0       	ldi	r22, 0x01	; 1
    41f0:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	a0 e8       	ldi	r26, 0x80	; 128
    41fa:	bf e3       	ldi	r27, 0x3F	; 63
    41fc:	89 8f       	std	Y+25, r24	; 0x19
    41fe:	9a 8f       	std	Y+26, r25	; 0x1a
    4200:	ab 8f       	std	Y+27, r26	; 0x1b
    4202:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4204:	69 8d       	ldd	r22, Y+25	; 0x19
    4206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    420a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	4a ef       	ldi	r20, 0xFA	; 250
    4212:	54 e4       	ldi	r21, 0x44	; 68
    4214:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	8d 8b       	std	Y+21, r24	; 0x15
    421e:	9e 8b       	std	Y+22, r25	; 0x16
    4220:	af 8b       	std	Y+23, r26	; 0x17
    4222:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4224:	6d 89       	ldd	r22, Y+21	; 0x15
    4226:	7e 89       	ldd	r23, Y+22	; 0x16
    4228:	8f 89       	ldd	r24, Y+23	; 0x17
    422a:	98 8d       	ldd	r25, Y+24	; 0x18
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	5f e3       	ldi	r21, 0x3F	; 63
    4234:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4238:	88 23       	and	r24, r24
    423a:	2c f4       	brge	.+10     	; 0x4246 <LCD_WriteData+0x2e2>
		__ticks = 1;
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	9c 8b       	std	Y+20, r25	; 0x14
    4242:	8b 8b       	std	Y+19, r24	; 0x13
    4244:	3f c0       	rjmp	.+126    	; 0x42c4 <LCD_WriteData+0x360>
	else if (__tmp > 65535)
    4246:	6d 89       	ldd	r22, Y+21	; 0x15
    4248:	7e 89       	ldd	r23, Y+22	; 0x16
    424a:	8f 89       	ldd	r24, Y+23	; 0x17
    424c:	98 8d       	ldd	r25, Y+24	; 0x18
    424e:	20 e0       	ldi	r18, 0x00	; 0
    4250:	3f ef       	ldi	r19, 0xFF	; 255
    4252:	4f e7       	ldi	r20, 0x7F	; 127
    4254:	57 e4       	ldi	r21, 0x47	; 71
    4256:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    425a:	18 16       	cp	r1, r24
    425c:	4c f5       	brge	.+82     	; 0x42b0 <LCD_WriteData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    425e:	69 8d       	ldd	r22, Y+25	; 0x19
    4260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e2       	ldi	r20, 0x20	; 32
    426c:	51 e4       	ldi	r21, 0x41	; 65
    426e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4272:	dc 01       	movw	r26, r24
    4274:	cb 01       	movw	r24, r22
    4276:	bc 01       	movw	r22, r24
    4278:	cd 01       	movw	r24, r26
    427a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    427e:	dc 01       	movw	r26, r24
    4280:	cb 01       	movw	r24, r22
    4282:	9c 8b       	std	Y+20, r25	; 0x14
    4284:	8b 8b       	std	Y+19, r24	; 0x13
    4286:	0f c0       	rjmp	.+30     	; 0x42a6 <LCD_WriteData+0x342>
    4288:	88 ec       	ldi	r24, 0xC8	; 200
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	9a 8b       	std	Y+18, r25	; 0x12
    428e:	89 8b       	std	Y+17, r24	; 0x11
    4290:	89 89       	ldd	r24, Y+17	; 0x11
    4292:	9a 89       	ldd	r25, Y+18	; 0x12
    4294:	01 97       	sbiw	r24, 0x01	; 1
    4296:	f1 f7       	brne	.-4      	; 0x4294 <LCD_WriteData+0x330>
    4298:	9a 8b       	std	Y+18, r25	; 0x12
    429a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429c:	8b 89       	ldd	r24, Y+19	; 0x13
    429e:	9c 89       	ldd	r25, Y+20	; 0x14
    42a0:	01 97       	sbiw	r24, 0x01	; 1
    42a2:	9c 8b       	std	Y+20, r25	; 0x14
    42a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a6:	8b 89       	ldd	r24, Y+19	; 0x13
    42a8:	9c 89       	ldd	r25, Y+20	; 0x14
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	69 f7       	brne	.-38     	; 0x4288 <LCD_WriteData+0x324>
    42ae:	14 c0       	rjmp	.+40     	; 0x42d8 <LCD_WriteData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42b0:	6d 89       	ldd	r22, Y+21	; 0x15
    42b2:	7e 89       	ldd	r23, Y+22	; 0x16
    42b4:	8f 89       	ldd	r24, Y+23	; 0x17
    42b6:	98 8d       	ldd	r25, Y+24	; 0x18
    42b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42bc:	dc 01       	movw	r26, r24
    42be:	cb 01       	movw	r24, r22
    42c0:	9c 8b       	std	Y+20, r25	; 0x14
    42c2:	8b 8b       	std	Y+19, r24	; 0x13
    42c4:	8b 89       	ldd	r24, Y+19	; 0x13
    42c6:	9c 89       	ldd	r25, Y+20	; 0x14
    42c8:	98 8b       	std	Y+16, r25	; 0x10
    42ca:	8f 87       	std	Y+15, r24	; 0x0f
    42cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    42ce:	98 89       	ldd	r25, Y+16	; 0x10
    42d0:	01 97       	sbiw	r24, 0x01	; 1
    42d2:	f1 f7       	brne	.-4      	; 0x42d0 <LCD_WriteData+0x36c>
    42d4:	98 8b       	std	Y+16, r25	; 0x10
    42d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	DIO_WritePIN(EN , LOW) ;
    42d8:	83 e1       	ldi	r24, 0x13	; 19
    42da:	60 e0       	ldi	r22, 0x00	; 0
    42dc:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	a0 e8       	ldi	r26, 0x80	; 128
    42e6:	bf e3       	ldi	r27, 0x3F	; 63
    42e8:	8b 87       	std	Y+11, r24	; 0x0b
    42ea:	9c 87       	std	Y+12, r25	; 0x0c
    42ec:	ad 87       	std	Y+13, r26	; 0x0d
    42ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	4a ef       	ldi	r20, 0xFA	; 250
    42fe:	54 e4       	ldi	r21, 0x44	; 68
    4300:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	8f 83       	std	Y+7, r24	; 0x07
    430a:	98 87       	std	Y+8, r25	; 0x08
    430c:	a9 87       	std	Y+9, r26	; 0x09
    430e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4310:	6f 81       	ldd	r22, Y+7	; 0x07
    4312:	78 85       	ldd	r23, Y+8	; 0x08
    4314:	89 85       	ldd	r24, Y+9	; 0x09
    4316:	9a 85       	ldd	r25, Y+10	; 0x0a
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	40 e8       	ldi	r20, 0x80	; 128
    431e:	5f e3       	ldi	r21, 0x3F	; 63
    4320:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4324:	88 23       	and	r24, r24
    4326:	2c f4       	brge	.+10     	; 0x4332 <LCD_WriteData+0x3ce>
		__ticks = 1;
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	9e 83       	std	Y+6, r25	; 0x06
    432e:	8d 83       	std	Y+5, r24	; 0x05
    4330:	3f c0       	rjmp	.+126    	; 0x43b0 <LCD_WriteData+0x44c>
	else if (__tmp > 65535)
    4332:	6f 81       	ldd	r22, Y+7	; 0x07
    4334:	78 85       	ldd	r23, Y+8	; 0x08
    4336:	89 85       	ldd	r24, Y+9	; 0x09
    4338:	9a 85       	ldd	r25, Y+10	; 0x0a
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	3f ef       	ldi	r19, 0xFF	; 255
    433e:	4f e7       	ldi	r20, 0x7F	; 127
    4340:	57 e4       	ldi	r21, 0x47	; 71
    4342:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4346:	18 16       	cp	r1, r24
    4348:	4c f5       	brge	.+82     	; 0x439c <LCD_WriteData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434a:	6b 85       	ldd	r22, Y+11	; 0x0b
    434c:	7c 85       	ldd	r23, Y+12	; 0x0c
    434e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4350:	9e 85       	ldd	r25, Y+14	; 0x0e
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	40 e2       	ldi	r20, 0x20	; 32
    4358:	51 e4       	ldi	r21, 0x41	; 65
    435a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	bc 01       	movw	r22, r24
    4364:	cd 01       	movw	r24, r26
    4366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	9e 83       	std	Y+6, r25	; 0x06
    4370:	8d 83       	std	Y+5, r24	; 0x05
    4372:	0f c0       	rjmp	.+30     	; 0x4392 <LCD_WriteData+0x42e>
    4374:	88 ec       	ldi	r24, 0xC8	; 200
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	9c 83       	std	Y+4, r25	; 0x04
    437a:	8b 83       	std	Y+3, r24	; 0x03
    437c:	8b 81       	ldd	r24, Y+3	; 0x03
    437e:	9c 81       	ldd	r25, Y+4	; 0x04
    4380:	01 97       	sbiw	r24, 0x01	; 1
    4382:	f1 f7       	brne	.-4      	; 0x4380 <LCD_WriteData+0x41c>
    4384:	9c 83       	std	Y+4, r25	; 0x04
    4386:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4388:	8d 81       	ldd	r24, Y+5	; 0x05
    438a:	9e 81       	ldd	r25, Y+6	; 0x06
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	9e 83       	std	Y+6, r25	; 0x06
    4390:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4392:	8d 81       	ldd	r24, Y+5	; 0x05
    4394:	9e 81       	ldd	r25, Y+6	; 0x06
    4396:	00 97       	sbiw	r24, 0x00	; 0
    4398:	69 f7       	brne	.-38     	; 0x4374 <LCD_WriteData+0x410>
    439a:	14 c0       	rjmp	.+40     	; 0x43c4 <LCD_WriteData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    439c:	6f 81       	ldd	r22, Y+7	; 0x07
    439e:	78 85       	ldd	r23, Y+8	; 0x08
    43a0:	89 85       	ldd	r24, Y+9	; 0x09
    43a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a8:	dc 01       	movw	r26, r24
    43aa:	cb 01       	movw	r24, r22
    43ac:	9e 83       	std	Y+6, r25	; 0x06
    43ae:	8d 83       	std	Y+5, r24	; 0x05
    43b0:	8d 81       	ldd	r24, Y+5	; 0x05
    43b2:	9e 81       	ldd	r25, Y+6	; 0x06
    43b4:	9a 83       	std	Y+2, r25	; 0x02
    43b6:	89 83       	std	Y+1, r24	; 0x01
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
    43ba:	9a 81       	ldd	r25, Y+2	; 0x02
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	f1 f7       	brne	.-4      	; 0x43bc <LCD_WriteData+0x458>
    43c0:	9a 83       	std	Y+2, r25	; 0x02
    43c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1) ;

}
    43c4:	e9 96       	adiw	r28, 0x39	; 57
    43c6:	0f b6       	in	r0, 0x3f	; 63
    43c8:	f8 94       	cli
    43ca:	de bf       	out	0x3e, r29	; 62
    43cc:	0f be       	out	0x3f, r0	; 63
    43ce:	cd bf       	out	0x3d, r28	; 61
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <LCD_Init>:
void  LCD_Init ()
{
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	cd b7       	in	r28, 0x3d	; 61
    43dc:	de b7       	in	r29, 0x3e	; 62
    43de:	e8 97       	sbiw	r28, 0x38	; 56
    43e0:	0f b6       	in	r0, 0x3f	; 63
    43e2:	f8 94       	cli
    43e4:	de bf       	out	0x3e, r29	; 62
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	cd bf       	out	0x3d, r28	; 61
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	a8 e4       	ldi	r26, 0x48	; 72
    43f0:	b2 e4       	ldi	r27, 0x42	; 66
    43f2:	8d ab       	std	Y+53, r24	; 0x35
    43f4:	9e ab       	std	Y+54, r25	; 0x36
    43f6:	af ab       	std	Y+55, r26	; 0x37
    43f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43fa:	6d a9       	ldd	r22, Y+53	; 0x35
    43fc:	7e a9       	ldd	r23, Y+54	; 0x36
    43fe:	8f a9       	ldd	r24, Y+55	; 0x37
    4400:	98 ad       	ldd	r25, Y+56	; 0x38
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	30 e0       	ldi	r19, 0x00	; 0
    4406:	4a ef       	ldi	r20, 0xFA	; 250
    4408:	54 e4       	ldi	r21, 0x44	; 68
    440a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    440e:	dc 01       	movw	r26, r24
    4410:	cb 01       	movw	r24, r22
    4412:	89 ab       	std	Y+49, r24	; 0x31
    4414:	9a ab       	std	Y+50, r25	; 0x32
    4416:	ab ab       	std	Y+51, r26	; 0x33
    4418:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    441a:	69 a9       	ldd	r22, Y+49	; 0x31
    441c:	7a a9       	ldd	r23, Y+50	; 0x32
    441e:	8b a9       	ldd	r24, Y+51	; 0x33
    4420:	9c a9       	ldd	r25, Y+52	; 0x34
    4422:	20 e0       	ldi	r18, 0x00	; 0
    4424:	30 e0       	ldi	r19, 0x00	; 0
    4426:	40 e8       	ldi	r20, 0x80	; 128
    4428:	5f e3       	ldi	r21, 0x3F	; 63
    442a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    442e:	88 23       	and	r24, r24
    4430:	2c f4       	brge	.+10     	; 0x443c <LCD_Init+0x66>
		__ticks = 1;
    4432:	81 e0       	ldi	r24, 0x01	; 1
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	98 ab       	std	Y+48, r25	; 0x30
    4438:	8f a7       	std	Y+47, r24	; 0x2f
    443a:	3f c0       	rjmp	.+126    	; 0x44ba <LCD_Init+0xe4>
	else if (__tmp > 65535)
    443c:	69 a9       	ldd	r22, Y+49	; 0x31
    443e:	7a a9       	ldd	r23, Y+50	; 0x32
    4440:	8b a9       	ldd	r24, Y+51	; 0x33
    4442:	9c a9       	ldd	r25, Y+52	; 0x34
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	3f ef       	ldi	r19, 0xFF	; 255
    4448:	4f e7       	ldi	r20, 0x7F	; 127
    444a:	57 e4       	ldi	r21, 0x47	; 71
    444c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4450:	18 16       	cp	r1, r24
    4452:	4c f5       	brge	.+82     	; 0x44a6 <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4454:	6d a9       	ldd	r22, Y+53	; 0x35
    4456:	7e a9       	ldd	r23, Y+54	; 0x36
    4458:	8f a9       	ldd	r24, Y+55	; 0x37
    445a:	98 ad       	ldd	r25, Y+56	; 0x38
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	40 e2       	ldi	r20, 0x20	; 32
    4462:	51 e4       	ldi	r21, 0x41	; 65
    4464:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	bc 01       	movw	r22, r24
    446e:	cd 01       	movw	r24, r26
    4470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	98 ab       	std	Y+48, r25	; 0x30
    447a:	8f a7       	std	Y+47, r24	; 0x2f
    447c:	0f c0       	rjmp	.+30     	; 0x449c <LCD_Init+0xc6>
    447e:	88 ec       	ldi	r24, 0xC8	; 200
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	9e a7       	std	Y+46, r25	; 0x2e
    4484:	8d a7       	std	Y+45, r24	; 0x2d
    4486:	8d a5       	ldd	r24, Y+45	; 0x2d
    4488:	9e a5       	ldd	r25, Y+46	; 0x2e
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	f1 f7       	brne	.-4      	; 0x448a <LCD_Init+0xb4>
    448e:	9e a7       	std	Y+46, r25	; 0x2e
    4490:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4492:	8f a5       	ldd	r24, Y+47	; 0x2f
    4494:	98 a9       	ldd	r25, Y+48	; 0x30
    4496:	01 97       	sbiw	r24, 0x01	; 1
    4498:	98 ab       	std	Y+48, r25	; 0x30
    449a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    449c:	8f a5       	ldd	r24, Y+47	; 0x2f
    449e:	98 a9       	ldd	r25, Y+48	; 0x30
    44a0:	00 97       	sbiw	r24, 0x00	; 0
    44a2:	69 f7       	brne	.-38     	; 0x447e <LCD_Init+0xa8>
    44a4:	14 c0       	rjmp	.+40     	; 0x44ce <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44a6:	69 a9       	ldd	r22, Y+49	; 0x31
    44a8:	7a a9       	ldd	r23, Y+50	; 0x32
    44aa:	8b a9       	ldd	r24, Y+51	; 0x33
    44ac:	9c a9       	ldd	r25, Y+52	; 0x34
    44ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	98 ab       	std	Y+48, r25	; 0x30
    44b8:	8f a7       	std	Y+47, r24	; 0x2f
    44ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    44bc:	98 a9       	ldd	r25, Y+48	; 0x30
    44be:	9c a7       	std	Y+44, r25	; 0x2c
    44c0:	8b a7       	std	Y+43, r24	; 0x2b
    44c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    44c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    44c6:	01 97       	sbiw	r24, 0x01	; 1
    44c8:	f1 f7       	brne	.-4      	; 0x44c6 <LCD_Init+0xf0>
    44ca:	9c a7       	std	Y+44, r25	; 0x2c
    44cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50) ; // becuase of if lcd_init () call first
	LCD_WriteCommand(0x02) ;
    44ce:	82 e0       	ldi	r24, 0x02	; 2
    44d0:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
	LCD_WriteCommand(0x28) ;  // 4 bit ,, 2 line ,, 5*7 font
    44d4:	88 e2       	ldi	r24, 0x28	; 40
    44d6:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	a0 e8       	ldi	r26, 0x80	; 128
    44e0:	bf e3       	ldi	r27, 0x3F	; 63
    44e2:	8f a3       	std	Y+39, r24	; 0x27
    44e4:	98 a7       	std	Y+40, r25	; 0x28
    44e6:	a9 a7       	std	Y+41, r26	; 0x29
    44e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ea:	6f a1       	ldd	r22, Y+39	; 0x27
    44ec:	78 a5       	ldd	r23, Y+40	; 0x28
    44ee:	89 a5       	ldd	r24, Y+41	; 0x29
    44f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	4a ef       	ldi	r20, 0xFA	; 250
    44f8:	54 e4       	ldi	r21, 0x44	; 68
    44fa:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	8b a3       	std	Y+35, r24	; 0x23
    4504:	9c a3       	std	Y+36, r25	; 0x24
    4506:	ad a3       	std	Y+37, r26	; 0x25
    4508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    450a:	6b a1       	ldd	r22, Y+35	; 0x23
    450c:	7c a1       	ldd	r23, Y+36	; 0x24
    450e:	8d a1       	ldd	r24, Y+37	; 0x25
    4510:	9e a1       	ldd	r25, Y+38	; 0x26
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	40 e8       	ldi	r20, 0x80	; 128
    4518:	5f e3       	ldi	r21, 0x3F	; 63
    451a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    451e:	88 23       	and	r24, r24
    4520:	2c f4       	brge	.+10     	; 0x452c <LCD_Init+0x156>
		__ticks = 1;
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	9a a3       	std	Y+34, r25	; 0x22
    4528:	89 a3       	std	Y+33, r24	; 0x21
    452a:	3f c0       	rjmp	.+126    	; 0x45aa <LCD_Init+0x1d4>
	else if (__tmp > 65535)
    452c:	6b a1       	ldd	r22, Y+35	; 0x23
    452e:	7c a1       	ldd	r23, Y+36	; 0x24
    4530:	8d a1       	ldd	r24, Y+37	; 0x25
    4532:	9e a1       	ldd	r25, Y+38	; 0x26
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	3f ef       	ldi	r19, 0xFF	; 255
    4538:	4f e7       	ldi	r20, 0x7F	; 127
    453a:	57 e4       	ldi	r21, 0x47	; 71
    453c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4540:	18 16       	cp	r1, r24
    4542:	4c f5       	brge	.+82     	; 0x4596 <LCD_Init+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4544:	6f a1       	ldd	r22, Y+39	; 0x27
    4546:	78 a5       	ldd	r23, Y+40	; 0x28
    4548:	89 a5       	ldd	r24, Y+41	; 0x29
    454a:	9a a5       	ldd	r25, Y+42	; 0x2a
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e2       	ldi	r20, 0x20	; 32
    4552:	51 e4       	ldi	r21, 0x41	; 65
    4554:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	bc 01       	movw	r22, r24
    455e:	cd 01       	movw	r24, r26
    4560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	9a a3       	std	Y+34, r25	; 0x22
    456a:	89 a3       	std	Y+33, r24	; 0x21
    456c:	0f c0       	rjmp	.+30     	; 0x458c <LCD_Init+0x1b6>
    456e:	88 ec       	ldi	r24, 0xC8	; 200
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	98 a3       	std	Y+32, r25	; 0x20
    4574:	8f 8f       	std	Y+31, r24	; 0x1f
    4576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4578:	98 a1       	ldd	r25, Y+32	; 0x20
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	f1 f7       	brne	.-4      	; 0x457a <LCD_Init+0x1a4>
    457e:	98 a3       	std	Y+32, r25	; 0x20
    4580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4582:	89 a1       	ldd	r24, Y+33	; 0x21
    4584:	9a a1       	ldd	r25, Y+34	; 0x22
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	9a a3       	std	Y+34, r25	; 0x22
    458a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    458c:	89 a1       	ldd	r24, Y+33	; 0x21
    458e:	9a a1       	ldd	r25, Y+34	; 0x22
    4590:	00 97       	sbiw	r24, 0x00	; 0
    4592:	69 f7       	brne	.-38     	; 0x456e <LCD_Init+0x198>
    4594:	14 c0       	rjmp	.+40     	; 0x45be <LCD_Init+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4596:	6b a1       	ldd	r22, Y+35	; 0x23
    4598:	7c a1       	ldd	r23, Y+36	; 0x24
    459a:	8d a1       	ldd	r24, Y+37	; 0x25
    459c:	9e a1       	ldd	r25, Y+38	; 0x26
    459e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	9a a3       	std	Y+34, r25	; 0x22
    45a8:	89 a3       	std	Y+33, r24	; 0x21
    45aa:	89 a1       	ldd	r24, Y+33	; 0x21
    45ac:	9a a1       	ldd	r25, Y+34	; 0x22
    45ae:	9e 8f       	std	Y+30, r25	; 0x1e
    45b0:	8d 8f       	std	Y+29, r24	; 0x1d
    45b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45b6:	01 97       	sbiw	r24, 0x01	; 1
    45b8:	f1 f7       	brne	.-4      	; 0x45b6 <LCD_Init+0x1e0>
    45ba:	9e 8f       	std	Y+30, r25	; 0x1e
    45bc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	LCD_WriteCommand(0x0c) ;  // 0x0e ,, 0x0f cursor
    45be:	8c e0       	ldi	r24, 0x0C	; 12
    45c0:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	a0 e8       	ldi	r26, 0x80	; 128
    45ca:	bf e3       	ldi	r27, 0x3F	; 63
    45cc:	89 8f       	std	Y+25, r24	; 0x19
    45ce:	9a 8f       	std	Y+26, r25	; 0x1a
    45d0:	ab 8f       	std	Y+27, r26	; 0x1b
    45d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d4:	69 8d       	ldd	r22, Y+25	; 0x19
    45d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45dc:	20 e0       	ldi	r18, 0x00	; 0
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	4a ef       	ldi	r20, 0xFA	; 250
    45e2:	54 e4       	ldi	r21, 0x44	; 68
    45e4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    45e8:	dc 01       	movw	r26, r24
    45ea:	cb 01       	movw	r24, r22
    45ec:	8d 8b       	std	Y+21, r24	; 0x15
    45ee:	9e 8b       	std	Y+22, r25	; 0x16
    45f0:	af 8b       	std	Y+23, r26	; 0x17
    45f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45f4:	6d 89       	ldd	r22, Y+21	; 0x15
    45f6:	7e 89       	ldd	r23, Y+22	; 0x16
    45f8:	8f 89       	ldd	r24, Y+23	; 0x17
    45fa:	98 8d       	ldd	r25, Y+24	; 0x18
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	40 e8       	ldi	r20, 0x80	; 128
    4602:	5f e3       	ldi	r21, 0x3F	; 63
    4604:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4608:	88 23       	and	r24, r24
    460a:	2c f4       	brge	.+10     	; 0x4616 <LCD_Init+0x240>
		__ticks = 1;
    460c:	81 e0       	ldi	r24, 0x01	; 1
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	9c 8b       	std	Y+20, r25	; 0x14
    4612:	8b 8b       	std	Y+19, r24	; 0x13
    4614:	3f c0       	rjmp	.+126    	; 0x4694 <LCD_Init+0x2be>
	else if (__tmp > 65535)
    4616:	6d 89       	ldd	r22, Y+21	; 0x15
    4618:	7e 89       	ldd	r23, Y+22	; 0x16
    461a:	8f 89       	ldd	r24, Y+23	; 0x17
    461c:	98 8d       	ldd	r25, Y+24	; 0x18
    461e:	20 e0       	ldi	r18, 0x00	; 0
    4620:	3f ef       	ldi	r19, 0xFF	; 255
    4622:	4f e7       	ldi	r20, 0x7F	; 127
    4624:	57 e4       	ldi	r21, 0x47	; 71
    4626:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    462a:	18 16       	cp	r1, r24
    462c:	4c f5       	brge	.+82     	; 0x4680 <LCD_Init+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    462e:	69 8d       	ldd	r22, Y+25	; 0x19
    4630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	40 e2       	ldi	r20, 0x20	; 32
    463c:	51 e4       	ldi	r21, 0x41	; 65
    463e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	bc 01       	movw	r22, r24
    4648:	cd 01       	movw	r24, r26
    464a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    464e:	dc 01       	movw	r26, r24
    4650:	cb 01       	movw	r24, r22
    4652:	9c 8b       	std	Y+20, r25	; 0x14
    4654:	8b 8b       	std	Y+19, r24	; 0x13
    4656:	0f c0       	rjmp	.+30     	; 0x4676 <LCD_Init+0x2a0>
    4658:	88 ec       	ldi	r24, 0xC8	; 200
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	9a 8b       	std	Y+18, r25	; 0x12
    465e:	89 8b       	std	Y+17, r24	; 0x11
    4660:	89 89       	ldd	r24, Y+17	; 0x11
    4662:	9a 89       	ldd	r25, Y+18	; 0x12
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <LCD_Init+0x28e>
    4668:	9a 8b       	std	Y+18, r25	; 0x12
    466a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    466c:	8b 89       	ldd	r24, Y+19	; 0x13
    466e:	9c 89       	ldd	r25, Y+20	; 0x14
    4670:	01 97       	sbiw	r24, 0x01	; 1
    4672:	9c 8b       	std	Y+20, r25	; 0x14
    4674:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4676:	8b 89       	ldd	r24, Y+19	; 0x13
    4678:	9c 89       	ldd	r25, Y+20	; 0x14
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	69 f7       	brne	.-38     	; 0x4658 <LCD_Init+0x282>
    467e:	14 c0       	rjmp	.+40     	; 0x46a8 <LCD_Init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4680:	6d 89       	ldd	r22, Y+21	; 0x15
    4682:	7e 89       	ldd	r23, Y+22	; 0x16
    4684:	8f 89       	ldd	r24, Y+23	; 0x17
    4686:	98 8d       	ldd	r25, Y+24	; 0x18
    4688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	9c 8b       	std	Y+20, r25	; 0x14
    4692:	8b 8b       	std	Y+19, r24	; 0x13
    4694:	8b 89       	ldd	r24, Y+19	; 0x13
    4696:	9c 89       	ldd	r25, Y+20	; 0x14
    4698:	98 8b       	std	Y+16, r25	; 0x10
    469a:	8f 87       	std	Y+15, r24	; 0x0f
    469c:	8f 85       	ldd	r24, Y+15	; 0x0f
    469e:	98 89       	ldd	r25, Y+16	; 0x10
    46a0:	01 97       	sbiw	r24, 0x01	; 1
    46a2:	f1 f7       	brne	.-4      	; 0x46a0 <LCD_Init+0x2ca>
    46a4:	98 8b       	std	Y+16, r25	; 0x10
    46a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	LCD_WriteCommand(0x01) ; // clear screen
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
    46ae:	80 e0       	ldi	r24, 0x00	; 0
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	a0 e0       	ldi	r26, 0x00	; 0
    46b4:	b0 e4       	ldi	r27, 0x40	; 64
    46b6:	8b 87       	std	Y+11, r24	; 0x0b
    46b8:	9c 87       	std	Y+12, r25	; 0x0c
    46ba:	ad 87       	std	Y+13, r26	; 0x0d
    46bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46be:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	30 e0       	ldi	r19, 0x00	; 0
    46ca:	4a ef       	ldi	r20, 0xFA	; 250
    46cc:	54 e4       	ldi	r21, 0x44	; 68
    46ce:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	8f 83       	std	Y+7, r24	; 0x07
    46d8:	98 87       	std	Y+8, r25	; 0x08
    46da:	a9 87       	std	Y+9, r26	; 0x09
    46dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    46de:	6f 81       	ldd	r22, Y+7	; 0x07
    46e0:	78 85       	ldd	r23, Y+8	; 0x08
    46e2:	89 85       	ldd	r24, Y+9	; 0x09
    46e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e8       	ldi	r20, 0x80	; 128
    46ec:	5f e3       	ldi	r21, 0x3F	; 63
    46ee:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    46f2:	88 23       	and	r24, r24
    46f4:	2c f4       	brge	.+10     	; 0x4700 <LCD_Init+0x32a>
		__ticks = 1;
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	9e 83       	std	Y+6, r25	; 0x06
    46fc:	8d 83       	std	Y+5, r24	; 0x05
    46fe:	3f c0       	rjmp	.+126    	; 0x477e <LCD_Init+0x3a8>
	else if (__tmp > 65535)
    4700:	6f 81       	ldd	r22, Y+7	; 0x07
    4702:	78 85       	ldd	r23, Y+8	; 0x08
    4704:	89 85       	ldd	r24, Y+9	; 0x09
    4706:	9a 85       	ldd	r25, Y+10	; 0x0a
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	3f ef       	ldi	r19, 0xFF	; 255
    470c:	4f e7       	ldi	r20, 0x7F	; 127
    470e:	57 e4       	ldi	r21, 0x47	; 71
    4710:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4714:	18 16       	cp	r1, r24
    4716:	4c f5       	brge	.+82     	; 0x476a <LCD_Init+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4718:	6b 85       	ldd	r22, Y+11	; 0x0b
    471a:	7c 85       	ldd	r23, Y+12	; 0x0c
    471c:	8d 85       	ldd	r24, Y+13	; 0x0d
    471e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4720:	20 e0       	ldi	r18, 0x00	; 0
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	40 e2       	ldi	r20, 0x20	; 32
    4726:	51 e4       	ldi	r21, 0x41	; 65
    4728:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	bc 01       	movw	r22, r24
    4732:	cd 01       	movw	r24, r26
    4734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4738:	dc 01       	movw	r26, r24
    473a:	cb 01       	movw	r24, r22
    473c:	9e 83       	std	Y+6, r25	; 0x06
    473e:	8d 83       	std	Y+5, r24	; 0x05
    4740:	0f c0       	rjmp	.+30     	; 0x4760 <LCD_Init+0x38a>
    4742:	88 ec       	ldi	r24, 0xC8	; 200
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	9c 83       	std	Y+4, r25	; 0x04
    4748:	8b 83       	std	Y+3, r24	; 0x03
    474a:	8b 81       	ldd	r24, Y+3	; 0x03
    474c:	9c 81       	ldd	r25, Y+4	; 0x04
    474e:	01 97       	sbiw	r24, 0x01	; 1
    4750:	f1 f7       	brne	.-4      	; 0x474e <LCD_Init+0x378>
    4752:	9c 83       	std	Y+4, r25	; 0x04
    4754:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4756:	8d 81       	ldd	r24, Y+5	; 0x05
    4758:	9e 81       	ldd	r25, Y+6	; 0x06
    475a:	01 97       	sbiw	r24, 0x01	; 1
    475c:	9e 83       	std	Y+6, r25	; 0x06
    475e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4760:	8d 81       	ldd	r24, Y+5	; 0x05
    4762:	9e 81       	ldd	r25, Y+6	; 0x06
    4764:	00 97       	sbiw	r24, 0x00	; 0
    4766:	69 f7       	brne	.-38     	; 0x4742 <LCD_Init+0x36c>
    4768:	14 c0       	rjmp	.+40     	; 0x4792 <LCD_Init+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    476a:	6f 81       	ldd	r22, Y+7	; 0x07
    476c:	78 85       	ldd	r23, Y+8	; 0x08
    476e:	89 85       	ldd	r24, Y+9	; 0x09
    4770:	9a 85       	ldd	r25, Y+10	; 0x0a
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	9e 83       	std	Y+6, r25	; 0x06
    477c:	8d 83       	std	Y+5, r24	; 0x05
    477e:	8d 81       	ldd	r24, Y+5	; 0x05
    4780:	9e 81       	ldd	r25, Y+6	; 0x06
    4782:	9a 83       	std	Y+2, r25	; 0x02
    4784:	89 83       	std	Y+1, r24	; 0x01
    4786:	89 81       	ldd	r24, Y+1	; 0x01
    4788:	9a 81       	ldd	r25, Y+2	; 0x02
    478a:	01 97       	sbiw	r24, 0x01	; 1
    478c:	f1 f7       	brne	.-4      	; 0x478a <LCD_Init+0x3b4>
    478e:	9a 83       	std	Y+2, r25	; 0x02
    4790:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
	LCD_WriteCommand(0x06) ; // Address increase no shift
    4792:	86 e0       	ldi	r24, 0x06	; 6
    4794:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
	
}
    4798:	e8 96       	adiw	r28, 0x38	; 56
    479a:	0f b6       	in	r0, 0x3f	; 63
    479c:	f8 94       	cli
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	cf 91       	pop	r28
    47a6:	df 91       	pop	r29
    47a8:	08 95       	ret

000047aa <IntToString>:

#endif


static void IntToString (u8* str, s64 num)
{
    47aa:	8f 92       	push	r8
    47ac:	9f 92       	push	r9
    47ae:	af 92       	push	r10
    47b0:	bf 92       	push	r11
    47b2:	cf 92       	push	r12
    47b4:	df 92       	push	r13
    47b6:	ef 92       	push	r14
    47b8:	ff 92       	push	r15
    47ba:	0f 93       	push	r16
    47bc:	1f 93       	push	r17
    47be:	df 93       	push	r29
    47c0:	cf 93       	push	r28
    47c2:	cd b7       	in	r28, 0x3d	; 61
    47c4:	de b7       	in	r29, 0x3e	; 62
    47c6:	c2 54       	subi	r28, 0x42	; 66
    47c8:	d0 40       	sbci	r29, 0x00	; 0
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	f8 94       	cli
    47ce:	de bf       	out	0x3e, r29	; 62
    47d0:	0f be       	out	0x3f, r0	; 63
    47d2:	cd bf       	out	0x3d, r28	; 61
    47d4:	9a 87       	std	Y+10, r25	; 0x0a
    47d6:	89 87       	std	Y+9, r24	; 0x09
    47d8:	0b 87       	std	Y+11, r16	; 0x0b
    47da:	1c 87       	std	Y+12, r17	; 0x0c
    47dc:	2d 87       	std	Y+13, r18	; 0x0d
    47de:	3e 87       	std	Y+14, r19	; 0x0e
    47e0:	4f 87       	std	Y+15, r20	; 0x0f
    47e2:	58 8b       	std	Y+16, r21	; 0x10
    47e4:	69 8b       	std	Y+17, r22	; 0x11
    47e6:	7a 8b       	std	Y+18, r23	; 0x12
	int i =0, j, temp, flag = 1 ;
    47e8:	18 86       	std	Y+8, r1	; 0x08
    47ea:	1f 82       	std	Y+7, r1	; 0x07
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	9a 83       	std	Y+2, r25	; 0x02
    47f2:	89 83       	std	Y+1, r24	; 0x01
	if(num==0)
    47f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    47f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    47f8:	89 2b       	or	r24, r25
    47fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    47fc:	89 2b       	or	r24, r25
    47fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4800:	89 2b       	or	r24, r25
    4802:	9f 85       	ldd	r25, Y+15	; 0x0f
    4804:	89 2b       	or	r24, r25
    4806:	98 89       	ldd	r25, Y+16	; 0x10
    4808:	89 2b       	or	r24, r25
    480a:	99 89       	ldd	r25, Y+17	; 0x11
    480c:	89 2b       	or	r24, r25
    480e:	9a 89       	ldd	r25, Y+18	; 0x12
    4810:	89 2b       	or	r24, r25
    4812:	88 23       	and	r24, r24
    4814:	b9 f4       	brne	.+46     	; 0x4844 <IntToString+0x9a>
	{
		str[i] = '0' ;
    4816:	2f 81       	ldd	r18, Y+7	; 0x07
    4818:	38 85       	ldd	r19, Y+8	; 0x08
    481a:	89 85       	ldd	r24, Y+9	; 0x09
    481c:	9a 85       	ldd	r25, Y+10	; 0x0a
    481e:	fc 01       	movw	r30, r24
    4820:	e2 0f       	add	r30, r18
    4822:	f3 1f       	adc	r31, r19
    4824:	80 e3       	ldi	r24, 0x30	; 48
    4826:	80 83       	st	Z, r24
		str[++i] = '\0' ;
    4828:	8f 81       	ldd	r24, Y+7	; 0x07
    482a:	98 85       	ldd	r25, Y+8	; 0x08
    482c:	01 96       	adiw	r24, 0x01	; 1
    482e:	98 87       	std	Y+8, r25	; 0x08
    4830:	8f 83       	std	Y+7, r24	; 0x07
    4832:	2f 81       	ldd	r18, Y+7	; 0x07
    4834:	38 85       	ldd	r19, Y+8	; 0x08
    4836:	89 85       	ldd	r24, Y+9	; 0x09
    4838:	9a 85       	ldd	r25, Y+10	; 0x0a
    483a:	fc 01       	movw	r30, r24
    483c:	e2 0f       	add	r30, r18
    483e:	f3 1f       	adc	r31, r19
    4840:	10 82       	st	Z, r1
    4842:	7e c2       	rjmp	.+1276   	; 0x4d40 <IntToString+0x596>
	}
	else
	{
		if (num < 0 )
    4844:	8a 89       	ldd	r24, Y+18	; 0x12
    4846:	88 23       	and	r24, r24
    4848:	d4 f0       	brlt	.+52     	; 0x487e <IntToString+0xd4>
    484a:	8a 89       	ldd	r24, Y+18	; 0x12
    484c:	88 23       	and	r24, r24
    484e:	09 f0       	breq	.+2      	; 0x4852 <IntToString+0xa8>
    4850:	74 c1       	rjmp	.+744    	; 0x4b3a <IntToString+0x390>
    4852:	89 89       	ldd	r24, Y+17	; 0x11
    4854:	88 23       	and	r24, r24
    4856:	09 f0       	breq	.+2      	; 0x485a <IntToString+0xb0>
    4858:	70 c1       	rjmp	.+736    	; 0x4b3a <IntToString+0x390>
    485a:	88 89       	ldd	r24, Y+16	; 0x10
    485c:	88 23       	and	r24, r24
    485e:	09 f0       	breq	.+2      	; 0x4862 <IntToString+0xb8>
    4860:	6c c1       	rjmp	.+728    	; 0x4b3a <IntToString+0x390>
    4862:	8f 85       	ldd	r24, Y+15	; 0x0f
    4864:	88 23       	and	r24, r24
    4866:	09 f0       	breq	.+2      	; 0x486a <IntToString+0xc0>
    4868:	68 c1       	rjmp	.+720    	; 0x4b3a <IntToString+0x390>
    486a:	8e 85       	ldd	r24, Y+14	; 0x0e
    486c:	88 23       	and	r24, r24
    486e:	09 f0       	breq	.+2      	; 0x4872 <IntToString+0xc8>
    4870:	64 c1       	rjmp	.+712    	; 0x4b3a <IntToString+0x390>
    4872:	8d 85       	ldd	r24, Y+13	; 0x0d
    4874:	88 23       	and	r24, r24
    4876:	09 f0       	breq	.+2      	; 0x487a <IntToString+0xd0>
    4878:	60 c1       	rjmp	.+704    	; 0x4b3a <IntToString+0x390>
    487a:	4c 85       	ldd	r20, Y+12	; 0x0c
    487c:	5e c1       	rjmp	.+700    	; 0x4b3a <IntToString+0x390>
		{
			str[i++] = '-' ;
    487e:	2f 81       	ldd	r18, Y+7	; 0x07
    4880:	38 85       	ldd	r19, Y+8	; 0x08
    4882:	89 85       	ldd	r24, Y+9	; 0x09
    4884:	9a 85       	ldd	r25, Y+10	; 0x0a
    4886:	fc 01       	movw	r30, r24
    4888:	e2 0f       	add	r30, r18
    488a:	f3 1f       	adc	r31, r19
    488c:	8d e2       	ldi	r24, 0x2D	; 45
    488e:	80 83       	st	Z, r24
    4890:	8f 81       	ldd	r24, Y+7	; 0x07
    4892:	98 85       	ldd	r25, Y+8	; 0x08
    4894:	01 96       	adiw	r24, 0x01	; 1
    4896:	98 87       	std	Y+8, r25	; 0x08
    4898:	8f 83       	std	Y+7, r24	; 0x07
			num *= -1 ;
    489a:	1c 8a       	std	Y+20, r1	; 0x14
    489c:	1d 8a       	std	Y+21, r1	; 0x15
    489e:	1e 8a       	std	Y+22, r1	; 0x16
    48a0:	1f 8a       	std	Y+23, r1	; 0x17
    48a2:	18 8e       	std	Y+24, r1	; 0x18
    48a4:	19 8e       	std	Y+25, r1	; 0x19
    48a6:	1a 8e       	std	Y+26, r1	; 0x1a
    48a8:	1b 8e       	std	Y+27, r1	; 0x1b
    48aa:	5b 85       	ldd	r21, Y+11	; 0x0b
    48ac:	5c 8f       	std	Y+28, r21	; 0x1c
    48ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    48b0:	8d 8f       	std	Y+29, r24	; 0x1d
    48b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    48b4:	9e 8f       	std	Y+30, r25	; 0x1e
    48b6:	ee 85       	ldd	r30, Y+14	; 0x0e
    48b8:	ef 8f       	std	Y+31, r30	; 0x1f
    48ba:	ff 85       	ldd	r31, Y+15	; 0x0f
    48bc:	f8 a3       	std	Y+32, r31	; 0x20
    48be:	48 89       	ldd	r20, Y+16	; 0x10
    48c0:	49 a3       	std	Y+33, r20	; 0x21
    48c2:	59 89       	ldd	r21, Y+17	; 0x11
    48c4:	5a a3       	std	Y+34, r21	; 0x22
    48c6:	8a 89       	ldd	r24, Y+18	; 0x12
    48c8:	8b a3       	std	Y+35, r24	; 0x23
    48ca:	9c 89       	ldd	r25, Y+20	; 0x14
    48cc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    48ce:	9e 1b       	sub	r25, r30
    48d0:	9c a3       	std	Y+36, r25	; 0x24
    48d2:	f1 e0       	ldi	r31, 0x01	; 1
    48d4:	fc a7       	std	Y+44, r31	; 0x2c
    48d6:	4c a1       	ldd	r20, Y+36	; 0x24
    48d8:	5c 89       	ldd	r21, Y+20	; 0x14
    48da:	54 17       	cp	r21, r20
    48dc:	08 f0       	brcs	.+2      	; 0x48e0 <IntToString+0x136>
    48de:	1c a6       	std	Y+44, r1	; 0x2c
    48e0:	8d 89       	ldd	r24, Y+21	; 0x15
    48e2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    48e4:	89 1b       	sub	r24, r25
    48e6:	8d a3       	std	Y+37, r24	; 0x25
    48e8:	e1 e0       	ldi	r30, 0x01	; 1
    48ea:	ed a7       	std	Y+45, r30	; 0x2d
    48ec:	fd a1       	ldd	r31, Y+37	; 0x25
    48ee:	4d 89       	ldd	r20, Y+21	; 0x15
    48f0:	4f 17       	cp	r20, r31
    48f2:	08 f0       	brcs	.+2      	; 0x48f6 <IntToString+0x14c>
    48f4:	1d a6       	std	Y+45, r1	; 0x2d
    48f6:	5d a1       	ldd	r21, Y+37	; 0x25
    48f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    48fa:	58 1b       	sub	r21, r24
    48fc:	5e a7       	std	Y+46, r21	; 0x2e
    48fe:	91 e0       	ldi	r25, 0x01	; 1
    4900:	9f a7       	std	Y+47, r25	; 0x2f
    4902:	ee a5       	ldd	r30, Y+46	; 0x2e
    4904:	fd a1       	ldd	r31, Y+37	; 0x25
    4906:	fe 17       	cp	r31, r30
    4908:	08 f0       	brcs	.+2      	; 0x490c <IntToString+0x162>
    490a:	1f a6       	std	Y+47, r1	; 0x2f
    490c:	4d a5       	ldd	r20, Y+45	; 0x2d
    490e:	5f a5       	ldd	r21, Y+47	; 0x2f
    4910:	45 2b       	or	r20, r21
    4912:	4d a7       	std	Y+45, r20	; 0x2d
    4914:	8e a5       	ldd	r24, Y+46	; 0x2e
    4916:	8d a3       	std	Y+37, r24	; 0x25
    4918:	9e 89       	ldd	r25, Y+22	; 0x16
    491a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    491c:	9e 1b       	sub	r25, r30
    491e:	9e a3       	std	Y+38, r25	; 0x26
    4920:	f1 e0       	ldi	r31, 0x01	; 1
    4922:	f8 ab       	std	Y+48, r31	; 0x30
    4924:	4e a1       	ldd	r20, Y+38	; 0x26
    4926:	5e 89       	ldd	r21, Y+22	; 0x16
    4928:	54 17       	cp	r21, r20
    492a:	08 f0       	brcs	.+2      	; 0x492e <IntToString+0x184>
    492c:	18 aa       	std	Y+48, r1	; 0x30
    492e:	8e a1       	ldd	r24, Y+38	; 0x26
    4930:	9d a5       	ldd	r25, Y+45	; 0x2d
    4932:	89 1b       	sub	r24, r25
    4934:	89 ab       	std	Y+49, r24	; 0x31
    4936:	e1 e0       	ldi	r30, 0x01	; 1
    4938:	ea ab       	std	Y+50, r30	; 0x32
    493a:	f9 a9       	ldd	r31, Y+49	; 0x31
    493c:	4e a1       	ldd	r20, Y+38	; 0x26
    493e:	4f 17       	cp	r20, r31
    4940:	08 f0       	brcs	.+2      	; 0x4944 <IntToString+0x19a>
    4942:	1a aa       	std	Y+50, r1	; 0x32
    4944:	58 a9       	ldd	r21, Y+48	; 0x30
    4946:	8a a9       	ldd	r24, Y+50	; 0x32
    4948:	58 2b       	or	r21, r24
    494a:	58 ab       	std	Y+48, r21	; 0x30
    494c:	99 a9       	ldd	r25, Y+49	; 0x31
    494e:	9e a3       	std	Y+38, r25	; 0x26
    4950:	ef 89       	ldd	r30, Y+23	; 0x17
    4952:	ff 8d       	ldd	r31, Y+31	; 0x1f
    4954:	ef 1b       	sub	r30, r31
    4956:	ef a3       	std	Y+39, r30	; 0x27
    4958:	41 e0       	ldi	r20, 0x01	; 1
    495a:	4b ab       	std	Y+51, r20	; 0x33
    495c:	5f a1       	ldd	r21, Y+39	; 0x27
    495e:	8f 89       	ldd	r24, Y+23	; 0x17
    4960:	85 17       	cp	r24, r21
    4962:	08 f0       	brcs	.+2      	; 0x4966 <IntToString+0x1bc>
    4964:	1b aa       	std	Y+51, r1	; 0x33
    4966:	9f a1       	ldd	r25, Y+39	; 0x27
    4968:	e8 a9       	ldd	r30, Y+48	; 0x30
    496a:	9e 1b       	sub	r25, r30
    496c:	9c ab       	std	Y+52, r25	; 0x34
    496e:	f1 e0       	ldi	r31, 0x01	; 1
    4970:	fd ab       	std	Y+53, r31	; 0x35
    4972:	4c a9       	ldd	r20, Y+52	; 0x34
    4974:	5f a1       	ldd	r21, Y+39	; 0x27
    4976:	54 17       	cp	r21, r20
    4978:	08 f0       	brcs	.+2      	; 0x497c <IntToString+0x1d2>
    497a:	1d aa       	std	Y+53, r1	; 0x35
    497c:	8b a9       	ldd	r24, Y+51	; 0x33
    497e:	9d a9       	ldd	r25, Y+53	; 0x35
    4980:	89 2b       	or	r24, r25
    4982:	8b ab       	std	Y+51, r24	; 0x33
    4984:	ec a9       	ldd	r30, Y+52	; 0x34
    4986:	ef a3       	std	Y+39, r30	; 0x27
    4988:	f8 8d       	ldd	r31, Y+24	; 0x18
    498a:	48 a1       	ldd	r20, Y+32	; 0x20
    498c:	f4 1b       	sub	r31, r20
    498e:	f8 a7       	std	Y+40, r31	; 0x28
    4990:	51 e0       	ldi	r21, 0x01	; 1
    4992:	5e ab       	std	Y+54, r21	; 0x36
    4994:	88 a5       	ldd	r24, Y+40	; 0x28
    4996:	98 8d       	ldd	r25, Y+24	; 0x18
    4998:	98 17       	cp	r25, r24
    499a:	08 f0       	brcs	.+2      	; 0x499e <IntToString+0x1f4>
    499c:	1e aa       	std	Y+54, r1	; 0x36
    499e:	e8 a5       	ldd	r30, Y+40	; 0x28
    49a0:	fb a9       	ldd	r31, Y+51	; 0x33
    49a2:	ef 1b       	sub	r30, r31
    49a4:	ef ab       	std	Y+55, r30	; 0x37
    49a6:	41 e0       	ldi	r20, 0x01	; 1
    49a8:	48 af       	std	Y+56, r20	; 0x38
    49aa:	5f a9       	ldd	r21, Y+55	; 0x37
    49ac:	88 a5       	ldd	r24, Y+40	; 0x28
    49ae:	85 17       	cp	r24, r21
    49b0:	08 f0       	brcs	.+2      	; 0x49b4 <IntToString+0x20a>
    49b2:	18 ae       	std	Y+56, r1	; 0x38
    49b4:	9e a9       	ldd	r25, Y+54	; 0x36
    49b6:	e8 ad       	ldd	r30, Y+56	; 0x38
    49b8:	9e 2b       	or	r25, r30
    49ba:	9e ab       	std	Y+54, r25	; 0x36
    49bc:	ff a9       	ldd	r31, Y+55	; 0x37
    49be:	f8 a7       	std	Y+40, r31	; 0x28
    49c0:	49 8d       	ldd	r20, Y+25	; 0x19
    49c2:	59 a1       	ldd	r21, Y+33	; 0x21
    49c4:	45 1b       	sub	r20, r21
    49c6:	49 a7       	std	Y+41, r20	; 0x29
    49c8:	81 e0       	ldi	r24, 0x01	; 1
    49ca:	89 af       	std	Y+57, r24	; 0x39
    49cc:	99 a5       	ldd	r25, Y+41	; 0x29
    49ce:	e9 8d       	ldd	r30, Y+25	; 0x19
    49d0:	e9 17       	cp	r30, r25
    49d2:	08 f0       	brcs	.+2      	; 0x49d6 <IntToString+0x22c>
    49d4:	19 ae       	std	Y+57, r1	; 0x39
    49d6:	f9 a5       	ldd	r31, Y+41	; 0x29
    49d8:	4e a9       	ldd	r20, Y+54	; 0x36
    49da:	f4 1b       	sub	r31, r20
    49dc:	fa af       	std	Y+58, r31	; 0x3a
    49de:	51 e0       	ldi	r21, 0x01	; 1
    49e0:	5b af       	std	Y+59, r21	; 0x3b
    49e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    49e4:	99 a5       	ldd	r25, Y+41	; 0x29
    49e6:	98 17       	cp	r25, r24
    49e8:	08 f0       	brcs	.+2      	; 0x49ec <IntToString+0x242>
    49ea:	1b ae       	std	Y+59, r1	; 0x3b
    49ec:	e9 ad       	ldd	r30, Y+57	; 0x39
    49ee:	fb ad       	ldd	r31, Y+59	; 0x3b
    49f0:	ef 2b       	or	r30, r31
    49f2:	e9 af       	std	Y+57, r30	; 0x39
    49f4:	4a ad       	ldd	r20, Y+58	; 0x3a
    49f6:	49 a7       	std	Y+41, r20	; 0x29
    49f8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    49fa:	8a a1       	ldd	r24, Y+34	; 0x22
    49fc:	58 1b       	sub	r21, r24
    49fe:	5a a7       	std	Y+42, r21	; 0x2a
    4a00:	91 e0       	ldi	r25, 0x01	; 1
    4a02:	9c af       	std	Y+60, r25	; 0x3c
    4a04:	ea a5       	ldd	r30, Y+42	; 0x2a
    4a06:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4a08:	fe 17       	cp	r31, r30
    4a0a:	08 f0       	brcs	.+2      	; 0x4a0e <IntToString+0x264>
    4a0c:	1c ae       	std	Y+60, r1	; 0x3c
    4a0e:	4a a5       	ldd	r20, Y+42	; 0x2a
    4a10:	59 ad       	ldd	r21, Y+57	; 0x39
    4a12:	45 1b       	sub	r20, r21
    4a14:	4d af       	std	Y+61, r20	; 0x3d
    4a16:	81 e0       	ldi	r24, 0x01	; 1
    4a18:	8e af       	std	Y+62, r24	; 0x3e
    4a1a:	9d ad       	ldd	r25, Y+61	; 0x3d
    4a1c:	ea a5       	ldd	r30, Y+42	; 0x2a
    4a1e:	e9 17       	cp	r30, r25
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <IntToString+0x27a>
    4a22:	1e ae       	std	Y+62, r1	; 0x3e
    4a24:	fc ad       	ldd	r31, Y+60	; 0x3c
    4a26:	4e ad       	ldd	r20, Y+62	; 0x3e
    4a28:	f4 2b       	or	r31, r20
    4a2a:	fc af       	std	Y+60, r31	; 0x3c
    4a2c:	5d ad       	ldd	r21, Y+61	; 0x3d
    4a2e:	5a a7       	std	Y+42, r21	; 0x2a
    4a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a32:	9b a1       	ldd	r25, Y+35	; 0x23
    4a34:	89 1b       	sub	r24, r25
    4a36:	8b a7       	std	Y+43, r24	; 0x2b
    4a38:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a3a:	ec ad       	ldd	r30, Y+60	; 0x3c
    4a3c:	8e 1b       	sub	r24, r30
    4a3e:	8b a7       	std	Y+43, r24	; 0x2b
    4a40:	fc a1       	ldd	r31, Y+36	; 0x24
    4a42:	fb 87       	std	Y+11, r31	; 0x0b
    4a44:	4d a1       	ldd	r20, Y+37	; 0x25
    4a46:	4c 87       	std	Y+12, r20	; 0x0c
    4a48:	5e a1       	ldd	r21, Y+38	; 0x26
    4a4a:	5d 87       	std	Y+13, r21	; 0x0d
    4a4c:	8f a1       	ldd	r24, Y+39	; 0x27
    4a4e:	8e 87       	std	Y+14, r24	; 0x0e
    4a50:	98 a5       	ldd	r25, Y+40	; 0x28
    4a52:	9f 87       	std	Y+15, r25	; 0x0f
    4a54:	e9 a5       	ldd	r30, Y+41	; 0x29
    4a56:	e8 8b       	std	Y+16, r30	; 0x10
    4a58:	fa a5       	ldd	r31, Y+42	; 0x2a
    4a5a:	f9 8b       	std	Y+17, r31	; 0x11
    4a5c:	4b a5       	ldd	r20, Y+43	; 0x2b
    4a5e:	4a 8b       	std	Y+18, r20	; 0x12
			flag = 0 ;
    4a60:	1a 82       	std	Y+2, r1	; 0x02
    4a62:	19 82       	std	Y+1, r1	; 0x01
    4a64:	6a c0       	rjmp	.+212    	; 0x4b3a <IntToString+0x390>
		}
		for(  ; num > 0 ; ++i)
		{
			str[i] = (num%10) + '0' ;
    4a66:	2f 81       	ldd	r18, Y+7	; 0x07
    4a68:	38 85       	ldd	r19, Y+8	; 0x08
    4a6a:	89 85       	ldd	r24, Y+9	; 0x09
    4a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a6e:	4c 01       	movw	r8, r24
    4a70:	82 0e       	add	r8, r18
    4a72:	93 1e       	adc	r9, r19
    4a74:	ab 84       	ldd	r10, Y+11	; 0x0b
    4a76:	bc 84       	ldd	r11, Y+12	; 0x0c
    4a78:	cd 84       	ldd	r12, Y+13	; 0x0d
    4a7a:	de 84       	ldd	r13, Y+14	; 0x0e
    4a7c:	ef 84       	ldd	r14, Y+15	; 0x0f
    4a7e:	f8 88       	ldd	r15, Y+16	; 0x10
    4a80:	09 89       	ldd	r16, Y+17	; 0x11
    4a82:	1a 89       	ldd	r17, Y+18	; 0x12
    4a84:	2a 2d       	mov	r18, r10
    4a86:	3b 2d       	mov	r19, r11
    4a88:	4c 2d       	mov	r20, r12
    4a8a:	5d 2d       	mov	r21, r13
    4a8c:	6e 2d       	mov	r22, r14
    4a8e:	7f 2d       	mov	r23, r15
    4a90:	80 2f       	mov	r24, r16
    4a92:	91 2f       	mov	r25, r17
    4a94:	0f 2e       	mov	r0, r31
    4a96:	fa e0       	ldi	r31, 0x0A	; 10
    4a98:	af 2e       	mov	r10, r31
    4a9a:	f0 2d       	mov	r31, r0
    4a9c:	bb 24       	eor	r11, r11
    4a9e:	cc 24       	eor	r12, r12
    4aa0:	dd 24       	eor	r13, r13
    4aa2:	ee 24       	eor	r14, r14
    4aa4:	ff 24       	eor	r15, r15
    4aa6:	00 e0       	ldi	r16, 0x00	; 0
    4aa8:	10 e0       	ldi	r17, 0x00	; 0
    4aaa:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    4aae:	a2 2e       	mov	r10, r18
    4ab0:	b3 2e       	mov	r11, r19
    4ab2:	c4 2e       	mov	r12, r20
    4ab4:	d5 2e       	mov	r13, r21
    4ab6:	e6 2e       	mov	r14, r22
    4ab8:	f7 2e       	mov	r15, r23
    4aba:	08 2f       	mov	r16, r24
    4abc:	19 2f       	mov	r17, r25
    4abe:	2a 2d       	mov	r18, r10
    4ac0:	3b 2d       	mov	r19, r11
    4ac2:	4c 2d       	mov	r20, r12
    4ac4:	5d 2d       	mov	r21, r13
    4ac6:	6e 2d       	mov	r22, r14
    4ac8:	7f 2d       	mov	r23, r15
    4aca:	80 2f       	mov	r24, r16
    4acc:	91 2f       	mov	r25, r17
    4ace:	82 2f       	mov	r24, r18
    4ad0:	80 5d       	subi	r24, 0xD0	; 208
    4ad2:	f4 01       	movw	r30, r8
    4ad4:	80 83       	st	Z, r24
			num /= 10 ;
    4ad6:	ab 84       	ldd	r10, Y+11	; 0x0b
    4ad8:	bc 84       	ldd	r11, Y+12	; 0x0c
    4ada:	cd 84       	ldd	r12, Y+13	; 0x0d
    4adc:	de 84       	ldd	r13, Y+14	; 0x0e
    4ade:	ef 84       	ldd	r14, Y+15	; 0x0f
    4ae0:	f8 88       	ldd	r15, Y+16	; 0x10
    4ae2:	09 89       	ldd	r16, Y+17	; 0x11
    4ae4:	1a 89       	ldd	r17, Y+18	; 0x12
    4ae6:	2a 2d       	mov	r18, r10
    4ae8:	3b 2d       	mov	r19, r11
    4aea:	4c 2d       	mov	r20, r12
    4aec:	5d 2d       	mov	r21, r13
    4aee:	6e 2d       	mov	r22, r14
    4af0:	7f 2d       	mov	r23, r15
    4af2:	80 2f       	mov	r24, r16
    4af4:	91 2f       	mov	r25, r17
    4af6:	0f 2e       	mov	r0, r31
    4af8:	fa e0       	ldi	r31, 0x0A	; 10
    4afa:	af 2e       	mov	r10, r31
    4afc:	f0 2d       	mov	r31, r0
    4afe:	bb 24       	eor	r11, r11
    4b00:	cc 24       	eor	r12, r12
    4b02:	dd 24       	eor	r13, r13
    4b04:	ee 24       	eor	r14, r14
    4b06:	ff 24       	eor	r15, r15
    4b08:	00 e0       	ldi	r16, 0x00	; 0
    4b0a:	10 e0       	ldi	r17, 0x00	; 0
    4b0c:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    4b10:	a2 2e       	mov	r10, r18
    4b12:	b3 2e       	mov	r11, r19
    4b14:	c4 2e       	mov	r12, r20
    4b16:	d5 2e       	mov	r13, r21
    4b18:	e6 2e       	mov	r14, r22
    4b1a:	f7 2e       	mov	r15, r23
    4b1c:	08 2f       	mov	r16, r24
    4b1e:	19 2f       	mov	r17, r25
    4b20:	ab 86       	std	Y+11, r10	; 0x0b
    4b22:	bc 86       	std	Y+12, r11	; 0x0c
    4b24:	cd 86       	std	Y+13, r12	; 0x0d
    4b26:	de 86       	std	Y+14, r13	; 0x0e
    4b28:	ef 86       	std	Y+15, r14	; 0x0f
    4b2a:	f8 8a       	std	Y+16, r15	; 0x10
    4b2c:	09 8b       	std	Y+17, r16	; 0x11
    4b2e:	1a 8b       	std	Y+18, r17	; 0x12
		{
			str[i++] = '-' ;
			num *= -1 ;
			flag = 0 ;
		}
		for(  ; num > 0 ; ++i)
    4b30:	8f 81       	ldd	r24, Y+7	; 0x07
    4b32:	98 85       	ldd	r25, Y+8	; 0x08
    4b34:	01 96       	adiw	r24, 0x01	; 1
    4b36:	98 87       	std	Y+8, r25	; 0x08
    4b38:	8f 83       	std	Y+7, r24	; 0x07
    4b3a:	8a 89       	ldd	r24, Y+18	; 0x12
    4b3c:	18 16       	cp	r1, r24
    4b3e:	0c f4       	brge	.+2      	; 0x4b42 <IntToString+0x398>
    4b40:	92 cf       	rjmp	.-220    	; 0x4a66 <IntToString+0x2bc>
    4b42:	8a 89       	ldd	r24, Y+18	; 0x12
    4b44:	88 23       	and	r24, r24
    4b46:	71 f5       	brne	.+92     	; 0x4ba4 <IntToString+0x3fa>
    4b48:	89 89       	ldd	r24, Y+17	; 0x11
    4b4a:	88 23       	and	r24, r24
    4b4c:	09 f0       	breq	.+2      	; 0x4b50 <IntToString+0x3a6>
    4b4e:	8b cf       	rjmp	.-234    	; 0x4a66 <IntToString+0x2bc>
    4b50:	89 89       	ldd	r24, Y+17	; 0x11
    4b52:	88 23       	and	r24, r24
    4b54:	39 f5       	brne	.+78     	; 0x4ba4 <IntToString+0x3fa>
    4b56:	88 89       	ldd	r24, Y+16	; 0x10
    4b58:	88 23       	and	r24, r24
    4b5a:	09 f0       	breq	.+2      	; 0x4b5e <IntToString+0x3b4>
    4b5c:	84 cf       	rjmp	.-248    	; 0x4a66 <IntToString+0x2bc>
    4b5e:	88 89       	ldd	r24, Y+16	; 0x10
    4b60:	88 23       	and	r24, r24
    4b62:	01 f5       	brne	.+64     	; 0x4ba4 <IntToString+0x3fa>
    4b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b66:	88 23       	and	r24, r24
    4b68:	09 f0       	breq	.+2      	; 0x4b6c <IntToString+0x3c2>
    4b6a:	7d cf       	rjmp	.-262    	; 0x4a66 <IntToString+0x2bc>
    4b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b6e:	88 23       	and	r24, r24
    4b70:	c9 f4       	brne	.+50     	; 0x4ba4 <IntToString+0x3fa>
    4b72:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b74:	88 23       	and	r24, r24
    4b76:	09 f0       	breq	.+2      	; 0x4b7a <IntToString+0x3d0>
    4b78:	76 cf       	rjmp	.-276    	; 0x4a66 <IntToString+0x2bc>
    4b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b7c:	88 23       	and	r24, r24
    4b7e:	91 f4       	brne	.+36     	; 0x4ba4 <IntToString+0x3fa>
    4b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b82:	88 23       	and	r24, r24
    4b84:	09 f0       	breq	.+2      	; 0x4b88 <IntToString+0x3de>
    4b86:	6f cf       	rjmp	.-290    	; 0x4a66 <IntToString+0x2bc>
    4b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b8a:	88 23       	and	r24, r24
    4b8c:	59 f4       	brne	.+22     	; 0x4ba4 <IntToString+0x3fa>
    4b8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b90:	88 23       	and	r24, r24
    4b92:	09 f0       	breq	.+2      	; 0x4b96 <IntToString+0x3ec>
    4b94:	68 cf       	rjmp	.-304    	; 0x4a66 <IntToString+0x2bc>
    4b96:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b98:	88 23       	and	r24, r24
    4b9a:	21 f4       	brne	.+8      	; 0x4ba4 <IntToString+0x3fa>
    4b9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b9e:	88 23       	and	r24, r24
    4ba0:	09 f0       	breq	.+2      	; 0x4ba4 <IntToString+0x3fa>
    4ba2:	61 cf       	rjmp	.-318    	; 0x4a66 <IntToString+0x2bc>
		{
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
    4ba4:	89 81       	ldd	r24, Y+1	; 0x01
    4ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba8:	00 97       	sbiw	r24, 0x00	; 0
    4baa:	09 f4       	brne	.+2      	; 0x4bae <IntToString+0x404>
    4bac:	62 c0       	rjmp	.+196    	; 0x4c72 <IntToString+0x4c8>
		{
			for( j= 0; j < (i/2) ; ++j)
    4bae:	1e 82       	std	Y+6, r1	; 0x06
    4bb0:	1d 82       	std	Y+5, r1	; 0x05
    4bb2:	3c c0       	rjmp	.+120    	; 0x4c2c <IntToString+0x482>
			{
				temp = str[i-j-1] ;
    4bb4:	2f 81       	ldd	r18, Y+7	; 0x07
    4bb6:	38 85       	ldd	r19, Y+8	; 0x08
    4bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bba:	9e 81       	ldd	r25, Y+6	; 0x06
    4bbc:	a9 01       	movw	r20, r18
    4bbe:	48 1b       	sub	r20, r24
    4bc0:	59 0b       	sbc	r21, r25
    4bc2:	ca 01       	movw	r24, r20
    4bc4:	9c 01       	movw	r18, r24
    4bc6:	21 50       	subi	r18, 0x01	; 1
    4bc8:	30 40       	sbci	r19, 0x00	; 0
    4bca:	89 85       	ldd	r24, Y+9	; 0x09
    4bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bce:	fc 01       	movw	r30, r24
    4bd0:	e2 0f       	add	r30, r18
    4bd2:	f3 1f       	adc	r31, r19
    4bd4:	80 81       	ld	r24, Z
    4bd6:	88 2f       	mov	r24, r24
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	9c 83       	std	Y+4, r25	; 0x04
    4bdc:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j-1] = str[j] ;
    4bde:	2f 81       	ldd	r18, Y+7	; 0x07
    4be0:	38 85       	ldd	r19, Y+8	; 0x08
    4be2:	8d 81       	ldd	r24, Y+5	; 0x05
    4be4:	9e 81       	ldd	r25, Y+6	; 0x06
    4be6:	f9 01       	movw	r30, r18
    4be8:	e8 1b       	sub	r30, r24
    4bea:	f9 0b       	sbc	r31, r25
    4bec:	cf 01       	movw	r24, r30
    4bee:	9c 01       	movw	r18, r24
    4bf0:	21 50       	subi	r18, 0x01	; 1
    4bf2:	30 40       	sbci	r19, 0x00	; 0
    4bf4:	89 85       	ldd	r24, Y+9	; 0x09
    4bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf8:	dc 01       	movw	r26, r24
    4bfa:	a2 0f       	add	r26, r18
    4bfc:	b3 1f       	adc	r27, r19
    4bfe:	2d 81       	ldd	r18, Y+5	; 0x05
    4c00:	3e 81       	ldd	r19, Y+6	; 0x06
    4c02:	89 85       	ldd	r24, Y+9	; 0x09
    4c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c06:	fc 01       	movw	r30, r24
    4c08:	e2 0f       	add	r30, r18
    4c0a:	f3 1f       	adc	r31, r19
    4c0c:	80 81       	ld	r24, Z
    4c0e:	8c 93       	st	X, r24
				str[j] = temp ;
    4c10:	2d 81       	ldd	r18, Y+5	; 0x05
    4c12:	3e 81       	ldd	r19, Y+6	; 0x06
    4c14:	89 85       	ldd	r24, Y+9	; 0x09
    4c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c18:	fc 01       	movw	r30, r24
    4c1a:	e2 0f       	add	r30, r18
    4c1c:	f3 1f       	adc	r31, r19
    4c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c20:	80 83       	st	Z, r24
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
		{
			for( j= 0; j < (i/2) ; ++j)
    4c22:	8d 81       	ldd	r24, Y+5	; 0x05
    4c24:	9e 81       	ldd	r25, Y+6	; 0x06
    4c26:	01 96       	adiw	r24, 0x01	; 1
    4c28:	9e 83       	std	Y+6, r25	; 0x06
    4c2a:	8d 83       	std	Y+5, r24	; 0x05
    4c2c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c2e:	98 85       	ldd	r25, Y+8	; 0x08
    4c30:	21 96       	adiw	r28, 0x01	; 1
    4c32:	9f af       	std	Y+63, r25	; 0x3f
    4c34:	8e af       	std	Y+62, r24	; 0x3e
    4c36:	21 97       	sbiw	r28, 0x01	; 1
    4c38:	21 96       	adiw	r28, 0x01	; 1
    4c3a:	4e ad       	ldd	r20, Y+62	; 0x3e
    4c3c:	5f ad       	ldd	r21, Y+63	; 0x3f
    4c3e:	21 97       	sbiw	r28, 0x01	; 1
    4c40:	55 23       	and	r21, r21
    4c42:	4c f4       	brge	.+18     	; 0x4c56 <IntToString+0x4ac>
    4c44:	21 96       	adiw	r28, 0x01	; 1
    4c46:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c48:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c4a:	21 97       	sbiw	r28, 0x01	; 1
    4c4c:	01 96       	adiw	r24, 0x01	; 1
    4c4e:	21 96       	adiw	r28, 0x01	; 1
    4c50:	9f af       	std	Y+63, r25	; 0x3f
    4c52:	8e af       	std	Y+62, r24	; 0x3e
    4c54:	21 97       	sbiw	r28, 0x01	; 1
    4c56:	21 96       	adiw	r28, 0x01	; 1
    4c58:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c5c:	21 97       	sbiw	r28, 0x01	; 1
    4c5e:	95 95       	asr	r25
    4c60:	87 95       	ror	r24
    4c62:	9c 01       	movw	r18, r24
    4c64:	8d 81       	ldd	r24, Y+5	; 0x05
    4c66:	9e 81       	ldd	r25, Y+6	; 0x06
    4c68:	82 17       	cp	r24, r18
    4c6a:	93 07       	cpc	r25, r19
    4c6c:	0c f4       	brge	.+2      	; 0x4c70 <IntToString+0x4c6>
    4c6e:	a2 cf       	rjmp	.-188    	; 0x4bb4 <IntToString+0x40a>
    4c70:	5f c0       	rjmp	.+190    	; 0x4d30 <IntToString+0x586>
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	9e 83       	std	Y+6, r25	; 0x06
    4c78:	8d 83       	std	Y+5, r24	; 0x05
    4c7a:	38 c0       	rjmp	.+112    	; 0x4cec <IntToString+0x542>
			{
				temp = str[i-j] ;
    4c7c:	2f 81       	ldd	r18, Y+7	; 0x07
    4c7e:	38 85       	ldd	r19, Y+8	; 0x08
    4c80:	8d 81       	ldd	r24, Y+5	; 0x05
    4c82:	9e 81       	ldd	r25, Y+6	; 0x06
    4c84:	f9 01       	movw	r30, r18
    4c86:	e8 1b       	sub	r30, r24
    4c88:	f9 0b       	sbc	r31, r25
    4c8a:	cf 01       	movw	r24, r30
    4c8c:	9c 01       	movw	r18, r24
    4c8e:	89 85       	ldd	r24, Y+9	; 0x09
    4c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c92:	fc 01       	movw	r30, r24
    4c94:	e2 0f       	add	r30, r18
    4c96:	f3 1f       	adc	r31, r19
    4c98:	80 81       	ld	r24, Z
    4c9a:	88 2f       	mov	r24, r24
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	9c 83       	std	Y+4, r25	; 0x04
    4ca0:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j] = str[j] ;
    4ca2:	2f 81       	ldd	r18, Y+7	; 0x07
    4ca4:	38 85       	ldd	r19, Y+8	; 0x08
    4ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    4caa:	a9 01       	movw	r20, r18
    4cac:	48 1b       	sub	r20, r24
    4cae:	59 0b       	sbc	r21, r25
    4cb0:	ca 01       	movw	r24, r20
    4cb2:	9c 01       	movw	r18, r24
    4cb4:	89 85       	ldd	r24, Y+9	; 0x09
    4cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cb8:	dc 01       	movw	r26, r24
    4cba:	a2 0f       	add	r26, r18
    4cbc:	b3 1f       	adc	r27, r19
    4cbe:	2d 81       	ldd	r18, Y+5	; 0x05
    4cc0:	3e 81       	ldd	r19, Y+6	; 0x06
    4cc2:	89 85       	ldd	r24, Y+9	; 0x09
    4cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	e2 0f       	add	r30, r18
    4cca:	f3 1f       	adc	r31, r19
    4ccc:	80 81       	ld	r24, Z
    4cce:	8c 93       	st	X, r24
				str[j] = temp ;
    4cd0:	2d 81       	ldd	r18, Y+5	; 0x05
    4cd2:	3e 81       	ldd	r19, Y+6	; 0x06
    4cd4:	89 85       	ldd	r24, Y+9	; 0x09
    4cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd8:	fc 01       	movw	r30, r24
    4cda:	e2 0f       	add	r30, r18
    4cdc:	f3 1f       	adc	r31, r19
    4cde:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce0:	80 83       	st	Z, r24
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    4ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce6:	01 96       	adiw	r24, 0x01	; 1
    4ce8:	9e 83       	std	Y+6, r25	; 0x06
    4cea:	8d 83       	std	Y+5, r24	; 0x05
    4cec:	8f 81       	ldd	r24, Y+7	; 0x07
    4cee:	98 85       	ldd	r25, Y+8	; 0x08
    4cf0:	23 96       	adiw	r28, 0x03	; 3
    4cf2:	9f af       	std	Y+63, r25	; 0x3f
    4cf4:	8e af       	std	Y+62, r24	; 0x3e
    4cf6:	23 97       	sbiw	r28, 0x03	; 3
    4cf8:	23 96       	adiw	r28, 0x03	; 3
    4cfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    4cfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    4cfe:	23 97       	sbiw	r28, 0x03	; 3
    4d00:	99 23       	and	r25, r25
    4d02:	4c f4       	brge	.+18     	; 0x4d16 <IntToString+0x56c>
    4d04:	23 96       	adiw	r28, 0x03	; 3
    4d06:	ee ad       	ldd	r30, Y+62	; 0x3e
    4d08:	ff ad       	ldd	r31, Y+63	; 0x3f
    4d0a:	23 97       	sbiw	r28, 0x03	; 3
    4d0c:	31 96       	adiw	r30, 0x01	; 1
    4d0e:	23 96       	adiw	r28, 0x03	; 3
    4d10:	ff af       	std	Y+63, r31	; 0x3f
    4d12:	ee af       	std	Y+62, r30	; 0x3e
    4d14:	23 97       	sbiw	r28, 0x03	; 3
    4d16:	23 96       	adiw	r28, 0x03	; 3
    4d18:	8e ad       	ldd	r24, Y+62	; 0x3e
    4d1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    4d1c:	23 97       	sbiw	r28, 0x03	; 3
    4d1e:	95 95       	asr	r25
    4d20:	87 95       	ror	r24
    4d22:	9c 01       	movw	r18, r24
    4d24:	8d 81       	ldd	r24, Y+5	; 0x05
    4d26:	9e 81       	ldd	r25, Y+6	; 0x06
    4d28:	28 17       	cp	r18, r24
    4d2a:	39 07       	cpc	r19, r25
    4d2c:	0c f0       	brlt	.+2      	; 0x4d30 <IntToString+0x586>
    4d2e:	a6 cf       	rjmp	.-180    	; 0x4c7c <IntToString+0x4d2>
				str[j] = temp ;
			}
		}


		str[i] = 0 ;
    4d30:	8f 81       	ldd	r24, Y+7	; 0x07
    4d32:	98 85       	ldd	r25, Y+8	; 0x08
    4d34:	29 85       	ldd	r18, Y+9	; 0x09
    4d36:	3a 85       	ldd	r19, Y+10	; 0x0a
    4d38:	f9 01       	movw	r30, r18
    4d3a:	e8 0f       	add	r30, r24
    4d3c:	f9 1f       	adc	r31, r25
    4d3e:	10 82       	st	Z, r1

	}
}
    4d40:	ce 5b       	subi	r28, 0xBE	; 190
    4d42:	df 4f       	sbci	r29, 0xFF	; 255
    4d44:	0f b6       	in	r0, 0x3f	; 63
    4d46:	f8 94       	cli
    4d48:	de bf       	out	0x3e, r29	; 62
    4d4a:	0f be       	out	0x3f, r0	; 63
    4d4c:	cd bf       	out	0x3d, r28	; 61
    4d4e:	cf 91       	pop	r28
    4d50:	df 91       	pop	r29
    4d52:	1f 91       	pop	r17
    4d54:	0f 91       	pop	r16
    4d56:	ff 90       	pop	r15
    4d58:	ef 90       	pop	r14
    4d5a:	df 90       	pop	r13
    4d5c:	cf 90       	pop	r12
    4d5e:	bf 90       	pop	r11
    4d60:	af 90       	pop	r10
    4d62:	9f 90       	pop	r9
    4d64:	8f 90       	pop	r8
    4d66:	08 95       	ret

00004d68 <LCD_WriteChar>:



void LCD_WriteChar (u8 ch)   
{
    4d68:	df 93       	push	r29
    4d6a:	cf 93       	push	r28
    4d6c:	0f 92       	push	r0
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(ch) ;
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_WriteData>
}
    4d7a:	0f 90       	pop	r0
    4d7c:	cf 91       	pop	r28
    4d7e:	df 91       	pop	r29
    4d80:	08 95       	ret

00004d82 <LCD_WriteString>:
void LCD_WriteString(u8* str)
{
    4d82:	df 93       	push	r29
    4d84:	cf 93       	push	r28
    4d86:	00 d0       	rcall	.+0      	; 0x4d88 <LCD_WriteString+0x6>
    4d88:	00 d0       	rcall	.+0      	; 0x4d8a <LCD_WriteString+0x8>
    4d8a:	cd b7       	in	r28, 0x3d	; 61
    4d8c:	de b7       	in	r29, 0x3e	; 62
    4d8e:	9c 83       	std	Y+4, r25	; 0x04
    4d90:	8b 83       	std	Y+3, r24	; 0x03
	int i ; 
	for(i=0 ; str[i] ; ++i)
    4d92:	1a 82       	std	Y+2, r1	; 0x02
    4d94:	19 82       	std	Y+1, r1	; 0x01
    4d96:	0f c0       	rjmp	.+30     	; 0x4db6 <LCD_WriteString+0x34>
	{
		LCD_WriteData(str[i]) ;
    4d98:	29 81       	ldd	r18, Y+1	; 0x01
    4d9a:	3a 81       	ldd	r19, Y+2	; 0x02
    4d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4da0:	fc 01       	movw	r30, r24
    4da2:	e2 0f       	add	r30, r18
    4da4:	f3 1f       	adc	r31, r19
    4da6:	80 81       	ld	r24, Z
    4da8:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <LCD_WriteData>
	LCD_WriteData(ch) ;
}
void LCD_WriteString(u8* str)
{
	int i ; 
	for(i=0 ; str[i] ; ++i)
    4dac:	89 81       	ldd	r24, Y+1	; 0x01
    4dae:	9a 81       	ldd	r25, Y+2	; 0x02
    4db0:	01 96       	adiw	r24, 0x01	; 1
    4db2:	9a 83       	std	Y+2, r25	; 0x02
    4db4:	89 83       	std	Y+1, r24	; 0x01
    4db6:	29 81       	ldd	r18, Y+1	; 0x01
    4db8:	3a 81       	ldd	r19, Y+2	; 0x02
    4dba:	8b 81       	ldd	r24, Y+3	; 0x03
    4dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    4dbe:	fc 01       	movw	r30, r24
    4dc0:	e2 0f       	add	r30, r18
    4dc2:	f3 1f       	adc	r31, r19
    4dc4:	80 81       	ld	r24, Z
    4dc6:	88 23       	and	r24, r24
    4dc8:	39 f7       	brne	.-50     	; 0x4d98 <LCD_WriteString+0x16>
	{
		LCD_WriteData(str[i]) ;
	}
}
    4dca:	0f 90       	pop	r0
    4dcc:	0f 90       	pop	r0
    4dce:	0f 90       	pop	r0
    4dd0:	0f 90       	pop	r0
    4dd2:	cf 91       	pop	r28
    4dd4:	df 91       	pop	r29
    4dd6:	08 95       	ret

00004dd8 <LCD_WriteNumber>:

void LCD_WriteNumber (s64 num)
{
    4dd8:	8f 92       	push	r8
    4dda:	9f 92       	push	r9
    4ddc:	af 92       	push	r10
    4dde:	bf 92       	push	r11
    4de0:	cf 92       	push	r12
    4de2:	df 92       	push	r13
    4de4:	ef 92       	push	r14
    4de6:	ff 92       	push	r15
    4de8:	0f 93       	push	r16
    4dea:	1f 93       	push	r17
    4dec:	df 93       	push	r29
    4dee:	cf 93       	push	r28
    4df0:	cd b7       	in	r28, 0x3d	; 61
    4df2:	de b7       	in	r29, 0x3e	; 62
    4df4:	a8 97       	sbiw	r28, 0x28	; 40
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	f8 94       	cli
    4dfa:	de bf       	out	0x3e, r29	; 62
    4dfc:	0f be       	out	0x3f, r0	; 63
    4dfe:	cd bf       	out	0x3d, r28	; 61
    4e00:	29 a3       	std	Y+33, r18	; 0x21
    4e02:	3a a3       	std	Y+34, r19	; 0x22
    4e04:	4b a3       	std	Y+35, r20	; 0x23
    4e06:	5c a3       	std	Y+36, r21	; 0x24
    4e08:	6d a3       	std	Y+37, r22	; 0x25
    4e0a:	7e a3       	std	Y+38, r23	; 0x26
    4e0c:	8f a3       	std	Y+39, r24	; 0x27
    4e0e:	98 a7       	std	Y+40, r25	; 0x28
	u8 inttostring_arr [32] = {0} ;
    4e10:	80 e2       	ldi	r24, 0x20	; 32
    4e12:	fe 01       	movw	r30, r28
    4e14:	31 96       	adiw	r30, 0x01	; 1
    4e16:	df 01       	movw	r26, r30
    4e18:	98 2f       	mov	r25, r24
    4e1a:	1d 92       	st	X+, r1
    4e1c:	9a 95       	dec	r25
    4e1e:	e9 f7       	brne	.-6      	; 0x4e1a <LCD_WriteNumber+0x42>
	IntToString(inttostring_arr , num) ;
    4e20:	89 a0       	ldd	r8, Y+33	; 0x21
    4e22:	9a a0       	ldd	r9, Y+34	; 0x22
    4e24:	ab a0       	ldd	r10, Y+35	; 0x23
    4e26:	bc a0       	ldd	r11, Y+36	; 0x24
    4e28:	cd a0       	ldd	r12, Y+37	; 0x25
    4e2a:	de a0       	ldd	r13, Y+38	; 0x26
    4e2c:	ef a0       	ldd	r14, Y+39	; 0x27
    4e2e:	f8 a4       	ldd	r15, Y+40	; 0x28
    4e30:	ce 01       	movw	r24, r28
    4e32:	01 96       	adiw	r24, 0x01	; 1
    4e34:	08 2d       	mov	r16, r8
    4e36:	19 2d       	mov	r17, r9
    4e38:	2a 2d       	mov	r18, r10
    4e3a:	3b 2d       	mov	r19, r11
    4e3c:	4c 2d       	mov	r20, r12
    4e3e:	5d 2d       	mov	r21, r13
    4e40:	6e 2d       	mov	r22, r14
    4e42:	7f 2d       	mov	r23, r15
    4e44:	0e 94 d5 23 	call	0x47aa	; 0x47aa <IntToString>
	LCD_WriteString(inttostring_arr) ;
    4e48:	ce 01       	movw	r24, r28
    4e4a:	01 96       	adiw	r24, 0x01	; 1
    4e4c:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <LCD_WriteString>
}
    4e50:	a8 96       	adiw	r28, 0x28	; 40
    4e52:	0f b6       	in	r0, 0x3f	; 63
    4e54:	f8 94       	cli
    4e56:	de bf       	out	0x3e, r29	; 62
    4e58:	0f be       	out	0x3f, r0	; 63
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	cf 91       	pop	r28
    4e5e:	df 91       	pop	r29
    4e60:	1f 91       	pop	r17
    4e62:	0f 91       	pop	r16
    4e64:	ff 90       	pop	r15
    4e66:	ef 90       	pop	r14
    4e68:	df 90       	pop	r13
    4e6a:	cf 90       	pop	r12
    4e6c:	bf 90       	pop	r11
    4e6e:	af 90       	pop	r10
    4e70:	9f 90       	pop	r9
    4e72:	8f 90       	pop	r8
    4e74:	08 95       	ret

00004e76 <LCD_ClearDisplay>:
void LCD_ClearDisplay (void) 
{
    4e76:	df 93       	push	r29
    4e78:	cf 93       	push	r28
    4e7a:	cd b7       	in	r28, 0x3d	; 61
    4e7c:	de b7       	in	r29, 0x3e	; 62
    4e7e:	2e 97       	sbiw	r28, 0x0e	; 14
    4e80:	0f b6       	in	r0, 0x3f	; 63
    4e82:	f8 94       	cli
    4e84:	de bf       	out	0x3e, r29	; 62
    4e86:	0f be       	out	0x3f, r0	; 63
    4e88:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteCommand(0x01) ; // clear screen
    4e8a:	81 e0       	ldi	r24, 0x01	; 1
    4e8c:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
    4e90:	80 e0       	ldi	r24, 0x00	; 0
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	a0 e0       	ldi	r26, 0x00	; 0
    4e96:	b0 e4       	ldi	r27, 0x40	; 64
    4e98:	8b 87       	std	Y+11, r24	; 0x0b
    4e9a:	9c 87       	std	Y+12, r25	; 0x0c
    4e9c:	ad 87       	std	Y+13, r26	; 0x0d
    4e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ea8:	20 e0       	ldi	r18, 0x00	; 0
    4eaa:	30 e0       	ldi	r19, 0x00	; 0
    4eac:	4a ef       	ldi	r20, 0xFA	; 250
    4eae:	54 e4       	ldi	r21, 0x44	; 68
    4eb0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4eb4:	dc 01       	movw	r26, r24
    4eb6:	cb 01       	movw	r24, r22
    4eb8:	8f 83       	std	Y+7, r24	; 0x07
    4eba:	98 87       	std	Y+8, r25	; 0x08
    4ebc:	a9 87       	std	Y+9, r26	; 0x09
    4ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ec2:	78 85       	ldd	r23, Y+8	; 0x08
    4ec4:	89 85       	ldd	r24, Y+9	; 0x09
    4ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	40 e8       	ldi	r20, 0x80	; 128
    4ece:	5f e3       	ldi	r21, 0x3F	; 63
    4ed0:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    4ed4:	88 23       	and	r24, r24
    4ed6:	2c f4       	brge	.+10     	; 0x4ee2 <LCD_ClearDisplay+0x6c>
		__ticks = 1;
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	9e 83       	std	Y+6, r25	; 0x06
    4ede:	8d 83       	std	Y+5, r24	; 0x05
    4ee0:	3f c0       	rjmp	.+126    	; 0x4f60 <LCD_ClearDisplay+0xea>
	else if (__tmp > 65535)
    4ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ee4:	78 85       	ldd	r23, Y+8	; 0x08
    4ee6:	89 85       	ldd	r24, Y+9	; 0x09
    4ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eea:	20 e0       	ldi	r18, 0x00	; 0
    4eec:	3f ef       	ldi	r19, 0xFF	; 255
    4eee:	4f e7       	ldi	r20, 0x7F	; 127
    4ef0:	57 e4       	ldi	r21, 0x47	; 71
    4ef2:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    4ef6:	18 16       	cp	r1, r24
    4ef8:	4c f5       	brge	.+82     	; 0x4f4c <LCD_ClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4efa:	6b 85       	ldd	r22, Y+11	; 0x0b
    4efc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4efe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f00:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f02:	20 e0       	ldi	r18, 0x00	; 0
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	40 e2       	ldi	r20, 0x20	; 32
    4f08:	51 e4       	ldi	r21, 0x41	; 65
    4f0a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	bc 01       	movw	r22, r24
    4f14:	cd 01       	movw	r24, r26
    4f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1a:	dc 01       	movw	r26, r24
    4f1c:	cb 01       	movw	r24, r22
    4f1e:	9e 83       	std	Y+6, r25	; 0x06
    4f20:	8d 83       	std	Y+5, r24	; 0x05
    4f22:	0f c0       	rjmp	.+30     	; 0x4f42 <LCD_ClearDisplay+0xcc>
    4f24:	88 ec       	ldi	r24, 0xC8	; 200
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	9c 83       	std	Y+4, r25	; 0x04
    4f2a:	8b 83       	std	Y+3, r24	; 0x03
    4f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	f1 f7       	brne	.-4      	; 0x4f30 <LCD_ClearDisplay+0xba>
    4f34:	9c 83       	std	Y+4, r25	; 0x04
    4f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f38:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3c:	01 97       	sbiw	r24, 0x01	; 1
    4f3e:	9e 83       	std	Y+6, r25	; 0x06
    4f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f42:	8d 81       	ldd	r24, Y+5	; 0x05
    4f44:	9e 81       	ldd	r25, Y+6	; 0x06
    4f46:	00 97       	sbiw	r24, 0x00	; 0
    4f48:	69 f7       	brne	.-38     	; 0x4f24 <LCD_ClearDisplay+0xae>
    4f4a:	14 c0       	rjmp	.+40     	; 0x4f74 <LCD_ClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    4f4e:	78 85       	ldd	r23, Y+8	; 0x08
    4f50:	89 85       	ldd	r24, Y+9	; 0x09
    4f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	9e 83       	std	Y+6, r25	; 0x06
    4f5e:	8d 83       	std	Y+5, r24	; 0x05
    4f60:	8d 81       	ldd	r24, Y+5	; 0x05
    4f62:	9e 81       	ldd	r25, Y+6	; 0x06
    4f64:	9a 83       	std	Y+2, r25	; 0x02
    4f66:	89 83       	std	Y+1, r24	; 0x01
    4f68:	89 81       	ldd	r24, Y+1	; 0x01
    4f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	f1 f7       	brne	.-4      	; 0x4f6c <LCD_ClearDisplay+0xf6>
    4f70:	9a 83       	std	Y+2, r25	; 0x02
    4f72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
}
    4f74:	2e 96       	adiw	r28, 0x0e	; 14
    4f76:	0f b6       	in	r0, 0x3f	; 63
    4f78:	f8 94       	cli
    4f7a:	de bf       	out	0x3e, r29	; 62
    4f7c:	0f be       	out	0x3f, r0	; 63
    4f7e:	cd bf       	out	0x3d, r28	; 61
    4f80:	cf 91       	pop	r28
    4f82:	df 91       	pop	r29
    4f84:	08 95       	ret

00004f86 <LCD_GoTo>:
	LCD_WriteData(((num %1000)/100) + '0') ;
	LCD_WriteData(((num %100)/10) + '0') ;
	LCD_WriteData(((num %10)/1) + '0') ;
}*/
void LCD_GoTo(u8 line ,u8 x)//1
{
    4f86:	df 93       	push	r29
    4f88:	cf 93       	push	r28
    4f8a:	00 d0       	rcall	.+0      	; 0x4f8c <LCD_GoTo+0x6>
    4f8c:	cd b7       	in	r28, 0x3d	; 61
    4f8e:	de b7       	in	r29, 0x3e	; 62
    4f90:	89 83       	std	Y+1, r24	; 0x01
    4f92:	6a 83       	std	Y+2, r22	; 0x02
	if (line==0)
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	88 23       	and	r24, r24
    4f98:	29 f4       	brne	.+10     	; 0x4fa4 <LCD_GoTo+0x1e>
	{
		LCD_WriteCommand(0x80+x);
    4f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f9c:	80 58       	subi	r24, 0x80	; 128
    4f9e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
    4fa2:	07 c0       	rjmp	.+14     	; 0x4fb2 <LCD_GoTo+0x2c>

	}
	else if (line==1)
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	81 30       	cpi	r24, 0x01	; 1
    4fa8:	21 f4       	brne	.+8      	; 0x4fb2 <LCD_GoTo+0x2c>
	{
		LCD_WriteCommand(0x80+0x40+x);
    4faa:	8a 81       	ldd	r24, Y+2	; 0x02
    4fac:	80 54       	subi	r24, 0x40	; 64
    4fae:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <LCD_WriteCommand>
	}

}
    4fb2:	0f 90       	pop	r0
    4fb4:	0f 90       	pop	r0
    4fb6:	cf 91       	pop	r28
    4fb8:	df 91       	pop	r29
    4fba:	08 95       	ret

00004fbc <UART_Init>:
#include "util/delay.h"

static void(*UART_RX_Fptr)(void)=NULLPTR;
static void(*UART_TX_Fptr)(void)=NULLPTR;
void UART_Init(void)
{
    4fbc:	df 93       	push	r29
    4fbe:	cf 93       	push	r28
    4fc0:	cd b7       	in	r28, 0x3d	; 61
    4fc2:	de b7       	in	r29, 0x3e	; 62
	// baud rate 9600
	UBRRL=51;
    4fc4:	e9 e2       	ldi	r30, 0x29	; 41
    4fc6:	f0 e0       	ldi	r31, 0x00	; 0
    4fc8:	83 e3       	ldi	r24, 0x33	; 51
    4fca:	80 83       	st	Z, r24
	//normal speed
	CLEAR_BIT(UCSRA,U2X);
    4fcc:	ab e2       	ldi	r26, 0x2B	; 43
    4fce:	b0 e0       	ldi	r27, 0x00	; 0
    4fd0:	eb e2       	ldi	r30, 0x2B	; 43
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	80 81       	ld	r24, Z
    4fd6:	8d 7f       	andi	r24, 0xFD	; 253
    4fd8:	8c 93       	st	X, r24
	
	//DEFAULT FRAME  8data 1 stop no parity
	//ENABLE
	SET_BIT(UCSRB,RXEN);
    4fda:	aa e2       	ldi	r26, 0x2A	; 42
    4fdc:	b0 e0       	ldi	r27, 0x00	; 0
    4fde:	ea e2       	ldi	r30, 0x2A	; 42
    4fe0:	f0 e0       	ldi	r31, 0x00	; 0
    4fe2:	80 81       	ld	r24, Z
    4fe4:	80 61       	ori	r24, 0x10	; 16
    4fe6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    4fe8:	aa e2       	ldi	r26, 0x2A	; 42
    4fea:	b0 e0       	ldi	r27, 0x00	; 0
    4fec:	ea e2       	ldi	r30, 0x2A	; 42
    4fee:	f0 e0       	ldi	r31, 0x00	; 0
    4ff0:	80 81       	ld	r24, Z
    4ff2:	88 60       	ori	r24, 0x08	; 8
    4ff4:	8c 93       	st	X, r24
}
    4ff6:	cf 91       	pop	r28
    4ff8:	df 91       	pop	r29
    4ffa:	08 95       	ret

00004ffc <UART_Send>:

void UART_Send(u8 data)
{
    4ffc:	df 93       	push	r29
    4ffe:	cf 93       	push	r28
    5000:	0f 92       	push	r0
    5002:	cd b7       	in	r28, 0x3d	; 61
    5004:	de b7       	in	r29, 0x3e	; 62
    5006:	89 83       	std	Y+1, r24	; 0x01
	while(!READ_BIT(UCSRA,UDRE));
    5008:	eb e2       	ldi	r30, 0x2B	; 43
    500a:	f0 e0       	ldi	r31, 0x00	; 0
    500c:	80 81       	ld	r24, Z
    500e:	82 95       	swap	r24
    5010:	86 95       	lsr	r24
    5012:	87 70       	andi	r24, 0x07	; 7
    5014:	88 2f       	mov	r24, r24
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	81 70       	andi	r24, 0x01	; 1
    501a:	90 70       	andi	r25, 0x00	; 0
    501c:	00 97       	sbiw	r24, 0x00	; 0
    501e:	a1 f3       	breq	.-24     	; 0x5008 <UART_Send+0xc>
	UDR=data;
    5020:	ec e2       	ldi	r30, 0x2C	; 44
    5022:	f0 e0       	ldi	r31, 0x00	; 0
    5024:	89 81       	ldd	r24, Y+1	; 0x01
    5026:	80 83       	st	Z, r24
}
    5028:	0f 90       	pop	r0
    502a:	cf 91       	pop	r28
    502c:	df 91       	pop	r29
    502e:	08 95       	ret

00005030 <UART_Receive>:

u8 UART_Receive(void)
{
    5030:	df 93       	push	r29
    5032:	cf 93       	push	r28
    5034:	cd b7       	in	r28, 0x3d	; 61
    5036:	de b7       	in	r29, 0x3e	; 62
	while(!READ_BIT(UCSRA,RXC));
    5038:	eb e2       	ldi	r30, 0x2B	; 43
    503a:	f0 e0       	ldi	r31, 0x00	; 0
    503c:	80 81       	ld	r24, Z
    503e:	88 23       	and	r24, r24
    5040:	dc f7       	brge	.-10     	; 0x5038 <UART_Receive+0x8>
	return UDR;
    5042:	ec e2       	ldi	r30, 0x2C	; 44
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	80 81       	ld	r24, Z
}
    5048:	cf 91       	pop	r28
    504a:	df 91       	pop	r29
    504c:	08 95       	ret

0000504e <UART_Receive_PerodicCheck>:

u8 UART_Receive_PerodicCheck(u8*pdata)
{
    504e:	df 93       	push	r29
    5050:	cf 93       	push	r28
    5052:	00 d0       	rcall	.+0      	; 0x5054 <UART_Receive_PerodicCheck+0x6>
    5054:	0f 92       	push	r0
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
    505a:	9a 83       	std	Y+2, r25	; 0x02
    505c:	89 83       	std	Y+1, r24	; 0x01
	if (READ_BIT(UCSRA,RXC))
    505e:	eb e2       	ldi	r30, 0x2B	; 43
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	80 81       	ld	r24, Z
    5064:	88 23       	and	r24, r24
    5066:	4c f4       	brge	.+18     	; 0x507a <UART_Receive_PerodicCheck+0x2c>
	{
		*pdata=UDR;
    5068:	ec e2       	ldi	r30, 0x2C	; 44
    506a:	f0 e0       	ldi	r31, 0x00	; 0
    506c:	80 81       	ld	r24, Z
    506e:	e9 81       	ldd	r30, Y+1	; 0x01
    5070:	fa 81       	ldd	r31, Y+2	; 0x02
    5072:	80 83       	st	Z, r24
		return 1;
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	8b 83       	std	Y+3, r24	; 0x03
    5078:	01 c0       	rjmp	.+2      	; 0x507c <UART_Receive_PerodicCheck+0x2e>
	}
	return 0;
    507a:	1b 82       	std	Y+3, r1	; 0x03
    507c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    507e:	0f 90       	pop	r0
    5080:	0f 90       	pop	r0
    5082:	0f 90       	pop	r0
    5084:	cf 91       	pop	r28
    5086:	df 91       	pop	r29
    5088:	08 95       	ret

0000508a <UART_SendNoBlock>:

void UART_SendNoBlock(u8 data)
{
    508a:	df 93       	push	r29
    508c:	cf 93       	push	r28
    508e:	0f 92       	push	r0
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    5096:	ec e2       	ldi	r30, 0x2C	; 44
    5098:	f0 e0       	ldi	r31, 0x00	; 0
    509a:	89 81       	ldd	r24, Y+1	; 0x01
    509c:	80 83       	st	Z, r24
}
    509e:	0f 90       	pop	r0
    50a0:	cf 91       	pop	r28
    50a2:	df 91       	pop	r29
    50a4:	08 95       	ret

000050a6 <UART_ReceiveNoBlock>:

u8 UART_ReceiveNoBlock(void)
{
    50a6:	df 93       	push	r29
    50a8:	cf 93       	push	r28
    50aa:	cd b7       	in	r28, 0x3d	; 61
    50ac:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    50ae:	ec e2       	ldi	r30, 0x2C	; 44
    50b0:	f0 e0       	ldi	r31, 0x00	; 0
    50b2:	80 81       	ld	r24, Z
}
    50b4:	cf 91       	pop	r28
    50b6:	df 91       	pop	r29
    50b8:	08 95       	ret

000050ba <UART_RX_InterruptEnable>:


void UART_RX_InterruptEnable(void)
{
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	cd b7       	in	r28, 0x3d	; 61
    50c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    50c2:	aa e2       	ldi	r26, 0x2A	; 42
    50c4:	b0 e0       	ldi	r27, 0x00	; 0
    50c6:	ea e2       	ldi	r30, 0x2A	; 42
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	80 81       	ld	r24, Z
    50cc:	80 68       	ori	r24, 0x80	; 128
    50ce:	8c 93       	st	X, r24
}
    50d0:	cf 91       	pop	r28
    50d2:	df 91       	pop	r29
    50d4:	08 95       	ret

000050d6 <UART_RX_InterruptDisable>:

void UART_RX_InterruptDisable(void)
{
    50d6:	df 93       	push	r29
    50d8:	cf 93       	push	r28
    50da:	cd b7       	in	r28, 0x3d	; 61
    50dc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
    50de:	aa e2       	ldi	r26, 0x2A	; 42
    50e0:	b0 e0       	ldi	r27, 0x00	; 0
    50e2:	ea e2       	ldi	r30, 0x2A	; 42
    50e4:	f0 e0       	ldi	r31, 0x00	; 0
    50e6:	80 81       	ld	r24, Z
    50e8:	8f 77       	andi	r24, 0x7F	; 127
    50ea:	8c 93       	st	X, r24
}
    50ec:	cf 91       	pop	r28
    50ee:	df 91       	pop	r29
    50f0:	08 95       	ret

000050f2 <UART_TX_InterruptEnable>:

void UART_TX_InterruptEnable(void)
{
    50f2:	df 93       	push	r29
    50f4:	cf 93       	push	r28
    50f6:	cd b7       	in	r28, 0x3d	; 61
    50f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    50fa:	aa e2       	ldi	r26, 0x2A	; 42
    50fc:	b0 e0       	ldi	r27, 0x00	; 0
    50fe:	ea e2       	ldi	r30, 0x2A	; 42
    5100:	f0 e0       	ldi	r31, 0x00	; 0
    5102:	80 81       	ld	r24, Z
    5104:	80 64       	ori	r24, 0x40	; 64
    5106:	8c 93       	st	X, r24
}
    5108:	cf 91       	pop	r28
    510a:	df 91       	pop	r29
    510c:	08 95       	ret

0000510e <UART_TX_InterruptDisable>:

void UART_TX_InterruptDisable(void)
{
    510e:	df 93       	push	r29
    5110:	cf 93       	push	r28
    5112:	cd b7       	in	r28, 0x3d	; 61
    5114:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
    5116:	aa e2       	ldi	r26, 0x2A	; 42
    5118:	b0 e0       	ldi	r27, 0x00	; 0
    511a:	ea e2       	ldi	r30, 0x2A	; 42
    511c:	f0 e0       	ldi	r31, 0x00	; 0
    511e:	80 81       	ld	r24, Z
    5120:	8f 7b       	andi	r24, 0xBF	; 191
    5122:	8c 93       	st	X, r24
}
    5124:	cf 91       	pop	r28
    5126:	df 91       	pop	r29
    5128:	08 95       	ret

0000512a <UART_RX_SetCallBack>:

void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
    512a:	df 93       	push	r29
    512c:	cf 93       	push	r28
    512e:	00 d0       	rcall	.+0      	; 0x5130 <UART_RX_SetCallBack+0x6>
    5130:	cd b7       	in	r28, 0x3d	; 61
    5132:	de b7       	in	r29, 0x3e	; 62
    5134:	9a 83       	std	Y+2, r25	; 0x02
    5136:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    5138:	89 81       	ldd	r24, Y+1	; 0x01
    513a:	9a 81       	ldd	r25, Y+2	; 0x02
    513c:	90 93 a7 01 	sts	0x01A7, r25
    5140:	80 93 a6 01 	sts	0x01A6, r24
}
    5144:	0f 90       	pop	r0
    5146:	0f 90       	pop	r0
    5148:	cf 91       	pop	r28
    514a:	df 91       	pop	r29
    514c:	08 95       	ret

0000514e <UART_TX_SetCallBack>:

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
    514e:	df 93       	push	r29
    5150:	cf 93       	push	r28
    5152:	00 d0       	rcall	.+0      	; 0x5154 <UART_TX_SetCallBack+0x6>
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
    5158:	9a 83       	std	Y+2, r25	; 0x02
    515a:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    515c:	89 81       	ldd	r24, Y+1	; 0x01
    515e:	9a 81       	ldd	r25, Y+2	; 0x02
    5160:	90 93 a9 01 	sts	0x01A9, r25
    5164:	80 93 a8 01 	sts	0x01A8, r24
}
    5168:	0f 90       	pop	r0
    516a:	0f 90       	pop	r0
    516c:	cf 91       	pop	r28
    516e:	df 91       	pop	r29
    5170:	08 95       	ret

00005172 <__vector_13>:


ISR(UART_RX_vect)
{
    5172:	1f 92       	push	r1
    5174:	0f 92       	push	r0
    5176:	0f b6       	in	r0, 0x3f	; 63
    5178:	0f 92       	push	r0
    517a:	11 24       	eor	r1, r1
    517c:	2f 93       	push	r18
    517e:	3f 93       	push	r19
    5180:	4f 93       	push	r20
    5182:	5f 93       	push	r21
    5184:	6f 93       	push	r22
    5186:	7f 93       	push	r23
    5188:	8f 93       	push	r24
    518a:	9f 93       	push	r25
    518c:	af 93       	push	r26
    518e:	bf 93       	push	r27
    5190:	ef 93       	push	r30
    5192:	ff 93       	push	r31
    5194:	df 93       	push	r29
    5196:	cf 93       	push	r28
    5198:	cd b7       	in	r28, 0x3d	; 61
    519a:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr!=NULLPTR)
    519c:	80 91 a6 01 	lds	r24, 0x01A6
    51a0:	90 91 a7 01 	lds	r25, 0x01A7
    51a4:	00 97       	sbiw	r24, 0x00	; 0
    51a6:	29 f0       	breq	.+10     	; 0x51b2 <__vector_13+0x40>
	{
		UART_RX_Fptr();
    51a8:	e0 91 a6 01 	lds	r30, 0x01A6
    51ac:	f0 91 a7 01 	lds	r31, 0x01A7
    51b0:	09 95       	icall
	}
}
    51b2:	cf 91       	pop	r28
    51b4:	df 91       	pop	r29
    51b6:	ff 91       	pop	r31
    51b8:	ef 91       	pop	r30
    51ba:	bf 91       	pop	r27
    51bc:	af 91       	pop	r26
    51be:	9f 91       	pop	r25
    51c0:	8f 91       	pop	r24
    51c2:	7f 91       	pop	r23
    51c4:	6f 91       	pop	r22
    51c6:	5f 91       	pop	r21
    51c8:	4f 91       	pop	r20
    51ca:	3f 91       	pop	r19
    51cc:	2f 91       	pop	r18
    51ce:	0f 90       	pop	r0
    51d0:	0f be       	out	0x3f, r0	; 63
    51d2:	0f 90       	pop	r0
    51d4:	1f 90       	pop	r1
    51d6:	18 95       	reti

000051d8 <__vector_15>:

ISR(UART_TX_vect)
{
    51d8:	1f 92       	push	r1
    51da:	0f 92       	push	r0
    51dc:	0f b6       	in	r0, 0x3f	; 63
    51de:	0f 92       	push	r0
    51e0:	11 24       	eor	r1, r1
    51e2:	2f 93       	push	r18
    51e4:	3f 93       	push	r19
    51e6:	4f 93       	push	r20
    51e8:	5f 93       	push	r21
    51ea:	6f 93       	push	r22
    51ec:	7f 93       	push	r23
    51ee:	8f 93       	push	r24
    51f0:	9f 93       	push	r25
    51f2:	af 93       	push	r26
    51f4:	bf 93       	push	r27
    51f6:	ef 93       	push	r30
    51f8:	ff 93       	push	r31
    51fa:	df 93       	push	r29
    51fc:	cf 93       	push	r28
    51fe:	cd b7       	in	r28, 0x3d	; 61
    5200:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Fptr!=NULLPTR)
    5202:	80 91 a8 01 	lds	r24, 0x01A8
    5206:	90 91 a9 01 	lds	r25, 0x01A9
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	29 f0       	breq	.+10     	; 0x5218 <__vector_15+0x40>
	{
		UART_TX_Fptr();
    520e:	e0 91 a8 01 	lds	r30, 0x01A8
    5212:	f0 91 a9 01 	lds	r31, 0x01A9
    5216:	09 95       	icall
	}
}
    5218:	cf 91       	pop	r28
    521a:	df 91       	pop	r29
    521c:	ff 91       	pop	r31
    521e:	ef 91       	pop	r30
    5220:	bf 91       	pop	r27
    5222:	af 91       	pop	r26
    5224:	9f 91       	pop	r25
    5226:	8f 91       	pop	r24
    5228:	7f 91       	pop	r23
    522a:	6f 91       	pop	r22
    522c:	5f 91       	pop	r21
    522e:	4f 91       	pop	r20
    5230:	3f 91       	pop	r19
    5232:	2f 91       	pop	r18
    5234:	0f 90       	pop	r0
    5236:	0f be       	out	0x3f, r0	; 63
    5238:	0f 90       	pop	r0
    523a:	1f 90       	pop	r1
    523c:	18 95       	reti

0000523e <UART_SendString>:

#include "UART_Services.h"
#include "LCD.h"

void UART_SendString(u8*str)
{
    523e:	df 93       	push	r29
    5240:	cf 93       	push	r28
    5242:	00 d0       	rcall	.+0      	; 0x5244 <UART_SendString+0x6>
    5244:	0f 92       	push	r0
    5246:	cd b7       	in	r28, 0x3d	; 61
    5248:	de b7       	in	r29, 0x3e	; 62
    524a:	9b 83       	std	Y+3, r25	; 0x03
    524c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for (i=0;str[i];i++)
    524e:	19 82       	std	Y+1, r1	; 0x01
    5250:	0e c0       	rjmp	.+28     	; 0x526e <UART_SendString+0x30>
	{
		UART_Send(str[i]);
    5252:	89 81       	ldd	r24, Y+1	; 0x01
    5254:	28 2f       	mov	r18, r24
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	8a 81       	ldd	r24, Y+2	; 0x02
    525a:	9b 81       	ldd	r25, Y+3	; 0x03
    525c:	fc 01       	movw	r30, r24
    525e:	e2 0f       	add	r30, r18
    5260:	f3 1f       	adc	r31, r19
    5262:	80 81       	ld	r24, Z
    5264:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
#include "LCD.h"

void UART_SendString(u8*str)
{
	u8 i;
	for (i=0;str[i];i++)
    5268:	89 81       	ldd	r24, Y+1	; 0x01
    526a:	8f 5f       	subi	r24, 0xFF	; 255
    526c:	89 83       	std	Y+1, r24	; 0x01
    526e:	89 81       	ldd	r24, Y+1	; 0x01
    5270:	28 2f       	mov	r18, r24
    5272:	30 e0       	ldi	r19, 0x00	; 0
    5274:	8a 81       	ldd	r24, Y+2	; 0x02
    5276:	9b 81       	ldd	r25, Y+3	; 0x03
    5278:	fc 01       	movw	r30, r24
    527a:	e2 0f       	add	r30, r18
    527c:	f3 1f       	adc	r31, r19
    527e:	80 81       	ld	r24, Z
    5280:	88 23       	and	r24, r24
    5282:	39 f7       	brne	.-50     	; 0x5252 <UART_SendString+0x14>
	{
		UART_Send(str[i]);
	}
   UART_Send(13);
    5284:	8d e0       	ldi	r24, 0x0D	; 13
    5286:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
}
    528a:	0f 90       	pop	r0
    528c:	0f 90       	pop	r0
    528e:	0f 90       	pop	r0
    5290:	cf 91       	pop	r28
    5292:	df 91       	pop	r29
    5294:	08 95       	ret

00005296 <UART_ReceiveString>:

void UART_ReceiveString(u8*str)
{
    5296:	0f 93       	push	r16
    5298:	1f 93       	push	r17
    529a:	df 93       	push	r29
    529c:	cf 93       	push	r28
    529e:	00 d0       	rcall	.+0      	; 0x52a0 <UART_ReceiveString+0xa>
    52a0:	0f 92       	push	r0
    52a2:	cd b7       	in	r28, 0x3d	; 61
    52a4:	de b7       	in	r29, 0x3e	; 62
    52a6:	9b 83       	std	Y+3, r25	; 0x03
    52a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    52aa:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_Receive();
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
    52ae:	28 2f       	mov	r18, r24
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	8a 81       	ldd	r24, Y+2	; 0x02
    52b4:	9b 81       	ldd	r25, Y+3	; 0x03
    52b6:	8c 01       	movw	r16, r24
    52b8:	02 0f       	add	r16, r18
    52ba:	13 1f       	adc	r17, r19
    52bc:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    52c0:	f8 01       	movw	r30, r16
    52c2:	80 83       	st	Z, r24
	for (i=0;str[i]!=13;)
    52c4:	19 82       	std	Y+1, r1	; 0x01
    52c6:	0f c0       	rjmp	.+30     	; 0x52e6 <UART_ReceiveString+0x50>
	{
		i++;
    52c8:	89 81       	ldd	r24, Y+1	; 0x01
    52ca:	8f 5f       	subi	r24, 0xFF	; 255
    52cc:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_Receive();
    52ce:	89 81       	ldd	r24, Y+1	; 0x01
    52d0:	28 2f       	mov	r18, r24
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	8a 81       	ldd	r24, Y+2	; 0x02
    52d6:	9b 81       	ldd	r25, Y+3	; 0x03
    52d8:	8c 01       	movw	r16, r24
    52da:	02 0f       	add	r16, r18
    52dc:	13 1f       	adc	r17, r19
    52de:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    52e2:	f8 01       	movw	r30, r16
    52e4:	80 83       	st	Z, r24

void UART_ReceiveString(u8*str)
{
	u8 i=0;
	str[i]=UART_Receive();
	for (i=0;str[i]!=13;)
    52e6:	89 81       	ldd	r24, Y+1	; 0x01
    52e8:	28 2f       	mov	r18, r24
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	8a 81       	ldd	r24, Y+2	; 0x02
    52ee:	9b 81       	ldd	r25, Y+3	; 0x03
    52f0:	fc 01       	movw	r30, r24
    52f2:	e2 0f       	add	r30, r18
    52f4:	f3 1f       	adc	r31, r19
    52f6:	80 81       	ld	r24, Z
    52f8:	8d 30       	cpi	r24, 0x0D	; 13
    52fa:	31 f7       	brne	.-52     	; 0x52c8 <UART_ReceiveString+0x32>
	{
		i++;
		str[i]=UART_Receive();
	}
	str[i]='\0';
    52fc:	89 81       	ldd	r24, Y+1	; 0x01
    52fe:	28 2f       	mov	r18, r24
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	8a 81       	ldd	r24, Y+2	; 0x02
    5304:	9b 81       	ldd	r25, Y+3	; 0x03
    5306:	fc 01       	movw	r30, r24
    5308:	e2 0f       	add	r30, r18
    530a:	f3 1f       	adc	r31, r19
    530c:	10 82       	st	Z, r1
}
    530e:	0f 90       	pop	r0
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	cf 91       	pop	r28
    5316:	df 91       	pop	r29
    5318:	1f 91       	pop	r17
    531a:	0f 91       	pop	r16
    531c:	08 95       	ret

0000531e <IntToString>:
static void IntToString (u8* str, s64 num)
{
    531e:	8f 92       	push	r8
    5320:	9f 92       	push	r9
    5322:	af 92       	push	r10
    5324:	bf 92       	push	r11
    5326:	cf 92       	push	r12
    5328:	df 92       	push	r13
    532a:	ef 92       	push	r14
    532c:	ff 92       	push	r15
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	df 93       	push	r29
    5334:	cf 93       	push	r28
    5336:	cd b7       	in	r28, 0x3d	; 61
    5338:	de b7       	in	r29, 0x3e	; 62
    533a:	c2 54       	subi	r28, 0x42	; 66
    533c:	d0 40       	sbci	r29, 0x00	; 0
    533e:	0f b6       	in	r0, 0x3f	; 63
    5340:	f8 94       	cli
    5342:	de bf       	out	0x3e, r29	; 62
    5344:	0f be       	out	0x3f, r0	; 63
    5346:	cd bf       	out	0x3d, r28	; 61
    5348:	9a 87       	std	Y+10, r25	; 0x0a
    534a:	89 87       	std	Y+9, r24	; 0x09
    534c:	0b 87       	std	Y+11, r16	; 0x0b
    534e:	1c 87       	std	Y+12, r17	; 0x0c
    5350:	2d 87       	std	Y+13, r18	; 0x0d
    5352:	3e 87       	std	Y+14, r19	; 0x0e
    5354:	4f 87       	std	Y+15, r20	; 0x0f
    5356:	58 8b       	std	Y+16, r21	; 0x10
    5358:	69 8b       	std	Y+17, r22	; 0x11
    535a:	7a 8b       	std	Y+18, r23	; 0x12
	int i =0, j, temp, flag = 1 ;
    535c:	18 86       	std	Y+8, r1	; 0x08
    535e:	1f 82       	std	Y+7, r1	; 0x07
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	9a 83       	std	Y+2, r25	; 0x02
    5366:	89 83       	std	Y+1, r24	; 0x01
	if(num==0)
    5368:	8b 85       	ldd	r24, Y+11	; 0x0b
    536a:	9c 85       	ldd	r25, Y+12	; 0x0c
    536c:	89 2b       	or	r24, r25
    536e:	9d 85       	ldd	r25, Y+13	; 0x0d
    5370:	89 2b       	or	r24, r25
    5372:	9e 85       	ldd	r25, Y+14	; 0x0e
    5374:	89 2b       	or	r24, r25
    5376:	9f 85       	ldd	r25, Y+15	; 0x0f
    5378:	89 2b       	or	r24, r25
    537a:	98 89       	ldd	r25, Y+16	; 0x10
    537c:	89 2b       	or	r24, r25
    537e:	99 89       	ldd	r25, Y+17	; 0x11
    5380:	89 2b       	or	r24, r25
    5382:	9a 89       	ldd	r25, Y+18	; 0x12
    5384:	89 2b       	or	r24, r25
    5386:	88 23       	and	r24, r24
    5388:	b9 f4       	brne	.+46     	; 0x53b8 <IntToString+0x9a>
	{
		str[i] = '0' ;
    538a:	2f 81       	ldd	r18, Y+7	; 0x07
    538c:	38 85       	ldd	r19, Y+8	; 0x08
    538e:	89 85       	ldd	r24, Y+9	; 0x09
    5390:	9a 85       	ldd	r25, Y+10	; 0x0a
    5392:	fc 01       	movw	r30, r24
    5394:	e2 0f       	add	r30, r18
    5396:	f3 1f       	adc	r31, r19
    5398:	80 e3       	ldi	r24, 0x30	; 48
    539a:	80 83       	st	Z, r24
		str[++i] = '\0' ;
    539c:	8f 81       	ldd	r24, Y+7	; 0x07
    539e:	98 85       	ldd	r25, Y+8	; 0x08
    53a0:	01 96       	adiw	r24, 0x01	; 1
    53a2:	98 87       	std	Y+8, r25	; 0x08
    53a4:	8f 83       	std	Y+7, r24	; 0x07
    53a6:	2f 81       	ldd	r18, Y+7	; 0x07
    53a8:	38 85       	ldd	r19, Y+8	; 0x08
    53aa:	89 85       	ldd	r24, Y+9	; 0x09
    53ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ae:	fc 01       	movw	r30, r24
    53b0:	e2 0f       	add	r30, r18
    53b2:	f3 1f       	adc	r31, r19
    53b4:	10 82       	st	Z, r1
    53b6:	7e c2       	rjmp	.+1276   	; 0x58b4 <IntToString+0x596>
	}
	else
	{
		if (num < 0 )
    53b8:	8a 89       	ldd	r24, Y+18	; 0x12
    53ba:	88 23       	and	r24, r24
    53bc:	d4 f0       	brlt	.+52     	; 0x53f2 <IntToString+0xd4>
    53be:	8a 89       	ldd	r24, Y+18	; 0x12
    53c0:	88 23       	and	r24, r24
    53c2:	09 f0       	breq	.+2      	; 0x53c6 <IntToString+0xa8>
    53c4:	74 c1       	rjmp	.+744    	; 0x56ae <IntToString+0x390>
    53c6:	89 89       	ldd	r24, Y+17	; 0x11
    53c8:	88 23       	and	r24, r24
    53ca:	09 f0       	breq	.+2      	; 0x53ce <IntToString+0xb0>
    53cc:	70 c1       	rjmp	.+736    	; 0x56ae <IntToString+0x390>
    53ce:	88 89       	ldd	r24, Y+16	; 0x10
    53d0:	88 23       	and	r24, r24
    53d2:	09 f0       	breq	.+2      	; 0x53d6 <IntToString+0xb8>
    53d4:	6c c1       	rjmp	.+728    	; 0x56ae <IntToString+0x390>
    53d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    53d8:	88 23       	and	r24, r24
    53da:	09 f0       	breq	.+2      	; 0x53de <IntToString+0xc0>
    53dc:	68 c1       	rjmp	.+720    	; 0x56ae <IntToString+0x390>
    53de:	8e 85       	ldd	r24, Y+14	; 0x0e
    53e0:	88 23       	and	r24, r24
    53e2:	09 f0       	breq	.+2      	; 0x53e6 <IntToString+0xc8>
    53e4:	64 c1       	rjmp	.+712    	; 0x56ae <IntToString+0x390>
    53e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    53e8:	88 23       	and	r24, r24
    53ea:	09 f0       	breq	.+2      	; 0x53ee <IntToString+0xd0>
    53ec:	60 c1       	rjmp	.+704    	; 0x56ae <IntToString+0x390>
    53ee:	4c 85       	ldd	r20, Y+12	; 0x0c
    53f0:	5e c1       	rjmp	.+700    	; 0x56ae <IntToString+0x390>
		{
			str[i++] = '-' ;
    53f2:	2f 81       	ldd	r18, Y+7	; 0x07
    53f4:	38 85       	ldd	r19, Y+8	; 0x08
    53f6:	89 85       	ldd	r24, Y+9	; 0x09
    53f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53fa:	fc 01       	movw	r30, r24
    53fc:	e2 0f       	add	r30, r18
    53fe:	f3 1f       	adc	r31, r19
    5400:	8d e2       	ldi	r24, 0x2D	; 45
    5402:	80 83       	st	Z, r24
    5404:	8f 81       	ldd	r24, Y+7	; 0x07
    5406:	98 85       	ldd	r25, Y+8	; 0x08
    5408:	01 96       	adiw	r24, 0x01	; 1
    540a:	98 87       	std	Y+8, r25	; 0x08
    540c:	8f 83       	std	Y+7, r24	; 0x07
			num *= -1 ;
    540e:	1c 8a       	std	Y+20, r1	; 0x14
    5410:	1d 8a       	std	Y+21, r1	; 0x15
    5412:	1e 8a       	std	Y+22, r1	; 0x16
    5414:	1f 8a       	std	Y+23, r1	; 0x17
    5416:	18 8e       	std	Y+24, r1	; 0x18
    5418:	19 8e       	std	Y+25, r1	; 0x19
    541a:	1a 8e       	std	Y+26, r1	; 0x1a
    541c:	1b 8e       	std	Y+27, r1	; 0x1b
    541e:	5b 85       	ldd	r21, Y+11	; 0x0b
    5420:	5c 8f       	std	Y+28, r21	; 0x1c
    5422:	8c 85       	ldd	r24, Y+12	; 0x0c
    5424:	8d 8f       	std	Y+29, r24	; 0x1d
    5426:	9d 85       	ldd	r25, Y+13	; 0x0d
    5428:	9e 8f       	std	Y+30, r25	; 0x1e
    542a:	ee 85       	ldd	r30, Y+14	; 0x0e
    542c:	ef 8f       	std	Y+31, r30	; 0x1f
    542e:	ff 85       	ldd	r31, Y+15	; 0x0f
    5430:	f8 a3       	std	Y+32, r31	; 0x20
    5432:	48 89       	ldd	r20, Y+16	; 0x10
    5434:	49 a3       	std	Y+33, r20	; 0x21
    5436:	59 89       	ldd	r21, Y+17	; 0x11
    5438:	5a a3       	std	Y+34, r21	; 0x22
    543a:	8a 89       	ldd	r24, Y+18	; 0x12
    543c:	8b a3       	std	Y+35, r24	; 0x23
    543e:	9c 89       	ldd	r25, Y+20	; 0x14
    5440:	ec 8d       	ldd	r30, Y+28	; 0x1c
    5442:	9e 1b       	sub	r25, r30
    5444:	9c a3       	std	Y+36, r25	; 0x24
    5446:	f1 e0       	ldi	r31, 0x01	; 1
    5448:	fc a7       	std	Y+44, r31	; 0x2c
    544a:	4c a1       	ldd	r20, Y+36	; 0x24
    544c:	5c 89       	ldd	r21, Y+20	; 0x14
    544e:	54 17       	cp	r21, r20
    5450:	08 f0       	brcs	.+2      	; 0x5454 <IntToString+0x136>
    5452:	1c a6       	std	Y+44, r1	; 0x2c
    5454:	8d 89       	ldd	r24, Y+21	; 0x15
    5456:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5458:	89 1b       	sub	r24, r25
    545a:	8d a3       	std	Y+37, r24	; 0x25
    545c:	e1 e0       	ldi	r30, 0x01	; 1
    545e:	ed a7       	std	Y+45, r30	; 0x2d
    5460:	fd a1       	ldd	r31, Y+37	; 0x25
    5462:	4d 89       	ldd	r20, Y+21	; 0x15
    5464:	4f 17       	cp	r20, r31
    5466:	08 f0       	brcs	.+2      	; 0x546a <IntToString+0x14c>
    5468:	1d a6       	std	Y+45, r1	; 0x2d
    546a:	5d a1       	ldd	r21, Y+37	; 0x25
    546c:	8c a5       	ldd	r24, Y+44	; 0x2c
    546e:	58 1b       	sub	r21, r24
    5470:	5e a7       	std	Y+46, r21	; 0x2e
    5472:	91 e0       	ldi	r25, 0x01	; 1
    5474:	9f a7       	std	Y+47, r25	; 0x2f
    5476:	ee a5       	ldd	r30, Y+46	; 0x2e
    5478:	fd a1       	ldd	r31, Y+37	; 0x25
    547a:	fe 17       	cp	r31, r30
    547c:	08 f0       	brcs	.+2      	; 0x5480 <IntToString+0x162>
    547e:	1f a6       	std	Y+47, r1	; 0x2f
    5480:	4d a5       	ldd	r20, Y+45	; 0x2d
    5482:	5f a5       	ldd	r21, Y+47	; 0x2f
    5484:	45 2b       	or	r20, r21
    5486:	4d a7       	std	Y+45, r20	; 0x2d
    5488:	8e a5       	ldd	r24, Y+46	; 0x2e
    548a:	8d a3       	std	Y+37, r24	; 0x25
    548c:	9e 89       	ldd	r25, Y+22	; 0x16
    548e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5490:	9e 1b       	sub	r25, r30
    5492:	9e a3       	std	Y+38, r25	; 0x26
    5494:	f1 e0       	ldi	r31, 0x01	; 1
    5496:	f8 ab       	std	Y+48, r31	; 0x30
    5498:	4e a1       	ldd	r20, Y+38	; 0x26
    549a:	5e 89       	ldd	r21, Y+22	; 0x16
    549c:	54 17       	cp	r21, r20
    549e:	08 f0       	brcs	.+2      	; 0x54a2 <IntToString+0x184>
    54a0:	18 aa       	std	Y+48, r1	; 0x30
    54a2:	8e a1       	ldd	r24, Y+38	; 0x26
    54a4:	9d a5       	ldd	r25, Y+45	; 0x2d
    54a6:	89 1b       	sub	r24, r25
    54a8:	89 ab       	std	Y+49, r24	; 0x31
    54aa:	e1 e0       	ldi	r30, 0x01	; 1
    54ac:	ea ab       	std	Y+50, r30	; 0x32
    54ae:	f9 a9       	ldd	r31, Y+49	; 0x31
    54b0:	4e a1       	ldd	r20, Y+38	; 0x26
    54b2:	4f 17       	cp	r20, r31
    54b4:	08 f0       	brcs	.+2      	; 0x54b8 <IntToString+0x19a>
    54b6:	1a aa       	std	Y+50, r1	; 0x32
    54b8:	58 a9       	ldd	r21, Y+48	; 0x30
    54ba:	8a a9       	ldd	r24, Y+50	; 0x32
    54bc:	58 2b       	or	r21, r24
    54be:	58 ab       	std	Y+48, r21	; 0x30
    54c0:	99 a9       	ldd	r25, Y+49	; 0x31
    54c2:	9e a3       	std	Y+38, r25	; 0x26
    54c4:	ef 89       	ldd	r30, Y+23	; 0x17
    54c6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    54c8:	ef 1b       	sub	r30, r31
    54ca:	ef a3       	std	Y+39, r30	; 0x27
    54cc:	41 e0       	ldi	r20, 0x01	; 1
    54ce:	4b ab       	std	Y+51, r20	; 0x33
    54d0:	5f a1       	ldd	r21, Y+39	; 0x27
    54d2:	8f 89       	ldd	r24, Y+23	; 0x17
    54d4:	85 17       	cp	r24, r21
    54d6:	08 f0       	brcs	.+2      	; 0x54da <IntToString+0x1bc>
    54d8:	1b aa       	std	Y+51, r1	; 0x33
    54da:	9f a1       	ldd	r25, Y+39	; 0x27
    54dc:	e8 a9       	ldd	r30, Y+48	; 0x30
    54de:	9e 1b       	sub	r25, r30
    54e0:	9c ab       	std	Y+52, r25	; 0x34
    54e2:	f1 e0       	ldi	r31, 0x01	; 1
    54e4:	fd ab       	std	Y+53, r31	; 0x35
    54e6:	4c a9       	ldd	r20, Y+52	; 0x34
    54e8:	5f a1       	ldd	r21, Y+39	; 0x27
    54ea:	54 17       	cp	r21, r20
    54ec:	08 f0       	brcs	.+2      	; 0x54f0 <IntToString+0x1d2>
    54ee:	1d aa       	std	Y+53, r1	; 0x35
    54f0:	8b a9       	ldd	r24, Y+51	; 0x33
    54f2:	9d a9       	ldd	r25, Y+53	; 0x35
    54f4:	89 2b       	or	r24, r25
    54f6:	8b ab       	std	Y+51, r24	; 0x33
    54f8:	ec a9       	ldd	r30, Y+52	; 0x34
    54fa:	ef a3       	std	Y+39, r30	; 0x27
    54fc:	f8 8d       	ldd	r31, Y+24	; 0x18
    54fe:	48 a1       	ldd	r20, Y+32	; 0x20
    5500:	f4 1b       	sub	r31, r20
    5502:	f8 a7       	std	Y+40, r31	; 0x28
    5504:	51 e0       	ldi	r21, 0x01	; 1
    5506:	5e ab       	std	Y+54, r21	; 0x36
    5508:	88 a5       	ldd	r24, Y+40	; 0x28
    550a:	98 8d       	ldd	r25, Y+24	; 0x18
    550c:	98 17       	cp	r25, r24
    550e:	08 f0       	brcs	.+2      	; 0x5512 <IntToString+0x1f4>
    5510:	1e aa       	std	Y+54, r1	; 0x36
    5512:	e8 a5       	ldd	r30, Y+40	; 0x28
    5514:	fb a9       	ldd	r31, Y+51	; 0x33
    5516:	ef 1b       	sub	r30, r31
    5518:	ef ab       	std	Y+55, r30	; 0x37
    551a:	41 e0       	ldi	r20, 0x01	; 1
    551c:	48 af       	std	Y+56, r20	; 0x38
    551e:	5f a9       	ldd	r21, Y+55	; 0x37
    5520:	88 a5       	ldd	r24, Y+40	; 0x28
    5522:	85 17       	cp	r24, r21
    5524:	08 f0       	brcs	.+2      	; 0x5528 <IntToString+0x20a>
    5526:	18 ae       	std	Y+56, r1	; 0x38
    5528:	9e a9       	ldd	r25, Y+54	; 0x36
    552a:	e8 ad       	ldd	r30, Y+56	; 0x38
    552c:	9e 2b       	or	r25, r30
    552e:	9e ab       	std	Y+54, r25	; 0x36
    5530:	ff a9       	ldd	r31, Y+55	; 0x37
    5532:	f8 a7       	std	Y+40, r31	; 0x28
    5534:	49 8d       	ldd	r20, Y+25	; 0x19
    5536:	59 a1       	ldd	r21, Y+33	; 0x21
    5538:	45 1b       	sub	r20, r21
    553a:	49 a7       	std	Y+41, r20	; 0x29
    553c:	81 e0       	ldi	r24, 0x01	; 1
    553e:	89 af       	std	Y+57, r24	; 0x39
    5540:	99 a5       	ldd	r25, Y+41	; 0x29
    5542:	e9 8d       	ldd	r30, Y+25	; 0x19
    5544:	e9 17       	cp	r30, r25
    5546:	08 f0       	brcs	.+2      	; 0x554a <IntToString+0x22c>
    5548:	19 ae       	std	Y+57, r1	; 0x39
    554a:	f9 a5       	ldd	r31, Y+41	; 0x29
    554c:	4e a9       	ldd	r20, Y+54	; 0x36
    554e:	f4 1b       	sub	r31, r20
    5550:	fa af       	std	Y+58, r31	; 0x3a
    5552:	51 e0       	ldi	r21, 0x01	; 1
    5554:	5b af       	std	Y+59, r21	; 0x3b
    5556:	8a ad       	ldd	r24, Y+58	; 0x3a
    5558:	99 a5       	ldd	r25, Y+41	; 0x29
    555a:	98 17       	cp	r25, r24
    555c:	08 f0       	brcs	.+2      	; 0x5560 <IntToString+0x242>
    555e:	1b ae       	std	Y+59, r1	; 0x3b
    5560:	e9 ad       	ldd	r30, Y+57	; 0x39
    5562:	fb ad       	ldd	r31, Y+59	; 0x3b
    5564:	ef 2b       	or	r30, r31
    5566:	e9 af       	std	Y+57, r30	; 0x39
    5568:	4a ad       	ldd	r20, Y+58	; 0x3a
    556a:	49 a7       	std	Y+41, r20	; 0x29
    556c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    556e:	8a a1       	ldd	r24, Y+34	; 0x22
    5570:	58 1b       	sub	r21, r24
    5572:	5a a7       	std	Y+42, r21	; 0x2a
    5574:	91 e0       	ldi	r25, 0x01	; 1
    5576:	9c af       	std	Y+60, r25	; 0x3c
    5578:	ea a5       	ldd	r30, Y+42	; 0x2a
    557a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    557c:	fe 17       	cp	r31, r30
    557e:	08 f0       	brcs	.+2      	; 0x5582 <IntToString+0x264>
    5580:	1c ae       	std	Y+60, r1	; 0x3c
    5582:	4a a5       	ldd	r20, Y+42	; 0x2a
    5584:	59 ad       	ldd	r21, Y+57	; 0x39
    5586:	45 1b       	sub	r20, r21
    5588:	4d af       	std	Y+61, r20	; 0x3d
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	8e af       	std	Y+62, r24	; 0x3e
    558e:	9d ad       	ldd	r25, Y+61	; 0x3d
    5590:	ea a5       	ldd	r30, Y+42	; 0x2a
    5592:	e9 17       	cp	r30, r25
    5594:	08 f0       	brcs	.+2      	; 0x5598 <IntToString+0x27a>
    5596:	1e ae       	std	Y+62, r1	; 0x3e
    5598:	fc ad       	ldd	r31, Y+60	; 0x3c
    559a:	4e ad       	ldd	r20, Y+62	; 0x3e
    559c:	f4 2b       	or	r31, r20
    559e:	fc af       	std	Y+60, r31	; 0x3c
    55a0:	5d ad       	ldd	r21, Y+61	; 0x3d
    55a2:	5a a7       	std	Y+42, r21	; 0x2a
    55a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55a6:	9b a1       	ldd	r25, Y+35	; 0x23
    55a8:	89 1b       	sub	r24, r25
    55aa:	8b a7       	std	Y+43, r24	; 0x2b
    55ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    55ae:	ec ad       	ldd	r30, Y+60	; 0x3c
    55b0:	8e 1b       	sub	r24, r30
    55b2:	8b a7       	std	Y+43, r24	; 0x2b
    55b4:	fc a1       	ldd	r31, Y+36	; 0x24
    55b6:	fb 87       	std	Y+11, r31	; 0x0b
    55b8:	4d a1       	ldd	r20, Y+37	; 0x25
    55ba:	4c 87       	std	Y+12, r20	; 0x0c
    55bc:	5e a1       	ldd	r21, Y+38	; 0x26
    55be:	5d 87       	std	Y+13, r21	; 0x0d
    55c0:	8f a1       	ldd	r24, Y+39	; 0x27
    55c2:	8e 87       	std	Y+14, r24	; 0x0e
    55c4:	98 a5       	ldd	r25, Y+40	; 0x28
    55c6:	9f 87       	std	Y+15, r25	; 0x0f
    55c8:	e9 a5       	ldd	r30, Y+41	; 0x29
    55ca:	e8 8b       	std	Y+16, r30	; 0x10
    55cc:	fa a5       	ldd	r31, Y+42	; 0x2a
    55ce:	f9 8b       	std	Y+17, r31	; 0x11
    55d0:	4b a5       	ldd	r20, Y+43	; 0x2b
    55d2:	4a 8b       	std	Y+18, r20	; 0x12
			flag = 0 ;
    55d4:	1a 82       	std	Y+2, r1	; 0x02
    55d6:	19 82       	std	Y+1, r1	; 0x01
    55d8:	6a c0       	rjmp	.+212    	; 0x56ae <IntToString+0x390>
		}
		for(  ; num > 0 ; ++i)
		{
			str[i] = (num%10) + '0' ;
    55da:	2f 81       	ldd	r18, Y+7	; 0x07
    55dc:	38 85       	ldd	r19, Y+8	; 0x08
    55de:	89 85       	ldd	r24, Y+9	; 0x09
    55e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    55e2:	4c 01       	movw	r8, r24
    55e4:	82 0e       	add	r8, r18
    55e6:	93 1e       	adc	r9, r19
    55e8:	ab 84       	ldd	r10, Y+11	; 0x0b
    55ea:	bc 84       	ldd	r11, Y+12	; 0x0c
    55ec:	cd 84       	ldd	r12, Y+13	; 0x0d
    55ee:	de 84       	ldd	r13, Y+14	; 0x0e
    55f0:	ef 84       	ldd	r14, Y+15	; 0x0f
    55f2:	f8 88       	ldd	r15, Y+16	; 0x10
    55f4:	09 89       	ldd	r16, Y+17	; 0x11
    55f6:	1a 89       	ldd	r17, Y+18	; 0x12
    55f8:	2a 2d       	mov	r18, r10
    55fa:	3b 2d       	mov	r19, r11
    55fc:	4c 2d       	mov	r20, r12
    55fe:	5d 2d       	mov	r21, r13
    5600:	6e 2d       	mov	r22, r14
    5602:	7f 2d       	mov	r23, r15
    5604:	80 2f       	mov	r24, r16
    5606:	91 2f       	mov	r25, r17
    5608:	0f 2e       	mov	r0, r31
    560a:	fa e0       	ldi	r31, 0x0A	; 10
    560c:	af 2e       	mov	r10, r31
    560e:	f0 2d       	mov	r31, r0
    5610:	bb 24       	eor	r11, r11
    5612:	cc 24       	eor	r12, r12
    5614:	dd 24       	eor	r13, r13
    5616:	ee 24       	eor	r14, r14
    5618:	ff 24       	eor	r15, r15
    561a:	00 e0       	ldi	r16, 0x00	; 0
    561c:	10 e0       	ldi	r17, 0x00	; 0
    561e:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    5622:	a2 2e       	mov	r10, r18
    5624:	b3 2e       	mov	r11, r19
    5626:	c4 2e       	mov	r12, r20
    5628:	d5 2e       	mov	r13, r21
    562a:	e6 2e       	mov	r14, r22
    562c:	f7 2e       	mov	r15, r23
    562e:	08 2f       	mov	r16, r24
    5630:	19 2f       	mov	r17, r25
    5632:	2a 2d       	mov	r18, r10
    5634:	3b 2d       	mov	r19, r11
    5636:	4c 2d       	mov	r20, r12
    5638:	5d 2d       	mov	r21, r13
    563a:	6e 2d       	mov	r22, r14
    563c:	7f 2d       	mov	r23, r15
    563e:	80 2f       	mov	r24, r16
    5640:	91 2f       	mov	r25, r17
    5642:	82 2f       	mov	r24, r18
    5644:	80 5d       	subi	r24, 0xD0	; 208
    5646:	f4 01       	movw	r30, r8
    5648:	80 83       	st	Z, r24
			num /= 10 ;
    564a:	ab 84       	ldd	r10, Y+11	; 0x0b
    564c:	bc 84       	ldd	r11, Y+12	; 0x0c
    564e:	cd 84       	ldd	r12, Y+13	; 0x0d
    5650:	de 84       	ldd	r13, Y+14	; 0x0e
    5652:	ef 84       	ldd	r14, Y+15	; 0x0f
    5654:	f8 88       	ldd	r15, Y+16	; 0x10
    5656:	09 89       	ldd	r16, Y+17	; 0x11
    5658:	1a 89       	ldd	r17, Y+18	; 0x12
    565a:	2a 2d       	mov	r18, r10
    565c:	3b 2d       	mov	r19, r11
    565e:	4c 2d       	mov	r20, r12
    5660:	5d 2d       	mov	r21, r13
    5662:	6e 2d       	mov	r22, r14
    5664:	7f 2d       	mov	r23, r15
    5666:	80 2f       	mov	r24, r16
    5668:	91 2f       	mov	r25, r17
    566a:	0f 2e       	mov	r0, r31
    566c:	fa e0       	ldi	r31, 0x0A	; 10
    566e:	af 2e       	mov	r10, r31
    5670:	f0 2d       	mov	r31, r0
    5672:	bb 24       	eor	r11, r11
    5674:	cc 24       	eor	r12, r12
    5676:	dd 24       	eor	r13, r13
    5678:	ee 24       	eor	r14, r14
    567a:	ff 24       	eor	r15, r15
    567c:	00 e0       	ldi	r16, 0x00	; 0
    567e:	10 e0       	ldi	r17, 0x00	; 0
    5680:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    5684:	a2 2e       	mov	r10, r18
    5686:	b3 2e       	mov	r11, r19
    5688:	c4 2e       	mov	r12, r20
    568a:	d5 2e       	mov	r13, r21
    568c:	e6 2e       	mov	r14, r22
    568e:	f7 2e       	mov	r15, r23
    5690:	08 2f       	mov	r16, r24
    5692:	19 2f       	mov	r17, r25
    5694:	ab 86       	std	Y+11, r10	; 0x0b
    5696:	bc 86       	std	Y+12, r11	; 0x0c
    5698:	cd 86       	std	Y+13, r12	; 0x0d
    569a:	de 86       	std	Y+14, r13	; 0x0e
    569c:	ef 86       	std	Y+15, r14	; 0x0f
    569e:	f8 8a       	std	Y+16, r15	; 0x10
    56a0:	09 8b       	std	Y+17, r16	; 0x11
    56a2:	1a 8b       	std	Y+18, r17	; 0x12
		{
			str[i++] = '-' ;
			num *= -1 ;
			flag = 0 ;
		}
		for(  ; num > 0 ; ++i)
    56a4:	8f 81       	ldd	r24, Y+7	; 0x07
    56a6:	98 85       	ldd	r25, Y+8	; 0x08
    56a8:	01 96       	adiw	r24, 0x01	; 1
    56aa:	98 87       	std	Y+8, r25	; 0x08
    56ac:	8f 83       	std	Y+7, r24	; 0x07
    56ae:	8a 89       	ldd	r24, Y+18	; 0x12
    56b0:	18 16       	cp	r1, r24
    56b2:	0c f4       	brge	.+2      	; 0x56b6 <IntToString+0x398>
    56b4:	92 cf       	rjmp	.-220    	; 0x55da <IntToString+0x2bc>
    56b6:	8a 89       	ldd	r24, Y+18	; 0x12
    56b8:	88 23       	and	r24, r24
    56ba:	71 f5       	brne	.+92     	; 0x5718 <IntToString+0x3fa>
    56bc:	89 89       	ldd	r24, Y+17	; 0x11
    56be:	88 23       	and	r24, r24
    56c0:	09 f0       	breq	.+2      	; 0x56c4 <IntToString+0x3a6>
    56c2:	8b cf       	rjmp	.-234    	; 0x55da <IntToString+0x2bc>
    56c4:	89 89       	ldd	r24, Y+17	; 0x11
    56c6:	88 23       	and	r24, r24
    56c8:	39 f5       	brne	.+78     	; 0x5718 <IntToString+0x3fa>
    56ca:	88 89       	ldd	r24, Y+16	; 0x10
    56cc:	88 23       	and	r24, r24
    56ce:	09 f0       	breq	.+2      	; 0x56d2 <IntToString+0x3b4>
    56d0:	84 cf       	rjmp	.-248    	; 0x55da <IntToString+0x2bc>
    56d2:	88 89       	ldd	r24, Y+16	; 0x10
    56d4:	88 23       	and	r24, r24
    56d6:	01 f5       	brne	.+64     	; 0x5718 <IntToString+0x3fa>
    56d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    56da:	88 23       	and	r24, r24
    56dc:	09 f0       	breq	.+2      	; 0x56e0 <IntToString+0x3c2>
    56de:	7d cf       	rjmp	.-262    	; 0x55da <IntToString+0x2bc>
    56e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    56e2:	88 23       	and	r24, r24
    56e4:	c9 f4       	brne	.+50     	; 0x5718 <IntToString+0x3fa>
    56e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    56e8:	88 23       	and	r24, r24
    56ea:	09 f0       	breq	.+2      	; 0x56ee <IntToString+0x3d0>
    56ec:	76 cf       	rjmp	.-276    	; 0x55da <IntToString+0x2bc>
    56ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    56f0:	88 23       	and	r24, r24
    56f2:	91 f4       	brne	.+36     	; 0x5718 <IntToString+0x3fa>
    56f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    56f6:	88 23       	and	r24, r24
    56f8:	09 f0       	breq	.+2      	; 0x56fc <IntToString+0x3de>
    56fa:	6f cf       	rjmp	.-290    	; 0x55da <IntToString+0x2bc>
    56fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    56fe:	88 23       	and	r24, r24
    5700:	59 f4       	brne	.+22     	; 0x5718 <IntToString+0x3fa>
    5702:	8c 85       	ldd	r24, Y+12	; 0x0c
    5704:	88 23       	and	r24, r24
    5706:	09 f0       	breq	.+2      	; 0x570a <IntToString+0x3ec>
    5708:	68 cf       	rjmp	.-304    	; 0x55da <IntToString+0x2bc>
    570a:	8c 85       	ldd	r24, Y+12	; 0x0c
    570c:	88 23       	and	r24, r24
    570e:	21 f4       	brne	.+8      	; 0x5718 <IntToString+0x3fa>
    5710:	8b 85       	ldd	r24, Y+11	; 0x0b
    5712:	88 23       	and	r24, r24
    5714:	09 f0       	breq	.+2      	; 0x5718 <IntToString+0x3fa>
    5716:	61 cf       	rjmp	.-318    	; 0x55da <IntToString+0x2bc>
		{
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
    5718:	89 81       	ldd	r24, Y+1	; 0x01
    571a:	9a 81       	ldd	r25, Y+2	; 0x02
    571c:	00 97       	sbiw	r24, 0x00	; 0
    571e:	09 f4       	brne	.+2      	; 0x5722 <IntToString+0x404>
    5720:	62 c0       	rjmp	.+196    	; 0x57e6 <IntToString+0x4c8>
		{
			for( j= 0; j < (i/2) ; ++j)
    5722:	1e 82       	std	Y+6, r1	; 0x06
    5724:	1d 82       	std	Y+5, r1	; 0x05
    5726:	3c c0       	rjmp	.+120    	; 0x57a0 <IntToString+0x482>
			{
				temp = str[i-j-1] ;
    5728:	2f 81       	ldd	r18, Y+7	; 0x07
    572a:	38 85       	ldd	r19, Y+8	; 0x08
    572c:	8d 81       	ldd	r24, Y+5	; 0x05
    572e:	9e 81       	ldd	r25, Y+6	; 0x06
    5730:	a9 01       	movw	r20, r18
    5732:	48 1b       	sub	r20, r24
    5734:	59 0b       	sbc	r21, r25
    5736:	ca 01       	movw	r24, r20
    5738:	9c 01       	movw	r18, r24
    573a:	21 50       	subi	r18, 0x01	; 1
    573c:	30 40       	sbci	r19, 0x00	; 0
    573e:	89 85       	ldd	r24, Y+9	; 0x09
    5740:	9a 85       	ldd	r25, Y+10	; 0x0a
    5742:	fc 01       	movw	r30, r24
    5744:	e2 0f       	add	r30, r18
    5746:	f3 1f       	adc	r31, r19
    5748:	80 81       	ld	r24, Z
    574a:	88 2f       	mov	r24, r24
    574c:	90 e0       	ldi	r25, 0x00	; 0
    574e:	9c 83       	std	Y+4, r25	; 0x04
    5750:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j-1] = str[j] ;
    5752:	2f 81       	ldd	r18, Y+7	; 0x07
    5754:	38 85       	ldd	r19, Y+8	; 0x08
    5756:	8d 81       	ldd	r24, Y+5	; 0x05
    5758:	9e 81       	ldd	r25, Y+6	; 0x06
    575a:	f9 01       	movw	r30, r18
    575c:	e8 1b       	sub	r30, r24
    575e:	f9 0b       	sbc	r31, r25
    5760:	cf 01       	movw	r24, r30
    5762:	9c 01       	movw	r18, r24
    5764:	21 50       	subi	r18, 0x01	; 1
    5766:	30 40       	sbci	r19, 0x00	; 0
    5768:	89 85       	ldd	r24, Y+9	; 0x09
    576a:	9a 85       	ldd	r25, Y+10	; 0x0a
    576c:	dc 01       	movw	r26, r24
    576e:	a2 0f       	add	r26, r18
    5770:	b3 1f       	adc	r27, r19
    5772:	2d 81       	ldd	r18, Y+5	; 0x05
    5774:	3e 81       	ldd	r19, Y+6	; 0x06
    5776:	89 85       	ldd	r24, Y+9	; 0x09
    5778:	9a 85       	ldd	r25, Y+10	; 0x0a
    577a:	fc 01       	movw	r30, r24
    577c:	e2 0f       	add	r30, r18
    577e:	f3 1f       	adc	r31, r19
    5780:	80 81       	ld	r24, Z
    5782:	8c 93       	st	X, r24
				str[j] = temp ;
    5784:	2d 81       	ldd	r18, Y+5	; 0x05
    5786:	3e 81       	ldd	r19, Y+6	; 0x06
    5788:	89 85       	ldd	r24, Y+9	; 0x09
    578a:	9a 85       	ldd	r25, Y+10	; 0x0a
    578c:	fc 01       	movw	r30, r24
    578e:	e2 0f       	add	r30, r18
    5790:	f3 1f       	adc	r31, r19
    5792:	8b 81       	ldd	r24, Y+3	; 0x03
    5794:	80 83       	st	Z, r24
			str[i] = (num%10) + '0' ;
			num /= 10 ;
		}
		if(flag)
		{
			for( j= 0; j < (i/2) ; ++j)
    5796:	8d 81       	ldd	r24, Y+5	; 0x05
    5798:	9e 81       	ldd	r25, Y+6	; 0x06
    579a:	01 96       	adiw	r24, 0x01	; 1
    579c:	9e 83       	std	Y+6, r25	; 0x06
    579e:	8d 83       	std	Y+5, r24	; 0x05
    57a0:	8f 81       	ldd	r24, Y+7	; 0x07
    57a2:	98 85       	ldd	r25, Y+8	; 0x08
    57a4:	21 96       	adiw	r28, 0x01	; 1
    57a6:	9f af       	std	Y+63, r25	; 0x3f
    57a8:	8e af       	std	Y+62, r24	; 0x3e
    57aa:	21 97       	sbiw	r28, 0x01	; 1
    57ac:	21 96       	adiw	r28, 0x01	; 1
    57ae:	4e ad       	ldd	r20, Y+62	; 0x3e
    57b0:	5f ad       	ldd	r21, Y+63	; 0x3f
    57b2:	21 97       	sbiw	r28, 0x01	; 1
    57b4:	55 23       	and	r21, r21
    57b6:	4c f4       	brge	.+18     	; 0x57ca <IntToString+0x4ac>
    57b8:	21 96       	adiw	r28, 0x01	; 1
    57ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    57bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    57be:	21 97       	sbiw	r28, 0x01	; 1
    57c0:	01 96       	adiw	r24, 0x01	; 1
    57c2:	21 96       	adiw	r28, 0x01	; 1
    57c4:	9f af       	std	Y+63, r25	; 0x3f
    57c6:	8e af       	std	Y+62, r24	; 0x3e
    57c8:	21 97       	sbiw	r28, 0x01	; 1
    57ca:	21 96       	adiw	r28, 0x01	; 1
    57cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    57ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    57d0:	21 97       	sbiw	r28, 0x01	; 1
    57d2:	95 95       	asr	r25
    57d4:	87 95       	ror	r24
    57d6:	9c 01       	movw	r18, r24
    57d8:	8d 81       	ldd	r24, Y+5	; 0x05
    57da:	9e 81       	ldd	r25, Y+6	; 0x06
    57dc:	82 17       	cp	r24, r18
    57de:	93 07       	cpc	r25, r19
    57e0:	0c f4       	brge	.+2      	; 0x57e4 <IntToString+0x4c6>
    57e2:	a2 cf       	rjmp	.-188    	; 0x5728 <IntToString+0x40a>
    57e4:	5f c0       	rjmp	.+190    	; 0x58a4 <IntToString+0x586>
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	9e 83       	std	Y+6, r25	; 0x06
    57ec:	8d 83       	std	Y+5, r24	; 0x05
    57ee:	38 c0       	rjmp	.+112    	; 0x5860 <IntToString+0x542>
			{
				temp = str[i-j] ;
    57f0:	2f 81       	ldd	r18, Y+7	; 0x07
    57f2:	38 85       	ldd	r19, Y+8	; 0x08
    57f4:	8d 81       	ldd	r24, Y+5	; 0x05
    57f6:	9e 81       	ldd	r25, Y+6	; 0x06
    57f8:	f9 01       	movw	r30, r18
    57fa:	e8 1b       	sub	r30, r24
    57fc:	f9 0b       	sbc	r31, r25
    57fe:	cf 01       	movw	r24, r30
    5800:	9c 01       	movw	r18, r24
    5802:	89 85       	ldd	r24, Y+9	; 0x09
    5804:	9a 85       	ldd	r25, Y+10	; 0x0a
    5806:	fc 01       	movw	r30, r24
    5808:	e2 0f       	add	r30, r18
    580a:	f3 1f       	adc	r31, r19
    580c:	80 81       	ld	r24, Z
    580e:	88 2f       	mov	r24, r24
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	9c 83       	std	Y+4, r25	; 0x04
    5814:	8b 83       	std	Y+3, r24	; 0x03
				str[i-j] = str[j] ;
    5816:	2f 81       	ldd	r18, Y+7	; 0x07
    5818:	38 85       	ldd	r19, Y+8	; 0x08
    581a:	8d 81       	ldd	r24, Y+5	; 0x05
    581c:	9e 81       	ldd	r25, Y+6	; 0x06
    581e:	a9 01       	movw	r20, r18
    5820:	48 1b       	sub	r20, r24
    5822:	59 0b       	sbc	r21, r25
    5824:	ca 01       	movw	r24, r20
    5826:	9c 01       	movw	r18, r24
    5828:	89 85       	ldd	r24, Y+9	; 0x09
    582a:	9a 85       	ldd	r25, Y+10	; 0x0a
    582c:	dc 01       	movw	r26, r24
    582e:	a2 0f       	add	r26, r18
    5830:	b3 1f       	adc	r27, r19
    5832:	2d 81       	ldd	r18, Y+5	; 0x05
    5834:	3e 81       	ldd	r19, Y+6	; 0x06
    5836:	89 85       	ldd	r24, Y+9	; 0x09
    5838:	9a 85       	ldd	r25, Y+10	; 0x0a
    583a:	fc 01       	movw	r30, r24
    583c:	e2 0f       	add	r30, r18
    583e:	f3 1f       	adc	r31, r19
    5840:	80 81       	ld	r24, Z
    5842:	8c 93       	st	X, r24
				str[j] = temp ;
    5844:	2d 81       	ldd	r18, Y+5	; 0x05
    5846:	3e 81       	ldd	r19, Y+6	; 0x06
    5848:	89 85       	ldd	r24, Y+9	; 0x09
    584a:	9a 85       	ldd	r25, Y+10	; 0x0a
    584c:	fc 01       	movw	r30, r24
    584e:	e2 0f       	add	r30, r18
    5850:	f3 1f       	adc	r31, r19
    5852:	8b 81       	ldd	r24, Y+3	; 0x03
    5854:	80 83       	st	Z, r24
				str[j] = temp ;
			}
		}
		else
		{
			for( j= 1; j <= (i/2)  ; ++j)
    5856:	8d 81       	ldd	r24, Y+5	; 0x05
    5858:	9e 81       	ldd	r25, Y+6	; 0x06
    585a:	01 96       	adiw	r24, 0x01	; 1
    585c:	9e 83       	std	Y+6, r25	; 0x06
    585e:	8d 83       	std	Y+5, r24	; 0x05
    5860:	8f 81       	ldd	r24, Y+7	; 0x07
    5862:	98 85       	ldd	r25, Y+8	; 0x08
    5864:	23 96       	adiw	r28, 0x03	; 3
    5866:	9f af       	std	Y+63, r25	; 0x3f
    5868:	8e af       	std	Y+62, r24	; 0x3e
    586a:	23 97       	sbiw	r28, 0x03	; 3
    586c:	23 96       	adiw	r28, 0x03	; 3
    586e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5870:	9f ad       	ldd	r25, Y+63	; 0x3f
    5872:	23 97       	sbiw	r28, 0x03	; 3
    5874:	99 23       	and	r25, r25
    5876:	4c f4       	brge	.+18     	; 0x588a <IntToString+0x56c>
    5878:	23 96       	adiw	r28, 0x03	; 3
    587a:	ee ad       	ldd	r30, Y+62	; 0x3e
    587c:	ff ad       	ldd	r31, Y+63	; 0x3f
    587e:	23 97       	sbiw	r28, 0x03	; 3
    5880:	31 96       	adiw	r30, 0x01	; 1
    5882:	23 96       	adiw	r28, 0x03	; 3
    5884:	ff af       	std	Y+63, r31	; 0x3f
    5886:	ee af       	std	Y+62, r30	; 0x3e
    5888:	23 97       	sbiw	r28, 0x03	; 3
    588a:	23 96       	adiw	r28, 0x03	; 3
    588c:	8e ad       	ldd	r24, Y+62	; 0x3e
    588e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5890:	23 97       	sbiw	r28, 0x03	; 3
    5892:	95 95       	asr	r25
    5894:	87 95       	ror	r24
    5896:	9c 01       	movw	r18, r24
    5898:	8d 81       	ldd	r24, Y+5	; 0x05
    589a:	9e 81       	ldd	r25, Y+6	; 0x06
    589c:	28 17       	cp	r18, r24
    589e:	39 07       	cpc	r19, r25
    58a0:	0c f0       	brlt	.+2      	; 0x58a4 <IntToString+0x586>
    58a2:	a6 cf       	rjmp	.-180    	; 0x57f0 <IntToString+0x4d2>
				str[j] = temp ;
			}
		}


		str[i] = 0 ;
    58a4:	8f 81       	ldd	r24, Y+7	; 0x07
    58a6:	98 85       	ldd	r25, Y+8	; 0x08
    58a8:	29 85       	ldd	r18, Y+9	; 0x09
    58aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    58ac:	f9 01       	movw	r30, r18
    58ae:	e8 0f       	add	r30, r24
    58b0:	f9 1f       	adc	r31, r25
    58b2:	10 82       	st	Z, r1

	}
}
    58b4:	ce 5b       	subi	r28, 0xBE	; 190
    58b6:	df 4f       	sbci	r29, 0xFF	; 255
    58b8:	0f b6       	in	r0, 0x3f	; 63
    58ba:	f8 94       	cli
    58bc:	de bf       	out	0x3e, r29	; 62
    58be:	0f be       	out	0x3f, r0	; 63
    58c0:	cd bf       	out	0x3d, r28	; 61
    58c2:	cf 91       	pop	r28
    58c4:	df 91       	pop	r29
    58c6:	1f 91       	pop	r17
    58c8:	0f 91       	pop	r16
    58ca:	ff 90       	pop	r15
    58cc:	ef 90       	pop	r14
    58ce:	df 90       	pop	r13
    58d0:	cf 90       	pop	r12
    58d2:	bf 90       	pop	r11
    58d4:	af 90       	pop	r10
    58d6:	9f 90       	pop	r9
    58d8:	8f 90       	pop	r8
    58da:	08 95       	ret

000058dc <UART_SendNumber>:


void UART_SendNumber (s64 num)
{
    58dc:	8f 92       	push	r8
    58de:	9f 92       	push	r9
    58e0:	af 92       	push	r10
    58e2:	bf 92       	push	r11
    58e4:	cf 92       	push	r12
    58e6:	df 92       	push	r13
    58e8:	ef 92       	push	r14
    58ea:	ff 92       	push	r15
    58ec:	0f 93       	push	r16
    58ee:	1f 93       	push	r17
    58f0:	df 93       	push	r29
    58f2:	cf 93       	push	r28
    58f4:	cd b7       	in	r28, 0x3d	; 61
    58f6:	de b7       	in	r29, 0x3e	; 62
    58f8:	a6 97       	sbiw	r28, 0x26	; 38
    58fa:	0f b6       	in	r0, 0x3f	; 63
    58fc:	f8 94       	cli
    58fe:	de bf       	out	0x3e, r29	; 62
    5900:	0f be       	out	0x3f, r0	; 63
    5902:	cd bf       	out	0x3d, r28	; 61
    5904:	2f 8f       	std	Y+31, r18	; 0x1f
    5906:	38 a3       	std	Y+32, r19	; 0x20
    5908:	49 a3       	std	Y+33, r20	; 0x21
    590a:	5a a3       	std	Y+34, r21	; 0x22
    590c:	6b a3       	std	Y+35, r22	; 0x23
    590e:	7c a3       	std	Y+36, r23	; 0x24
    5910:	8d a3       	std	Y+37, r24	; 0x25
    5912:	9e a3       	std	Y+38, r25	; 0x26
	u8 str [30] = {0} ;
    5914:	8e e1       	ldi	r24, 0x1E	; 30
    5916:	fe 01       	movw	r30, r28
    5918:	31 96       	adiw	r30, 0x01	; 1
    591a:	df 01       	movw	r26, r30
    591c:	98 2f       	mov	r25, r24
    591e:	1d 92       	st	X+, r1
    5920:	9a 95       	dec	r25
    5922:	e9 f7       	brne	.-6      	; 0x591e <UART_SendNumber+0x42>
	IntToString(str , num) ;
    5924:	8f 8c       	ldd	r8, Y+31	; 0x1f
    5926:	98 a0       	ldd	r9, Y+32	; 0x20
    5928:	a9 a0       	ldd	r10, Y+33	; 0x21
    592a:	ba a0       	ldd	r11, Y+34	; 0x22
    592c:	cb a0       	ldd	r12, Y+35	; 0x23
    592e:	dc a0       	ldd	r13, Y+36	; 0x24
    5930:	ed a0       	ldd	r14, Y+37	; 0x25
    5932:	fe a0       	ldd	r15, Y+38	; 0x26
    5934:	ce 01       	movw	r24, r28
    5936:	01 96       	adiw	r24, 0x01	; 1
    5938:	08 2d       	mov	r16, r8
    593a:	19 2d       	mov	r17, r9
    593c:	2a 2d       	mov	r18, r10
    593e:	3b 2d       	mov	r19, r11
    5940:	4c 2d       	mov	r20, r12
    5942:	5d 2d       	mov	r21, r13
    5944:	6e 2d       	mov	r22, r14
    5946:	7f 2d       	mov	r23, r15
    5948:	0e 94 8f 29 	call	0x531e	; 0x531e <IntToString>
	UART_SendString(str) ;
    594c:	ce 01       	movw	r24, r28
    594e:	01 96       	adiw	r24, 0x01	; 1
    5950:	0e 94 1f 29 	call	0x523e	; 0x523e <UART_SendString>
	
}
    5954:	a6 96       	adiw	r28, 0x26	; 38
    5956:	0f b6       	in	r0, 0x3f	; 63
    5958:	f8 94       	cli
    595a:	de bf       	out	0x3e, r29	; 62
    595c:	0f be       	out	0x3f, r0	; 63
    595e:	cd bf       	out	0x3d, r28	; 61
    5960:	cf 91       	pop	r28
    5962:	df 91       	pop	r29
    5964:	1f 91       	pop	r17
    5966:	0f 91       	pop	r16
    5968:	ff 90       	pop	r15
    596a:	ef 90       	pop	r14
    596c:	df 90       	pop	r13
    596e:	cf 90       	pop	r12
    5970:	bf 90       	pop	r11
    5972:	af 90       	pop	r10
    5974:	9f 90       	pop	r9
    5976:	8f 90       	pop	r8
    5978:	08 95       	ret

0000597a <UART_SendNumberU32>:
void UART_SendNumberU32(u32 num)
{
    597a:	df 93       	push	r29
    597c:	cf 93       	push	r28
    597e:	00 d0       	rcall	.+0      	; 0x5980 <UART_SendNumberU32+0x6>
    5980:	00 d0       	rcall	.+0      	; 0x5982 <UART_SendNumberU32+0x8>
    5982:	00 d0       	rcall	.+0      	; 0x5984 <UART_SendNumberU32+0xa>
    5984:	cd b7       	in	r28, 0x3d	; 61
    5986:	de b7       	in	r29, 0x3e	; 62
    5988:	6b 83       	std	Y+3, r22	; 0x03
    598a:	7c 83       	std	Y+4, r23	; 0x04
    598c:	8d 83       	std	Y+5, r24	; 0x05
    598e:	9e 83       	std	Y+6, r25	; 0x06
	//UART_Send((u8)num);
	//UART_Send((u8)(num>>8));
	//UART_Send((u8)(num>>16));
	//UART_Send((u8)(num>>24));
	u8*p=&num;
    5990:	ce 01       	movw	r24, r28
    5992:	03 96       	adiw	r24, 0x03	; 3
    5994:	9a 83       	std	Y+2, r25	; 0x02
    5996:	89 83       	std	Y+1, r24	; 0x01
	UART_Send(p[0]);
    5998:	e9 81       	ldd	r30, Y+1	; 0x01
    599a:	fa 81       	ldd	r31, Y+2	; 0x02
    599c:	80 81       	ld	r24, Z
    599e:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
	UART_Send(p[1]);
    59a2:	89 81       	ldd	r24, Y+1	; 0x01
    59a4:	9a 81       	ldd	r25, Y+2	; 0x02
    59a6:	fc 01       	movw	r30, r24
    59a8:	31 96       	adiw	r30, 0x01	; 1
    59aa:	80 81       	ld	r24, Z
    59ac:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
	UART_Send(p[2]);
    59b0:	89 81       	ldd	r24, Y+1	; 0x01
    59b2:	9a 81       	ldd	r25, Y+2	; 0x02
    59b4:	fc 01       	movw	r30, r24
    59b6:	32 96       	adiw	r30, 0x02	; 2
    59b8:	80 81       	ld	r24, Z
    59ba:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
	UART_Send(p[3]);
    59be:	89 81       	ldd	r24, Y+1	; 0x01
    59c0:	9a 81       	ldd	r25, Y+2	; 0x02
    59c2:	fc 01       	movw	r30, r24
    59c4:	33 96       	adiw	r30, 0x03	; 3
    59c6:	80 81       	ld	r24, Z
    59c8:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
}
    59cc:	26 96       	adiw	r28, 0x06	; 6
    59ce:	0f b6       	in	r0, 0x3f	; 63
    59d0:	f8 94       	cli
    59d2:	de bf       	out	0x3e, r29	; 62
    59d4:	0f be       	out	0x3f, r0	; 63
    59d6:	cd bf       	out	0x3d, r28	; 61
    59d8:	cf 91       	pop	r28
    59da:	df 91       	pop	r29
    59dc:	08 95       	ret

000059de <UART_ReceiveNumberU32>:


u32 UART_ReceiveNumberU32(void)
{
    59de:	0f 93       	push	r16
    59e0:	1f 93       	push	r17
    59e2:	df 93       	push	r29
    59e4:	cf 93       	push	r28
    59e6:	00 d0       	rcall	.+0      	; 0x59e8 <UART_ReceiveNumberU32+0xa>
    59e8:	00 d0       	rcall	.+0      	; 0x59ea <UART_ReceiveNumberU32+0xc>
    59ea:	00 d0       	rcall	.+0      	; 0x59ec <UART_ReceiveNumberU32+0xe>
    59ec:	cd b7       	in	r28, 0x3d	; 61
    59ee:	de b7       	in	r29, 0x3e	; 62
	//u8 b3=UART_Receive();
	//u8 b4=UART_Receive();
	//u32 num=0;
	//num=b1|(u32)b2<<8|(u32)b2<<16|(u32)b3<<24;
	u32 num;
	u8*p=&num;
    59f0:	ce 01       	movw	r24, r28
    59f2:	03 96       	adiw	r24, 0x03	; 3
    59f4:	9a 83       	std	Y+2, r25	; 0x02
    59f6:	89 83       	std	Y+1, r24	; 0x01
	p[0]=UART_Receive();
    59f8:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    59fc:	e9 81       	ldd	r30, Y+1	; 0x01
    59fe:	fa 81       	ldd	r31, Y+2	; 0x02
    5a00:	80 83       	st	Z, r24
	p[1]=UART_Receive();
    5a02:	89 81       	ldd	r24, Y+1	; 0x01
    5a04:	9a 81       	ldd	r25, Y+2	; 0x02
    5a06:	8c 01       	movw	r16, r24
    5a08:	0f 5f       	subi	r16, 0xFF	; 255
    5a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a0c:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    5a10:	f8 01       	movw	r30, r16
    5a12:	80 83       	st	Z, r24
	p[2]=UART_Receive();
    5a14:	89 81       	ldd	r24, Y+1	; 0x01
    5a16:	9a 81       	ldd	r25, Y+2	; 0x02
    5a18:	8c 01       	movw	r16, r24
    5a1a:	0e 5f       	subi	r16, 0xFE	; 254
    5a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a1e:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    5a22:	f8 01       	movw	r30, r16
    5a24:	80 83       	st	Z, r24
	p[3]=UART_Receive();
    5a26:	89 81       	ldd	r24, Y+1	; 0x01
    5a28:	9a 81       	ldd	r25, Y+2	; 0x02
    5a2a:	8c 01       	movw	r16, r24
    5a2c:	0d 5f       	subi	r16, 0xFD	; 253
    5a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a30:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    5a34:	f8 01       	movw	r30, r16
    5a36:	80 83       	st	Z, r24
	return num;		
    5a38:	8b 81       	ldd	r24, Y+3	; 0x03
    5a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    5a3c:	ad 81       	ldd	r26, Y+5	; 0x05
    5a3e:	be 81       	ldd	r27, Y+6	; 0x06
}
    5a40:	bc 01       	movw	r22, r24
    5a42:	cd 01       	movw	r24, r26
    5a44:	26 96       	adiw	r28, 0x06	; 6
    5a46:	0f b6       	in	r0, 0x3f	; 63
    5a48:	f8 94       	cli
    5a4a:	de bf       	out	0x3e, r29	; 62
    5a4c:	0f be       	out	0x3f, r0	; 63
    5a4e:	cd bf       	out	0x3d, r28	; 61
    5a50:	cf 91       	pop	r28
    5a52:	df 91       	pop	r29
    5a54:	1f 91       	pop	r17
    5a56:	0f 91       	pop	r16
    5a58:	08 95       	ret

00005a5a <UART_SendString_CheckSum>:

void UART_SendString_CheckSum(u8*str)
{
    5a5a:	df 93       	push	r29
    5a5c:	cf 93       	push	r28
    5a5e:	00 d0       	rcall	.+0      	; 0x5a60 <UART_SendString_CheckSum+0x6>
    5a60:	00 d0       	rcall	.+0      	; 0x5a62 <UART_SendString_CheckSum+0x8>
    5a62:	00 d0       	rcall	.+0      	; 0x5a64 <UART_SendString_CheckSum+0xa>
    5a64:	cd b7       	in	r28, 0x3d	; 61
    5a66:	de b7       	in	r29, 0x3e	; 62
    5a68:	9e 83       	std	Y+6, r25	; 0x06
    5a6a:	8d 83       	std	Y+5, r24	; 0x05
	u8 i=0,j=0;
    5a6c:	1c 82       	std	Y+4, r1	; 0x04
    5a6e:	1b 82       	std	Y+3, r1	; 0x03
	u16 sum=0;
    5a70:	1a 82       	std	Y+2, r1	; 0x02
    5a72:	19 82       	std	Y+1, r1	; 0x01
	for (i=0;str[i];i++)
    5a74:	1c 82       	std	Y+4, r1	; 0x04
    5a76:	14 c0       	rjmp	.+40     	; 0x5aa0 <UART_SendString_CheckSum+0x46>
	{
		sum+=str[i];
    5a78:	8c 81       	ldd	r24, Y+4	; 0x04
    5a7a:	28 2f       	mov	r18, r24
    5a7c:	30 e0       	ldi	r19, 0x00	; 0
    5a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a80:	9e 81       	ldd	r25, Y+6	; 0x06
    5a82:	fc 01       	movw	r30, r24
    5a84:	e2 0f       	add	r30, r18
    5a86:	f3 1f       	adc	r31, r19
    5a88:	80 81       	ld	r24, Z
    5a8a:	28 2f       	mov	r18, r24
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	89 81       	ldd	r24, Y+1	; 0x01
    5a90:	9a 81       	ldd	r25, Y+2	; 0x02
    5a92:	82 0f       	add	r24, r18
    5a94:	93 1f       	adc	r25, r19
    5a96:	9a 83       	std	Y+2, r25	; 0x02
    5a98:	89 83       	std	Y+1, r24	; 0x01

void UART_SendString_CheckSum(u8*str)
{
	u8 i=0,j=0;
	u16 sum=0;
	for (i=0;str[i];i++)
    5a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a9c:	8f 5f       	subi	r24, 0xFF	; 255
    5a9e:	8c 83       	std	Y+4, r24	; 0x04
    5aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    5aa2:	28 2f       	mov	r18, r24
    5aa4:	30 e0       	ldi	r19, 0x00	; 0
    5aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    5aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aaa:	fc 01       	movw	r30, r24
    5aac:	e2 0f       	add	r30, r18
    5aae:	f3 1f       	adc	r31, r19
    5ab0:	80 81       	ld	r24, Z
    5ab2:	88 23       	and	r24, r24
    5ab4:	09 f7       	brne	.-62     	; 0x5a78 <UART_SendString_CheckSum+0x1e>
	{
		sum+=str[i];
	}
	UART_Send(i);
    5ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    5ab8:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
	for (j=0;str[j];j++)
    5abc:	1b 82       	std	Y+3, r1	; 0x03
    5abe:	0e c0       	rjmp	.+28     	; 0x5adc <UART_SendString_CheckSum+0x82>
	{
		UART_Send(str[j]);
    5ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac2:	28 2f       	mov	r18, r24
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aca:	fc 01       	movw	r30, r24
    5acc:	e2 0f       	add	r30, r18
    5ace:	f3 1f       	adc	r31, r19
    5ad0:	80 81       	ld	r24, Z
    5ad2:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
	for (i=0;str[i];i++)
	{
		sum+=str[i];
	}
	UART_Send(i);
	for (j=0;str[j];j++)
    5ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ad8:	8f 5f       	subi	r24, 0xFF	; 255
    5ada:	8b 83       	std	Y+3, r24	; 0x03
    5adc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ade:	28 2f       	mov	r18, r24
    5ae0:	30 e0       	ldi	r19, 0x00	; 0
    5ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ae6:	fc 01       	movw	r30, r24
    5ae8:	e2 0f       	add	r30, r18
    5aea:	f3 1f       	adc	r31, r19
    5aec:	80 81       	ld	r24, Z
    5aee:	88 23       	and	r24, r24
    5af0:	39 f7       	brne	.-50     	; 0x5ac0 <UART_SendString_CheckSum+0x66>
	{
		UART_Send(str[j]);
	}
	UART_Send((u8)sum);
    5af2:	89 81       	ldd	r24, Y+1	; 0x01
    5af4:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
	UART_Send((u8)sum>>8);
    5af8:	89 81       	ldd	r24, Y+1	; 0x01
    5afa:	88 2f       	mov	r24, r24
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	89 2f       	mov	r24, r25
    5b00:	99 0f       	add	r25, r25
    5b02:	99 0b       	sbc	r25, r25
    5b04:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <UART_Send>
	
}
    5b08:	26 96       	adiw	r28, 0x06	; 6
    5b0a:	0f b6       	in	r0, 0x3f	; 63
    5b0c:	f8 94       	cli
    5b0e:	de bf       	out	0x3e, r29	; 62
    5b10:	0f be       	out	0x3f, r0	; 63
    5b12:	cd bf       	out	0x3d, r28	; 61
    5b14:	cf 91       	pop	r28
    5b16:	df 91       	pop	r29
    5b18:	08 95       	ret

00005b1a <UART_ReceiveString_CheckSum>:
u8 UART_ReceiveString_CheckSum(u8*str)
{
    5b1a:	af 92       	push	r10
    5b1c:	bf 92       	push	r11
    5b1e:	cf 92       	push	r12
    5b20:	df 92       	push	r13
    5b22:	ef 92       	push	r14
    5b24:	ff 92       	push	r15
    5b26:	0f 93       	push	r16
    5b28:	1f 93       	push	r17
    5b2a:	df 93       	push	r29
    5b2c:	cf 93       	push	r28
    5b2e:	cd b7       	in	r28, 0x3d	; 61
    5b30:	de b7       	in	r29, 0x3e	; 62
    5b32:	2b 97       	sbiw	r28, 0x0b	; 11
    5b34:	0f b6       	in	r0, 0x3f	; 63
    5b36:	f8 94       	cli
    5b38:	de bf       	out	0x3e, r29	; 62
    5b3a:	0f be       	out	0x3f, r0	; 63
    5b3c:	cd bf       	out	0x3d, r28	; 61
    5b3e:	9a 87       	std	Y+10, r25	; 0x0a
    5b40:	89 87       	std	Y+9, r24	; 0x09
	u8 i,b1,b2,lens=UART_Receive();
    5b42:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    5b46:	8d 83       	std	Y+5, r24	; 0x05
	u16 sum_calc=0,sum_rece;
    5b48:	1c 82       	std	Y+4, r1	; 0x04
    5b4a:	1b 82       	std	Y+3, r1	; 0x03
	for (i=0;i<lens;i++)
    5b4c:	18 86       	std	Y+8, r1	; 0x08
    5b4e:	20 c0       	rjmp	.+64     	; 0x5b90 <UART_ReceiveString_CheckSum+0x76>
	{
		str[i]=UART_Receive();
    5b50:	88 85       	ldd	r24, Y+8	; 0x08
    5b52:	28 2f       	mov	r18, r24
    5b54:	30 e0       	ldi	r19, 0x00	; 0
    5b56:	89 85       	ldd	r24, Y+9	; 0x09
    5b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b5a:	8c 01       	movw	r16, r24
    5b5c:	02 0f       	add	r16, r18
    5b5e:	13 1f       	adc	r17, r19
    5b60:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    5b64:	f8 01       	movw	r30, r16
    5b66:	80 83       	st	Z, r24
		sum_calc+=str[i];
    5b68:	88 85       	ldd	r24, Y+8	; 0x08
    5b6a:	28 2f       	mov	r18, r24
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	89 85       	ldd	r24, Y+9	; 0x09
    5b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b72:	fc 01       	movw	r30, r24
    5b74:	e2 0f       	add	r30, r18
    5b76:	f3 1f       	adc	r31, r19
    5b78:	80 81       	ld	r24, Z
    5b7a:	28 2f       	mov	r18, r24
    5b7c:	30 e0       	ldi	r19, 0x00	; 0
    5b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b80:	9c 81       	ldd	r25, Y+4	; 0x04
    5b82:	82 0f       	add	r24, r18
    5b84:	93 1f       	adc	r25, r19
    5b86:	9c 83       	std	Y+4, r25	; 0x04
    5b88:	8b 83       	std	Y+3, r24	; 0x03
}
u8 UART_ReceiveString_CheckSum(u8*str)
{
	u8 i,b1,b2,lens=UART_Receive();
	u16 sum_calc=0,sum_rece;
	for (i=0;i<lens;i++)
    5b8a:	88 85       	ldd	r24, Y+8	; 0x08
    5b8c:	8f 5f       	subi	r24, 0xFF	; 255
    5b8e:	88 87       	std	Y+8, r24	; 0x08
    5b90:	98 85       	ldd	r25, Y+8	; 0x08
    5b92:	8d 81       	ldd	r24, Y+5	; 0x05
    5b94:	98 17       	cp	r25, r24
    5b96:	e0 f2       	brcs	.-72     	; 0x5b50 <UART_ReceiveString_CheckSum+0x36>
	{
		str[i]=UART_Receive();
		sum_calc+=str[i];
	}
	str[i]=0;
    5b98:	88 85       	ldd	r24, Y+8	; 0x08
    5b9a:	28 2f       	mov	r18, r24
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	89 85       	ldd	r24, Y+9	; 0x09
    5ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	e2 0f       	add	r30, r18
    5ba6:	f3 1f       	adc	r31, r19
    5ba8:	10 82       	st	Z, r1
	b1=UART_Receive();
    5baa:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    5bae:	8f 83       	std	Y+7, r24	; 0x07
	b2=UART_Receive();
    5bb0:	0e 94 18 28 	call	0x5030	; 0x5030 <UART_Receive>
    5bb4:	8e 83       	std	Y+6, r24	; 0x06
	sum_rece=(u16)b1|(((u16)b2)<<8);
    5bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    5bb8:	28 2f       	mov	r18, r24
    5bba:	30 e0       	ldi	r19, 0x00	; 0
    5bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    5bbe:	88 2f       	mov	r24, r24
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	98 2f       	mov	r25, r24
    5bc4:	88 27       	eor	r24, r24
    5bc6:	82 2b       	or	r24, r18
    5bc8:	93 2b       	or	r25, r19
    5bca:	9a 83       	std	Y+2, r25	; 0x02
    5bcc:	89 83       	std	Y+1, r24	; 0x01
	/*************************************/
	LCD_GoTo(0,4);
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    5bd0:	64 e0       	ldi	r22, 0x04	; 4
    5bd2:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_GoTo>
	LCD_WriteNumber(lens);
    5bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    5bd8:	a8 2e       	mov	r10, r24
    5bda:	bb 24       	eor	r11, r11
    5bdc:	cc 24       	eor	r12, r12
    5bde:	dd 24       	eor	r13, r13
    5be0:	ee 24       	eor	r14, r14
    5be2:	ff 24       	eor	r15, r15
    5be4:	87 01       	movw	r16, r14
    5be6:	2a 2d       	mov	r18, r10
    5be8:	3b 2d       	mov	r19, r11
    5bea:	4c 2d       	mov	r20, r12
    5bec:	5d 2d       	mov	r21, r13
    5bee:	6e 2d       	mov	r22, r14
    5bf0:	7f 2d       	mov	r23, r15
    5bf2:	80 2f       	mov	r24, r16
    5bf4:	91 2f       	mov	r25, r17
    5bf6:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <LCD_WriteNumber>
	LCD_WriteChar('-');
    5bfa:	8d e2       	ldi	r24, 0x2D	; 45
    5bfc:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <LCD_WriteChar>
	LCD_WriteNumber(sum_calc);
    5c00:	8b 81       	ldd	r24, Y+3	; 0x03
    5c02:	9c 81       	ldd	r25, Y+4	; 0x04
    5c04:	5c 01       	movw	r10, r24
    5c06:	cc 24       	eor	r12, r12
    5c08:	dd 24       	eor	r13, r13
    5c0a:	ee 24       	eor	r14, r14
    5c0c:	ff 24       	eor	r15, r15
    5c0e:	87 01       	movw	r16, r14
    5c10:	2a 2d       	mov	r18, r10
    5c12:	3b 2d       	mov	r19, r11
    5c14:	4c 2d       	mov	r20, r12
    5c16:	5d 2d       	mov	r21, r13
    5c18:	6e 2d       	mov	r22, r14
    5c1a:	7f 2d       	mov	r23, r15
    5c1c:	80 2f       	mov	r24, r16
    5c1e:	91 2f       	mov	r25, r17
    5c20:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <LCD_WriteNumber>
	LCD_WriteChar('-');
    5c24:	8d e2       	ldi	r24, 0x2D	; 45
    5c26:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <LCD_WriteChar>
	LCD_WriteNumber(sum_rece);
    5c2a:	89 81       	ldd	r24, Y+1	; 0x01
    5c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c2e:	5c 01       	movw	r10, r24
    5c30:	cc 24       	eor	r12, r12
    5c32:	dd 24       	eor	r13, r13
    5c34:	ee 24       	eor	r14, r14
    5c36:	ff 24       	eor	r15, r15
    5c38:	87 01       	movw	r16, r14
    5c3a:	2a 2d       	mov	r18, r10
    5c3c:	3b 2d       	mov	r19, r11
    5c3e:	4c 2d       	mov	r20, r12
    5c40:	5d 2d       	mov	r21, r13
    5c42:	6e 2d       	mov	r22, r14
    5c44:	7f 2d       	mov	r23, r15
    5c46:	80 2f       	mov	r24, r16
    5c48:	91 2f       	mov	r25, r17
    5c4a:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <LCD_WriteNumber>
	if (sum_calc==sum_rece)
    5c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    5c50:	3c 81       	ldd	r19, Y+4	; 0x04
    5c52:	89 81       	ldd	r24, Y+1	; 0x01
    5c54:	9a 81       	ldd	r25, Y+2	; 0x02
    5c56:	28 17       	cp	r18, r24
    5c58:	39 07       	cpc	r19, r25
    5c5a:	19 f4       	brne	.+6      	; 0x5c62 <UART_ReceiveString_CheckSum+0x148>
	{
		return 1;
    5c5c:	f1 e0       	ldi	r31, 0x01	; 1
    5c5e:	fb 87       	std	Y+11, r31	; 0x0b
    5c60:	04 c0       	rjmp	.+8      	; 0x5c6a <UART_ReceiveString_CheckSum+0x150>
	}
	else
	{
		str[0]=0;
    5c62:	e9 85       	ldd	r30, Y+9	; 0x09
    5c64:	fa 85       	ldd	r31, Y+10	; 0x0a
    5c66:	10 82       	st	Z, r1
		return 0;
    5c68:	1b 86       	std	Y+11, r1	; 0x0b
    5c6a:	8b 85       	ldd	r24, Y+11	; 0x0b
	}
	
}
    5c6c:	2b 96       	adiw	r28, 0x0b	; 11
    5c6e:	0f b6       	in	r0, 0x3f	; 63
    5c70:	f8 94       	cli
    5c72:	de bf       	out	0x3e, r29	; 62
    5c74:	0f be       	out	0x3f, r0	; 63
    5c76:	cd bf       	out	0x3d, r28	; 61
    5c78:	cf 91       	pop	r28
    5c7a:	df 91       	pop	r29
    5c7c:	1f 91       	pop	r17
    5c7e:	0f 91       	pop	r16
    5c80:	ff 90       	pop	r15
    5c82:	ef 90       	pop	r14
    5c84:	df 90       	pop	r13
    5c86:	cf 90       	pop	r12
    5c88:	bf 90       	pop	r11
    5c8a:	af 90       	pop	r10
    5c8c:	08 95       	ret

00005c8e <UART_SendString_Asynch>:
static u8* RX_Str;
static void TX_Func(void);
static void RX_Func(void);
static u8 TX_Flag=1;
void UART_SendString_Asynch(u8*str)
{
    5c8e:	df 93       	push	r29
    5c90:	cf 93       	push	r28
    5c92:	00 d0       	rcall	.+0      	; 0x5c94 <UART_SendString_Asynch+0x6>
    5c94:	cd b7       	in	r28, 0x3d	; 61
    5c96:	de b7       	in	r29, 0x3e	; 62
    5c98:	9a 83       	std	Y+2, r25	; 0x02
    5c9a:	89 83       	std	Y+1, r24	; 0x01
	if (TX_Flag==1)
    5c9c:	80 91 7e 01 	lds	r24, 0x017E
    5ca0:	81 30       	cpi	r24, 0x01	; 1
    5ca2:	99 f4       	brne	.+38     	; 0x5cca <UART_SendString_Asynch+0x3c>
	{
	TX_Flag=0;
    5ca4:	10 92 7e 01 	sts	0x017E, r1
		UART_TX_SetCallBack(TX_Func);
    5ca8:	8a e6       	ldi	r24, 0x6A	; 106
    5caa:	9e e2       	ldi	r25, 0x2E	; 46
    5cac:	0e 94 a7 28 	call	0x514e	; 0x514e <UART_TX_SetCallBack>
		UART_TX_InterruptEnable();
    5cb0:	0e 94 79 28 	call	0x50f2	; 0x50f2 <UART_TX_InterruptEnable>
		UART_SendNoBlock(str[0]);
    5cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    5cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    5cb8:	80 81       	ld	r24, Z
    5cba:	0e 94 45 28 	call	0x508a	; 0x508a <UART_SendNoBlock>
		TX_Str=str;
    5cbe:	89 81       	ldd	r24, Y+1	; 0x01
    5cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    5cc2:	90 93 ac 01 	sts	0x01AC, r25
    5cc6:	80 93 ab 01 	sts	0x01AB, r24
		
	
	}
	
}
    5cca:	0f 90       	pop	r0
    5ccc:	0f 90       	pop	r0
    5cce:	cf 91       	pop	r28
    5cd0:	df 91       	pop	r29
    5cd2:	08 95       	ret

00005cd4 <TX_Func>:

static void TX_Func(void)
{
    5cd4:	df 93       	push	r29
    5cd6:	cf 93       	push	r28
    5cd8:	cd b7       	in	r28, 0x3d	; 61
    5cda:	de b7       	in	r29, 0x3e	; 62
	static u8 i=1;
	if (TX_Str[i]!=0)
    5cdc:	20 91 ab 01 	lds	r18, 0x01AB
    5ce0:	30 91 ac 01 	lds	r19, 0x01AC
    5ce4:	80 91 7f 01 	lds	r24, 0x017F
    5ce8:	88 2f       	mov	r24, r24
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	f9 01       	movw	r30, r18
    5cee:	e8 0f       	add	r30, r24
    5cf0:	f9 1f       	adc	r31, r25
    5cf2:	80 81       	ld	r24, Z
    5cf4:	88 23       	and	r24, r24
    5cf6:	a1 f0       	breq	.+40     	; 0x5d20 <TX_Func+0x4c>
	{
		UART_SendNoBlock(TX_Str[i]);
    5cf8:	20 91 ab 01 	lds	r18, 0x01AB
    5cfc:	30 91 ac 01 	lds	r19, 0x01AC
    5d00:	80 91 7f 01 	lds	r24, 0x017F
    5d04:	88 2f       	mov	r24, r24
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	f9 01       	movw	r30, r18
    5d0a:	e8 0f       	add	r30, r24
    5d0c:	f9 1f       	adc	r31, r25
    5d0e:	80 81       	ld	r24, Z
    5d10:	0e 94 45 28 	call	0x508a	; 0x508a <UART_SendNoBlock>
		i++;
    5d14:	80 91 7f 01 	lds	r24, 0x017F
    5d18:	8f 5f       	subi	r24, 0xFF	; 255
    5d1a:	80 93 7f 01 	sts	0x017F, r24
    5d1e:	06 c0       	rjmp	.+12     	; 0x5d2c <TX_Func+0x58>
	}
	else
	{
		i=1;
    5d20:	81 e0       	ldi	r24, 0x01	; 1
    5d22:	80 93 7f 01 	sts	0x017F, r24
		
		TX_Flag=1;
    5d26:	81 e0       	ldi	r24, 0x01	; 1
    5d28:	80 93 7e 01 	sts	0x017E, r24
	}
	
}
    5d2c:	cf 91       	pop	r28
    5d2e:	df 91       	pop	r29
    5d30:	08 95       	ret

00005d32 <UART_ReceiveString_Asynch>:

void UART_ReceiveString_Asynch(u8*str)
{
    5d32:	df 93       	push	r29
    5d34:	cf 93       	push	r28
    5d36:	00 d0       	rcall	.+0      	; 0x5d38 <UART_ReceiveString_Asynch+0x6>
    5d38:	cd b7       	in	r28, 0x3d	; 61
    5d3a:	de b7       	in	r29, 0x3e	; 62
    5d3c:	9a 83       	std	Y+2, r25	; 0x02
    5d3e:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_InterruptEnable();
    5d40:	0e 94 5d 28 	call	0x50ba	; 0x50ba <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(RX_Func);
    5d44:	81 eb       	ldi	r24, 0xB1	; 177
    5d46:	9e e2       	ldi	r25, 0x2E	; 46
    5d48:	0e 94 95 28 	call	0x512a	; 0x512a <UART_RX_SetCallBack>
	RX_Str=str;
    5d4c:	89 81       	ldd	r24, Y+1	; 0x01
    5d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d50:	90 93 ae 01 	sts	0x01AE, r25
    5d54:	80 93 ad 01 	sts	0x01AD, r24
}
    5d58:	0f 90       	pop	r0
    5d5a:	0f 90       	pop	r0
    5d5c:	cf 91       	pop	r28
    5d5e:	df 91       	pop	r29
    5d60:	08 95       	ret

00005d62 <RX_Func>:

static void RX_Func(void)
{
    5d62:	0f 93       	push	r16
    5d64:	1f 93       	push	r17
    5d66:	df 93       	push	r29
    5d68:	cf 93       	push	r28
    5d6a:	cd b7       	in	r28, 0x3d	; 61
    5d6c:	de b7       	in	r29, 0x3e	; 62
	static u8 i=0;
	RX_Str[i]=UART_ReceiveNoBlock();
    5d6e:	20 91 ad 01 	lds	r18, 0x01AD
    5d72:	30 91 ae 01 	lds	r19, 0x01AE
    5d76:	80 91 aa 01 	lds	r24, 0x01AA
    5d7a:	88 2f       	mov	r24, r24
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	89 01       	movw	r16, r18
    5d80:	08 0f       	add	r16, r24
    5d82:	19 1f       	adc	r17, r25
    5d84:	0e 94 53 28 	call	0x50a6	; 0x50a6 <UART_ReceiveNoBlock>
    5d88:	f8 01       	movw	r30, r16
    5d8a:	80 83       	st	Z, r24
	i++;
    5d8c:	80 91 aa 01 	lds	r24, 0x01AA
    5d90:	8f 5f       	subi	r24, 0xFF	; 255
    5d92:	80 93 aa 01 	sts	0x01AA, r24
    5d96:	cf 91       	pop	r28
    5d98:	df 91       	pop	r29
    5d9a:	1f 91       	pop	r17
    5d9c:	0f 91       	pop	r16
    5d9e:	08 95       	ret

00005da0 <main>:




int main (void)
{
    5da0:	df 93       	push	r29
    5da2:	cf 93       	push	r28
    5da4:	cd b7       	in	r28, 0x3d	; 61
    5da6:	de b7       	in	r29, 0x3e	; 62
    5da8:	c2 54       	subi	r28, 0x42	; 66
    5daa:	d0 40       	sbci	r29, 0x00	; 0
    5dac:	0f b6       	in	r0, 0x3f	; 63
    5dae:	f8 94       	cli
    5db0:	de bf       	out	0x3e, r29	; 62
    5db2:	0f be       	out	0x3f, r0	; 63
    5db4:	cd bf       	out	0x3d, r28	; 61
	u8 j ;
	u8 str[50] = {0};	//it will contain the signals and will be send when calling EX2_Flag back
    5db6:	82 e3       	ldi	r24, 0x32	; 50
    5db8:	fe 01       	movw	r30, r28
    5dba:	71 96       	adiw	r30, 0x11	; 17
    5dbc:	df 01       	movw	r26, r30
    5dbe:	98 2f       	mov	r25, r24
    5dc0:	1d 92       	st	X+, r1
    5dc2:	9a 95       	dec	r25
    5dc4:	e9 f7       	brne	.-6      	; 0x5dc0 <main+0x20>

	DIO_Init() ;
    5dc6:	0e 94 4e 1a 	call	0x349c	; 0x349c <DIO_Init>
	DIO_WritePIN(PINA7 , HIGH);
    5dca:	87 e0       	ldi	r24, 0x07	; 7
    5dcc:	61 e0       	ldi	r22, 0x01	; 1
    5dce:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
	LCD_Init() ;
    5dd2:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_Init>


	//for initializing ADC and choosing the mode and prescaller
	ADC_Init(VREF_AVCC , ADC_SCALER_64) ;
    5dd6:	81 e0       	ldi	r24, 0x01	; 1
    5dd8:	66 e0       	ldi	r22, 0x06	; 6
    5dda:	0e 94 08 16 	call	0x2c10	; 0x2c10 <ADC_Init>

	UART_Init() ;
    5dde:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <UART_Init>
	sei() ;
    5de2:	78 94       	sei
	//UART_vidinit();

	//for external interrupt 0 initializing and enabling and calling EX0_Flag back
	EXI_TriggerEdge(EX_INT0 ,FALLING_EDGE) ;
    5de4:	80 e0       	ldi	r24, 0x00	; 0
    5de6:	62 e0       	ldi	r22, 0x02	; 2
    5de8:	0e 94 9f 1b 	call	0x373e	; 0x373e <EXI_TriggerEdge>
	EXI_SetCallBack(EX_INT0 ,EX0_Flag ) ;
    5dec:	26 e5       	ldi	r18, 0x56	; 86
    5dee:	30 e3       	ldi	r19, 0x30	; 48
    5df0:	80 e0       	ldi	r24, 0x00	; 0
    5df2:	b9 01       	movw	r22, r18
    5df4:	0e 94 a7 1c 	call	0x394e	; 0x394e <EXI_SetCallBack>
	EXI_Enable(EX_INT0) ;
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	0e 94 31 1b 	call	0x3662	; 0x3662 <EXI_Enable>

	//for external interrupt 1 initializing and enabling and calling EX1_Flag back
	EXI_TriggerEdge(EX_INT1 ,FALLING_EDGE) ;
    5dfe:	81 e0       	ldi	r24, 0x01	; 1
    5e00:	62 e0       	ldi	r22, 0x02	; 2
    5e02:	0e 94 9f 1b 	call	0x373e	; 0x373e <EXI_TriggerEdge>
	EXI_SetCallBack(EX_INT1 ,EX1_Flag ) ;
    5e06:	20 e6       	ldi	r18, 0x60	; 96
    5e08:	30 e3       	ldi	r19, 0x30	; 48
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	b9 01       	movw	r22, r18
    5e0e:	0e 94 a7 1c 	call	0x394e	; 0x394e <EXI_SetCallBack>
	EXI_Enable(EX_INT1) ;
    5e12:	81 e0       	ldi	r24, 0x01	; 1
    5e14:	0e 94 31 1b 	call	0x3662	; 0x3662 <EXI_Enable>

	//for external interrupt 2 initializing and enabling and calling EX2_Flag back
	EXI_TriggerEdge(EX_INT2 ,FALLING_EDGE) ;
    5e18:	82 e0       	ldi	r24, 0x02	; 2
    5e1a:	62 e0       	ldi	r22, 0x02	; 2
    5e1c:	0e 94 9f 1b 	call	0x373e	; 0x373e <EXI_TriggerEdge>
	EXI_SetCallBack(EX_INT2 ,EX2_Flag ) ;
    5e20:	2a e6       	ldi	r18, 0x6A	; 106
    5e22:	30 e3       	ldi	r19, 0x30	; 48
    5e24:	82 e0       	ldi	r24, 0x02	; 2
    5e26:	b9 01       	movw	r22, r18
    5e28:	0e 94 a7 1c 	call	0x394e	; 0x394e <EXI_SetCallBack>
	EXI_Enable(EX_INT2) ;
    5e2c:	82 e0       	ldi	r24, 0x02	; 2
    5e2e:	0e 94 31 1b 	call	0x3662	; 0x3662 <EXI_Enable>


	while(1)
	{
		if(flag0 == 1)
    5e32:	80 91 af 01 	lds	r24, 0x01AF
    5e36:	81 30       	cpi	r24, 0x01	; 1
    5e38:	21 f4       	brne	.+8      	; 0x5e42 <main+0xa2>
		{
			//if flag0 is set that means that now start reading the value on ADC
			Timer_MORSE_VidSignalRead() ;
    5e3a:	0e 94 74 30 	call	0x60e8	; 0x60e8 <Timer_MORSE_VidSignalRead>
			//reclear the flag
			flag0 = 0 ;
    5e3e:	10 92 af 01 	sts	0x01AF, r1
		}	
		
		
		if(flag1 == 1)
    5e42:	80 91 b0 01 	lds	r24, 0x01B0
    5e46:	81 30       	cpi	r24, 0x01	; 1
    5e48:	09 f0       	breq	.+2      	; 0x5e4c <main+0xac>
    5e4a:	4f c0       	rjmp	.+158    	; 0x5eea <main+0x14a>
		{
			//here when flag1 is set that mean but the signal in the next array element
			if(signal == 0)
    5e4c:	80 91 b2 01 	lds	r24, 0x01B2
    5e50:	88 23       	and	r24, r24
    5e52:	b9 f4       	brne	.+46     	; 0x5e82 <main+0xe2>
			{
				//here if signal is 0 we will represent it with 33 (ASCII of '!')
				str[counter++] = '!' ;
    5e54:	40 91 17 02 	lds	r20, 0x0217
    5e58:	24 2f       	mov	r18, r20
    5e5a:	30 e0       	ldi	r19, 0x00	; 0
    5e5c:	ce 01       	movw	r24, r28
    5e5e:	41 96       	adiw	r24, 0x11	; 17
    5e60:	fc 01       	movw	r30, r24
    5e62:	e2 0f       	add	r30, r18
    5e64:	f3 1f       	adc	r31, r19
    5e66:	81 e2       	ldi	r24, 0x21	; 33
    5e68:	80 83       	st	Z, r24
    5e6a:	84 2f       	mov	r24, r20
    5e6c:	8f 5f       	subi	r24, 0xFF	; 255
    5e6e:	80 93 17 02 	sts	0x0217, r24
				LCD_GoTo(1,0) ;
    5e72:	81 e0       	ldi	r24, 0x01	; 1
    5e74:	60 e0       	ldi	r22, 0x00	; 0
    5e76:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_GoTo>
				LCD_WriteChar('0') ;
    5e7a:	80 e3       	ldi	r24, 0x30	; 48
    5e7c:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <LCD_WriteChar>
    5e80:	24 c0       	rjmp	.+72     	; 0x5eca <main+0x12a>
			}
			else
			{
				str[counter++] = signal;
    5e82:	50 91 17 02 	lds	r21, 0x0217
    5e86:	25 2f       	mov	r18, r21
    5e88:	30 e0       	ldi	r19, 0x00	; 0
    5e8a:	40 91 b2 01 	lds	r20, 0x01B2
    5e8e:	ce 01       	movw	r24, r28
    5e90:	41 96       	adiw	r24, 0x11	; 17
    5e92:	fc 01       	movw	r30, r24
    5e94:	e2 0f       	add	r30, r18
    5e96:	f3 1f       	adc	r31, r19
    5e98:	40 83       	st	Z, r20
    5e9a:	85 2f       	mov	r24, r21
    5e9c:	8f 5f       	subi	r24, 0xFF	; 255
    5e9e:	80 93 17 02 	sts	0x0217, r24
				LCD_GoTo(1,0) ;
    5ea2:	81 e0       	ldi	r24, 0x01	; 1
    5ea4:	60 e0       	ldi	r22, 0x00	; 0
    5ea6:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_GoTo>
				LCD_WriteChar('0' + str[counter-1]) ;
    5eaa:	80 91 17 02 	lds	r24, 0x0217
    5eae:	88 2f       	mov	r24, r24
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	9c 01       	movw	r18, r24
    5eb4:	21 50       	subi	r18, 0x01	; 1
    5eb6:	30 40       	sbci	r19, 0x00	; 0
    5eb8:	ce 01       	movw	r24, r28
    5eba:	41 96       	adiw	r24, 0x11	; 17
    5ebc:	fc 01       	movw	r30, r24
    5ebe:	e2 0f       	add	r30, r18
    5ec0:	f3 1f       	adc	r31, r19
    5ec2:	80 81       	ld	r24, Z
    5ec4:	80 5d       	subi	r24, 0xD0	; 208
    5ec6:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <LCD_WriteChar>
			}
			
			//reclear the flag and signal
			signal = 0;
    5eca:	10 92 b2 01 	sts	0x01B2, r1
			flag1 = 0;
    5ece:	10 92 b0 01 	sts	0x01B0, r1
			LCD_GoTo(0,0) ;
    5ed2:	80 e0       	ldi	r24, 0x00	; 0
    5ed4:	60 e0       	ldi	r22, 0x00	; 0
    5ed6:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_GoTo>
			LCD_WriteString("                    ");
    5eda:	80 e6       	ldi	r24, 0x60	; 96
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	0e 94 c1 26 	call	0x4d82	; 0x4d82 <LCD_WriteString>
			LCD_GoTo(0,0) ;
    5ee2:	80 e0       	ldi	r24, 0x00	; 0
    5ee4:	60 e0       	ldi	r22, 0x00	; 0
    5ee6:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_GoTo>
		
		}
		
		for(j=0 ; j< counter ; j++)
    5eea:	18 8a       	std	Y+16, r1	; 0x10
    5eec:	25 c0       	rjmp	.+74     	; 0x5f38 <main+0x198>
		{
			//here if number of zeros or ones is 0 we will represent it with 33 (ASCII of '!')
			if(strones[j] == 0)
    5eee:	88 89       	ldd	r24, Y+16	; 0x10
    5ef0:	88 2f       	mov	r24, r24
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	fc 01       	movw	r30, r24
    5ef6:	eb 51       	subi	r30, 0x1B	; 27
    5ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    5efa:	80 81       	ld	r24, Z
    5efc:	88 23       	and	r24, r24
    5efe:	41 f4       	brne	.+16     	; 0x5f10 <main+0x170>
			{
				strones[j] = '!';
    5f00:	88 89       	ldd	r24, Y+16	; 0x10
    5f02:	88 2f       	mov	r24, r24
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	fc 01       	movw	r30, r24
    5f08:	eb 51       	subi	r30, 0x1B	; 27
    5f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f0c:	81 e2       	ldi	r24, 0x21	; 33
    5f0e:	80 83       	st	Z, r24
			}
			if(strzeros[j] == 0)
    5f10:	88 89       	ldd	r24, Y+16	; 0x10
    5f12:	88 2f       	mov	r24, r24
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	fc 01       	movw	r30, r24
    5f18:	ed 54       	subi	r30, 0x4D	; 77
    5f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    5f1c:	80 81       	ld	r24, Z
    5f1e:	88 23       	and	r24, r24
    5f20:	41 f4       	brne	.+16     	; 0x5f32 <main+0x192>
			{
				strzeros[j] = '!';
    5f22:	88 89       	ldd	r24, Y+16	; 0x10
    5f24:	88 2f       	mov	r24, r24
    5f26:	90 e0       	ldi	r25, 0x00	; 0
    5f28:	fc 01       	movw	r30, r24
    5f2a:	ed 54       	subi	r30, 0x4D	; 77
    5f2c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f2e:	81 e2       	ldi	r24, 0x21	; 33
    5f30:	80 83       	st	Z, r24
			LCD_WriteString("                    ");
			LCD_GoTo(0,0) ;
		
		}
		
		for(j=0 ; j< counter ; j++)
    5f32:	88 89       	ldd	r24, Y+16	; 0x10
    5f34:	8f 5f       	subi	r24, 0xFF	; 255
    5f36:	88 8b       	std	Y+16, r24	; 0x10
    5f38:	90 91 17 02 	lds	r25, 0x0217
    5f3c:	88 89       	ldd	r24, Y+16	; 0x10
    5f3e:	89 17       	cp	r24, r25
    5f40:	b0 f2       	brcs	.-84     	; 0x5eee <main+0x14e>
			{
				strzeros[j] = '!';
			}
		}

		if(flag2 == 1)
    5f42:	80 91 b1 01 	lds	r24, 0x01B1
    5f46:	81 30       	cpi	r24, 0x01	; 1
    5f48:	09 f0       	breq	.+2      	; 0x5f4c <main+0x1ac>
    5f4a:	73 cf       	rjmp	.-282    	; 0x5e32 <main+0x92>
		{
			//if flag2 is set send (strzeros , strones) and send str with checksum with UART
			u8 i ;

		    UART_SendString(strzeros) ;
    5f4c:	83 eb       	ldi	r24, 0xB3	; 179
    5f4e:	91 e0       	ldi	r25, 0x01	; 1
    5f50:	0e 94 1f 29 	call	0x523e	; 0x523e <UART_SendString>
			UART_SendString(strones)  ;
    5f54:	85 ee       	ldi	r24, 0xE5	; 229
    5f56:	91 e0       	ldi	r25, 0x01	; 1
    5f58:	0e 94 1f 29 	call	0x523e	; 0x523e <UART_SendString>
			UART_SendString_CheckSum(str) ;
    5f5c:	ce 01       	movw	r24, r28
    5f5e:	41 96       	adiw	r24, 0x11	; 17
    5f60:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <UART_SendString_CheckSum>

			/*UART_u8sendAsynch (strzeros);
			UART_u8sendAsynch (strones);
			UART_u8sendAsynch (str);*/
			//reclear everything
			for(i=0 ; i < counter ; ++i)
    5f64:	1f 86       	std	Y+15, r1	; 0x0f
    5f66:	1a c0       	rjmp	.+52     	; 0x5f9c <main+0x1fc>
			{
				str[i] = 0 ;
    5f68:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f6a:	28 2f       	mov	r18, r24
    5f6c:	30 e0       	ldi	r19, 0x00	; 0
    5f6e:	ce 01       	movw	r24, r28
    5f70:	41 96       	adiw	r24, 0x11	; 17
    5f72:	fc 01       	movw	r30, r24
    5f74:	e2 0f       	add	r30, r18
    5f76:	f3 1f       	adc	r31, r19
    5f78:	10 82       	st	Z, r1
				strones[i] = 0 ;
    5f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f7c:	88 2f       	mov	r24, r24
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	fc 01       	movw	r30, r24
    5f82:	eb 51       	subi	r30, 0x1B	; 27
    5f84:	fe 4f       	sbci	r31, 0xFE	; 254
    5f86:	10 82       	st	Z, r1
				strzeros[i] = 0 ;	
    5f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f8a:	88 2f       	mov	r24, r24
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	fc 01       	movw	r30, r24
    5f90:	ed 54       	subi	r30, 0x4D	; 77
    5f92:	fe 4f       	sbci	r31, 0xFE	; 254
    5f94:	10 82       	st	Z, r1

			/*UART_u8sendAsynch (strzeros);
			UART_u8sendAsynch (strones);
			UART_u8sendAsynch (str);*/
			//reclear everything
			for(i=0 ; i < counter ; ++i)
    5f96:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f98:	8f 5f       	subi	r24, 0xFF	; 255
    5f9a:	8f 87       	std	Y+15, r24	; 0x0f
    5f9c:	90 91 17 02 	lds	r25, 0x0217
    5fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fa2:	89 17       	cp	r24, r25
    5fa4:	08 f3       	brcs	.-62     	; 0x5f68 <main+0x1c8>
			{
				str[i] = 0 ;
				strones[i] = 0 ;
				strzeros[i] = 0 ;	
			}
			counter = 0 ;
    5fa6:	10 92 17 02 	sts	0x0217, r1
			flag2 = 0 ;
    5faa:	10 92 b1 01 	sts	0x01B1, r1
			LCD_GoTo(0,0) ;
    5fae:	80 e0       	ldi	r24, 0x00	; 0
    5fb0:	60 e0       	ldi	r22, 0x00	; 0
    5fb2:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <LCD_GoTo>
			DIO_WritePIN(PINA7 , LOW);
    5fb6:	87 e0       	ldi	r24, 0x07	; 7
    5fb8:	60 e0       	ldi	r22, 0x00	; 0
    5fba:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    5fbe:	80 e0       	ldi	r24, 0x00	; 0
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	aa ef       	ldi	r26, 0xFA	; 250
    5fc4:	b3 e4       	ldi	r27, 0x43	; 67
    5fc6:	8b 87       	std	Y+11, r24	; 0x0b
    5fc8:	9c 87       	std	Y+12, r25	; 0x0c
    5fca:	ad 87       	std	Y+13, r26	; 0x0d
    5fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    5fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fd6:	20 e0       	ldi	r18, 0x00	; 0
    5fd8:	30 e0       	ldi	r19, 0x00	; 0
    5fda:	4a ef       	ldi	r20, 0xFA	; 250
    5fdc:	54 e4       	ldi	r21, 0x44	; 68
    5fde:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5fe2:	dc 01       	movw	r26, r24
    5fe4:	cb 01       	movw	r24, r22
    5fe6:	8f 83       	std	Y+7, r24	; 0x07
    5fe8:	98 87       	std	Y+8, r25	; 0x08
    5fea:	a9 87       	std	Y+9, r26	; 0x09
    5fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5fee:	6f 81       	ldd	r22, Y+7	; 0x07
    5ff0:	78 85       	ldd	r23, Y+8	; 0x08
    5ff2:	89 85       	ldd	r24, Y+9	; 0x09
    5ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ff6:	20 e0       	ldi	r18, 0x00	; 0
    5ff8:	30 e0       	ldi	r19, 0x00	; 0
    5ffa:	40 e8       	ldi	r20, 0x80	; 128
    5ffc:	5f e3       	ldi	r21, 0x3F	; 63
    5ffe:	0e 94 de 13 	call	0x27bc	; 0x27bc <__ltsf2>
    6002:	88 23       	and	r24, r24
    6004:	2c f4       	brge	.+10     	; 0x6010 <main+0x270>
		__ticks = 1;
    6006:	81 e0       	ldi	r24, 0x01	; 1
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	9e 83       	std	Y+6, r25	; 0x06
    600c:	8d 83       	std	Y+5, r24	; 0x05
    600e:	3f c0       	rjmp	.+126    	; 0x608e <main+0x2ee>
	else if (__tmp > 65535)
    6010:	6f 81       	ldd	r22, Y+7	; 0x07
    6012:	78 85       	ldd	r23, Y+8	; 0x08
    6014:	89 85       	ldd	r24, Y+9	; 0x09
    6016:	9a 85       	ldd	r25, Y+10	; 0x0a
    6018:	20 e0       	ldi	r18, 0x00	; 0
    601a:	3f ef       	ldi	r19, 0xFF	; 255
    601c:	4f e7       	ldi	r20, 0x7F	; 127
    601e:	57 e4       	ldi	r21, 0x47	; 71
    6020:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__gtsf2>
    6024:	18 16       	cp	r1, r24
    6026:	4c f5       	brge	.+82     	; 0x607a <main+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6028:	6b 85       	ldd	r22, Y+11	; 0x0b
    602a:	7c 85       	ldd	r23, Y+12	; 0x0c
    602c:	8d 85       	ldd	r24, Y+13	; 0x0d
    602e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6030:	20 e0       	ldi	r18, 0x00	; 0
    6032:	30 e0       	ldi	r19, 0x00	; 0
    6034:	40 e2       	ldi	r20, 0x20	; 32
    6036:	51 e4       	ldi	r21, 0x41	; 65
    6038:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    603c:	dc 01       	movw	r26, r24
    603e:	cb 01       	movw	r24, r22
    6040:	bc 01       	movw	r22, r24
    6042:	cd 01       	movw	r24, r26
    6044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6048:	dc 01       	movw	r26, r24
    604a:	cb 01       	movw	r24, r22
    604c:	9e 83       	std	Y+6, r25	; 0x06
    604e:	8d 83       	std	Y+5, r24	; 0x05
    6050:	0f c0       	rjmp	.+30     	; 0x6070 <main+0x2d0>
    6052:	88 ec       	ldi	r24, 0xC8	; 200
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	9c 83       	std	Y+4, r25	; 0x04
    6058:	8b 83       	std	Y+3, r24	; 0x03
    605a:	8b 81       	ldd	r24, Y+3	; 0x03
    605c:	9c 81       	ldd	r25, Y+4	; 0x04
    605e:	01 97       	sbiw	r24, 0x01	; 1
    6060:	f1 f7       	brne	.-4      	; 0x605e <main+0x2be>
    6062:	9c 83       	std	Y+4, r25	; 0x04
    6064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6066:	8d 81       	ldd	r24, Y+5	; 0x05
    6068:	9e 81       	ldd	r25, Y+6	; 0x06
    606a:	01 97       	sbiw	r24, 0x01	; 1
    606c:	9e 83       	std	Y+6, r25	; 0x06
    606e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6070:	8d 81       	ldd	r24, Y+5	; 0x05
    6072:	9e 81       	ldd	r25, Y+6	; 0x06
    6074:	00 97       	sbiw	r24, 0x00	; 0
    6076:	69 f7       	brne	.-38     	; 0x6052 <main+0x2b2>
    6078:	14 c0       	rjmp	.+40     	; 0x60a2 <main+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    607a:	6f 81       	ldd	r22, Y+7	; 0x07
    607c:	78 85       	ldd	r23, Y+8	; 0x08
    607e:	89 85       	ldd	r24, Y+9	; 0x09
    6080:	9a 85       	ldd	r25, Y+10	; 0x0a
    6082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6086:	dc 01       	movw	r26, r24
    6088:	cb 01       	movw	r24, r22
    608a:	9e 83       	std	Y+6, r25	; 0x06
    608c:	8d 83       	std	Y+5, r24	; 0x05
    608e:	8d 81       	ldd	r24, Y+5	; 0x05
    6090:	9e 81       	ldd	r25, Y+6	; 0x06
    6092:	9a 83       	std	Y+2, r25	; 0x02
    6094:	89 83       	std	Y+1, r24	; 0x01
    6096:	89 81       	ldd	r24, Y+1	; 0x01
    6098:	9a 81       	ldd	r25, Y+2	; 0x02
    609a:	01 97       	sbiw	r24, 0x01	; 1
    609c:	f1 f7       	brne	.-4      	; 0x609a <main+0x2fa>
    609e:	9a 83       	std	Y+2, r25	; 0x02
    60a0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			DIO_WritePIN(PINA7 , HIGH);
    60a2:	87 e0       	ldi	r24, 0x07	; 7
    60a4:	61 e0       	ldi	r22, 0x01	; 1
    60a6:	0e 94 c5 18 	call	0x318a	; 0x318a <DIO_WritePIN>
    60aa:	c3 ce       	rjmp	.-634    	; 0x5e32 <main+0x92>

000060ac <EX0_Flag>:




void EX0_Flag(void)
{
    60ac:	df 93       	push	r29
    60ae:	cf 93       	push	r28
    60b0:	cd b7       	in	r28, 0x3d	; 61
    60b2:	de b7       	in	r29, 0x3e	; 62
	//this function will set the flag0 which will call external interrupt 0
	flag0 = 1;
    60b4:	81 e0       	ldi	r24, 0x01	; 1
    60b6:	80 93 af 01 	sts	0x01AF, r24
}
    60ba:	cf 91       	pop	r28
    60bc:	df 91       	pop	r29
    60be:	08 95       	ret

000060c0 <EX1_Flag>:



void EX1_Flag(void)
{
    60c0:	df 93       	push	r29
    60c2:	cf 93       	push	r28
    60c4:	cd b7       	in	r28, 0x3d	; 61
    60c6:	de b7       	in	r29, 0x3e	; 62
	//this function will set the flag1 which will call external interrupt 1
	flag1 = 1;
    60c8:	81 e0       	ldi	r24, 0x01	; 1
    60ca:	80 93 b0 01 	sts	0x01B0, r24
}
    60ce:	cf 91       	pop	r28
    60d0:	df 91       	pop	r29
    60d2:	08 95       	ret

000060d4 <EX2_Flag>:


void EX2_Flag(void)
{
    60d4:	df 93       	push	r29
    60d6:	cf 93       	push	r28
    60d8:	cd b7       	in	r28, 0x3d	; 61
    60da:	de b7       	in	r29, 0x3e	; 62
	//this function will set the flag2 which will call external interrupt 2
	flag2 = 1;
    60dc:	81 e0       	ldi	r24, 0x01	; 1
    60de:	80 93 b1 01 	sts	0x01B1, r24
}
    60e2:	cf 91       	pop	r28
    60e4:	df 91       	pop	r29
    60e6:	08 95       	ret

000060e8 <Timer_MORSE_VidSignalRead>:



void Timer_MORSE_VidSignalRead(void)
{
    60e8:	df 93       	push	r29
    60ea:	cf 93       	push	r28
    60ec:	00 d0       	rcall	.+0      	; 0x60ee <Timer_MORSE_VidSignalRead+0x6>
    60ee:	00 d0       	rcall	.+0      	; 0x60f0 <Timer_MORSE_VidSignalRead+0x8>
    60f0:	cd b7       	in	r28, 0x3d	; 61
    60f2:	de b7       	in	r29, 0x3e	; 62
	//this function will read the value of ADC0 and convert it to signal
	u16 adc , volt ;
	adc = ADC_Read(CH_0) ;
    60f4:	80 e0       	ldi	r24, 0x00	; 0
    60f6:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_Read>
    60fa:	9c 83       	std	Y+4, r25	; 0x04
    60fc:	8b 83       	std	Y+3, r24	; 0x03
	volt = ((u32)adc*5000) /1023 ;		//mapping
    60fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6100:	9c 81       	ldd	r25, Y+4	; 0x04
    6102:	cc 01       	movw	r24, r24
    6104:	a0 e0       	ldi	r26, 0x00	; 0
    6106:	b0 e0       	ldi	r27, 0x00	; 0
    6108:	28 e8       	ldi	r18, 0x88	; 136
    610a:	33 e1       	ldi	r19, 0x13	; 19
    610c:	40 e0       	ldi	r20, 0x00	; 0
    610e:	50 e0       	ldi	r21, 0x00	; 0
    6110:	bc 01       	movw	r22, r24
    6112:	cd 01       	movw	r24, r26
    6114:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__mulsi3>
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22
    611c:	2f ef       	ldi	r18, 0xFF	; 255
    611e:	33 e0       	ldi	r19, 0x03	; 3
    6120:	40 e0       	ldi	r20, 0x00	; 0
    6122:	50 e0       	ldi	r21, 0x00	; 0
    6124:	bc 01       	movw	r22, r24
    6126:	cd 01       	movw	r24, r26
    6128:	0e 94 01 31 	call	0x6202	; 0x6202 <__udivmodsi4>
    612c:	da 01       	movw	r26, r20
    612e:	c9 01       	movw	r24, r18
    6130:	9a 83       	std	Y+2, r25	; 0x02
    6132:	89 83       	std	Y+1, r24	; 0x01
	//if reads logical 0 it will be represented in signal by one and ('.')
	if(volt >= 0 && volt <= 2500)
    6134:	89 81       	ldd	r24, Y+1	; 0x01
    6136:	9a 81       	ldd	r25, Y+2	; 0x02
    6138:	29 e0       	ldi	r18, 0x09	; 9
    613a:	85 3c       	cpi	r24, 0xC5	; 197
    613c:	92 07       	cpc	r25, r18
    613e:	b0 f4       	brcc	.+44     	; 0x616c <Timer_MORSE_VidSignalRead+0x84>
	{
		signal = (signal<<1) | 0 ;
    6140:	80 91 b2 01 	lds	r24, 0x01B2
    6144:	88 0f       	add	r24, r24
    6146:	80 93 b2 01 	sts	0x01B2, r24
		strzeros[counter]++ ;
    614a:	80 91 17 02 	lds	r24, 0x0217
    614e:	28 2f       	mov	r18, r24
    6150:	30 e0       	ldi	r19, 0x00	; 0
    6152:	f9 01       	movw	r30, r18
    6154:	ed 54       	subi	r30, 0x4D	; 77
    6156:	fe 4f       	sbci	r31, 0xFE	; 254
    6158:	80 81       	ld	r24, Z
    615a:	8f 5f       	subi	r24, 0xFF	; 255
    615c:	f9 01       	movw	r30, r18
    615e:	ed 54       	subi	r30, 0x4D	; 77
    6160:	fe 4f       	sbci	r31, 0xFE	; 254
    6162:	80 83       	st	Z, r24
		LCD_WriteChar('.') ;
    6164:	8e e2       	ldi	r24, 0x2E	; 46
    6166:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <LCD_WriteChar>
    616a:	25 c0       	rjmp	.+74     	; 0x61b6 <Timer_MORSE_VidSignalRead+0xce>
	}
	//if reads logical 1 it will be represented in signal by zero and ('-')
	else if(volt >2500 && volt <= 5000)
    616c:	89 81       	ldd	r24, Y+1	; 0x01
    616e:	9a 81       	ldd	r25, Y+2	; 0x02
    6170:	29 e0       	ldi	r18, 0x09	; 9
    6172:	85 3c       	cpi	r24, 0xC5	; 197
    6174:	92 07       	cpc	r25, r18
    6176:	f8 f0       	brcs	.+62     	; 0x61b6 <Timer_MORSE_VidSignalRead+0xce>
    6178:	89 81       	ldd	r24, Y+1	; 0x01
    617a:	9a 81       	ldd	r25, Y+2	; 0x02
    617c:	23 e1       	ldi	r18, 0x13	; 19
    617e:	89 38       	cpi	r24, 0x89	; 137
    6180:	92 07       	cpc	r25, r18
    6182:	c8 f4       	brcc	.+50     	; 0x61b6 <Timer_MORSE_VidSignalRead+0xce>
	{
		strones[counter]++ ;
    6184:	80 91 17 02 	lds	r24, 0x0217
    6188:	28 2f       	mov	r18, r24
    618a:	30 e0       	ldi	r19, 0x00	; 0
    618c:	f9 01       	movw	r30, r18
    618e:	eb 51       	subi	r30, 0x1B	; 27
    6190:	fe 4f       	sbci	r31, 0xFE	; 254
    6192:	80 81       	ld	r24, Z
    6194:	8f 5f       	subi	r24, 0xFF	; 255
    6196:	f9 01       	movw	r30, r18
    6198:	eb 51       	subi	r30, 0x1B	; 27
    619a:	fe 4f       	sbci	r31, 0xFE	; 254
    619c:	80 83       	st	Z, r24
		signal = (signal<<1) | 1 ;
    619e:	80 91 b2 01 	lds	r24, 0x01B2
    61a2:	88 2f       	mov	r24, r24
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	88 0f       	add	r24, r24
    61a8:	99 1f       	adc	r25, r25
    61aa:	81 60       	ori	r24, 0x01	; 1
    61ac:	80 93 b2 01 	sts	0x01B2, r24
		LCD_WriteChar('-') ;
    61b0:	8d e2       	ldi	r24, 0x2D	; 45
    61b2:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <LCD_WriteChar>
	}
}
    61b6:	0f 90       	pop	r0
    61b8:	0f 90       	pop	r0
    61ba:	0f 90       	pop	r0
    61bc:	0f 90       	pop	r0
    61be:	cf 91       	pop	r28
    61c0:	df 91       	pop	r29
    61c2:	08 95       	ret

000061c4 <__mulsi3>:
    61c4:	62 9f       	mul	r22, r18
    61c6:	d0 01       	movw	r26, r0
    61c8:	73 9f       	mul	r23, r19
    61ca:	f0 01       	movw	r30, r0
    61cc:	82 9f       	mul	r24, r18
    61ce:	e0 0d       	add	r30, r0
    61d0:	f1 1d       	adc	r31, r1
    61d2:	64 9f       	mul	r22, r20
    61d4:	e0 0d       	add	r30, r0
    61d6:	f1 1d       	adc	r31, r1
    61d8:	92 9f       	mul	r25, r18
    61da:	f0 0d       	add	r31, r0
    61dc:	83 9f       	mul	r24, r19
    61de:	f0 0d       	add	r31, r0
    61e0:	74 9f       	mul	r23, r20
    61e2:	f0 0d       	add	r31, r0
    61e4:	65 9f       	mul	r22, r21
    61e6:	f0 0d       	add	r31, r0
    61e8:	99 27       	eor	r25, r25
    61ea:	72 9f       	mul	r23, r18
    61ec:	b0 0d       	add	r27, r0
    61ee:	e1 1d       	adc	r30, r1
    61f0:	f9 1f       	adc	r31, r25
    61f2:	63 9f       	mul	r22, r19
    61f4:	b0 0d       	add	r27, r0
    61f6:	e1 1d       	adc	r30, r1
    61f8:	f9 1f       	adc	r31, r25
    61fa:	bd 01       	movw	r22, r26
    61fc:	cf 01       	movw	r24, r30
    61fe:	11 24       	eor	r1, r1
    6200:	08 95       	ret

00006202 <__udivmodsi4>:
    6202:	a1 e2       	ldi	r26, 0x21	; 33
    6204:	1a 2e       	mov	r1, r26
    6206:	aa 1b       	sub	r26, r26
    6208:	bb 1b       	sub	r27, r27
    620a:	fd 01       	movw	r30, r26
    620c:	0d c0       	rjmp	.+26     	; 0x6228 <__udivmodsi4_ep>

0000620e <__udivmodsi4_loop>:
    620e:	aa 1f       	adc	r26, r26
    6210:	bb 1f       	adc	r27, r27
    6212:	ee 1f       	adc	r30, r30
    6214:	ff 1f       	adc	r31, r31
    6216:	a2 17       	cp	r26, r18
    6218:	b3 07       	cpc	r27, r19
    621a:	e4 07       	cpc	r30, r20
    621c:	f5 07       	cpc	r31, r21
    621e:	20 f0       	brcs	.+8      	; 0x6228 <__udivmodsi4_ep>
    6220:	a2 1b       	sub	r26, r18
    6222:	b3 0b       	sbc	r27, r19
    6224:	e4 0b       	sbc	r30, r20
    6226:	f5 0b       	sbc	r31, r21

00006228 <__udivmodsi4_ep>:
    6228:	66 1f       	adc	r22, r22
    622a:	77 1f       	adc	r23, r23
    622c:	88 1f       	adc	r24, r24
    622e:	99 1f       	adc	r25, r25
    6230:	1a 94       	dec	r1
    6232:	69 f7       	brne	.-38     	; 0x620e <__udivmodsi4_loop>
    6234:	60 95       	com	r22
    6236:	70 95       	com	r23
    6238:	80 95       	com	r24
    623a:	90 95       	com	r25
    623c:	9b 01       	movw	r18, r22
    623e:	ac 01       	movw	r20, r24
    6240:	bd 01       	movw	r22, r26
    6242:	cf 01       	movw	r24, r30
    6244:	08 95       	ret

00006246 <__prologue_saves__>:
    6246:	2f 92       	push	r2
    6248:	3f 92       	push	r3
    624a:	4f 92       	push	r4
    624c:	5f 92       	push	r5
    624e:	6f 92       	push	r6
    6250:	7f 92       	push	r7
    6252:	8f 92       	push	r8
    6254:	9f 92       	push	r9
    6256:	af 92       	push	r10
    6258:	bf 92       	push	r11
    625a:	cf 92       	push	r12
    625c:	df 92       	push	r13
    625e:	ef 92       	push	r14
    6260:	ff 92       	push	r15
    6262:	0f 93       	push	r16
    6264:	1f 93       	push	r17
    6266:	cf 93       	push	r28
    6268:	df 93       	push	r29
    626a:	cd b7       	in	r28, 0x3d	; 61
    626c:	de b7       	in	r29, 0x3e	; 62
    626e:	ca 1b       	sub	r28, r26
    6270:	db 0b       	sbc	r29, r27
    6272:	0f b6       	in	r0, 0x3f	; 63
    6274:	f8 94       	cli
    6276:	de bf       	out	0x3e, r29	; 62
    6278:	0f be       	out	0x3f, r0	; 63
    627a:	cd bf       	out	0x3d, r28	; 61
    627c:	09 94       	ijmp

0000627e <__epilogue_restores__>:
    627e:	2a 88       	ldd	r2, Y+18	; 0x12
    6280:	39 88       	ldd	r3, Y+17	; 0x11
    6282:	48 88       	ldd	r4, Y+16	; 0x10
    6284:	5f 84       	ldd	r5, Y+15	; 0x0f
    6286:	6e 84       	ldd	r6, Y+14	; 0x0e
    6288:	7d 84       	ldd	r7, Y+13	; 0x0d
    628a:	8c 84       	ldd	r8, Y+12	; 0x0c
    628c:	9b 84       	ldd	r9, Y+11	; 0x0b
    628e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6290:	b9 84       	ldd	r11, Y+9	; 0x09
    6292:	c8 84       	ldd	r12, Y+8	; 0x08
    6294:	df 80       	ldd	r13, Y+7	; 0x07
    6296:	ee 80       	ldd	r14, Y+6	; 0x06
    6298:	fd 80       	ldd	r15, Y+5	; 0x05
    629a:	0c 81       	ldd	r16, Y+4	; 0x04
    629c:	1b 81       	ldd	r17, Y+3	; 0x03
    629e:	aa 81       	ldd	r26, Y+2	; 0x02
    62a0:	b9 81       	ldd	r27, Y+1	; 0x01
    62a2:	ce 0f       	add	r28, r30
    62a4:	d1 1d       	adc	r29, r1
    62a6:	0f b6       	in	r0, 0x3f	; 63
    62a8:	f8 94       	cli
    62aa:	de bf       	out	0x3e, r29	; 62
    62ac:	0f be       	out	0x3f, r0	; 63
    62ae:	cd bf       	out	0x3d, r28	; 61
    62b0:	ed 01       	movw	r28, r26
    62b2:	08 95       	ret

000062b4 <_exit>:
    62b4:	f8 94       	cli

000062b6 <__stop_program>:
    62b6:	ff cf       	rjmp	.-2      	; 0x62b6 <__stop_program>
